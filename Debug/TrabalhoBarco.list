
TrabalhoBarco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a68  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004c30  08004c30  00005c30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cb8  08004cb8  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004cb8  08004cb8  00005cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cc0  08004cc0  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cc0  08004cc0  00005cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004cc4  08004cc4  00005cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004cc8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  2000000c  08004cd4  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  08004cd4  000061b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f79f  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eed  00000000  00000000  000157db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  000176c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bf4  00000000  00000000  000185d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000225f1  00000000  00000000  000191c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001301c  00000000  00000000  0003b7b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3625  00000000  00000000  0004e7d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00121df6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043a4  00000000  00000000  00121e3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b2  00000000  00000000  001261e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004c18 	.word	0x08004c18

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08004c18 	.word	0x08004c18

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2f>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000abc:	bf24      	itt	cs
 8000abe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ac2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ac6:	d90d      	bls.n	8000ae4 <__aeabi_d2f+0x30>
 8000ac8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000acc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ad8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000adc:	bf08      	it	eq
 8000ade:	f020 0001 	biceq.w	r0, r0, #1
 8000ae2:	4770      	bx	lr
 8000ae4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ae8:	d121      	bne.n	8000b2e <__aeabi_d2f+0x7a>
 8000aea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aee:	bfbc      	itt	lt
 8000af0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af4:	4770      	bxlt	lr
 8000af6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000afa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afe:	f1c2 0218 	rsb	r2, r2, #24
 8000b02:	f1c2 0c20 	rsb	ip, r2, #32
 8000b06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0e:	bf18      	it	ne
 8000b10:	f040 0001 	orrne.w	r0, r0, #1
 8000b14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b20:	ea40 000c 	orr.w	r0, r0, ip
 8000b24:	fa23 f302 	lsr.w	r3, r3, r2
 8000b28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b2c:	e7cc      	b.n	8000ac8 <__aeabi_d2f+0x14>
 8000b2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b32:	d107      	bne.n	8000b44 <__aeabi_d2f+0x90>
 8000b34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b38:	bf1e      	ittt	ne
 8000b3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b42:	4770      	bxne	lr
 8000b44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop

08000b54 <__aeabi_uldivmod>:
 8000b54:	b953      	cbnz	r3, 8000b6c <__aeabi_uldivmod+0x18>
 8000b56:	b94a      	cbnz	r2, 8000b6c <__aeabi_uldivmod+0x18>
 8000b58:	2900      	cmp	r1, #0
 8000b5a:	bf08      	it	eq
 8000b5c:	2800      	cmpeq	r0, #0
 8000b5e:	bf1c      	itt	ne
 8000b60:	f04f 31ff 	movne.w	r1, #4294967295
 8000b64:	f04f 30ff 	movne.w	r0, #4294967295
 8000b68:	f000 b96a 	b.w	8000e40 <__aeabi_idiv0>
 8000b6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b74:	f000 f806 	bl	8000b84 <__udivmoddi4>
 8000b78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b80:	b004      	add	sp, #16
 8000b82:	4770      	bx	lr

08000b84 <__udivmoddi4>:
 8000b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b88:	9d08      	ldr	r5, [sp, #32]
 8000b8a:	460c      	mov	r4, r1
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d14e      	bne.n	8000c2e <__udivmoddi4+0xaa>
 8000b90:	4694      	mov	ip, r2
 8000b92:	458c      	cmp	ip, r1
 8000b94:	4686      	mov	lr, r0
 8000b96:	fab2 f282 	clz	r2, r2
 8000b9a:	d962      	bls.n	8000c62 <__udivmoddi4+0xde>
 8000b9c:	b14a      	cbz	r2, 8000bb2 <__udivmoddi4+0x2e>
 8000b9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ba2:	4091      	lsls	r1, r2
 8000ba4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ba8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bac:	4319      	orrs	r1, r3
 8000bae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bb2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb6:	fa1f f68c 	uxth.w	r6, ip
 8000bba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bc2:	fb07 1114 	mls	r1, r7, r4, r1
 8000bc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bca:	fb04 f106 	mul.w	r1, r4, r6
 8000bce:	4299      	cmp	r1, r3
 8000bd0:	d90a      	bls.n	8000be8 <__udivmoddi4+0x64>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bda:	f080 8112 	bcs.w	8000e02 <__udivmoddi4+0x27e>
 8000bde:	4299      	cmp	r1, r3
 8000be0:	f240 810f 	bls.w	8000e02 <__udivmoddi4+0x27e>
 8000be4:	3c02      	subs	r4, #2
 8000be6:	4463      	add	r3, ip
 8000be8:	1a59      	subs	r1, r3, r1
 8000bea:	fa1f f38e 	uxth.w	r3, lr
 8000bee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bf2:	fb07 1110 	mls	r1, r7, r0, r1
 8000bf6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfa:	fb00 f606 	mul.w	r6, r0, r6
 8000bfe:	429e      	cmp	r6, r3
 8000c00:	d90a      	bls.n	8000c18 <__udivmoddi4+0x94>
 8000c02:	eb1c 0303 	adds.w	r3, ip, r3
 8000c06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c0a:	f080 80fc 	bcs.w	8000e06 <__udivmoddi4+0x282>
 8000c0e:	429e      	cmp	r6, r3
 8000c10:	f240 80f9 	bls.w	8000e06 <__udivmoddi4+0x282>
 8000c14:	4463      	add	r3, ip
 8000c16:	3802      	subs	r0, #2
 8000c18:	1b9b      	subs	r3, r3, r6
 8000c1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c1e:	2100      	movs	r1, #0
 8000c20:	b11d      	cbz	r5, 8000c2a <__udivmoddi4+0xa6>
 8000c22:	40d3      	lsrs	r3, r2
 8000c24:	2200      	movs	r2, #0
 8000c26:	e9c5 3200 	strd	r3, r2, [r5]
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	428b      	cmp	r3, r1
 8000c30:	d905      	bls.n	8000c3e <__udivmoddi4+0xba>
 8000c32:	b10d      	cbz	r5, 8000c38 <__udivmoddi4+0xb4>
 8000c34:	e9c5 0100 	strd	r0, r1, [r5]
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4608      	mov	r0, r1
 8000c3c:	e7f5      	b.n	8000c2a <__udivmoddi4+0xa6>
 8000c3e:	fab3 f183 	clz	r1, r3
 8000c42:	2900      	cmp	r1, #0
 8000c44:	d146      	bne.n	8000cd4 <__udivmoddi4+0x150>
 8000c46:	42a3      	cmp	r3, r4
 8000c48:	d302      	bcc.n	8000c50 <__udivmoddi4+0xcc>
 8000c4a:	4290      	cmp	r0, r2
 8000c4c:	f0c0 80f0 	bcc.w	8000e30 <__udivmoddi4+0x2ac>
 8000c50:	1a86      	subs	r6, r0, r2
 8000c52:	eb64 0303 	sbc.w	r3, r4, r3
 8000c56:	2001      	movs	r0, #1
 8000c58:	2d00      	cmp	r5, #0
 8000c5a:	d0e6      	beq.n	8000c2a <__udivmoddi4+0xa6>
 8000c5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c60:	e7e3      	b.n	8000c2a <__udivmoddi4+0xa6>
 8000c62:	2a00      	cmp	r2, #0
 8000c64:	f040 8090 	bne.w	8000d88 <__udivmoddi4+0x204>
 8000c68:	eba1 040c 	sub.w	r4, r1, ip
 8000c6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c70:	fa1f f78c 	uxth.w	r7, ip
 8000c74:	2101      	movs	r1, #1
 8000c76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c86:	fb07 f006 	mul.w	r0, r7, r6
 8000c8a:	4298      	cmp	r0, r3
 8000c8c:	d908      	bls.n	8000ca0 <__udivmoddi4+0x11c>
 8000c8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c96:	d202      	bcs.n	8000c9e <__udivmoddi4+0x11a>
 8000c98:	4298      	cmp	r0, r3
 8000c9a:	f200 80cd 	bhi.w	8000e38 <__udivmoddi4+0x2b4>
 8000c9e:	4626      	mov	r6, r4
 8000ca0:	1a1c      	subs	r4, r3, r0
 8000ca2:	fa1f f38e 	uxth.w	r3, lr
 8000ca6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000caa:	fb08 4410 	mls	r4, r8, r0, r4
 8000cae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cb2:	fb00 f707 	mul.w	r7, r0, r7
 8000cb6:	429f      	cmp	r7, r3
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0x148>
 8000cba:	eb1c 0303 	adds.w	r3, ip, r3
 8000cbe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x146>
 8000cc4:	429f      	cmp	r7, r3
 8000cc6:	f200 80b0 	bhi.w	8000e2a <__udivmoddi4+0x2a6>
 8000cca:	4620      	mov	r0, r4
 8000ccc:	1bdb      	subs	r3, r3, r7
 8000cce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd2:	e7a5      	b.n	8000c20 <__udivmoddi4+0x9c>
 8000cd4:	f1c1 0620 	rsb	r6, r1, #32
 8000cd8:	408b      	lsls	r3, r1
 8000cda:	fa22 f706 	lsr.w	r7, r2, r6
 8000cde:	431f      	orrs	r7, r3
 8000ce0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ce4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ce8:	ea43 030c 	orr.w	r3, r3, ip
 8000cec:	40f4      	lsrs	r4, r6
 8000cee:	fa00 f801 	lsl.w	r8, r0, r1
 8000cf2:	0c38      	lsrs	r0, r7, #16
 8000cf4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cf8:	fbb4 fef0 	udiv	lr, r4, r0
 8000cfc:	fa1f fc87 	uxth.w	ip, r7
 8000d00:	fb00 441e 	mls	r4, r0, lr, r4
 8000d04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d08:	fb0e f90c 	mul.w	r9, lr, ip
 8000d0c:	45a1      	cmp	r9, r4
 8000d0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x1a6>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d1a:	f080 8084 	bcs.w	8000e26 <__udivmoddi4+0x2a2>
 8000d1e:	45a1      	cmp	r9, r4
 8000d20:	f240 8081 	bls.w	8000e26 <__udivmoddi4+0x2a2>
 8000d24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d28:	443c      	add	r4, r7
 8000d2a:	eba4 0409 	sub.w	r4, r4, r9
 8000d2e:	fa1f f983 	uxth.w	r9, r3
 8000d32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d36:	fb00 4413 	mls	r4, r0, r3, r4
 8000d3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d42:	45a4      	cmp	ip, r4
 8000d44:	d907      	bls.n	8000d56 <__udivmoddi4+0x1d2>
 8000d46:	193c      	adds	r4, r7, r4
 8000d48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d4c:	d267      	bcs.n	8000e1e <__udivmoddi4+0x29a>
 8000d4e:	45a4      	cmp	ip, r4
 8000d50:	d965      	bls.n	8000e1e <__udivmoddi4+0x29a>
 8000d52:	3b02      	subs	r3, #2
 8000d54:	443c      	add	r4, r7
 8000d56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d5e:	eba4 040c 	sub.w	r4, r4, ip
 8000d62:	429c      	cmp	r4, r3
 8000d64:	46ce      	mov	lr, r9
 8000d66:	469c      	mov	ip, r3
 8000d68:	d351      	bcc.n	8000e0e <__udivmoddi4+0x28a>
 8000d6a:	d04e      	beq.n	8000e0a <__udivmoddi4+0x286>
 8000d6c:	b155      	cbz	r5, 8000d84 <__udivmoddi4+0x200>
 8000d6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d72:	eb64 040c 	sbc.w	r4, r4, ip
 8000d76:	fa04 f606 	lsl.w	r6, r4, r6
 8000d7a:	40cb      	lsrs	r3, r1
 8000d7c:	431e      	orrs	r6, r3
 8000d7e:	40cc      	lsrs	r4, r1
 8000d80:	e9c5 6400 	strd	r6, r4, [r5]
 8000d84:	2100      	movs	r1, #0
 8000d86:	e750      	b.n	8000c2a <__udivmoddi4+0xa6>
 8000d88:	f1c2 0320 	rsb	r3, r2, #32
 8000d8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000d90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d94:	fa24 f303 	lsr.w	r3, r4, r3
 8000d98:	4094      	lsls	r4, r2
 8000d9a:	430c      	orrs	r4, r1
 8000d9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3110 	mls	r1, r8, r0, r3
 8000db0:	0c23      	lsrs	r3, r4, #16
 8000db2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db6:	fb00 f107 	mul.w	r1, r0, r7
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x24c>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dc6:	d22c      	bcs.n	8000e22 <__udivmoddi4+0x29e>
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d92a      	bls.n	8000e22 <__udivmoddi4+0x29e>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	4463      	add	r3, ip
 8000dd0:	1a5b      	subs	r3, r3, r1
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000ddc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de0:	fb01 f307 	mul.w	r3, r1, r7
 8000de4:	42a3      	cmp	r3, r4
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x276>
 8000de8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000df0:	d213      	bcs.n	8000e1a <__udivmoddi4+0x296>
 8000df2:	42a3      	cmp	r3, r4
 8000df4:	d911      	bls.n	8000e1a <__udivmoddi4+0x296>
 8000df6:	3902      	subs	r1, #2
 8000df8:	4464      	add	r4, ip
 8000dfa:	1ae4      	subs	r4, r4, r3
 8000dfc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e00:	e739      	b.n	8000c76 <__udivmoddi4+0xf2>
 8000e02:	4604      	mov	r4, r0
 8000e04:	e6f0      	b.n	8000be8 <__udivmoddi4+0x64>
 8000e06:	4608      	mov	r0, r1
 8000e08:	e706      	b.n	8000c18 <__udivmoddi4+0x94>
 8000e0a:	45c8      	cmp	r8, r9
 8000e0c:	d2ae      	bcs.n	8000d6c <__udivmoddi4+0x1e8>
 8000e0e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e12:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e16:	3801      	subs	r0, #1
 8000e18:	e7a8      	b.n	8000d6c <__udivmoddi4+0x1e8>
 8000e1a:	4631      	mov	r1, r6
 8000e1c:	e7ed      	b.n	8000dfa <__udivmoddi4+0x276>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	e799      	b.n	8000d56 <__udivmoddi4+0x1d2>
 8000e22:	4630      	mov	r0, r6
 8000e24:	e7d4      	b.n	8000dd0 <__udivmoddi4+0x24c>
 8000e26:	46d6      	mov	lr, sl
 8000e28:	e77f      	b.n	8000d2a <__udivmoddi4+0x1a6>
 8000e2a:	4463      	add	r3, ip
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	e74d      	b.n	8000ccc <__udivmoddi4+0x148>
 8000e30:	4606      	mov	r6, r0
 8000e32:	4623      	mov	r3, r4
 8000e34:	4608      	mov	r0, r1
 8000e36:	e70f      	b.n	8000c58 <__udivmoddi4+0xd4>
 8000e38:	3e02      	subs	r6, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	e730      	b.n	8000ca0 <__udivmoddi4+0x11c>
 8000e3e:	bf00      	nop

08000e40 <__aeabi_idiv0>:
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop

08000e44 <HMC5883L_Init>:
#define HMC5883L_4_NUCLEO_64_H_

#include "HMC5883L_4_NUCLEO_64.h"
#include "main.h"

void HMC5883L_Init(I2C_HandleTypeDef huart){
 8000e44:	b084      	sub	sp, #16
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b086      	sub	sp, #24
 8000e4a:	af04      	add	r7, sp, #16
 8000e4c:	f107 0c10 	add.w	ip, r7, #16
 8000e50:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	 uint8_t data = (COMPASS_SAMPLE8 | COMPASS_RATE15 | COMPASS_MEASURE_NORMAL);
 8000e54:	2370      	movs	r3, #112	@ 0x70
 8000e56:	71fb      	strb	r3, [r7, #7]
	 uint8_t ScaleMode = COMPASS_SCALE_130;
 8000e58:	2320      	movs	r3, #32
 8000e5a:	71bb      	strb	r3, [r7, #6]
	 uint8_t Measure = COMPASS_CONTINUOUS;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	717b      	strb	r3, [r7, #5]
	 HAL_I2C_Mem_Write(&huart, HMC5883L_ADDRESS, COMPASS_CONFIG_REGISTER_A, 1, &data , 1, 100);
 8000e60:	2364      	movs	r3, #100	@ 0x64
 8000e62:	9302      	str	r3, [sp, #8]
 8000e64:	2301      	movs	r3, #1
 8000e66:	9301      	str	r3, [sp, #4]
 8000e68:	1dfb      	adds	r3, r7, #7
 8000e6a:	9300      	str	r3, [sp, #0]
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	2200      	movs	r2, #0
 8000e70:	213d      	movs	r1, #61	@ 0x3d
 8000e72:	f107 0010 	add.w	r0, r7, #16
 8000e76:	f001 f939 	bl	80020ec <HAL_I2C_Mem_Write>
	 HAL_I2C_Mem_Write(&huart, HMC5883L_ADDRESS, COMPASS_CONFIG_REGISTER_B, 1, &ScaleMode , 1, 100);
 8000e7a:	2364      	movs	r3, #100	@ 0x64
 8000e7c:	9302      	str	r3, [sp, #8]
 8000e7e:	2301      	movs	r3, #1
 8000e80:	9301      	str	r3, [sp, #4]
 8000e82:	1dbb      	adds	r3, r7, #6
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	2301      	movs	r3, #1
 8000e88:	2201      	movs	r2, #1
 8000e8a:	213d      	movs	r1, #61	@ 0x3d
 8000e8c:	f107 0010 	add.w	r0, r7, #16
 8000e90:	f001 f92c 	bl	80020ec <HAL_I2C_Mem_Write>
	 HAL_I2C_Mem_Write(&huart, HMC5883L_ADDRESS, COMPASS_MODE_REGISTER, 1, &Measure , 1, 100);
 8000e94:	2364      	movs	r3, #100	@ 0x64
 8000e96:	9302      	str	r3, [sp, #8]
 8000e98:	2301      	movs	r3, #1
 8000e9a:	9301      	str	r3, [sp, #4]
 8000e9c:	1d7b      	adds	r3, r7, #5
 8000e9e:	9300      	str	r3, [sp, #0]
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	2202      	movs	r2, #2
 8000ea4:	213d      	movs	r1, #61	@ 0x3d
 8000ea6:	f107 0010 	add.w	r0, r7, #16
 8000eaa:	f001 f91f 	bl	80020ec <HAL_I2C_Mem_Write>
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000eb8:	b004      	add	sp, #16
 8000eba:	4770      	bx	lr
 8000ebc:	0000      	movs	r0, r0
	...

08000ec0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec0:	b5b0      	push	{r4, r5, r7, lr}
 8000ec2:	b092      	sub	sp, #72	@ 0x48
 8000ec4:	af12      	add	r7, sp, #72	@ 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec6:	f000 fca3 	bl	8001810 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eca:	f000 f889 	bl	8000fe0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ece:	f000 fa1d 	bl	800130c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ed2:	f000 f8e5 	bl	80010a0 <MX_I2C1_Init>
  MX_TIM4_Init();
 8000ed6:	f000 f96b 	bl	80011b0 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000eda:	f000 f9c3 	bl	8001264 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000ede:	f000 f9eb 	bl	80012b8 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000ee2:	f000 f90b 	bl	80010fc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HMC5883L_Init(hi2c1);
 8000ee6:	4c3a      	ldr	r4, [pc, #232]	@ (8000fd0 <main+0x110>)
 8000ee8:	4668      	mov	r0, sp
 8000eea:	f104 0310 	add.w	r3, r4, #16
 8000eee:	2244      	movs	r2, #68	@ 0x44
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f003 fc17 	bl	8004724 <memcpy>
 8000ef6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000efa:	f7ff ffa3 	bl	8000e44 <HMC5883L_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_I2C_Mem_Read(&hi2c1, HMC5883L_ADDRESS, Data_Output_X_MSB, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&buffer, 8, 100);
 8000efe:	2364      	movs	r3, #100	@ 0x64
 8000f00:	9302      	str	r3, [sp, #8]
 8000f02:	2308      	movs	r3, #8
 8000f04:	9301      	str	r3, [sp, #4]
 8000f06:	4b33      	ldr	r3, [pc, #204]	@ (8000fd4 <main+0x114>)
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	213d      	movs	r1, #61	@ 0x3d
 8000f10:	482f      	ldr	r0, [pc, #188]	@ (8000fd0 <main+0x110>)
 8000f12:	f001 f9e5 	bl	80022e0 <HAL_I2C_Mem_Read>
	  PosBoat.x = ((buffer[0] << 8) | buffer[1]);
 8000f16:	4b2f      	ldr	r3, [pc, #188]	@ (8000fd4 <main+0x114>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	021b      	lsls	r3, r3, #8
 8000f1c:	b21a      	sxth	r2, r3
 8000f1e:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd4 <main+0x114>)
 8000f20:	785b      	ldrb	r3, [r3, #1]
 8000f22:	b21b      	sxth	r3, r3
 8000f24:	4313      	orrs	r3, r2
 8000f26:	b21a      	sxth	r2, r3
 8000f28:	4b2b      	ldr	r3, [pc, #172]	@ (8000fd8 <main+0x118>)
 8000f2a:	801a      	strh	r2, [r3, #0]
	  HAL_Delay(50);
 8000f2c:	2032      	movs	r0, #50	@ 0x32
 8000f2e:	f000 fce1 	bl	80018f4 <HAL_Delay>
	  HAL_I2C_Mem_Read(&hi2c1, HMC5883L_ADDRESS, Data_Output_Y_MSB, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&buffer, 8, 100);
 8000f32:	2364      	movs	r3, #100	@ 0x64
 8000f34:	9302      	str	r3, [sp, #8]
 8000f36:	2308      	movs	r3, #8
 8000f38:	9301      	str	r3, [sp, #4]
 8000f3a:	4b26      	ldr	r3, [pc, #152]	@ (8000fd4 <main+0x114>)
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	2301      	movs	r3, #1
 8000f40:	2207      	movs	r2, #7
 8000f42:	213d      	movs	r1, #61	@ 0x3d
 8000f44:	4822      	ldr	r0, [pc, #136]	@ (8000fd0 <main+0x110>)
 8000f46:	f001 f9cb 	bl	80022e0 <HAL_I2C_Mem_Read>
	  PosBoat.y = ((buffer[0] << 8) | buffer[1]);
 8000f4a:	4b22      	ldr	r3, [pc, #136]	@ (8000fd4 <main+0x114>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	021b      	lsls	r3, r3, #8
 8000f50:	b21a      	sxth	r2, r3
 8000f52:	4b20      	ldr	r3, [pc, #128]	@ (8000fd4 <main+0x114>)
 8000f54:	785b      	ldrb	r3, [r3, #1]
 8000f56:	b21b      	sxth	r3, r3
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	b21a      	sxth	r2, r3
 8000f5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd8 <main+0x118>)
 8000f5e:	805a      	strh	r2, [r3, #2]
	  PosBoat.angle = (atan2(PosBoat.y,PosBoat.x)*180/3.14);
 8000f60:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd8 <main+0x118>)
 8000f62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff faa0 	bl	80004ac <__aeabi_i2d>
 8000f6c:	4604      	mov	r4, r0
 8000f6e:	460d      	mov	r5, r1
 8000f70:	4b19      	ldr	r3, [pc, #100]	@ (8000fd8 <main+0x118>)
 8000f72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff fa98 	bl	80004ac <__aeabi_i2d>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	460b      	mov	r3, r1
 8000f80:	ec43 2b11 	vmov	d1, r2, r3
 8000f84:	ec45 4b10 	vmov	d0, r4, r5
 8000f88:	f003 fbda 	bl	8004740 <atan2>
 8000f8c:	ec51 0b10 	vmov	r0, r1, d0
 8000f90:	f04f 0200 	mov.w	r2, #0
 8000f94:	4b11      	ldr	r3, [pc, #68]	@ (8000fdc <main+0x11c>)
 8000f96:	f7ff faf3 	bl	8000580 <__aeabi_dmul>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	a309      	add	r3, pc, #36	@ (adr r3, 8000fc8 <main+0x108>)
 8000fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa8:	f7ff fc14 	bl	80007d4 <__aeabi_ddiv>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	4610      	mov	r0, r2
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	f7ff fd7e 	bl	8000ab4 <__aeabi_d2f>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	4a07      	ldr	r2, [pc, #28]	@ (8000fd8 <main+0x118>)
 8000fbc:	6053      	str	r3, [r2, #4]
	  HAL_I2C_Mem_Read(&hi2c1, HMC5883L_ADDRESS, Data_Output_X_MSB, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&buffer, 8, 100);
 8000fbe:	bf00      	nop
 8000fc0:	e79d      	b.n	8000efe <main+0x3e>
 8000fc2:	bf00      	nop
 8000fc4:	f3af 8000 	nop.w
 8000fc8:	51eb851f 	.word	0x51eb851f
 8000fcc:	40091eb8 	.word	0x40091eb8
 8000fd0:	20000028 	.word	0x20000028
 8000fd4:	2000019c 	.word	0x2000019c
 8000fd8:	200001a4 	.word	0x200001a4
 8000fdc:	40668000 	.word	0x40668000

08000fe0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b094      	sub	sp, #80	@ 0x50
 8000fe4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe6:	f107 031c 	add.w	r3, r7, #28
 8000fea:	2234      	movs	r2, #52	@ 0x34
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f003 fb6c 	bl	80046cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff4:	f107 0308 	add.w	r3, r7, #8
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001004:	2300      	movs	r3, #0
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	4b23      	ldr	r3, [pc, #140]	@ (8001098 <SystemClock_Config+0xb8>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100c:	4a22      	ldr	r2, [pc, #136]	@ (8001098 <SystemClock_Config+0xb8>)
 800100e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001012:	6413      	str	r3, [r2, #64]	@ 0x40
 8001014:	4b20      	ldr	r3, [pc, #128]	@ (8001098 <SystemClock_Config+0xb8>)
 8001016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001018:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001020:	2300      	movs	r3, #0
 8001022:	603b      	str	r3, [r7, #0]
 8001024:	4b1d      	ldr	r3, [pc, #116]	@ (800109c <SystemClock_Config+0xbc>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800102c:	4a1b      	ldr	r2, [pc, #108]	@ (800109c <SystemClock_Config+0xbc>)
 800102e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001032:	6013      	str	r3, [r2, #0]
 8001034:	4b19      	ldr	r3, [pc, #100]	@ (800109c <SystemClock_Config+0xbc>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800103c:	603b      	str	r3, [r7, #0]
 800103e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001040:	2302      	movs	r3, #2
 8001042:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001044:	2301      	movs	r3, #1
 8001046:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001048:	2310      	movs	r3, #16
 800104a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800104c:	2300      	movs	r3, #0
 800104e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001050:	f107 031c 	add.w	r3, r7, #28
 8001054:	4618      	mov	r0, r3
 8001056:	f002 f9ed 	bl	8003434 <HAL_RCC_OscConfig>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001060:	f000 f9bc 	bl	80013dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001064:	230f      	movs	r3, #15
 8001066:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001068:	2300      	movs	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800106c:	2300      	movs	r3, #0
 800106e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001070:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001074:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001076:	2300      	movs	r3, #0
 8001078:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800107a:	f107 0308 	add.w	r3, r7, #8
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f001 ff13 	bl	8002eac <HAL_RCC_ClockConfig>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800108c:	f000 f9a6 	bl	80013dc <Error_Handler>
  }
}
 8001090:	bf00      	nop
 8001092:	3750      	adds	r7, #80	@ 0x50
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40023800 	.word	0x40023800
 800109c:	40007000 	.word	0x40007000

080010a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010a4:	4b12      	ldr	r3, [pc, #72]	@ (80010f0 <MX_I2C1_Init+0x50>)
 80010a6:	4a13      	ldr	r2, [pc, #76]	@ (80010f4 <MX_I2C1_Init+0x54>)
 80010a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010aa:	4b11      	ldr	r3, [pc, #68]	@ (80010f0 <MX_I2C1_Init+0x50>)
 80010ac:	4a12      	ldr	r2, [pc, #72]	@ (80010f8 <MX_I2C1_Init+0x58>)
 80010ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010b0:	4b0f      	ldr	r3, [pc, #60]	@ (80010f0 <MX_I2C1_Init+0x50>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010b6:	4b0e      	ldr	r3, [pc, #56]	@ (80010f0 <MX_I2C1_Init+0x50>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010bc:	4b0c      	ldr	r3, [pc, #48]	@ (80010f0 <MX_I2C1_Init+0x50>)
 80010be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010c4:	4b0a      	ldr	r3, [pc, #40]	@ (80010f0 <MX_I2C1_Init+0x50>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ca:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <MX_I2C1_Init+0x50>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010d0:	4b07      	ldr	r3, [pc, #28]	@ (80010f0 <MX_I2C1_Init+0x50>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010d6:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <MX_I2C1_Init+0x50>)
 80010d8:	2200      	movs	r2, #0
 80010da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010dc:	4804      	ldr	r0, [pc, #16]	@ (80010f0 <MX_I2C1_Init+0x50>)
 80010de:	f000 fec1 	bl	8001e64 <HAL_I2C_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010e8:	f000 f978 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000028 	.word	0x20000028
 80010f4:	40005400 	.word	0x40005400
 80010f8:	000186a0 	.word	0x000186a0

080010fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	@ 0x28
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001102:	f107 0320 	add.w	r3, r7, #32
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
 8001118:	611a      	str	r2, [r3, #16]
 800111a:	615a      	str	r2, [r3, #20]
 800111c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800111e:	4b22      	ldr	r3, [pc, #136]	@ (80011a8 <MX_TIM3_Init+0xac>)
 8001120:	4a22      	ldr	r2, [pc, #136]	@ (80011ac <MX_TIM3_Init+0xb0>)
 8001122:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8001124:	4b20      	ldr	r3, [pc, #128]	@ (80011a8 <MX_TIM3_Init+0xac>)
 8001126:	223f      	movs	r2, #63	@ 0x3f
 8001128:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112a:	4b1f      	ldr	r3, [pc, #124]	@ (80011a8 <MX_TIM3_Init+0xac>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1250;
 8001130:	4b1d      	ldr	r3, [pc, #116]	@ (80011a8 <MX_TIM3_Init+0xac>)
 8001132:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8001136:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001138:	4b1b      	ldr	r3, [pc, #108]	@ (80011a8 <MX_TIM3_Init+0xac>)
 800113a:	2200      	movs	r2, #0
 800113c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113e:	4b1a      	ldr	r3, [pc, #104]	@ (80011a8 <MX_TIM3_Init+0xac>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001144:	4818      	ldr	r0, [pc, #96]	@ (80011a8 <MX_TIM3_Init+0xac>)
 8001146:	f002 fc13 	bl	8003970 <HAL_TIM_PWM_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001150:	f000 f944 	bl	80013dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001154:	2300      	movs	r3, #0
 8001156:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800115c:	f107 0320 	add.w	r3, r7, #32
 8001160:	4619      	mov	r1, r3
 8001162:	4811      	ldr	r0, [pc, #68]	@ (80011a8 <MX_TIM3_Init+0xac>)
 8001164:	f002 ff72 	bl	800404c <HAL_TIMEx_MasterConfigSynchronization>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800116e:	f000 f935 	bl	80013dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001172:	2360      	movs	r3, #96	@ 0x60
 8001174:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	2204      	movs	r2, #4
 8001186:	4619      	mov	r1, r3
 8001188:	4807      	ldr	r0, [pc, #28]	@ (80011a8 <MX_TIM3_Init+0xac>)
 800118a:	f002 fc41 	bl	8003a10 <HAL_TIM_PWM_ConfigChannel>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001194:	f000 f922 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001198:	4803      	ldr	r0, [pc, #12]	@ (80011a8 <MX_TIM3_Init+0xac>)
 800119a:	f000 f9cd 	bl	8001538 <HAL_TIM_MspPostInit>

}
 800119e:	bf00      	nop
 80011a0:	3728      	adds	r7, #40	@ 0x28
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	2000007c 	.word	0x2000007c
 80011ac:	40000400 	.word	0x40000400

080011b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	@ 0x28
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b6:	f107 0320 	add.w	r3, r7, #32
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]
 80011ce:	615a      	str	r2, [r3, #20]
 80011d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011d2:	4b22      	ldr	r3, [pc, #136]	@ (800125c <MX_TIM4_Init+0xac>)
 80011d4:	4a22      	ldr	r2, [pc, #136]	@ (8001260 <MX_TIM4_Init+0xb0>)
 80011d6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64-1;
 80011d8:	4b20      	ldr	r3, [pc, #128]	@ (800125c <MX_TIM4_Init+0xac>)
 80011da:	223f      	movs	r2, #63	@ 0x3f
 80011dc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011de:	4b1f      	ldr	r3, [pc, #124]	@ (800125c <MX_TIM4_Init+0xac>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1250;
 80011e4:	4b1d      	ldr	r3, [pc, #116]	@ (800125c <MX_TIM4_Init+0xac>)
 80011e6:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 80011ea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ec:	4b1b      	ldr	r3, [pc, #108]	@ (800125c <MX_TIM4_Init+0xac>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f2:	4b1a      	ldr	r3, [pc, #104]	@ (800125c <MX_TIM4_Init+0xac>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80011f8:	4818      	ldr	r0, [pc, #96]	@ (800125c <MX_TIM4_Init+0xac>)
 80011fa:	f002 fbb9 	bl	8003970 <HAL_TIM_PWM_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001204:	f000 f8ea 	bl	80013dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001208:	2300      	movs	r3, #0
 800120a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120c:	2300      	movs	r3, #0
 800120e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001210:	f107 0320 	add.w	r3, r7, #32
 8001214:	4619      	mov	r1, r3
 8001216:	4811      	ldr	r0, [pc, #68]	@ (800125c <MX_TIM4_Init+0xac>)
 8001218:	f002 ff18 	bl	800404c <HAL_TIMEx_MasterConfigSynchronization>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001222:	f000 f8db 	bl	80013dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001226:	2360      	movs	r3, #96	@ 0x60
 8001228:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	2200      	movs	r2, #0
 800123a:	4619      	mov	r1, r3
 800123c:	4807      	ldr	r0, [pc, #28]	@ (800125c <MX_TIM4_Init+0xac>)
 800123e:	f002 fbe7 	bl	8003a10 <HAL_TIM_PWM_ConfigChannel>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001248:	f000 f8c8 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800124c:	4803      	ldr	r0, [pc, #12]	@ (800125c <MX_TIM4_Init+0xac>)
 800124e:	f000 f973 	bl	8001538 <HAL_TIM_MspPostInit>

}
 8001252:	bf00      	nop
 8001254:	3728      	adds	r7, #40	@ 0x28
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200000c4 	.word	0x200000c4
 8001260:	40000800 	.word	0x40000800

08001264 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001268:	4b11      	ldr	r3, [pc, #68]	@ (80012b0 <MX_USART2_UART_Init+0x4c>)
 800126a:	4a12      	ldr	r2, [pc, #72]	@ (80012b4 <MX_USART2_UART_Init+0x50>)
 800126c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800126e:	4b10      	ldr	r3, [pc, #64]	@ (80012b0 <MX_USART2_UART_Init+0x4c>)
 8001270:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001274:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001276:	4b0e      	ldr	r3, [pc, #56]	@ (80012b0 <MX_USART2_UART_Init+0x4c>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800127c:	4b0c      	ldr	r3, [pc, #48]	@ (80012b0 <MX_USART2_UART_Init+0x4c>)
 800127e:	2200      	movs	r2, #0
 8001280:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001282:	4b0b      	ldr	r3, [pc, #44]	@ (80012b0 <MX_USART2_UART_Init+0x4c>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001288:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <MX_USART2_UART_Init+0x4c>)
 800128a:	220c      	movs	r2, #12
 800128c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800128e:	4b08      	ldr	r3, [pc, #32]	@ (80012b0 <MX_USART2_UART_Init+0x4c>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001294:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <MX_USART2_UART_Init+0x4c>)
 8001296:	2200      	movs	r2, #0
 8001298:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800129a:	4805      	ldr	r0, [pc, #20]	@ (80012b0 <MX_USART2_UART_Init+0x4c>)
 800129c:	f002 ff52 	bl	8004144 <HAL_UART_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012a6:	f000 f899 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	2000010c 	.word	0x2000010c
 80012b4:	40004400 	.word	0x40004400

080012b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012bc:	4b11      	ldr	r3, [pc, #68]	@ (8001304 <MX_USART3_UART_Init+0x4c>)
 80012be:	4a12      	ldr	r2, [pc, #72]	@ (8001308 <MX_USART3_UART_Init+0x50>)
 80012c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80012c2:	4b10      	ldr	r3, [pc, #64]	@ (8001304 <MX_USART3_UART_Init+0x4c>)
 80012c4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80012c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001304 <MX_USART3_UART_Init+0x4c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001304 <MX_USART3_UART_Init+0x4c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001304 <MX_USART3_UART_Init+0x4c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012dc:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <MX_USART3_UART_Init+0x4c>)
 80012de:	220c      	movs	r2, #12
 80012e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e2:	4b08      	ldr	r3, [pc, #32]	@ (8001304 <MX_USART3_UART_Init+0x4c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e8:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <MX_USART3_UART_Init+0x4c>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012ee:	4805      	ldr	r0, [pc, #20]	@ (8001304 <MX_USART3_UART_Init+0x4c>)
 80012f0:	f002 ff28 	bl	8004144 <HAL_UART_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80012fa:	f000 f86f 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000154 	.word	0x20000154
 8001308:	40004800 	.word	0x40004800

0800130c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b088      	sub	sp, #32
 8001310:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
 8001320:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	4b2a      	ldr	r3, [pc, #168]	@ (80013d0 <MX_GPIO_Init+0xc4>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	4a29      	ldr	r2, [pc, #164]	@ (80013d0 <MX_GPIO_Init+0xc4>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	6313      	str	r3, [r2, #48]	@ 0x30
 8001332:	4b27      	ldr	r3, [pc, #156]	@ (80013d0 <MX_GPIO_Init+0xc4>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	4b23      	ldr	r3, [pc, #140]	@ (80013d0 <MX_GPIO_Init+0xc4>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	4a22      	ldr	r2, [pc, #136]	@ (80013d0 <MX_GPIO_Init+0xc4>)
 8001348:	f043 0304 	orr.w	r3, r3, #4
 800134c:	6313      	str	r3, [r2, #48]	@ 0x30
 800134e:	4b20      	ldr	r3, [pc, #128]	@ (80013d0 <MX_GPIO_Init+0xc4>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	603b      	str	r3, [r7, #0]
 800135e:	4b1c      	ldr	r3, [pc, #112]	@ (80013d0 <MX_GPIO_Init+0xc4>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	4a1b      	ldr	r2, [pc, #108]	@ (80013d0 <MX_GPIO_Init+0xc4>)
 8001364:	f043 0302 	orr.w	r3, r3, #2
 8001368:	6313      	str	r3, [r2, #48]	@ 0x30
 800136a:	4b19      	ldr	r3, [pc, #100]	@ (80013d0 <MX_GPIO_Init+0xc4>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	603b      	str	r3, [r7, #0]
 8001374:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, L293D_LATCH_Pin|L293D_EN_Pin|L293D_SER_Pin, GPIO_PIN_RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	f44f 7150 	mov.w	r1, #832	@ 0x340
 800137c:	4815      	ldr	r0, [pc, #84]	@ (80013d4 <MX_GPIO_Init+0xc8>)
 800137e:	f000 fd57 	bl	8001e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L293D_CLK_GPIO_Port, L293D_CLK_Pin, GPIO_PIN_RESET);
 8001382:	2200      	movs	r2, #0
 8001384:	2120      	movs	r1, #32
 8001386:	4814      	ldr	r0, [pc, #80]	@ (80013d8 <MX_GPIO_Init+0xcc>)
 8001388:	f000 fd52 	bl	8001e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : L293D_LATCH_Pin L293D_EN_Pin L293D_SER_Pin */
  GPIO_InitStruct.Pin = L293D_LATCH_Pin|L293D_EN_Pin|L293D_SER_Pin;
 800138c:	f44f 7350 	mov.w	r3, #832	@ 0x340
 8001390:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001392:	2301      	movs	r3, #1
 8001394:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139a:	2300      	movs	r3, #0
 800139c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139e:	f107 030c 	add.w	r3, r7, #12
 80013a2:	4619      	mov	r1, r3
 80013a4:	480b      	ldr	r0, [pc, #44]	@ (80013d4 <MX_GPIO_Init+0xc8>)
 80013a6:	f000 fbaf 	bl	8001b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : L293D_CLK_Pin */
  GPIO_InitStruct.Pin = L293D_CLK_Pin;
 80013aa:	2320      	movs	r3, #32
 80013ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ae:	2301      	movs	r3, #1
 80013b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(L293D_CLK_GPIO_Port, &GPIO_InitStruct);
 80013ba:	f107 030c 	add.w	r3, r7, #12
 80013be:	4619      	mov	r1, r3
 80013c0:	4805      	ldr	r0, [pc, #20]	@ (80013d8 <MX_GPIO_Init+0xcc>)
 80013c2:	f000 fba1 	bl	8001b08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013c6:	bf00      	nop
 80013c8:	3720      	adds	r7, #32
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40020000 	.word	0x40020000
 80013d8:	40020400 	.word	0x40020400

080013dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e0:	b672      	cpsid	i
}
 80013e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e4:	bf00      	nop
 80013e6:	e7fd      	b.n	80013e4 <Error_Handler+0x8>

080013e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]
 80013f2:	4b10      	ldr	r3, [pc, #64]	@ (8001434 <HAL_MspInit+0x4c>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001434 <HAL_MspInit+0x4c>)
 80013f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80013fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001434 <HAL_MspInit+0x4c>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001402:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	603b      	str	r3, [r7, #0]
 800140e:	4b09      	ldr	r3, [pc, #36]	@ (8001434 <HAL_MspInit+0x4c>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001412:	4a08      	ldr	r2, [pc, #32]	@ (8001434 <HAL_MspInit+0x4c>)
 8001414:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001418:	6413      	str	r3, [r2, #64]	@ 0x40
 800141a:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <HAL_MspInit+0x4c>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001422:	603b      	str	r3, [r7, #0]
 8001424:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40023800 	.word	0x40023800

08001438 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	@ 0x28
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a19      	ldr	r2, [pc, #100]	@ (80014bc <HAL_I2C_MspInit+0x84>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d12c      	bne.n	80014b4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
 800145e:	4b18      	ldr	r3, [pc, #96]	@ (80014c0 <HAL_I2C_MspInit+0x88>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	4a17      	ldr	r2, [pc, #92]	@ (80014c0 <HAL_I2C_MspInit+0x88>)
 8001464:	f043 0302 	orr.w	r3, r3, #2
 8001468:	6313      	str	r3, [r2, #48]	@ 0x30
 800146a:	4b15      	ldr	r3, [pc, #84]	@ (80014c0 <HAL_I2C_MspInit+0x88>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = MAG_SDA_Pin|MAG_SCL_Pin;
 8001476:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800147a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800147c:	2312      	movs	r3, #18
 800147e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001484:	2303      	movs	r3, #3
 8001486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001488:	2304      	movs	r3, #4
 800148a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	4619      	mov	r1, r3
 8001492:	480c      	ldr	r0, [pc, #48]	@ (80014c4 <HAL_I2C_MspInit+0x8c>)
 8001494:	f000 fb38 	bl	8001b08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	4b08      	ldr	r3, [pc, #32]	@ (80014c0 <HAL_I2C_MspInit+0x88>)
 800149e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a0:	4a07      	ldr	r2, [pc, #28]	@ (80014c0 <HAL_I2C_MspInit+0x88>)
 80014a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80014a8:	4b05      	ldr	r3, [pc, #20]	@ (80014c0 <HAL_I2C_MspInit+0x88>)
 80014aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80014b4:	bf00      	nop
 80014b6:	3728      	adds	r7, #40	@ 0x28
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40005400 	.word	0x40005400
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40020400 	.word	0x40020400

080014c8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a15      	ldr	r2, [pc, #84]	@ (800152c <HAL_TIM_PWM_MspInit+0x64>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d10e      	bne.n	80014f8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	4b14      	ldr	r3, [pc, #80]	@ (8001530 <HAL_TIM_PWM_MspInit+0x68>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e2:	4a13      	ldr	r2, [pc, #76]	@ (8001530 <HAL_TIM_PWM_MspInit+0x68>)
 80014e4:	f043 0302 	orr.w	r3, r3, #2
 80014e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ea:	4b11      	ldr	r3, [pc, #68]	@ (8001530 <HAL_TIM_PWM_MspInit+0x68>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80014f6:	e012      	b.n	800151e <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001534 <HAL_TIM_PWM_MspInit+0x6c>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d10d      	bne.n	800151e <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	4b0a      	ldr	r3, [pc, #40]	@ (8001530 <HAL_TIM_PWM_MspInit+0x68>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150a:	4a09      	ldr	r2, [pc, #36]	@ (8001530 <HAL_TIM_PWM_MspInit+0x68>)
 800150c:	f043 0304 	orr.w	r3, r3, #4
 8001510:	6413      	str	r3, [r2, #64]	@ 0x40
 8001512:	4b07      	ldr	r3, [pc, #28]	@ (8001530 <HAL_TIM_PWM_MspInit+0x68>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001516:	f003 0304 	and.w	r3, r3, #4
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
}
 800151e:	bf00      	nop
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	40000400 	.word	0x40000400
 8001530:	40023800 	.word	0x40023800
 8001534:	40000800 	.word	0x40000800

08001538 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	@ 0x28
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a24      	ldr	r2, [pc, #144]	@ (80015e8 <HAL_TIM_MspPostInit+0xb0>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d11e      	bne.n	8001598 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
 800155e:	4b23      	ldr	r3, [pc, #140]	@ (80015ec <HAL_TIM_MspPostInit+0xb4>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	4a22      	ldr	r2, [pc, #136]	@ (80015ec <HAL_TIM_MspPostInit+0xb4>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6313      	str	r3, [r2, #48]	@ 0x30
 800156a:	4b20      	ldr	r3, [pc, #128]	@ (80015ec <HAL_TIM_MspPostInit+0xb4>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = L293D_PWM_Pin;
 8001576:	2380      	movs	r3, #128	@ 0x80
 8001578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157a:	2302      	movs	r3, #2
 800157c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001586:	2302      	movs	r3, #2
 8001588:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(L293D_PWM_GPIO_Port, &GPIO_InitStruct);
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	4619      	mov	r1, r3
 8001590:	4817      	ldr	r0, [pc, #92]	@ (80015f0 <HAL_TIM_MspPostInit+0xb8>)
 8001592:	f000 fab9 	bl	8001b08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001596:	e022      	b.n	80015de <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a15      	ldr	r2, [pc, #84]	@ (80015f4 <HAL_TIM_MspPostInit+0xbc>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d11d      	bne.n	80015de <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <HAL_TIM_MspPostInit+0xb4>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	4a10      	ldr	r2, [pc, #64]	@ (80015ec <HAL_TIM_MspPostInit+0xb4>)
 80015ac:	f043 0302 	orr.w	r3, r3, #2
 80015b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b2:	4b0e      	ldr	r3, [pc, #56]	@ (80015ec <HAL_TIM_MspPostInit+0xb4>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SG90_PWM_Pin;
 80015be:	2340      	movs	r3, #64	@ 0x40
 80015c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2300      	movs	r3, #0
 80015cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80015ce:	2302      	movs	r3, #2
 80015d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SG90_PWM_GPIO_Port, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	4807      	ldr	r0, [pc, #28]	@ (80015f8 <HAL_TIM_MspPostInit+0xc0>)
 80015da:	f000 fa95 	bl	8001b08 <HAL_GPIO_Init>
}
 80015de:	bf00      	nop
 80015e0:	3728      	adds	r7, #40	@ 0x28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40000400 	.word	0x40000400
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40020000 	.word	0x40020000
 80015f4:	40000800 	.word	0x40000800
 80015f8:	40020400 	.word	0x40020400

080015fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08c      	sub	sp, #48	@ 0x30
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 031c 	add.w	r3, r7, #28
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a41      	ldr	r2, [pc, #260]	@ (8001720 <HAL_UART_MspInit+0x124>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d12c      	bne.n	8001678 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	61bb      	str	r3, [r7, #24]
 8001622:	4b40      	ldr	r3, [pc, #256]	@ (8001724 <HAL_UART_MspInit+0x128>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001626:	4a3f      	ldr	r2, [pc, #252]	@ (8001724 <HAL_UART_MspInit+0x128>)
 8001628:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800162c:	6413      	str	r3, [r2, #64]	@ 0x40
 800162e:	4b3d      	ldr	r3, [pc, #244]	@ (8001724 <HAL_UART_MspInit+0x128>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001636:	61bb      	str	r3, [r7, #24]
 8001638:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	4b39      	ldr	r3, [pc, #228]	@ (8001724 <HAL_UART_MspInit+0x128>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	4a38      	ldr	r2, [pc, #224]	@ (8001724 <HAL_UART_MspInit+0x128>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6313      	str	r3, [r2, #48]	@ 0x30
 800164a:	4b36      	ldr	r3, [pc, #216]	@ (8001724 <HAL_UART_MspInit+0x128>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001656:	230c      	movs	r3, #12
 8001658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165a:	2302      	movs	r3, #2
 800165c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001662:	2303      	movs	r3, #3
 8001664:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001666:	2307      	movs	r3, #7
 8001668:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166a:	f107 031c 	add.w	r3, r7, #28
 800166e:	4619      	mov	r1, r3
 8001670:	482d      	ldr	r0, [pc, #180]	@ (8001728 <HAL_UART_MspInit+0x12c>)
 8001672:	f000 fa49 	bl	8001b08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001676:	e04f      	b.n	8001718 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART3)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a2b      	ldr	r2, [pc, #172]	@ (800172c <HAL_UART_MspInit+0x130>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d14a      	bne.n	8001718 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	4b27      	ldr	r3, [pc, #156]	@ (8001724 <HAL_UART_MspInit+0x128>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168a:	4a26      	ldr	r2, [pc, #152]	@ (8001724 <HAL_UART_MspInit+0x128>)
 800168c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001690:	6413      	str	r3, [r2, #64]	@ 0x40
 8001692:	4b24      	ldr	r3, [pc, #144]	@ (8001724 <HAL_UART_MspInit+0x128>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001696:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	4b20      	ldr	r3, [pc, #128]	@ (8001724 <HAL_UART_MspInit+0x128>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001724 <HAL_UART_MspInit+0x128>)
 80016a8:	f043 0304 	orr.w	r3, r3, #4
 80016ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001724 <HAL_UART_MspInit+0x128>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	4b19      	ldr	r3, [pc, #100]	@ (8001724 <HAL_UART_MspInit+0x128>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c2:	4a18      	ldr	r2, [pc, #96]	@ (8001724 <HAL_UART_MspInit+0x128>)
 80016c4:	f043 0302 	orr.w	r3, r3, #2
 80016c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ca:	4b16      	ldr	r3, [pc, #88]	@ (8001724 <HAL_UART_MspInit+0x128>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BLE_RX_Pin;
 80016d6:	2320      	movs	r3, #32
 80016d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	2302      	movs	r3, #2
 80016dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e2:	2303      	movs	r3, #3
 80016e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016e6:	2307      	movs	r3, #7
 80016e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BLE_RX_GPIO_Port, &GPIO_InitStruct);
 80016ea:	f107 031c 	add.w	r3, r7, #28
 80016ee:	4619      	mov	r1, r3
 80016f0:	480f      	ldr	r0, [pc, #60]	@ (8001730 <HAL_UART_MspInit+0x134>)
 80016f2:	f000 fa09 	bl	8001b08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BLE_TX_Pin;
 80016f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	2302      	movs	r3, #2
 80016fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001704:	2303      	movs	r3, #3
 8001706:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001708:	2307      	movs	r3, #7
 800170a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BLE_TX_GPIO_Port, &GPIO_InitStruct);
 800170c:	f107 031c 	add.w	r3, r7, #28
 8001710:	4619      	mov	r1, r3
 8001712:	4808      	ldr	r0, [pc, #32]	@ (8001734 <HAL_UART_MspInit+0x138>)
 8001714:	f000 f9f8 	bl	8001b08 <HAL_GPIO_Init>
}
 8001718:	bf00      	nop
 800171a:	3730      	adds	r7, #48	@ 0x30
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40004400 	.word	0x40004400
 8001724:	40023800 	.word	0x40023800
 8001728:	40020000 	.word	0x40020000
 800172c:	40004800 	.word	0x40004800
 8001730:	40020800 	.word	0x40020800
 8001734:	40020400 	.word	0x40020400

08001738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <NMI_Handler+0x4>

08001740 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <HardFault_Handler+0x4>

08001748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800174c:	bf00      	nop
 800174e:	e7fd      	b.n	800174c <MemManage_Handler+0x4>

08001750 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001754:	bf00      	nop
 8001756:	e7fd      	b.n	8001754 <BusFault_Handler+0x4>

08001758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <UsageFault_Handler+0x4>

08001760 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800178e:	f000 f891 	bl	80018b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800179c:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <SystemInit+0x20>)
 800179e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017a2:	4a05      	ldr	r2, [pc, #20]	@ (80017b8 <SystemInit+0x20>)
 80017a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017f4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80017c0:	f7ff ffea 	bl	8001798 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017c4:	480c      	ldr	r0, [pc, #48]	@ (80017f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017c6:	490d      	ldr	r1, [pc, #52]	@ (80017fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001800 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017cc:	e002      	b.n	80017d4 <LoopCopyDataInit>

080017ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d2:	3304      	adds	r3, #4

080017d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d8:	d3f9      	bcc.n	80017ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017da:	4a0a      	ldr	r2, [pc, #40]	@ (8001804 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001808 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e0:	e001      	b.n	80017e6 <LoopFillZerobss>

080017e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e4:	3204      	adds	r2, #4

080017e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e8:	d3fb      	bcc.n	80017e2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80017ea:	f002 ff77 	bl	80046dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ee:	f7ff fb67 	bl	8000ec0 <main>
  bx  lr    
 80017f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001800:	08004cc8 	.word	0x08004cc8
  ldr r2, =_sbss
 8001804:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001808:	200001b0 	.word	0x200001b0

0800180c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800180c:	e7fe      	b.n	800180c <ADC_IRQHandler>
	...

08001810 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001814:	4b0e      	ldr	r3, [pc, #56]	@ (8001850 <HAL_Init+0x40>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a0d      	ldr	r2, [pc, #52]	@ (8001850 <HAL_Init+0x40>)
 800181a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800181e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001820:	4b0b      	ldr	r3, [pc, #44]	@ (8001850 <HAL_Init+0x40>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a0a      	ldr	r2, [pc, #40]	@ (8001850 <HAL_Init+0x40>)
 8001826:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800182a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800182c:	4b08      	ldr	r3, [pc, #32]	@ (8001850 <HAL_Init+0x40>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a07      	ldr	r2, [pc, #28]	@ (8001850 <HAL_Init+0x40>)
 8001832:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001836:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001838:	2003      	movs	r0, #3
 800183a:	f000 f931 	bl	8001aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800183e:	200f      	movs	r0, #15
 8001840:	f000 f808 	bl	8001854 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001844:	f7ff fdd0 	bl	80013e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40023c00 	.word	0x40023c00

08001854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800185c:	4b12      	ldr	r3, [pc, #72]	@ (80018a8 <HAL_InitTick+0x54>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4b12      	ldr	r3, [pc, #72]	@ (80018ac <HAL_InitTick+0x58>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	4619      	mov	r1, r3
 8001866:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800186a:	fbb3 f3f1 	udiv	r3, r3, r1
 800186e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001872:	4618      	mov	r0, r3
 8001874:	f000 f93b 	bl	8001aee <HAL_SYSTICK_Config>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e00e      	b.n	80018a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b0f      	cmp	r3, #15
 8001886:	d80a      	bhi.n	800189e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001888:	2200      	movs	r2, #0
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	f04f 30ff 	mov.w	r0, #4294967295
 8001890:	f000 f911 	bl	8001ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001894:	4a06      	ldr	r2, [pc, #24]	@ (80018b0 <HAL_InitTick+0x5c>)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800189a:	2300      	movs	r3, #0
 800189c:	e000      	b.n	80018a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000000 	.word	0x20000000
 80018ac:	20000008 	.word	0x20000008
 80018b0:	20000004 	.word	0x20000004

080018b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018b8:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <HAL_IncTick+0x20>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	461a      	mov	r2, r3
 80018be:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <HAL_IncTick+0x24>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4413      	add	r3, r2
 80018c4:	4a04      	ldr	r2, [pc, #16]	@ (80018d8 <HAL_IncTick+0x24>)
 80018c6:	6013      	str	r3, [r2, #0]
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	20000008 	.word	0x20000008
 80018d8:	200001ac 	.word	0x200001ac

080018dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  return uwTick;
 80018e0:	4b03      	ldr	r3, [pc, #12]	@ (80018f0 <HAL_GetTick+0x14>)
 80018e2:	681b      	ldr	r3, [r3, #0]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	200001ac 	.word	0x200001ac

080018f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018fc:	f7ff ffee 	bl	80018dc <HAL_GetTick>
 8001900:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800190c:	d005      	beq.n	800191a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800190e:	4b0a      	ldr	r3, [pc, #40]	@ (8001938 <HAL_Delay+0x44>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	461a      	mov	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4413      	add	r3, r2
 8001918:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800191a:	bf00      	nop
 800191c:	f7ff ffde 	bl	80018dc <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	429a      	cmp	r2, r3
 800192a:	d8f7      	bhi.n	800191c <HAL_Delay+0x28>
  {
  }
}
 800192c:	bf00      	nop
 800192e:	bf00      	nop
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000008 	.word	0x20000008

0800193c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800194c:	4b0c      	ldr	r3, [pc, #48]	@ (8001980 <__NVIC_SetPriorityGrouping+0x44>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001958:	4013      	ands	r3, r2
 800195a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001964:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001968:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800196c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800196e:	4a04      	ldr	r2, [pc, #16]	@ (8001980 <__NVIC_SetPriorityGrouping+0x44>)
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	60d3      	str	r3, [r2, #12]
}
 8001974:	bf00      	nop
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001988:	4b04      	ldr	r3, [pc, #16]	@ (800199c <__NVIC_GetPriorityGrouping+0x18>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	0a1b      	lsrs	r3, r3, #8
 800198e:	f003 0307 	and.w	r3, r3, #7
}
 8001992:	4618      	mov	r0, r3
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	6039      	str	r1, [r7, #0]
 80019aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	db0a      	blt.n	80019ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	490c      	ldr	r1, [pc, #48]	@ (80019ec <__NVIC_SetPriority+0x4c>)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	0112      	lsls	r2, r2, #4
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	440b      	add	r3, r1
 80019c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c8:	e00a      	b.n	80019e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	4908      	ldr	r1, [pc, #32]	@ (80019f0 <__NVIC_SetPriority+0x50>)
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	3b04      	subs	r3, #4
 80019d8:	0112      	lsls	r2, r2, #4
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	440b      	add	r3, r1
 80019de:	761a      	strb	r2, [r3, #24]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	e000e100 	.word	0xe000e100
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b089      	sub	sp, #36	@ 0x24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f1c3 0307 	rsb	r3, r3, #7
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	bf28      	it	cs
 8001a12:	2304      	movcs	r3, #4
 8001a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	2b06      	cmp	r3, #6
 8001a1c:	d902      	bls.n	8001a24 <NVIC_EncodePriority+0x30>
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3b03      	subs	r3, #3
 8001a22:	e000      	b.n	8001a26 <NVIC_EncodePriority+0x32>
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	f04f 32ff 	mov.w	r2, #4294967295
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43da      	mvns	r2, r3
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	401a      	ands	r2, r3
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	fa01 f303 	lsl.w	r3, r1, r3
 8001a46:	43d9      	mvns	r1, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a4c:	4313      	orrs	r3, r2
         );
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3724      	adds	r7, #36	@ 0x24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a6c:	d301      	bcc.n	8001a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e00f      	b.n	8001a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a72:	4a0a      	ldr	r2, [pc, #40]	@ (8001a9c <SysTick_Config+0x40>)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a7a:	210f      	movs	r1, #15
 8001a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a80:	f7ff ff8e 	bl	80019a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a84:	4b05      	ldr	r3, [pc, #20]	@ (8001a9c <SysTick_Config+0x40>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a8a:	4b04      	ldr	r3, [pc, #16]	@ (8001a9c <SysTick_Config+0x40>)
 8001a8c:	2207      	movs	r2, #7
 8001a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	e000e010 	.word	0xe000e010

08001aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff ff47 	bl	800193c <__NVIC_SetPriorityGrouping>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b086      	sub	sp, #24
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
 8001ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac8:	f7ff ff5c 	bl	8001984 <__NVIC_GetPriorityGrouping>
 8001acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	68b9      	ldr	r1, [r7, #8]
 8001ad2:	6978      	ldr	r0, [r7, #20]
 8001ad4:	f7ff ff8e 	bl	80019f4 <NVIC_EncodePriority>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff5d 	bl	80019a0 <__NVIC_SetPriority>
}
 8001ae6:	bf00      	nop
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff ffb0 	bl	8001a5c <SysTick_Config>
 8001afc:	4603      	mov	r3, r0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b089      	sub	sp, #36	@ 0x24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
 8001b22:	e165      	b.n	8001df0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b24:	2201      	movs	r2, #1
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	4013      	ands	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	f040 8154 	bne.w	8001dea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d005      	beq.n	8001b5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d130      	bne.n	8001bbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	2203      	movs	r2, #3
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b90:	2201      	movs	r2, #1
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	091b      	lsrs	r3, r3, #4
 8001ba6:	f003 0201 	and.w	r2, r3, #1
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 0303 	and.w	r3, r3, #3
 8001bc4:	2b03      	cmp	r3, #3
 8001bc6:	d017      	beq.n	8001bf8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	2203      	movs	r2, #3
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d123      	bne.n	8001c4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	08da      	lsrs	r2, r3, #3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3208      	adds	r2, #8
 8001c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	f003 0307 	and.w	r3, r3, #7
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	220f      	movs	r2, #15
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4013      	ands	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	691a      	ldr	r2, [r3, #16]
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	08da      	lsrs	r2, r3, #3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	3208      	adds	r2, #8
 8001c46:	69b9      	ldr	r1, [r7, #24]
 8001c48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	2203      	movs	r2, #3
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 0203 	and.w	r2, r3, #3
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f000 80ae 	beq.w	8001dea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	4b5d      	ldr	r3, [pc, #372]	@ (8001e08 <HAL_GPIO_Init+0x300>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c96:	4a5c      	ldr	r2, [pc, #368]	@ (8001e08 <HAL_GPIO_Init+0x300>)
 8001c98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c9e:	4b5a      	ldr	r3, [pc, #360]	@ (8001e08 <HAL_GPIO_Init+0x300>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001caa:	4a58      	ldr	r2, [pc, #352]	@ (8001e0c <HAL_GPIO_Init+0x304>)
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	089b      	lsrs	r3, r3, #2
 8001cb0:	3302      	adds	r3, #2
 8001cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	220f      	movs	r2, #15
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a4f      	ldr	r2, [pc, #316]	@ (8001e10 <HAL_GPIO_Init+0x308>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d025      	beq.n	8001d22 <HAL_GPIO_Init+0x21a>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a4e      	ldr	r2, [pc, #312]	@ (8001e14 <HAL_GPIO_Init+0x30c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d01f      	beq.n	8001d1e <HAL_GPIO_Init+0x216>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a4d      	ldr	r2, [pc, #308]	@ (8001e18 <HAL_GPIO_Init+0x310>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d019      	beq.n	8001d1a <HAL_GPIO_Init+0x212>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a4c      	ldr	r2, [pc, #304]	@ (8001e1c <HAL_GPIO_Init+0x314>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d013      	beq.n	8001d16 <HAL_GPIO_Init+0x20e>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a4b      	ldr	r2, [pc, #300]	@ (8001e20 <HAL_GPIO_Init+0x318>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d00d      	beq.n	8001d12 <HAL_GPIO_Init+0x20a>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a4a      	ldr	r2, [pc, #296]	@ (8001e24 <HAL_GPIO_Init+0x31c>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d007      	beq.n	8001d0e <HAL_GPIO_Init+0x206>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a49      	ldr	r2, [pc, #292]	@ (8001e28 <HAL_GPIO_Init+0x320>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d101      	bne.n	8001d0a <HAL_GPIO_Init+0x202>
 8001d06:	2306      	movs	r3, #6
 8001d08:	e00c      	b.n	8001d24 <HAL_GPIO_Init+0x21c>
 8001d0a:	2307      	movs	r3, #7
 8001d0c:	e00a      	b.n	8001d24 <HAL_GPIO_Init+0x21c>
 8001d0e:	2305      	movs	r3, #5
 8001d10:	e008      	b.n	8001d24 <HAL_GPIO_Init+0x21c>
 8001d12:	2304      	movs	r3, #4
 8001d14:	e006      	b.n	8001d24 <HAL_GPIO_Init+0x21c>
 8001d16:	2303      	movs	r3, #3
 8001d18:	e004      	b.n	8001d24 <HAL_GPIO_Init+0x21c>
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	e002      	b.n	8001d24 <HAL_GPIO_Init+0x21c>
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e000      	b.n	8001d24 <HAL_GPIO_Init+0x21c>
 8001d22:	2300      	movs	r3, #0
 8001d24:	69fa      	ldr	r2, [r7, #28]
 8001d26:	f002 0203 	and.w	r2, r2, #3
 8001d2a:	0092      	lsls	r2, r2, #2
 8001d2c:	4093      	lsls	r3, r2
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d34:	4935      	ldr	r1, [pc, #212]	@ (8001e0c <HAL_GPIO_Init+0x304>)
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	089b      	lsrs	r3, r3, #2
 8001d3a:	3302      	adds	r3, #2
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d42:	4b3a      	ldr	r3, [pc, #232]	@ (8001e2c <HAL_GPIO_Init+0x324>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d66:	4a31      	ldr	r2, [pc, #196]	@ (8001e2c <HAL_GPIO_Init+0x324>)
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d6c:	4b2f      	ldr	r3, [pc, #188]	@ (8001e2c <HAL_GPIO_Init+0x324>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d90:	4a26      	ldr	r2, [pc, #152]	@ (8001e2c <HAL_GPIO_Init+0x324>)
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d96:	4b25      	ldr	r3, [pc, #148]	@ (8001e2c <HAL_GPIO_Init+0x324>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4013      	ands	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dba:	4a1c      	ldr	r2, [pc, #112]	@ (8001e2c <HAL_GPIO_Init+0x324>)
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dc0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e2c <HAL_GPIO_Init+0x324>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001de4:	4a11      	ldr	r2, [pc, #68]	@ (8001e2c <HAL_GPIO_Init+0x324>)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3301      	adds	r3, #1
 8001dee:	61fb      	str	r3, [r7, #28]
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	2b0f      	cmp	r3, #15
 8001df4:	f67f ae96 	bls.w	8001b24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001df8:	bf00      	nop
 8001dfa:	bf00      	nop
 8001dfc:	3724      	adds	r7, #36	@ 0x24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40013800 	.word	0x40013800
 8001e10:	40020000 	.word	0x40020000
 8001e14:	40020400 	.word	0x40020400
 8001e18:	40020800 	.word	0x40020800
 8001e1c:	40020c00 	.word	0x40020c00
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40021400 	.word	0x40021400
 8001e28:	40021800 	.word	0x40021800
 8001e2c:	40013c00 	.word	0x40013c00

08001e30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	807b      	strh	r3, [r7, #2]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e40:	787b      	ldrb	r3, [r7, #1]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e46:	887a      	ldrh	r2, [r7, #2]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e4c:	e003      	b.n	8001e56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e4e:	887b      	ldrh	r3, [r7, #2]
 8001e50:	041a      	lsls	r2, r3, #16
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	619a      	str	r2, [r3, #24]
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
	...

08001e64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e12b      	b.n	80020ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d106      	bne.n	8001e90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff fad4 	bl	8001438 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2224      	movs	r2, #36	@ 0x24
 8001e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 0201 	bic.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001eb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ec6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ec8:	f001 f8e2 	bl	8003090 <HAL_RCC_GetPCLK1Freq>
 8001ecc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	4a81      	ldr	r2, [pc, #516]	@ (80020d8 <HAL_I2C_Init+0x274>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d807      	bhi.n	8001ee8 <HAL_I2C_Init+0x84>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4a80      	ldr	r2, [pc, #512]	@ (80020dc <HAL_I2C_Init+0x278>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	bf94      	ite	ls
 8001ee0:	2301      	movls	r3, #1
 8001ee2:	2300      	movhi	r3, #0
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	e006      	b.n	8001ef6 <HAL_I2C_Init+0x92>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	4a7d      	ldr	r2, [pc, #500]	@ (80020e0 <HAL_I2C_Init+0x27c>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	bf94      	ite	ls
 8001ef0:	2301      	movls	r3, #1
 8001ef2:	2300      	movhi	r3, #0
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e0e7      	b.n	80020ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	4a78      	ldr	r2, [pc, #480]	@ (80020e4 <HAL_I2C_Init+0x280>)
 8001f02:	fba2 2303 	umull	r2, r3, r2, r3
 8001f06:	0c9b      	lsrs	r3, r3, #18
 8001f08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68ba      	ldr	r2, [r7, #8]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	4a6a      	ldr	r2, [pc, #424]	@ (80020d8 <HAL_I2C_Init+0x274>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d802      	bhi.n	8001f38 <HAL_I2C_Init+0xd4>
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	3301      	adds	r3, #1
 8001f36:	e009      	b.n	8001f4c <HAL_I2C_Init+0xe8>
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f3e:	fb02 f303 	mul.w	r3, r2, r3
 8001f42:	4a69      	ldr	r2, [pc, #420]	@ (80020e8 <HAL_I2C_Init+0x284>)
 8001f44:	fba2 2303 	umull	r2, r3, r2, r3
 8001f48:	099b      	lsrs	r3, r3, #6
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	6812      	ldr	r2, [r2, #0]
 8001f50:	430b      	orrs	r3, r1
 8001f52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001f5e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	495c      	ldr	r1, [pc, #368]	@ (80020d8 <HAL_I2C_Init+0x274>)
 8001f68:	428b      	cmp	r3, r1
 8001f6a:	d819      	bhi.n	8001fa0 <HAL_I2C_Init+0x13c>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	1e59      	subs	r1, r3, #1
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f7a:	1c59      	adds	r1, r3, #1
 8001f7c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001f80:	400b      	ands	r3, r1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00a      	beq.n	8001f9c <HAL_I2C_Init+0x138>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	1e59      	subs	r1, r3, #1
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f94:	3301      	adds	r3, #1
 8001f96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f9a:	e051      	b.n	8002040 <HAL_I2C_Init+0x1dc>
 8001f9c:	2304      	movs	r3, #4
 8001f9e:	e04f      	b.n	8002040 <HAL_I2C_Init+0x1dc>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d111      	bne.n	8001fcc <HAL_I2C_Init+0x168>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	1e58      	subs	r0, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6859      	ldr	r1, [r3, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	440b      	add	r3, r1
 8001fb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fba:	3301      	adds	r3, #1
 8001fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	bf0c      	ite	eq
 8001fc4:	2301      	moveq	r3, #1
 8001fc6:	2300      	movne	r3, #0
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	e012      	b.n	8001ff2 <HAL_I2C_Init+0x18e>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	1e58      	subs	r0, r3, #1
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6859      	ldr	r1, [r3, #4]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	0099      	lsls	r1, r3, #2
 8001fdc:	440b      	add	r3, r1
 8001fde:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	bf0c      	ite	eq
 8001fec:	2301      	moveq	r3, #1
 8001fee:	2300      	movne	r3, #0
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <HAL_I2C_Init+0x196>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e022      	b.n	8002040 <HAL_I2C_Init+0x1dc>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10e      	bne.n	8002020 <HAL_I2C_Init+0x1bc>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	1e58      	subs	r0, r3, #1
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6859      	ldr	r1, [r3, #4]
 800200a:	460b      	mov	r3, r1
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	440b      	add	r3, r1
 8002010:	fbb0 f3f3 	udiv	r3, r0, r3
 8002014:	3301      	adds	r3, #1
 8002016:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800201a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800201e:	e00f      	b.n	8002040 <HAL_I2C_Init+0x1dc>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	1e58      	subs	r0, r3, #1
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6859      	ldr	r1, [r3, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	440b      	add	r3, r1
 800202e:	0099      	lsls	r1, r3, #2
 8002030:	440b      	add	r3, r1
 8002032:	fbb0 f3f3 	udiv	r3, r0, r3
 8002036:	3301      	adds	r3, #1
 8002038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800203c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002040:	6879      	ldr	r1, [r7, #4]
 8002042:	6809      	ldr	r1, [r1, #0]
 8002044:	4313      	orrs	r3, r2
 8002046:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69da      	ldr	r2, [r3, #28]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	430a      	orrs	r2, r1
 8002062:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800206e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	6911      	ldr	r1, [r2, #16]
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	68d2      	ldr	r2, [r2, #12]
 800207a:	4311      	orrs	r1, r2
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	6812      	ldr	r2, [r2, #0]
 8002080:	430b      	orrs	r3, r1
 8002082:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	695a      	ldr	r2, [r3, #20]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	431a      	orrs	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	430a      	orrs	r2, r1
 800209e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f042 0201 	orr.w	r2, r2, #1
 80020ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2220      	movs	r2, #32
 80020ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	000186a0 	.word	0x000186a0
 80020dc:	001e847f 	.word	0x001e847f
 80020e0:	003d08ff 	.word	0x003d08ff
 80020e4:	431bde83 	.word	0x431bde83
 80020e8:	10624dd3 	.word	0x10624dd3

080020ec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af02      	add	r7, sp, #8
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	4608      	mov	r0, r1
 80020f6:	4611      	mov	r1, r2
 80020f8:	461a      	mov	r2, r3
 80020fa:	4603      	mov	r3, r0
 80020fc:	817b      	strh	r3, [r7, #10]
 80020fe:	460b      	mov	r3, r1
 8002100:	813b      	strh	r3, [r7, #8]
 8002102:	4613      	mov	r3, r2
 8002104:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002106:	f7ff fbe9 	bl	80018dc <HAL_GetTick>
 800210a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b20      	cmp	r3, #32
 8002116:	f040 80d9 	bne.w	80022cc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	2319      	movs	r3, #25
 8002120:	2201      	movs	r2, #1
 8002122:	496d      	ldr	r1, [pc, #436]	@ (80022d8 <HAL_I2C_Mem_Write+0x1ec>)
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f000 fc8b 	bl	8002a40 <I2C_WaitOnFlagUntilTimeout>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002130:	2302      	movs	r3, #2
 8002132:	e0cc      	b.n	80022ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800213a:	2b01      	cmp	r3, #1
 800213c:	d101      	bne.n	8002142 <HAL_I2C_Mem_Write+0x56>
 800213e:	2302      	movs	r3, #2
 8002140:	e0c5      	b.n	80022ce <HAL_I2C_Mem_Write+0x1e2>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b01      	cmp	r3, #1
 8002156:	d007      	beq.n	8002168 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 0201 	orr.w	r2, r2, #1
 8002166:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002176:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2221      	movs	r2, #33	@ 0x21
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2240      	movs	r2, #64	@ 0x40
 8002184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6a3a      	ldr	r2, [r7, #32]
 8002192:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002198:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800219e:	b29a      	uxth	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4a4d      	ldr	r2, [pc, #308]	@ (80022dc <HAL_I2C_Mem_Write+0x1f0>)
 80021a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021aa:	88f8      	ldrh	r0, [r7, #6]
 80021ac:	893a      	ldrh	r2, [r7, #8]
 80021ae:	8979      	ldrh	r1, [r7, #10]
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	9301      	str	r3, [sp, #4]
 80021b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	4603      	mov	r3, r0
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f000 fac2 	bl	8002744 <I2C_RequestMemoryWrite>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d052      	beq.n	800226c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e081      	b.n	80022ce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 fd50 	bl	8002c74 <I2C_WaitOnTXEFlagUntilTimeout>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00d      	beq.n	80021f6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021de:	2b04      	cmp	r3, #4
 80021e0:	d107      	bne.n	80021f2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e06b      	b.n	80022ce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fa:	781a      	ldrb	r2, [r3, #0]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002206:	1c5a      	adds	r2, r3, #1
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002210:	3b01      	subs	r3, #1
 8002212:	b29a      	uxth	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800221c:	b29b      	uxth	r3, r3
 800221e:	3b01      	subs	r3, #1
 8002220:	b29a      	uxth	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b04      	cmp	r3, #4
 8002232:	d11b      	bne.n	800226c <HAL_I2C_Mem_Write+0x180>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002238:	2b00      	cmp	r3, #0
 800223a:	d017      	beq.n	800226c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002240:	781a      	ldrb	r2, [r3, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224c:	1c5a      	adds	r2, r3, #1
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002256:	3b01      	subs	r3, #1
 8002258:	b29a      	uxth	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002262:	b29b      	uxth	r3, r3
 8002264:	3b01      	subs	r3, #1
 8002266:	b29a      	uxth	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1aa      	bne.n	80021ca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f000 fd43 	bl	8002d04 <I2C_WaitOnBTFFlagUntilTimeout>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00d      	beq.n	80022a0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002288:	2b04      	cmp	r3, #4
 800228a:	d107      	bne.n	800229c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800229a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e016      	b.n	80022ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2220      	movs	r2, #32
 80022b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80022c8:	2300      	movs	r3, #0
 80022ca:	e000      	b.n	80022ce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80022cc:	2302      	movs	r3, #2
  }
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3718      	adds	r7, #24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	00100002 	.word	0x00100002
 80022dc:	ffff0000 	.word	0xffff0000

080022e0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08c      	sub	sp, #48	@ 0x30
 80022e4:	af02      	add	r7, sp, #8
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	4608      	mov	r0, r1
 80022ea:	4611      	mov	r1, r2
 80022ec:	461a      	mov	r2, r3
 80022ee:	4603      	mov	r3, r0
 80022f0:	817b      	strh	r3, [r7, #10]
 80022f2:	460b      	mov	r3, r1
 80022f4:	813b      	strh	r3, [r7, #8]
 80022f6:	4613      	mov	r3, r2
 80022f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022fa:	f7ff faef 	bl	80018dc <HAL_GetTick>
 80022fe:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002306:	b2db      	uxtb	r3, r3
 8002308:	2b20      	cmp	r3, #32
 800230a:	f040 8214 	bne.w	8002736 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800230e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	2319      	movs	r3, #25
 8002314:	2201      	movs	r2, #1
 8002316:	497b      	ldr	r1, [pc, #492]	@ (8002504 <HAL_I2C_Mem_Read+0x224>)
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f000 fb91 	bl	8002a40 <I2C_WaitOnFlagUntilTimeout>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002324:	2302      	movs	r3, #2
 8002326:	e207      	b.n	8002738 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800232e:	2b01      	cmp	r3, #1
 8002330:	d101      	bne.n	8002336 <HAL_I2C_Mem_Read+0x56>
 8002332:	2302      	movs	r3, #2
 8002334:	e200      	b.n	8002738 <HAL_I2C_Mem_Read+0x458>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b01      	cmp	r3, #1
 800234a:	d007      	beq.n	800235c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0201 	orr.w	r2, r2, #1
 800235a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800236a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2222      	movs	r2, #34	@ 0x22
 8002370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2240      	movs	r2, #64	@ 0x40
 8002378:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002386:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800238c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002392:	b29a      	uxth	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	4a5b      	ldr	r2, [pc, #364]	@ (8002508 <HAL_I2C_Mem_Read+0x228>)
 800239c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800239e:	88f8      	ldrh	r0, [r7, #6]
 80023a0:	893a      	ldrh	r2, [r7, #8]
 80023a2:	8979      	ldrh	r1, [r7, #10]
 80023a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a6:	9301      	str	r3, [sp, #4]
 80023a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	4603      	mov	r3, r0
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f000 fa5e 	bl	8002870 <I2C_RequestMemoryRead>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e1bc      	b.n	8002738 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d113      	bne.n	80023ee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023c6:	2300      	movs	r3, #0
 80023c8:	623b      	str	r3, [r7, #32]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	623b      	str	r3, [r7, #32]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	623b      	str	r3, [r7, #32]
 80023da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	e190      	b.n	8002710 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d11b      	bne.n	800242e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002404:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	61fb      	str	r3, [r7, #28]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	61fb      	str	r3, [r7, #28]
 800241a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	e170      	b.n	8002710 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002432:	2b02      	cmp	r3, #2
 8002434:	d11b      	bne.n	800246e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002444:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002454:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002456:	2300      	movs	r3, #0
 8002458:	61bb      	str	r3, [r7, #24]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	695b      	ldr	r3, [r3, #20]
 8002460:	61bb      	str	r3, [r7, #24]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	61bb      	str	r3, [r7, #24]
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	e150      	b.n	8002710 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	617b      	str	r3, [r7, #20]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002484:	e144      	b.n	8002710 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800248a:	2b03      	cmp	r3, #3
 800248c:	f200 80f1 	bhi.w	8002672 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002494:	2b01      	cmp	r3, #1
 8002496:	d123      	bne.n	80024e0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002498:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800249a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f000 fc79 	bl	8002d94 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e145      	b.n	8002738 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	691a      	ldr	r2, [r3, #16]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024be:	1c5a      	adds	r2, r3, #1
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c8:	3b01      	subs	r3, #1
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	3b01      	subs	r3, #1
 80024d8:	b29a      	uxth	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80024de:	e117      	b.n	8002710 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d14e      	bne.n	8002586 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024ee:	2200      	movs	r2, #0
 80024f0:	4906      	ldr	r1, [pc, #24]	@ (800250c <HAL_I2C_Mem_Read+0x22c>)
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 faa4 	bl	8002a40 <I2C_WaitOnFlagUntilTimeout>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d008      	beq.n	8002510 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e11a      	b.n	8002738 <HAL_I2C_Mem_Read+0x458>
 8002502:	bf00      	nop
 8002504:	00100002 	.word	0x00100002
 8002508:	ffff0000 	.word	0xffff0000
 800250c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800251e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	691a      	ldr	r2, [r3, #16]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002532:	1c5a      	adds	r2, r3, #1
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800253c:	3b01      	subs	r3, #1
 800253e:	b29a      	uxth	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002548:	b29b      	uxth	r3, r3
 800254a:	3b01      	subs	r3, #1
 800254c:	b29a      	uxth	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	691a      	ldr	r2, [r3, #16]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002564:	1c5a      	adds	r2, r3, #1
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800256e:	3b01      	subs	r3, #1
 8002570:	b29a      	uxth	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800257a:	b29b      	uxth	r3, r3
 800257c:	3b01      	subs	r3, #1
 800257e:	b29a      	uxth	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002584:	e0c4      	b.n	8002710 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800258c:	2200      	movs	r2, #0
 800258e:	496c      	ldr	r1, [pc, #432]	@ (8002740 <HAL_I2C_Mem_Read+0x460>)
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 fa55 	bl	8002a40 <I2C_WaitOnFlagUntilTimeout>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e0cb      	b.n	8002738 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691a      	ldr	r2, [r3, #16]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c2:	1c5a      	adds	r2, r3, #1
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025cc:	3b01      	subs	r3, #1
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d8:	b29b      	uxth	r3, r3
 80025da:	3b01      	subs	r3, #1
 80025dc:	b29a      	uxth	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025e8:	2200      	movs	r2, #0
 80025ea:	4955      	ldr	r1, [pc, #340]	@ (8002740 <HAL_I2C_Mem_Read+0x460>)
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f000 fa27 	bl	8002a40 <I2C_WaitOnFlagUntilTimeout>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e09d      	b.n	8002738 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800260a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	691a      	ldr	r2, [r3, #16]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261e:	1c5a      	adds	r2, r3, #1
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002628:	3b01      	subs	r3, #1
 800262a:	b29a      	uxth	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002634:	b29b      	uxth	r3, r3
 8002636:	3b01      	subs	r3, #1
 8002638:	b29a      	uxth	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	691a      	ldr	r2, [r3, #16]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800265a:	3b01      	subs	r3, #1
 800265c:	b29a      	uxth	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002666:	b29b      	uxth	r3, r3
 8002668:	3b01      	subs	r3, #1
 800266a:	b29a      	uxth	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002670:	e04e      	b.n	8002710 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002672:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002674:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 fb8c 	bl	8002d94 <I2C_WaitOnRXNEFlagUntilTimeout>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e058      	b.n	8002738 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	691a      	ldr	r2, [r3, #16]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002698:	1c5a      	adds	r2, r3, #1
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	3b01      	subs	r3, #1
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	f003 0304 	and.w	r3, r3, #4
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d124      	bne.n	8002710 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ca:	2b03      	cmp	r3, #3
 80026cc:	d107      	bne.n	80026de <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026dc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	691a      	ldr	r2, [r3, #16]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026fa:	3b01      	subs	r3, #1
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002706:	b29b      	uxth	r3, r3
 8002708:	3b01      	subs	r3, #1
 800270a:	b29a      	uxth	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002714:	2b00      	cmp	r3, #0
 8002716:	f47f aeb6 	bne.w	8002486 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2220      	movs	r2, #32
 800271e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002732:	2300      	movs	r3, #0
 8002734:	e000      	b.n	8002738 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002736:	2302      	movs	r3, #2
  }
}
 8002738:	4618      	mov	r0, r3
 800273a:	3728      	adds	r7, #40	@ 0x28
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	00010004 	.word	0x00010004

08002744 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af02      	add	r7, sp, #8
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	4608      	mov	r0, r1
 800274e:	4611      	mov	r1, r2
 8002750:	461a      	mov	r2, r3
 8002752:	4603      	mov	r3, r0
 8002754:	817b      	strh	r3, [r7, #10]
 8002756:	460b      	mov	r3, r1
 8002758:	813b      	strh	r3, [r7, #8]
 800275a:	4613      	mov	r3, r2
 800275c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800276c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800276e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	2200      	movs	r2, #0
 8002776:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 f960 	bl	8002a40 <I2C_WaitOnFlagUntilTimeout>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00d      	beq.n	80027a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002790:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002794:	d103      	bne.n	800279e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800279c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e05f      	b.n	8002862 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027a2:	897b      	ldrh	r3, [r7, #10]
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	461a      	mov	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80027b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b4:	6a3a      	ldr	r2, [r7, #32]
 80027b6:	492d      	ldr	r1, [pc, #180]	@ (800286c <I2C_RequestMemoryWrite+0x128>)
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f000 f9bb 	bl	8002b34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e04c      	b.n	8002862 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027e0:	6a39      	ldr	r1, [r7, #32]
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 fa46 	bl	8002c74 <I2C_WaitOnTXEFlagUntilTimeout>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00d      	beq.n	800280a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d107      	bne.n	8002806 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002804:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e02b      	b.n	8002862 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800280a:	88fb      	ldrh	r3, [r7, #6]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d105      	bne.n	800281c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002810:	893b      	ldrh	r3, [r7, #8]
 8002812:	b2da      	uxtb	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	611a      	str	r2, [r3, #16]
 800281a:	e021      	b.n	8002860 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800281c:	893b      	ldrh	r3, [r7, #8]
 800281e:	0a1b      	lsrs	r3, r3, #8
 8002820:	b29b      	uxth	r3, r3
 8002822:	b2da      	uxtb	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800282a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800282c:	6a39      	ldr	r1, [r7, #32]
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 fa20 	bl	8002c74 <I2C_WaitOnTXEFlagUntilTimeout>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00d      	beq.n	8002856 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283e:	2b04      	cmp	r3, #4
 8002840:	d107      	bne.n	8002852 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002850:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e005      	b.n	8002862 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002856:	893b      	ldrh	r3, [r7, #8]
 8002858:	b2da      	uxtb	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3718      	adds	r7, #24
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	00010002 	.word	0x00010002

08002870 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b088      	sub	sp, #32
 8002874:	af02      	add	r7, sp, #8
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	4608      	mov	r0, r1
 800287a:	4611      	mov	r1, r2
 800287c:	461a      	mov	r2, r3
 800287e:	4603      	mov	r3, r0
 8002880:	817b      	strh	r3, [r7, #10]
 8002882:	460b      	mov	r3, r1
 8002884:	813b      	strh	r3, [r7, #8]
 8002886:	4613      	mov	r3, r2
 8002888:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002898:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	6a3b      	ldr	r3, [r7, #32]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 f8c2 	bl	8002a40 <I2C_WaitOnFlagUntilTimeout>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00d      	beq.n	80028de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028d0:	d103      	bne.n	80028da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e0aa      	b.n	8002a34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028de:	897b      	ldrh	r3, [r7, #10]
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	461a      	mov	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80028ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f0:	6a3a      	ldr	r2, [r7, #32]
 80028f2:	4952      	ldr	r1, [pc, #328]	@ (8002a3c <I2C_RequestMemoryRead+0x1cc>)
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 f91d 	bl	8002b34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e097      	b.n	8002a34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002904:	2300      	movs	r3, #0
 8002906:	617b      	str	r3, [r7, #20]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	617b      	str	r3, [r7, #20]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	617b      	str	r3, [r7, #20]
 8002918:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800291a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800291c:	6a39      	ldr	r1, [r7, #32]
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 f9a8 	bl	8002c74 <I2C_WaitOnTXEFlagUntilTimeout>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00d      	beq.n	8002946 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292e:	2b04      	cmp	r3, #4
 8002930:	d107      	bne.n	8002942 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002940:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e076      	b.n	8002a34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002946:	88fb      	ldrh	r3, [r7, #6]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d105      	bne.n	8002958 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800294c:	893b      	ldrh	r3, [r7, #8]
 800294e:	b2da      	uxtb	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	611a      	str	r2, [r3, #16]
 8002956:	e021      	b.n	800299c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002958:	893b      	ldrh	r3, [r7, #8]
 800295a:	0a1b      	lsrs	r3, r3, #8
 800295c:	b29b      	uxth	r3, r3
 800295e:	b2da      	uxtb	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002966:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002968:	6a39      	ldr	r1, [r7, #32]
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 f982 	bl	8002c74 <I2C_WaitOnTXEFlagUntilTimeout>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00d      	beq.n	8002992 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297a:	2b04      	cmp	r3, #4
 800297c:	d107      	bne.n	800298e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800298c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e050      	b.n	8002a34 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002992:	893b      	ldrh	r3, [r7, #8]
 8002994:	b2da      	uxtb	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800299c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800299e:	6a39      	ldr	r1, [r7, #32]
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f000 f967 	bl	8002c74 <I2C_WaitOnTXEFlagUntilTimeout>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00d      	beq.n	80029c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b0:	2b04      	cmp	r3, #4
 80029b2:	d107      	bne.n	80029c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e035      	b.n	8002a34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	2200      	movs	r2, #0
 80029e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f000 f82b 	bl	8002a40 <I2C_WaitOnFlagUntilTimeout>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00d      	beq.n	8002a0c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029fe:	d103      	bne.n	8002a08 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a06:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e013      	b.n	8002a34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a0c:	897b      	ldrh	r3, [r7, #10]
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1e:	6a3a      	ldr	r2, [r7, #32]
 8002a20:	4906      	ldr	r1, [pc, #24]	@ (8002a3c <I2C_RequestMemoryRead+0x1cc>)
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 f886 	bl	8002b34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e000      	b.n	8002a34 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	00010002 	.word	0x00010002

08002a40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	603b      	str	r3, [r7, #0]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a50:	e048      	b.n	8002ae4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a58:	d044      	beq.n	8002ae4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a5a:	f7fe ff3f 	bl	80018dc <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d302      	bcc.n	8002a70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d139      	bne.n	8002ae4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	0c1b      	lsrs	r3, r3, #16
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d10d      	bne.n	8002a96 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	43da      	mvns	r2, r3
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	4013      	ands	r3, r2
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	bf0c      	ite	eq
 8002a8c:	2301      	moveq	r3, #1
 8002a8e:	2300      	movne	r3, #0
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	461a      	mov	r2, r3
 8002a94:	e00c      	b.n	8002ab0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	43da      	mvns	r2, r3
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	bf0c      	ite	eq
 8002aa8:	2301      	moveq	r3, #1
 8002aaa:	2300      	movne	r3, #0
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	461a      	mov	r2, r3
 8002ab0:	79fb      	ldrb	r3, [r7, #7]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d116      	bne.n	8002ae4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad0:	f043 0220 	orr.w	r2, r3, #32
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e023      	b.n	8002b2c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	0c1b      	lsrs	r3, r3, #16
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d10d      	bne.n	8002b0a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	43da      	mvns	r2, r3
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	4013      	ands	r3, r2
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	bf0c      	ite	eq
 8002b00:	2301      	moveq	r3, #1
 8002b02:	2300      	movne	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	461a      	mov	r2, r3
 8002b08:	e00c      	b.n	8002b24 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	43da      	mvns	r2, r3
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	4013      	ands	r3, r2
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	bf0c      	ite	eq
 8002b1c:	2301      	moveq	r3, #1
 8002b1e:	2300      	movne	r3, #0
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	461a      	mov	r2, r3
 8002b24:	79fb      	ldrb	r3, [r7, #7]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d093      	beq.n	8002a52 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
 8002b40:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b42:	e071      	b.n	8002c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b52:	d123      	bne.n	8002b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b62:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2220      	movs	r2, #32
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b88:	f043 0204 	orr.w	r2, r3, #4
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e067      	b.n	8002c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba2:	d041      	beq.n	8002c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ba4:	f7fe fe9a 	bl	80018dc <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d302      	bcc.n	8002bba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d136      	bne.n	8002c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	0c1b      	lsrs	r3, r3, #16
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d10c      	bne.n	8002bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	43da      	mvns	r2, r3
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	bf14      	ite	ne
 8002bd6:	2301      	movne	r3, #1
 8002bd8:	2300      	moveq	r3, #0
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	e00b      	b.n	8002bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	43da      	mvns	r2, r3
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	4013      	ands	r3, r2
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	bf14      	ite	ne
 8002bf0:	2301      	movne	r3, #1
 8002bf2:	2300      	moveq	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d016      	beq.n	8002c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2220      	movs	r2, #32
 8002c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c14:	f043 0220 	orr.w	r2, r3, #32
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e021      	b.n	8002c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	0c1b      	lsrs	r3, r3, #16
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d10c      	bne.n	8002c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	43da      	mvns	r2, r3
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	bf14      	ite	ne
 8002c44:	2301      	movne	r3, #1
 8002c46:	2300      	moveq	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	e00b      	b.n	8002c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	43da      	mvns	r2, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	4013      	ands	r3, r2
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	bf14      	ite	ne
 8002c5e:	2301      	movne	r3, #1
 8002c60:	2300      	moveq	r3, #0
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f47f af6d 	bne.w	8002b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c80:	e034      	b.n	8002cec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 f8e3 	bl	8002e4e <I2C_IsAcknowledgeFailed>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e034      	b.n	8002cfc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c98:	d028      	beq.n	8002cec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c9a:	f7fe fe1f 	bl	80018dc <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d302      	bcc.n	8002cb0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d11d      	bne.n	8002cec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cba:	2b80      	cmp	r3, #128	@ 0x80
 8002cbc:	d016      	beq.n	8002cec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd8:	f043 0220 	orr.w	r2, r3, #32
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e007      	b.n	8002cfc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cf6:	2b80      	cmp	r3, #128	@ 0x80
 8002cf8:	d1c3      	bne.n	8002c82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d10:	e034      	b.n	8002d7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 f89b 	bl	8002e4e <I2C_IsAcknowledgeFailed>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e034      	b.n	8002d8c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d28:	d028      	beq.n	8002d7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d2a:	f7fe fdd7 	bl	80018dc <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d302      	bcc.n	8002d40 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d11d      	bne.n	8002d7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	f003 0304 	and.w	r3, r3, #4
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	d016      	beq.n	8002d7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d68:	f043 0220 	orr.w	r2, r3, #32
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e007      	b.n	8002d8c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	f003 0304 	and.w	r3, r3, #4
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d1c3      	bne.n	8002d12 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002da0:	e049      	b.n	8002e36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	f003 0310 	and.w	r3, r3, #16
 8002dac:	2b10      	cmp	r3, #16
 8002dae:	d119      	bne.n	8002de4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f06f 0210 	mvn.w	r2, #16
 8002db8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e030      	b.n	8002e46 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de4:	f7fe fd7a 	bl	80018dc <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d302      	bcc.n	8002dfa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d11d      	bne.n	8002e36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e04:	2b40      	cmp	r3, #64	@ 0x40
 8002e06:	d016      	beq.n	8002e36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2220      	movs	r2, #32
 8002e12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e22:	f043 0220 	orr.w	r2, r3, #32
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e007      	b.n	8002e46 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e40:	2b40      	cmp	r3, #64	@ 0x40
 8002e42:	d1ae      	bne.n	8002da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b083      	sub	sp, #12
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e64:	d11b      	bne.n	8002e9e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e6e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2220      	movs	r2, #32
 8002e7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8a:	f043 0204 	orr.w	r2, r3, #4
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e000      	b.n	8002ea0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e0cc      	b.n	800305a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ec0:	4b68      	ldr	r3, [pc, #416]	@ (8003064 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 030f 	and.w	r3, r3, #15
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d90c      	bls.n	8002ee8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ece:	4b65      	ldr	r3, [pc, #404]	@ (8003064 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	b2d2      	uxtb	r2, r2
 8002ed4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed6:	4b63      	ldr	r3, [pc, #396]	@ (8003064 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 030f 	and.w	r3, r3, #15
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d001      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e0b8      	b.n	800305a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d020      	beq.n	8002f36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d005      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f00:	4b59      	ldr	r3, [pc, #356]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	4a58      	ldr	r2, [pc, #352]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f06:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0308 	and.w	r3, r3, #8
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d005      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f18:	4b53      	ldr	r3, [pc, #332]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	4a52      	ldr	r2, [pc, #328]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f24:	4b50      	ldr	r3, [pc, #320]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	494d      	ldr	r1, [pc, #308]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d044      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d107      	bne.n	8002f5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f4a:	4b47      	ldr	r3, [pc, #284]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d119      	bne.n	8002f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e07f      	b.n	800305a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d003      	beq.n	8002f6a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f66:	2b03      	cmp	r3, #3
 8002f68:	d107      	bne.n	8002f7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f6a:	4b3f      	ldr	r3, [pc, #252]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d109      	bne.n	8002f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e06f      	b.n	800305a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f7a:	4b3b      	ldr	r3, [pc, #236]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e067      	b.n	800305a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f8a:	4b37      	ldr	r3, [pc, #220]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f023 0203 	bic.w	r2, r3, #3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	4934      	ldr	r1, [pc, #208]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f9c:	f7fe fc9e 	bl	80018dc <HAL_GetTick>
 8002fa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa2:	e00a      	b.n	8002fba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa4:	f7fe fc9a 	bl	80018dc <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e04f      	b.n	800305a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fba:	4b2b      	ldr	r3, [pc, #172]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 020c 	and.w	r2, r3, #12
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d1eb      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fcc:	4b25      	ldr	r3, [pc, #148]	@ (8003064 <HAL_RCC_ClockConfig+0x1b8>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 030f 	and.w	r3, r3, #15
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d20c      	bcs.n	8002ff4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fda:	4b22      	ldr	r3, [pc, #136]	@ (8003064 <HAL_RCC_ClockConfig+0x1b8>)
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe2:	4b20      	ldr	r3, [pc, #128]	@ (8003064 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d001      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e032      	b.n	800305a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d008      	beq.n	8003012 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003000:	4b19      	ldr	r3, [pc, #100]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	4916      	ldr	r1, [pc, #88]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 800300e:	4313      	orrs	r3, r2
 8003010:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0308 	and.w	r3, r3, #8
 800301a:	2b00      	cmp	r3, #0
 800301c:	d009      	beq.n	8003032 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800301e:	4b12      	ldr	r3, [pc, #72]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	490e      	ldr	r1, [pc, #56]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 800302e:	4313      	orrs	r3, r2
 8003030:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003032:	f000 f855 	bl	80030e0 <HAL_RCC_GetSysClockFreq>
 8003036:	4602      	mov	r2, r0
 8003038:	4b0b      	ldr	r3, [pc, #44]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	091b      	lsrs	r3, r3, #4
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	490a      	ldr	r1, [pc, #40]	@ (800306c <HAL_RCC_ClockConfig+0x1c0>)
 8003044:	5ccb      	ldrb	r3, [r1, r3]
 8003046:	fa22 f303 	lsr.w	r3, r2, r3
 800304a:	4a09      	ldr	r2, [pc, #36]	@ (8003070 <HAL_RCC_ClockConfig+0x1c4>)
 800304c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800304e:	4b09      	ldr	r3, [pc, #36]	@ (8003074 <HAL_RCC_ClockConfig+0x1c8>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f7fe fbfe 	bl	8001854 <HAL_InitTick>

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	40023c00 	.word	0x40023c00
 8003068:	40023800 	.word	0x40023800
 800306c:	08004c30 	.word	0x08004c30
 8003070:	20000000 	.word	0x20000000
 8003074:	20000004 	.word	0x20000004

08003078 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800307c:	4b03      	ldr	r3, [pc, #12]	@ (800308c <HAL_RCC_GetHCLKFreq+0x14>)
 800307e:	681b      	ldr	r3, [r3, #0]
}
 8003080:	4618      	mov	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	20000000 	.word	0x20000000

08003090 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003094:	f7ff fff0 	bl	8003078 <HAL_RCC_GetHCLKFreq>
 8003098:	4602      	mov	r2, r0
 800309a:	4b05      	ldr	r3, [pc, #20]	@ (80030b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	0a9b      	lsrs	r3, r3, #10
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	4903      	ldr	r1, [pc, #12]	@ (80030b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030a6:	5ccb      	ldrb	r3, [r1, r3]
 80030a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40023800 	.word	0x40023800
 80030b4:	08004c40 	.word	0x08004c40

080030b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030bc:	f7ff ffdc 	bl	8003078 <HAL_RCC_GetHCLKFreq>
 80030c0:	4602      	mov	r2, r0
 80030c2:	4b05      	ldr	r3, [pc, #20]	@ (80030d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	0b5b      	lsrs	r3, r3, #13
 80030c8:	f003 0307 	and.w	r3, r3, #7
 80030cc:	4903      	ldr	r1, [pc, #12]	@ (80030dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80030ce:	5ccb      	ldrb	r3, [r1, r3]
 80030d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40023800 	.word	0x40023800
 80030dc:	08004c40 	.word	0x08004c40

080030e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030e4:	b0a6      	sub	sp, #152	@ 0x98
 80030e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80030e8:	2300      	movs	r3, #0
 80030ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80030ee:	2300      	movs	r3, #0
 80030f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8003100:	2300      	movs	r3, #0
 8003102:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003106:	4bc8      	ldr	r3, [pc, #800]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x348>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 030c 	and.w	r3, r3, #12
 800310e:	2b0c      	cmp	r3, #12
 8003110:	f200 817e 	bhi.w	8003410 <HAL_RCC_GetSysClockFreq+0x330>
 8003114:	a201      	add	r2, pc, #4	@ (adr r2, 800311c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311a:	bf00      	nop
 800311c:	08003151 	.word	0x08003151
 8003120:	08003411 	.word	0x08003411
 8003124:	08003411 	.word	0x08003411
 8003128:	08003411 	.word	0x08003411
 800312c:	08003159 	.word	0x08003159
 8003130:	08003411 	.word	0x08003411
 8003134:	08003411 	.word	0x08003411
 8003138:	08003411 	.word	0x08003411
 800313c:	08003161 	.word	0x08003161
 8003140:	08003411 	.word	0x08003411
 8003144:	08003411 	.word	0x08003411
 8003148:	08003411 	.word	0x08003411
 800314c:	080032cb 	.word	0x080032cb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003150:	4bb6      	ldr	r3, [pc, #728]	@ (800342c <HAL_RCC_GetSysClockFreq+0x34c>)
 8003152:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003156:	e15f      	b.n	8003418 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003158:	4bb5      	ldr	r3, [pc, #724]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x350>)
 800315a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800315e:	e15b      	b.n	8003418 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003160:	4bb1      	ldr	r3, [pc, #708]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x348>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003168:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800316c:	4bae      	ldr	r3, [pc, #696]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x348>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d031      	beq.n	80031dc <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003178:	4bab      	ldr	r3, [pc, #684]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x348>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	099b      	lsrs	r3, r3, #6
 800317e:	2200      	movs	r2, #0
 8003180:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003182:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003184:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800318a:	663b      	str	r3, [r7, #96]	@ 0x60
 800318c:	2300      	movs	r3, #0
 800318e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003190:	4ba7      	ldr	r3, [pc, #668]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x350>)
 8003192:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003196:	462a      	mov	r2, r5
 8003198:	fb03 f202 	mul.w	r2, r3, r2
 800319c:	2300      	movs	r3, #0
 800319e:	4621      	mov	r1, r4
 80031a0:	fb01 f303 	mul.w	r3, r1, r3
 80031a4:	4413      	add	r3, r2
 80031a6:	4aa2      	ldr	r2, [pc, #648]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x350>)
 80031a8:	4621      	mov	r1, r4
 80031aa:	fba1 1202 	umull	r1, r2, r1, r2
 80031ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80031b0:	460a      	mov	r2, r1
 80031b2:	67ba      	str	r2, [r7, #120]	@ 0x78
 80031b4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80031b6:	4413      	add	r3, r2
 80031b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80031ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031be:	2200      	movs	r2, #0
 80031c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80031c2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80031c4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80031c8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80031cc:	f7fd fcc2 	bl	8000b54 <__aeabi_uldivmod>
 80031d0:	4602      	mov	r2, r0
 80031d2:	460b      	mov	r3, r1
 80031d4:	4613      	mov	r3, r2
 80031d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80031da:	e064      	b.n	80032a6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031dc:	4b92      	ldr	r3, [pc, #584]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x348>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	099b      	lsrs	r3, r3, #6
 80031e2:	2200      	movs	r2, #0
 80031e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80031e6:	657a      	str	r2, [r7, #84]	@ 0x54
 80031e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031f0:	2300      	movs	r3, #0
 80031f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031f4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80031f8:	4622      	mov	r2, r4
 80031fa:	462b      	mov	r3, r5
 80031fc:	f04f 0000 	mov.w	r0, #0
 8003200:	f04f 0100 	mov.w	r1, #0
 8003204:	0159      	lsls	r1, r3, #5
 8003206:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800320a:	0150      	lsls	r0, r2, #5
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	4621      	mov	r1, r4
 8003212:	1a51      	subs	r1, r2, r1
 8003214:	6139      	str	r1, [r7, #16]
 8003216:	4629      	mov	r1, r5
 8003218:	eb63 0301 	sbc.w	r3, r3, r1
 800321c:	617b      	str	r3, [r7, #20]
 800321e:	f04f 0200 	mov.w	r2, #0
 8003222:	f04f 0300 	mov.w	r3, #0
 8003226:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800322a:	4659      	mov	r1, fp
 800322c:	018b      	lsls	r3, r1, #6
 800322e:	4651      	mov	r1, sl
 8003230:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003234:	4651      	mov	r1, sl
 8003236:	018a      	lsls	r2, r1, #6
 8003238:	4651      	mov	r1, sl
 800323a:	ebb2 0801 	subs.w	r8, r2, r1
 800323e:	4659      	mov	r1, fp
 8003240:	eb63 0901 	sbc.w	r9, r3, r1
 8003244:	f04f 0200 	mov.w	r2, #0
 8003248:	f04f 0300 	mov.w	r3, #0
 800324c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003250:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003254:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003258:	4690      	mov	r8, r2
 800325a:	4699      	mov	r9, r3
 800325c:	4623      	mov	r3, r4
 800325e:	eb18 0303 	adds.w	r3, r8, r3
 8003262:	60bb      	str	r3, [r7, #8]
 8003264:	462b      	mov	r3, r5
 8003266:	eb49 0303 	adc.w	r3, r9, r3
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	f04f 0200 	mov.w	r2, #0
 8003270:	f04f 0300 	mov.w	r3, #0
 8003274:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003278:	4629      	mov	r1, r5
 800327a:	028b      	lsls	r3, r1, #10
 800327c:	4621      	mov	r1, r4
 800327e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003282:	4621      	mov	r1, r4
 8003284:	028a      	lsls	r2, r1, #10
 8003286:	4610      	mov	r0, r2
 8003288:	4619      	mov	r1, r3
 800328a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800328e:	2200      	movs	r2, #0
 8003290:	643b      	str	r3, [r7, #64]	@ 0x40
 8003292:	647a      	str	r2, [r7, #68]	@ 0x44
 8003294:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003298:	f7fd fc5c 	bl	8000b54 <__aeabi_uldivmod>
 800329c:	4602      	mov	r2, r0
 800329e:	460b      	mov	r3, r1
 80032a0:	4613      	mov	r3, r2
 80032a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80032a6:	4b60      	ldr	r3, [pc, #384]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x348>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	0c1b      	lsrs	r3, r3, #16
 80032ac:	f003 0303 	and.w	r3, r3, #3
 80032b0:	3301      	adds	r3, #1
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80032b8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80032bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80032c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80032c8:	e0a6      	b.n	8003418 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032ca:	4b57      	ldr	r3, [pc, #348]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x348>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032d6:	4b54      	ldr	r3, [pc, #336]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x348>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d02a      	beq.n	8003338 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032e2:	4b51      	ldr	r3, [pc, #324]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x348>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	099b      	lsrs	r3, r3, #6
 80032e8:	2200      	movs	r2, #0
 80032ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80032ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80032ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80032f4:	2100      	movs	r1, #0
 80032f6:	4b4e      	ldr	r3, [pc, #312]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x350>)
 80032f8:	fb03 f201 	mul.w	r2, r3, r1
 80032fc:	2300      	movs	r3, #0
 80032fe:	fb00 f303 	mul.w	r3, r0, r3
 8003302:	4413      	add	r3, r2
 8003304:	4a4a      	ldr	r2, [pc, #296]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x350>)
 8003306:	fba0 1202 	umull	r1, r2, r0, r2
 800330a:	677a      	str	r2, [r7, #116]	@ 0x74
 800330c:	460a      	mov	r2, r1
 800330e:	673a      	str	r2, [r7, #112]	@ 0x70
 8003310:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003312:	4413      	add	r3, r2
 8003314:	677b      	str	r3, [r7, #116]	@ 0x74
 8003316:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800331a:	2200      	movs	r2, #0
 800331c:	633b      	str	r3, [r7, #48]	@ 0x30
 800331e:	637a      	str	r2, [r7, #52]	@ 0x34
 8003320:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003324:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003328:	f7fd fc14 	bl	8000b54 <__aeabi_uldivmod>
 800332c:	4602      	mov	r2, r0
 800332e:	460b      	mov	r3, r1
 8003330:	4613      	mov	r3, r2
 8003332:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003336:	e05b      	b.n	80033f0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003338:	4b3b      	ldr	r3, [pc, #236]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x348>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	099b      	lsrs	r3, r3, #6
 800333e:	2200      	movs	r2, #0
 8003340:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003342:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800334a:	623b      	str	r3, [r7, #32]
 800334c:	2300      	movs	r3, #0
 800334e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003350:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003354:	4642      	mov	r2, r8
 8003356:	464b      	mov	r3, r9
 8003358:	f04f 0000 	mov.w	r0, #0
 800335c:	f04f 0100 	mov.w	r1, #0
 8003360:	0159      	lsls	r1, r3, #5
 8003362:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003366:	0150      	lsls	r0, r2, #5
 8003368:	4602      	mov	r2, r0
 800336a:	460b      	mov	r3, r1
 800336c:	4641      	mov	r1, r8
 800336e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003372:	4649      	mov	r1, r9
 8003374:	eb63 0b01 	sbc.w	fp, r3, r1
 8003378:	f04f 0200 	mov.w	r2, #0
 800337c:	f04f 0300 	mov.w	r3, #0
 8003380:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003384:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003388:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800338c:	ebb2 040a 	subs.w	r4, r2, sl
 8003390:	eb63 050b 	sbc.w	r5, r3, fp
 8003394:	f04f 0200 	mov.w	r2, #0
 8003398:	f04f 0300 	mov.w	r3, #0
 800339c:	00eb      	lsls	r3, r5, #3
 800339e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033a2:	00e2      	lsls	r2, r4, #3
 80033a4:	4614      	mov	r4, r2
 80033a6:	461d      	mov	r5, r3
 80033a8:	4643      	mov	r3, r8
 80033aa:	18e3      	adds	r3, r4, r3
 80033ac:	603b      	str	r3, [r7, #0]
 80033ae:	464b      	mov	r3, r9
 80033b0:	eb45 0303 	adc.w	r3, r5, r3
 80033b4:	607b      	str	r3, [r7, #4]
 80033b6:	f04f 0200 	mov.w	r2, #0
 80033ba:	f04f 0300 	mov.w	r3, #0
 80033be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033c2:	4629      	mov	r1, r5
 80033c4:	028b      	lsls	r3, r1, #10
 80033c6:	4621      	mov	r1, r4
 80033c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033cc:	4621      	mov	r1, r4
 80033ce:	028a      	lsls	r2, r1, #10
 80033d0:	4610      	mov	r0, r2
 80033d2:	4619      	mov	r1, r3
 80033d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033d8:	2200      	movs	r2, #0
 80033da:	61bb      	str	r3, [r7, #24]
 80033dc:	61fa      	str	r2, [r7, #28]
 80033de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033e2:	f7fd fbb7 	bl	8000b54 <__aeabi_uldivmod>
 80033e6:	4602      	mov	r2, r0
 80033e8:	460b      	mov	r3, r1
 80033ea:	4613      	mov	r3, r2
 80033ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80033f0:	4b0d      	ldr	r3, [pc, #52]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x348>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	0f1b      	lsrs	r3, r3, #28
 80033f6:	f003 0307 	and.w	r3, r3, #7
 80033fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80033fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003402:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003406:	fbb2 f3f3 	udiv	r3, r2, r3
 800340a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800340e:	e003      	b.n	8003418 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003410:	4b06      	ldr	r3, [pc, #24]	@ (800342c <HAL_RCC_GetSysClockFreq+0x34c>)
 8003412:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003416:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003418:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 800341c:	4618      	mov	r0, r3
 800341e:	3798      	adds	r7, #152	@ 0x98
 8003420:	46bd      	mov	sp, r7
 8003422:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003426:	bf00      	nop
 8003428:	40023800 	.word	0x40023800
 800342c:	00f42400 	.word	0x00f42400
 8003430:	017d7840 	.word	0x017d7840

08003434 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e28d      	b.n	8003962 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	f000 8083 	beq.w	800355a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003454:	4b94      	ldr	r3, [pc, #592]	@ (80036a8 <HAL_RCC_OscConfig+0x274>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 030c 	and.w	r3, r3, #12
 800345c:	2b04      	cmp	r3, #4
 800345e:	d019      	beq.n	8003494 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003460:	4b91      	ldr	r3, [pc, #580]	@ (80036a8 <HAL_RCC_OscConfig+0x274>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f003 030c 	and.w	r3, r3, #12
        || \
 8003468:	2b08      	cmp	r3, #8
 800346a:	d106      	bne.n	800347a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800346c:	4b8e      	ldr	r3, [pc, #568]	@ (80036a8 <HAL_RCC_OscConfig+0x274>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003474:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003478:	d00c      	beq.n	8003494 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800347a:	4b8b      	ldr	r3, [pc, #556]	@ (80036a8 <HAL_RCC_OscConfig+0x274>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003482:	2b0c      	cmp	r3, #12
 8003484:	d112      	bne.n	80034ac <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003486:	4b88      	ldr	r3, [pc, #544]	@ (80036a8 <HAL_RCC_OscConfig+0x274>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800348e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003492:	d10b      	bne.n	80034ac <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003494:	4b84      	ldr	r3, [pc, #528]	@ (80036a8 <HAL_RCC_OscConfig+0x274>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d05b      	beq.n	8003558 <HAL_RCC_OscConfig+0x124>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d157      	bne.n	8003558 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e25a      	b.n	8003962 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034b4:	d106      	bne.n	80034c4 <HAL_RCC_OscConfig+0x90>
 80034b6:	4b7c      	ldr	r3, [pc, #496]	@ (80036a8 <HAL_RCC_OscConfig+0x274>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a7b      	ldr	r2, [pc, #492]	@ (80036a8 <HAL_RCC_OscConfig+0x274>)
 80034bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034c0:	6013      	str	r3, [r2, #0]
 80034c2:	e01d      	b.n	8003500 <HAL_RCC_OscConfig+0xcc>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034cc:	d10c      	bne.n	80034e8 <HAL_RCC_OscConfig+0xb4>
 80034ce:	4b76      	ldr	r3, [pc, #472]	@ (80036a8 <HAL_RCC_OscConfig+0x274>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a75      	ldr	r2, [pc, #468]	@ (80036a8 <HAL_RCC_OscConfig+0x274>)
 80034d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034d8:	6013      	str	r3, [r2, #0]
 80034da:	4b73      	ldr	r3, [pc, #460]	@ (80036a8 <HAL_RCC_OscConfig+0x274>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a72      	ldr	r2, [pc, #456]	@ (80036a8 <HAL_RCC_OscConfig+0x274>)
 80034e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034e4:	6013      	str	r3, [r2, #0]
 80034e6:	e00b      	b.n	8003500 <HAL_RCC_OscConfig+0xcc>
 80034e8:	4b6f      	ldr	r3, [pc, #444]	@ (80036a8 <HAL_RCC_OscConfig+0x274>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a6e      	ldr	r2, [pc, #440]	@ (80036a8 <HAL_RCC_OscConfig+0x274>)
 80034ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034f2:	6013      	str	r3, [r2, #0]
 80034f4:	4b6c      	ldr	r3, [pc, #432]	@ (80036a8 <HAL_RCC_OscConfig+0x274>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a6b      	ldr	r2, [pc, #428]	@ (80036a8 <HAL_RCC_OscConfig+0x274>)
 80034fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d013      	beq.n	8003530 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003508:	f7fe f9e8 	bl	80018dc <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003510:	f7fe f9e4 	bl	80018dc <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b64      	cmp	r3, #100	@ 0x64
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e21f      	b.n	8003962 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003522:	4b61      	ldr	r3, [pc, #388]	@ (80036a8 <HAL_RCC_OscConfig+0x274>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d0f0      	beq.n	8003510 <HAL_RCC_OscConfig+0xdc>
 800352e:	e014      	b.n	800355a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003530:	f7fe f9d4 	bl	80018dc <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003538:	f7fe f9d0 	bl	80018dc <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b64      	cmp	r3, #100	@ 0x64
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e20b      	b.n	8003962 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800354a:	4b57      	ldr	r3, [pc, #348]	@ (80036a8 <HAL_RCC_OscConfig+0x274>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1f0      	bne.n	8003538 <HAL_RCC_OscConfig+0x104>
 8003556:	e000      	b.n	800355a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d06f      	beq.n	8003646 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003566:	4b50      	ldr	r3, [pc, #320]	@ (80036a8 <HAL_RCC_OscConfig+0x274>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 030c 	and.w	r3, r3, #12
 800356e:	2b00      	cmp	r3, #0
 8003570:	d017      	beq.n	80035a2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003572:	4b4d      	ldr	r3, [pc, #308]	@ (80036a8 <HAL_RCC_OscConfig+0x274>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 030c 	and.w	r3, r3, #12
        || \
 800357a:	2b08      	cmp	r3, #8
 800357c:	d105      	bne.n	800358a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800357e:	4b4a      	ldr	r3, [pc, #296]	@ (80036a8 <HAL_RCC_OscConfig+0x274>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00b      	beq.n	80035a2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800358a:	4b47      	ldr	r3, [pc, #284]	@ (80036a8 <HAL_RCC_OscConfig+0x274>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003592:	2b0c      	cmp	r3, #12
 8003594:	d11c      	bne.n	80035d0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003596:	4b44      	ldr	r3, [pc, #272]	@ (80036a8 <HAL_RCC_OscConfig+0x274>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d116      	bne.n	80035d0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035a2:	4b41      	ldr	r3, [pc, #260]	@ (80036a8 <HAL_RCC_OscConfig+0x274>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d005      	beq.n	80035ba <HAL_RCC_OscConfig+0x186>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d001      	beq.n	80035ba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e1d3      	b.n	8003962 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ba:	4b3b      	ldr	r3, [pc, #236]	@ (80036a8 <HAL_RCC_OscConfig+0x274>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	4937      	ldr	r1, [pc, #220]	@ (80036a8 <HAL_RCC_OscConfig+0x274>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ce:	e03a      	b.n	8003646 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d020      	beq.n	800361a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035d8:	4b34      	ldr	r3, [pc, #208]	@ (80036ac <HAL_RCC_OscConfig+0x278>)
 80035da:	2201      	movs	r2, #1
 80035dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035de:	f7fe f97d 	bl	80018dc <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035e6:	f7fe f979 	bl	80018dc <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e1b4      	b.n	8003962 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f8:	4b2b      	ldr	r3, [pc, #172]	@ (80036a8 <HAL_RCC_OscConfig+0x274>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0f0      	beq.n	80035e6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003604:	4b28      	ldr	r3, [pc, #160]	@ (80036a8 <HAL_RCC_OscConfig+0x274>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	4925      	ldr	r1, [pc, #148]	@ (80036a8 <HAL_RCC_OscConfig+0x274>)
 8003614:	4313      	orrs	r3, r2
 8003616:	600b      	str	r3, [r1, #0]
 8003618:	e015      	b.n	8003646 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800361a:	4b24      	ldr	r3, [pc, #144]	@ (80036ac <HAL_RCC_OscConfig+0x278>)
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003620:	f7fe f95c 	bl	80018dc <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003628:	f7fe f958 	bl	80018dc <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e193      	b.n	8003962 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800363a:	4b1b      	ldr	r3, [pc, #108]	@ (80036a8 <HAL_RCC_OscConfig+0x274>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1f0      	bne.n	8003628 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0308 	and.w	r3, r3, #8
 800364e:	2b00      	cmp	r3, #0
 8003650:	d036      	beq.n	80036c0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d016      	beq.n	8003688 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800365a:	4b15      	ldr	r3, [pc, #84]	@ (80036b0 <HAL_RCC_OscConfig+0x27c>)
 800365c:	2201      	movs	r2, #1
 800365e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003660:	f7fe f93c 	bl	80018dc <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003668:	f7fe f938 	bl	80018dc <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e173      	b.n	8003962 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800367a:	4b0b      	ldr	r3, [pc, #44]	@ (80036a8 <HAL_RCC_OscConfig+0x274>)
 800367c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d0f0      	beq.n	8003668 <HAL_RCC_OscConfig+0x234>
 8003686:	e01b      	b.n	80036c0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003688:	4b09      	ldr	r3, [pc, #36]	@ (80036b0 <HAL_RCC_OscConfig+0x27c>)
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800368e:	f7fe f925 	bl	80018dc <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003694:	e00e      	b.n	80036b4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003696:	f7fe f921 	bl	80018dc <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d907      	bls.n	80036b4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e15c      	b.n	8003962 <HAL_RCC_OscConfig+0x52e>
 80036a8:	40023800 	.word	0x40023800
 80036ac:	42470000 	.word	0x42470000
 80036b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036b4:	4b8a      	ldr	r3, [pc, #552]	@ (80038e0 <HAL_RCC_OscConfig+0x4ac>)
 80036b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1ea      	bne.n	8003696 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 8097 	beq.w	80037fc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ce:	2300      	movs	r3, #0
 80036d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036d2:	4b83      	ldr	r3, [pc, #524]	@ (80038e0 <HAL_RCC_OscConfig+0x4ac>)
 80036d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10f      	bne.n	80036fe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036de:	2300      	movs	r3, #0
 80036e0:	60bb      	str	r3, [r7, #8]
 80036e2:	4b7f      	ldr	r3, [pc, #508]	@ (80038e0 <HAL_RCC_OscConfig+0x4ac>)
 80036e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e6:	4a7e      	ldr	r2, [pc, #504]	@ (80038e0 <HAL_RCC_OscConfig+0x4ac>)
 80036e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80036ee:	4b7c      	ldr	r3, [pc, #496]	@ (80038e0 <HAL_RCC_OscConfig+0x4ac>)
 80036f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036f6:	60bb      	str	r3, [r7, #8]
 80036f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036fa:	2301      	movs	r3, #1
 80036fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036fe:	4b79      	ldr	r3, [pc, #484]	@ (80038e4 <HAL_RCC_OscConfig+0x4b0>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003706:	2b00      	cmp	r3, #0
 8003708:	d118      	bne.n	800373c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800370a:	4b76      	ldr	r3, [pc, #472]	@ (80038e4 <HAL_RCC_OscConfig+0x4b0>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a75      	ldr	r2, [pc, #468]	@ (80038e4 <HAL_RCC_OscConfig+0x4b0>)
 8003710:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003714:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003716:	f7fe f8e1 	bl	80018dc <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800371c:	e008      	b.n	8003730 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800371e:	f7fe f8dd 	bl	80018dc <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e118      	b.n	8003962 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003730:	4b6c      	ldr	r3, [pc, #432]	@ (80038e4 <HAL_RCC_OscConfig+0x4b0>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0f0      	beq.n	800371e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d106      	bne.n	8003752 <HAL_RCC_OscConfig+0x31e>
 8003744:	4b66      	ldr	r3, [pc, #408]	@ (80038e0 <HAL_RCC_OscConfig+0x4ac>)
 8003746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003748:	4a65      	ldr	r2, [pc, #404]	@ (80038e0 <HAL_RCC_OscConfig+0x4ac>)
 800374a:	f043 0301 	orr.w	r3, r3, #1
 800374e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003750:	e01c      	b.n	800378c <HAL_RCC_OscConfig+0x358>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	2b05      	cmp	r3, #5
 8003758:	d10c      	bne.n	8003774 <HAL_RCC_OscConfig+0x340>
 800375a:	4b61      	ldr	r3, [pc, #388]	@ (80038e0 <HAL_RCC_OscConfig+0x4ac>)
 800375c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800375e:	4a60      	ldr	r2, [pc, #384]	@ (80038e0 <HAL_RCC_OscConfig+0x4ac>)
 8003760:	f043 0304 	orr.w	r3, r3, #4
 8003764:	6713      	str	r3, [r2, #112]	@ 0x70
 8003766:	4b5e      	ldr	r3, [pc, #376]	@ (80038e0 <HAL_RCC_OscConfig+0x4ac>)
 8003768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800376a:	4a5d      	ldr	r2, [pc, #372]	@ (80038e0 <HAL_RCC_OscConfig+0x4ac>)
 800376c:	f043 0301 	orr.w	r3, r3, #1
 8003770:	6713      	str	r3, [r2, #112]	@ 0x70
 8003772:	e00b      	b.n	800378c <HAL_RCC_OscConfig+0x358>
 8003774:	4b5a      	ldr	r3, [pc, #360]	@ (80038e0 <HAL_RCC_OscConfig+0x4ac>)
 8003776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003778:	4a59      	ldr	r2, [pc, #356]	@ (80038e0 <HAL_RCC_OscConfig+0x4ac>)
 800377a:	f023 0301 	bic.w	r3, r3, #1
 800377e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003780:	4b57      	ldr	r3, [pc, #348]	@ (80038e0 <HAL_RCC_OscConfig+0x4ac>)
 8003782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003784:	4a56      	ldr	r2, [pc, #344]	@ (80038e0 <HAL_RCC_OscConfig+0x4ac>)
 8003786:	f023 0304 	bic.w	r3, r3, #4
 800378a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d015      	beq.n	80037c0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003794:	f7fe f8a2 	bl	80018dc <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800379a:	e00a      	b.n	80037b2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800379c:	f7fe f89e 	bl	80018dc <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e0d7      	b.n	8003962 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b2:	4b4b      	ldr	r3, [pc, #300]	@ (80038e0 <HAL_RCC_OscConfig+0x4ac>)
 80037b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0ee      	beq.n	800379c <HAL_RCC_OscConfig+0x368>
 80037be:	e014      	b.n	80037ea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c0:	f7fe f88c 	bl	80018dc <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037c6:	e00a      	b.n	80037de <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037c8:	f7fe f888 	bl	80018dc <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e0c1      	b.n	8003962 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037de:	4b40      	ldr	r3, [pc, #256]	@ (80038e0 <HAL_RCC_OscConfig+0x4ac>)
 80037e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1ee      	bne.n	80037c8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037ea:	7dfb      	ldrb	r3, [r7, #23]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d105      	bne.n	80037fc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037f0:	4b3b      	ldr	r3, [pc, #236]	@ (80038e0 <HAL_RCC_OscConfig+0x4ac>)
 80037f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f4:	4a3a      	ldr	r2, [pc, #232]	@ (80038e0 <HAL_RCC_OscConfig+0x4ac>)
 80037f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 80ad 	beq.w	8003960 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003806:	4b36      	ldr	r3, [pc, #216]	@ (80038e0 <HAL_RCC_OscConfig+0x4ac>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f003 030c 	and.w	r3, r3, #12
 800380e:	2b08      	cmp	r3, #8
 8003810:	d060      	beq.n	80038d4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	2b02      	cmp	r3, #2
 8003818:	d145      	bne.n	80038a6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800381a:	4b33      	ldr	r3, [pc, #204]	@ (80038e8 <HAL_RCC_OscConfig+0x4b4>)
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003820:	f7fe f85c 	bl	80018dc <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003828:	f7fe f858 	bl	80018dc <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e093      	b.n	8003962 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800383a:	4b29      	ldr	r3, [pc, #164]	@ (80038e0 <HAL_RCC_OscConfig+0x4ac>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1f0      	bne.n	8003828 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	69da      	ldr	r2, [r3, #28]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003854:	019b      	lsls	r3, r3, #6
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800385c:	085b      	lsrs	r3, r3, #1
 800385e:	3b01      	subs	r3, #1
 8003860:	041b      	lsls	r3, r3, #16
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003868:	061b      	lsls	r3, r3, #24
 800386a:	431a      	orrs	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003870:	071b      	lsls	r3, r3, #28
 8003872:	491b      	ldr	r1, [pc, #108]	@ (80038e0 <HAL_RCC_OscConfig+0x4ac>)
 8003874:	4313      	orrs	r3, r2
 8003876:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003878:	4b1b      	ldr	r3, [pc, #108]	@ (80038e8 <HAL_RCC_OscConfig+0x4b4>)
 800387a:	2201      	movs	r2, #1
 800387c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387e:	f7fe f82d 	bl	80018dc <HAL_GetTick>
 8003882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003884:	e008      	b.n	8003898 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003886:	f7fe f829 	bl	80018dc <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d901      	bls.n	8003898 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e064      	b.n	8003962 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003898:	4b11      	ldr	r3, [pc, #68]	@ (80038e0 <HAL_RCC_OscConfig+0x4ac>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d0f0      	beq.n	8003886 <HAL_RCC_OscConfig+0x452>
 80038a4:	e05c      	b.n	8003960 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a6:	4b10      	ldr	r3, [pc, #64]	@ (80038e8 <HAL_RCC_OscConfig+0x4b4>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ac:	f7fe f816 	bl	80018dc <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b2:	e008      	b.n	80038c6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b4:	f7fe f812 	bl	80018dc <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e04d      	b.n	8003962 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038c6:	4b06      	ldr	r3, [pc, #24]	@ (80038e0 <HAL_RCC_OscConfig+0x4ac>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1f0      	bne.n	80038b4 <HAL_RCC_OscConfig+0x480>
 80038d2:	e045      	b.n	8003960 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d107      	bne.n	80038ec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e040      	b.n	8003962 <HAL_RCC_OscConfig+0x52e>
 80038e0:	40023800 	.word	0x40023800
 80038e4:	40007000 	.word	0x40007000
 80038e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038ec:	4b1f      	ldr	r3, [pc, #124]	@ (800396c <HAL_RCC_OscConfig+0x538>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d030      	beq.n	800395c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003904:	429a      	cmp	r2, r3
 8003906:	d129      	bne.n	800395c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003912:	429a      	cmp	r2, r3
 8003914:	d122      	bne.n	800395c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800391c:	4013      	ands	r3, r2
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003922:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003924:	4293      	cmp	r3, r2
 8003926:	d119      	bne.n	800395c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003932:	085b      	lsrs	r3, r3, #1
 8003934:	3b01      	subs	r3, #1
 8003936:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003938:	429a      	cmp	r2, r3
 800393a:	d10f      	bne.n	800395c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003946:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003948:	429a      	cmp	r2, r3
 800394a:	d107      	bne.n	800395c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003956:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003958:	429a      	cmp	r2, r3
 800395a:	d001      	beq.n	8003960 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e000      	b.n	8003962 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3718      	adds	r7, #24
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40023800 	.word	0x40023800

08003970 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e041      	b.n	8003a06 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d106      	bne.n	800399c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7fd fd96 	bl	80014c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2202      	movs	r2, #2
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3304      	adds	r3, #4
 80039ac:	4619      	mov	r1, r3
 80039ae:	4610      	mov	r0, r2
 80039b0:	f000 f8f0 	bl	8003b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
	...

08003a10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d101      	bne.n	8003a2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	e0ae      	b.n	8003b8c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2b0c      	cmp	r3, #12
 8003a3a:	f200 809f 	bhi.w	8003b7c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a3e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a44:	08003a79 	.word	0x08003a79
 8003a48:	08003b7d 	.word	0x08003b7d
 8003a4c:	08003b7d 	.word	0x08003b7d
 8003a50:	08003b7d 	.word	0x08003b7d
 8003a54:	08003ab9 	.word	0x08003ab9
 8003a58:	08003b7d 	.word	0x08003b7d
 8003a5c:	08003b7d 	.word	0x08003b7d
 8003a60:	08003b7d 	.word	0x08003b7d
 8003a64:	08003afb 	.word	0x08003afb
 8003a68:	08003b7d 	.word	0x08003b7d
 8003a6c:	08003b7d 	.word	0x08003b7d
 8003a70:	08003b7d 	.word	0x08003b7d
 8003a74:	08003b3b 	.word	0x08003b3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68b9      	ldr	r1, [r7, #8]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 f934 	bl	8003cec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	699a      	ldr	r2, [r3, #24]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 0208 	orr.w	r2, r2, #8
 8003a92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	699a      	ldr	r2, [r3, #24]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0204 	bic.w	r2, r2, #4
 8003aa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6999      	ldr	r1, [r3, #24]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	691a      	ldr	r2, [r3, #16]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	619a      	str	r2, [r3, #24]
      break;
 8003ab6:	e064      	b.n	8003b82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68b9      	ldr	r1, [r7, #8]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 f984 	bl	8003dcc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	699a      	ldr	r2, [r3, #24]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ad2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	699a      	ldr	r2, [r3, #24]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ae2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6999      	ldr	r1, [r3, #24]
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	021a      	lsls	r2, r3, #8
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	619a      	str	r2, [r3, #24]
      break;
 8003af8:	e043      	b.n	8003b82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68b9      	ldr	r1, [r7, #8]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f000 f9d9 	bl	8003eb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	69da      	ldr	r2, [r3, #28]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f042 0208 	orr.w	r2, r2, #8
 8003b14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	69da      	ldr	r2, [r3, #28]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 0204 	bic.w	r2, r2, #4
 8003b24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	69d9      	ldr	r1, [r3, #28]
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	691a      	ldr	r2, [r3, #16]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	61da      	str	r2, [r3, #28]
      break;
 8003b38:	e023      	b.n	8003b82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68b9      	ldr	r1, [r7, #8]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f000 fa2d 	bl	8003fa0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	69da      	ldr	r2, [r3, #28]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	69da      	ldr	r2, [r3, #28]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	69d9      	ldr	r1, [r3, #28]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	021a      	lsls	r2, r3, #8
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	61da      	str	r2, [r3, #28]
      break;
 8003b7a:	e002      	b.n	8003b82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	75fb      	strb	r3, [r7, #23]
      break;
 8003b80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3718      	adds	r7, #24
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a46      	ldr	r2, [pc, #280]	@ (8003cc0 <TIM_Base_SetConfig+0x12c>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d013      	beq.n	8003bd4 <TIM_Base_SetConfig+0x40>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bb2:	d00f      	beq.n	8003bd4 <TIM_Base_SetConfig+0x40>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a43      	ldr	r2, [pc, #268]	@ (8003cc4 <TIM_Base_SetConfig+0x130>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d00b      	beq.n	8003bd4 <TIM_Base_SetConfig+0x40>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a42      	ldr	r2, [pc, #264]	@ (8003cc8 <TIM_Base_SetConfig+0x134>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d007      	beq.n	8003bd4 <TIM_Base_SetConfig+0x40>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a41      	ldr	r2, [pc, #260]	@ (8003ccc <TIM_Base_SetConfig+0x138>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d003      	beq.n	8003bd4 <TIM_Base_SetConfig+0x40>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a40      	ldr	r2, [pc, #256]	@ (8003cd0 <TIM_Base_SetConfig+0x13c>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d108      	bne.n	8003be6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a35      	ldr	r2, [pc, #212]	@ (8003cc0 <TIM_Base_SetConfig+0x12c>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d02b      	beq.n	8003c46 <TIM_Base_SetConfig+0xb2>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bf4:	d027      	beq.n	8003c46 <TIM_Base_SetConfig+0xb2>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a32      	ldr	r2, [pc, #200]	@ (8003cc4 <TIM_Base_SetConfig+0x130>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d023      	beq.n	8003c46 <TIM_Base_SetConfig+0xb2>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a31      	ldr	r2, [pc, #196]	@ (8003cc8 <TIM_Base_SetConfig+0x134>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d01f      	beq.n	8003c46 <TIM_Base_SetConfig+0xb2>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a30      	ldr	r2, [pc, #192]	@ (8003ccc <TIM_Base_SetConfig+0x138>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d01b      	beq.n	8003c46 <TIM_Base_SetConfig+0xb2>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a2f      	ldr	r2, [pc, #188]	@ (8003cd0 <TIM_Base_SetConfig+0x13c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d017      	beq.n	8003c46 <TIM_Base_SetConfig+0xb2>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a2e      	ldr	r2, [pc, #184]	@ (8003cd4 <TIM_Base_SetConfig+0x140>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d013      	beq.n	8003c46 <TIM_Base_SetConfig+0xb2>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a2d      	ldr	r2, [pc, #180]	@ (8003cd8 <TIM_Base_SetConfig+0x144>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d00f      	beq.n	8003c46 <TIM_Base_SetConfig+0xb2>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a2c      	ldr	r2, [pc, #176]	@ (8003cdc <TIM_Base_SetConfig+0x148>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d00b      	beq.n	8003c46 <TIM_Base_SetConfig+0xb2>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a2b      	ldr	r2, [pc, #172]	@ (8003ce0 <TIM_Base_SetConfig+0x14c>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d007      	beq.n	8003c46 <TIM_Base_SetConfig+0xb2>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a2a      	ldr	r2, [pc, #168]	@ (8003ce4 <TIM_Base_SetConfig+0x150>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d003      	beq.n	8003c46 <TIM_Base_SetConfig+0xb2>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a29      	ldr	r2, [pc, #164]	@ (8003ce8 <TIM_Base_SetConfig+0x154>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d108      	bne.n	8003c58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a10      	ldr	r2, [pc, #64]	@ (8003cc0 <TIM_Base_SetConfig+0x12c>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d003      	beq.n	8003c8c <TIM_Base_SetConfig+0xf8>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a12      	ldr	r2, [pc, #72]	@ (8003cd0 <TIM_Base_SetConfig+0x13c>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d103      	bne.n	8003c94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	691a      	ldr	r2, [r3, #16]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d105      	bne.n	8003cb2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	f023 0201 	bic.w	r2, r3, #1
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	611a      	str	r2, [r3, #16]
  }
}
 8003cb2:	bf00      	nop
 8003cb4:	3714      	adds	r7, #20
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	40010000 	.word	0x40010000
 8003cc4:	40000400 	.word	0x40000400
 8003cc8:	40000800 	.word	0x40000800
 8003ccc:	40000c00 	.word	0x40000c00
 8003cd0:	40010400 	.word	0x40010400
 8003cd4:	40014000 	.word	0x40014000
 8003cd8:	40014400 	.word	0x40014400
 8003cdc:	40014800 	.word	0x40014800
 8003ce0:	40001800 	.word	0x40001800
 8003ce4:	40001c00 	.word	0x40001c00
 8003ce8:	40002000 	.word	0x40002000

08003cec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b087      	sub	sp, #28
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	f023 0201 	bic.w	r2, r3, #1
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f023 0303 	bic.w	r3, r3, #3
 8003d22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f023 0302 	bic.w	r3, r3, #2
 8003d34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a20      	ldr	r2, [pc, #128]	@ (8003dc4 <TIM_OC1_SetConfig+0xd8>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d003      	beq.n	8003d50 <TIM_OC1_SetConfig+0x64>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a1f      	ldr	r2, [pc, #124]	@ (8003dc8 <TIM_OC1_SetConfig+0xdc>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d10c      	bne.n	8003d6a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f023 0308 	bic.w	r3, r3, #8
 8003d56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f023 0304 	bic.w	r3, r3, #4
 8003d68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a15      	ldr	r2, [pc, #84]	@ (8003dc4 <TIM_OC1_SetConfig+0xd8>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d003      	beq.n	8003d7a <TIM_OC1_SetConfig+0x8e>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a14      	ldr	r2, [pc, #80]	@ (8003dc8 <TIM_OC1_SetConfig+0xdc>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d111      	bne.n	8003d9e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685a      	ldr	r2, [r3, #4]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	621a      	str	r2, [r3, #32]
}
 8003db8:	bf00      	nop
 8003dba:	371c      	adds	r7, #28
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	40010000 	.word	0x40010000
 8003dc8:	40010400 	.word	0x40010400

08003dcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b087      	sub	sp, #28
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	f023 0210 	bic.w	r2, r3, #16
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	021b      	lsls	r3, r3, #8
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	f023 0320 	bic.w	r3, r3, #32
 8003e16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	011b      	lsls	r3, r3, #4
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a22      	ldr	r2, [pc, #136]	@ (8003eb0 <TIM_OC2_SetConfig+0xe4>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d003      	beq.n	8003e34 <TIM_OC2_SetConfig+0x68>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a21      	ldr	r2, [pc, #132]	@ (8003eb4 <TIM_OC2_SetConfig+0xe8>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d10d      	bne.n	8003e50 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	011b      	lsls	r3, r3, #4
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a17      	ldr	r2, [pc, #92]	@ (8003eb0 <TIM_OC2_SetConfig+0xe4>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d003      	beq.n	8003e60 <TIM_OC2_SetConfig+0x94>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a16      	ldr	r2, [pc, #88]	@ (8003eb4 <TIM_OC2_SetConfig+0xe8>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d113      	bne.n	8003e88 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	621a      	str	r2, [r3, #32]
}
 8003ea2:	bf00      	nop
 8003ea4:	371c      	adds	r7, #28
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	40010000 	.word	0x40010000
 8003eb4:	40010400 	.word	0x40010400

08003eb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b087      	sub	sp, #28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f023 0303 	bic.w	r3, r3, #3
 8003eee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	021b      	lsls	r3, r3, #8
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a21      	ldr	r2, [pc, #132]	@ (8003f98 <TIM_OC3_SetConfig+0xe0>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d003      	beq.n	8003f1e <TIM_OC3_SetConfig+0x66>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a20      	ldr	r2, [pc, #128]	@ (8003f9c <TIM_OC3_SetConfig+0xe4>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d10d      	bne.n	8003f3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	021b      	lsls	r3, r3, #8
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a16      	ldr	r2, [pc, #88]	@ (8003f98 <TIM_OC3_SetConfig+0xe0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d003      	beq.n	8003f4a <TIM_OC3_SetConfig+0x92>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a15      	ldr	r2, [pc, #84]	@ (8003f9c <TIM_OC3_SetConfig+0xe4>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d113      	bne.n	8003f72 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	011b      	lsls	r3, r3, #4
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	621a      	str	r2, [r3, #32]
}
 8003f8c:	bf00      	nop
 8003f8e:	371c      	adds	r7, #28
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr
 8003f98:	40010000 	.word	0x40010000
 8003f9c:	40010400 	.word	0x40010400

08003fa0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b087      	sub	sp, #28
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	021b      	lsls	r3, r3, #8
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003fea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	031b      	lsls	r3, r3, #12
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a12      	ldr	r2, [pc, #72]	@ (8004044 <TIM_OC4_SetConfig+0xa4>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d003      	beq.n	8004008 <TIM_OC4_SetConfig+0x68>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a11      	ldr	r2, [pc, #68]	@ (8004048 <TIM_OC4_SetConfig+0xa8>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d109      	bne.n	800401c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800400e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	019b      	lsls	r3, r3, #6
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	4313      	orrs	r3, r2
 800401a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	621a      	str	r2, [r3, #32]
}
 8004036:	bf00      	nop
 8004038:	371c      	adds	r7, #28
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	40010000 	.word	0x40010000
 8004048:	40010400 	.word	0x40010400

0800404c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800405c:	2b01      	cmp	r3, #1
 800405e:	d101      	bne.n	8004064 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004060:	2302      	movs	r3, #2
 8004062:	e05a      	b.n	800411a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800408a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	4313      	orrs	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a21      	ldr	r2, [pc, #132]	@ (8004128 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d022      	beq.n	80040ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040b0:	d01d      	beq.n	80040ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a1d      	ldr	r2, [pc, #116]	@ (800412c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d018      	beq.n	80040ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a1b      	ldr	r2, [pc, #108]	@ (8004130 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d013      	beq.n	80040ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a1a      	ldr	r2, [pc, #104]	@ (8004134 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d00e      	beq.n	80040ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a18      	ldr	r2, [pc, #96]	@ (8004138 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d009      	beq.n	80040ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a17      	ldr	r2, [pc, #92]	@ (800413c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d004      	beq.n	80040ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a15      	ldr	r2, [pc, #84]	@ (8004140 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d10c      	bne.n	8004108 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	68ba      	ldr	r2, [r7, #8]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3714      	adds	r7, #20
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	40010000 	.word	0x40010000
 800412c:	40000400 	.word	0x40000400
 8004130:	40000800 	.word	0x40000800
 8004134:	40000c00 	.word	0x40000c00
 8004138:	40010400 	.word	0x40010400
 800413c:	40014000 	.word	0x40014000
 8004140:	40001800 	.word	0x40001800

08004144 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e042      	b.n	80041dc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d106      	bne.n	8004170 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7fd fa46 	bl	80015fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2224      	movs	r2, #36	@ 0x24
 8004174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68da      	ldr	r2, [r3, #12]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004186:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 f82b 	bl	80041e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	691a      	ldr	r2, [r3, #16]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800419c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	695a      	ldr	r2, [r3, #20]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80041ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68da      	ldr	r2, [r3, #12]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80041bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2220      	movs	r2, #32
 80041d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041e8:	b0c0      	sub	sp, #256	@ 0x100
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80041fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004200:	68d9      	ldr	r1, [r3, #12]
 8004202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	ea40 0301 	orr.w	r3, r0, r1
 800420c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800420e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	431a      	orrs	r2, r3
 800421c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	431a      	orrs	r2, r3
 8004224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	4313      	orrs	r3, r2
 800422c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800423c:	f021 010c 	bic.w	r1, r1, #12
 8004240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800424a:	430b      	orrs	r3, r1
 800424c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800424e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800425a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800425e:	6999      	ldr	r1, [r3, #24]
 8004260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	ea40 0301 	orr.w	r3, r0, r1
 800426a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800426c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	4b8f      	ldr	r3, [pc, #572]	@ (80044b0 <UART_SetConfig+0x2cc>)
 8004274:	429a      	cmp	r2, r3
 8004276:	d005      	beq.n	8004284 <UART_SetConfig+0xa0>
 8004278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	4b8d      	ldr	r3, [pc, #564]	@ (80044b4 <UART_SetConfig+0x2d0>)
 8004280:	429a      	cmp	r2, r3
 8004282:	d104      	bne.n	800428e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004284:	f7fe ff18 	bl	80030b8 <HAL_RCC_GetPCLK2Freq>
 8004288:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800428c:	e003      	b.n	8004296 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800428e:	f7fe feff 	bl	8003090 <HAL_RCC_GetPCLK1Freq>
 8004292:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800429a:	69db      	ldr	r3, [r3, #28]
 800429c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042a0:	f040 810c 	bne.w	80044bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042a8:	2200      	movs	r2, #0
 80042aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80042ae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80042b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80042b6:	4622      	mov	r2, r4
 80042b8:	462b      	mov	r3, r5
 80042ba:	1891      	adds	r1, r2, r2
 80042bc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80042be:	415b      	adcs	r3, r3
 80042c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80042c6:	4621      	mov	r1, r4
 80042c8:	eb12 0801 	adds.w	r8, r2, r1
 80042cc:	4629      	mov	r1, r5
 80042ce:	eb43 0901 	adc.w	r9, r3, r1
 80042d2:	f04f 0200 	mov.w	r2, #0
 80042d6:	f04f 0300 	mov.w	r3, #0
 80042da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042e6:	4690      	mov	r8, r2
 80042e8:	4699      	mov	r9, r3
 80042ea:	4623      	mov	r3, r4
 80042ec:	eb18 0303 	adds.w	r3, r8, r3
 80042f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80042f4:	462b      	mov	r3, r5
 80042f6:	eb49 0303 	adc.w	r3, r9, r3
 80042fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80042fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800430a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800430e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004312:	460b      	mov	r3, r1
 8004314:	18db      	adds	r3, r3, r3
 8004316:	653b      	str	r3, [r7, #80]	@ 0x50
 8004318:	4613      	mov	r3, r2
 800431a:	eb42 0303 	adc.w	r3, r2, r3
 800431e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004320:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004324:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004328:	f7fc fc14 	bl	8000b54 <__aeabi_uldivmod>
 800432c:	4602      	mov	r2, r0
 800432e:	460b      	mov	r3, r1
 8004330:	4b61      	ldr	r3, [pc, #388]	@ (80044b8 <UART_SetConfig+0x2d4>)
 8004332:	fba3 2302 	umull	r2, r3, r3, r2
 8004336:	095b      	lsrs	r3, r3, #5
 8004338:	011c      	lsls	r4, r3, #4
 800433a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800433e:	2200      	movs	r2, #0
 8004340:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004344:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004348:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800434c:	4642      	mov	r2, r8
 800434e:	464b      	mov	r3, r9
 8004350:	1891      	adds	r1, r2, r2
 8004352:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004354:	415b      	adcs	r3, r3
 8004356:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004358:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800435c:	4641      	mov	r1, r8
 800435e:	eb12 0a01 	adds.w	sl, r2, r1
 8004362:	4649      	mov	r1, r9
 8004364:	eb43 0b01 	adc.w	fp, r3, r1
 8004368:	f04f 0200 	mov.w	r2, #0
 800436c:	f04f 0300 	mov.w	r3, #0
 8004370:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004374:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004378:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800437c:	4692      	mov	sl, r2
 800437e:	469b      	mov	fp, r3
 8004380:	4643      	mov	r3, r8
 8004382:	eb1a 0303 	adds.w	r3, sl, r3
 8004386:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800438a:	464b      	mov	r3, r9
 800438c:	eb4b 0303 	adc.w	r3, fp, r3
 8004390:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80043a0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80043a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80043a8:	460b      	mov	r3, r1
 80043aa:	18db      	adds	r3, r3, r3
 80043ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80043ae:	4613      	mov	r3, r2
 80043b0:	eb42 0303 	adc.w	r3, r2, r3
 80043b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80043b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80043ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80043be:	f7fc fbc9 	bl	8000b54 <__aeabi_uldivmod>
 80043c2:	4602      	mov	r2, r0
 80043c4:	460b      	mov	r3, r1
 80043c6:	4611      	mov	r1, r2
 80043c8:	4b3b      	ldr	r3, [pc, #236]	@ (80044b8 <UART_SetConfig+0x2d4>)
 80043ca:	fba3 2301 	umull	r2, r3, r3, r1
 80043ce:	095b      	lsrs	r3, r3, #5
 80043d0:	2264      	movs	r2, #100	@ 0x64
 80043d2:	fb02 f303 	mul.w	r3, r2, r3
 80043d6:	1acb      	subs	r3, r1, r3
 80043d8:	00db      	lsls	r3, r3, #3
 80043da:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80043de:	4b36      	ldr	r3, [pc, #216]	@ (80044b8 <UART_SetConfig+0x2d4>)
 80043e0:	fba3 2302 	umull	r2, r3, r3, r2
 80043e4:	095b      	lsrs	r3, r3, #5
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80043ec:	441c      	add	r4, r3
 80043ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043f2:	2200      	movs	r2, #0
 80043f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043f8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80043fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004400:	4642      	mov	r2, r8
 8004402:	464b      	mov	r3, r9
 8004404:	1891      	adds	r1, r2, r2
 8004406:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004408:	415b      	adcs	r3, r3
 800440a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800440c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004410:	4641      	mov	r1, r8
 8004412:	1851      	adds	r1, r2, r1
 8004414:	6339      	str	r1, [r7, #48]	@ 0x30
 8004416:	4649      	mov	r1, r9
 8004418:	414b      	adcs	r3, r1
 800441a:	637b      	str	r3, [r7, #52]	@ 0x34
 800441c:	f04f 0200 	mov.w	r2, #0
 8004420:	f04f 0300 	mov.w	r3, #0
 8004424:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004428:	4659      	mov	r1, fp
 800442a:	00cb      	lsls	r3, r1, #3
 800442c:	4651      	mov	r1, sl
 800442e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004432:	4651      	mov	r1, sl
 8004434:	00ca      	lsls	r2, r1, #3
 8004436:	4610      	mov	r0, r2
 8004438:	4619      	mov	r1, r3
 800443a:	4603      	mov	r3, r0
 800443c:	4642      	mov	r2, r8
 800443e:	189b      	adds	r3, r3, r2
 8004440:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004444:	464b      	mov	r3, r9
 8004446:	460a      	mov	r2, r1
 8004448:	eb42 0303 	adc.w	r3, r2, r3
 800444c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800445c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004460:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004464:	460b      	mov	r3, r1
 8004466:	18db      	adds	r3, r3, r3
 8004468:	62bb      	str	r3, [r7, #40]	@ 0x28
 800446a:	4613      	mov	r3, r2
 800446c:	eb42 0303 	adc.w	r3, r2, r3
 8004470:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004472:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004476:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800447a:	f7fc fb6b 	bl	8000b54 <__aeabi_uldivmod>
 800447e:	4602      	mov	r2, r0
 8004480:	460b      	mov	r3, r1
 8004482:	4b0d      	ldr	r3, [pc, #52]	@ (80044b8 <UART_SetConfig+0x2d4>)
 8004484:	fba3 1302 	umull	r1, r3, r3, r2
 8004488:	095b      	lsrs	r3, r3, #5
 800448a:	2164      	movs	r1, #100	@ 0x64
 800448c:	fb01 f303 	mul.w	r3, r1, r3
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	3332      	adds	r3, #50	@ 0x32
 8004496:	4a08      	ldr	r2, [pc, #32]	@ (80044b8 <UART_SetConfig+0x2d4>)
 8004498:	fba2 2303 	umull	r2, r3, r2, r3
 800449c:	095b      	lsrs	r3, r3, #5
 800449e:	f003 0207 	and.w	r2, r3, #7
 80044a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4422      	add	r2, r4
 80044aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044ac:	e106      	b.n	80046bc <UART_SetConfig+0x4d8>
 80044ae:	bf00      	nop
 80044b0:	40011000 	.word	0x40011000
 80044b4:	40011400 	.word	0x40011400
 80044b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044c0:	2200      	movs	r2, #0
 80044c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80044c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80044ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80044ce:	4642      	mov	r2, r8
 80044d0:	464b      	mov	r3, r9
 80044d2:	1891      	adds	r1, r2, r2
 80044d4:	6239      	str	r1, [r7, #32]
 80044d6:	415b      	adcs	r3, r3
 80044d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80044da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044de:	4641      	mov	r1, r8
 80044e0:	1854      	adds	r4, r2, r1
 80044e2:	4649      	mov	r1, r9
 80044e4:	eb43 0501 	adc.w	r5, r3, r1
 80044e8:	f04f 0200 	mov.w	r2, #0
 80044ec:	f04f 0300 	mov.w	r3, #0
 80044f0:	00eb      	lsls	r3, r5, #3
 80044f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044f6:	00e2      	lsls	r2, r4, #3
 80044f8:	4614      	mov	r4, r2
 80044fa:	461d      	mov	r5, r3
 80044fc:	4643      	mov	r3, r8
 80044fe:	18e3      	adds	r3, r4, r3
 8004500:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004504:	464b      	mov	r3, r9
 8004506:	eb45 0303 	adc.w	r3, r5, r3
 800450a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800450e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800451a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800451e:	f04f 0200 	mov.w	r2, #0
 8004522:	f04f 0300 	mov.w	r3, #0
 8004526:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800452a:	4629      	mov	r1, r5
 800452c:	008b      	lsls	r3, r1, #2
 800452e:	4621      	mov	r1, r4
 8004530:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004534:	4621      	mov	r1, r4
 8004536:	008a      	lsls	r2, r1, #2
 8004538:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800453c:	f7fc fb0a 	bl	8000b54 <__aeabi_uldivmod>
 8004540:	4602      	mov	r2, r0
 8004542:	460b      	mov	r3, r1
 8004544:	4b60      	ldr	r3, [pc, #384]	@ (80046c8 <UART_SetConfig+0x4e4>)
 8004546:	fba3 2302 	umull	r2, r3, r3, r2
 800454a:	095b      	lsrs	r3, r3, #5
 800454c:	011c      	lsls	r4, r3, #4
 800454e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004552:	2200      	movs	r2, #0
 8004554:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004558:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800455c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004560:	4642      	mov	r2, r8
 8004562:	464b      	mov	r3, r9
 8004564:	1891      	adds	r1, r2, r2
 8004566:	61b9      	str	r1, [r7, #24]
 8004568:	415b      	adcs	r3, r3
 800456a:	61fb      	str	r3, [r7, #28]
 800456c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004570:	4641      	mov	r1, r8
 8004572:	1851      	adds	r1, r2, r1
 8004574:	6139      	str	r1, [r7, #16]
 8004576:	4649      	mov	r1, r9
 8004578:	414b      	adcs	r3, r1
 800457a:	617b      	str	r3, [r7, #20]
 800457c:	f04f 0200 	mov.w	r2, #0
 8004580:	f04f 0300 	mov.w	r3, #0
 8004584:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004588:	4659      	mov	r1, fp
 800458a:	00cb      	lsls	r3, r1, #3
 800458c:	4651      	mov	r1, sl
 800458e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004592:	4651      	mov	r1, sl
 8004594:	00ca      	lsls	r2, r1, #3
 8004596:	4610      	mov	r0, r2
 8004598:	4619      	mov	r1, r3
 800459a:	4603      	mov	r3, r0
 800459c:	4642      	mov	r2, r8
 800459e:	189b      	adds	r3, r3, r2
 80045a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80045a4:	464b      	mov	r3, r9
 80045a6:	460a      	mov	r2, r1
 80045a8:	eb42 0303 	adc.w	r3, r2, r3
 80045ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80045b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80045ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80045bc:	f04f 0200 	mov.w	r2, #0
 80045c0:	f04f 0300 	mov.w	r3, #0
 80045c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80045c8:	4649      	mov	r1, r9
 80045ca:	008b      	lsls	r3, r1, #2
 80045cc:	4641      	mov	r1, r8
 80045ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045d2:	4641      	mov	r1, r8
 80045d4:	008a      	lsls	r2, r1, #2
 80045d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80045da:	f7fc fabb 	bl	8000b54 <__aeabi_uldivmod>
 80045de:	4602      	mov	r2, r0
 80045e0:	460b      	mov	r3, r1
 80045e2:	4611      	mov	r1, r2
 80045e4:	4b38      	ldr	r3, [pc, #224]	@ (80046c8 <UART_SetConfig+0x4e4>)
 80045e6:	fba3 2301 	umull	r2, r3, r3, r1
 80045ea:	095b      	lsrs	r3, r3, #5
 80045ec:	2264      	movs	r2, #100	@ 0x64
 80045ee:	fb02 f303 	mul.w	r3, r2, r3
 80045f2:	1acb      	subs	r3, r1, r3
 80045f4:	011b      	lsls	r3, r3, #4
 80045f6:	3332      	adds	r3, #50	@ 0x32
 80045f8:	4a33      	ldr	r2, [pc, #204]	@ (80046c8 <UART_SetConfig+0x4e4>)
 80045fa:	fba2 2303 	umull	r2, r3, r2, r3
 80045fe:	095b      	lsrs	r3, r3, #5
 8004600:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004604:	441c      	add	r4, r3
 8004606:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800460a:	2200      	movs	r2, #0
 800460c:	673b      	str	r3, [r7, #112]	@ 0x70
 800460e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004610:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004614:	4642      	mov	r2, r8
 8004616:	464b      	mov	r3, r9
 8004618:	1891      	adds	r1, r2, r2
 800461a:	60b9      	str	r1, [r7, #8]
 800461c:	415b      	adcs	r3, r3
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004624:	4641      	mov	r1, r8
 8004626:	1851      	adds	r1, r2, r1
 8004628:	6039      	str	r1, [r7, #0]
 800462a:	4649      	mov	r1, r9
 800462c:	414b      	adcs	r3, r1
 800462e:	607b      	str	r3, [r7, #4]
 8004630:	f04f 0200 	mov.w	r2, #0
 8004634:	f04f 0300 	mov.w	r3, #0
 8004638:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800463c:	4659      	mov	r1, fp
 800463e:	00cb      	lsls	r3, r1, #3
 8004640:	4651      	mov	r1, sl
 8004642:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004646:	4651      	mov	r1, sl
 8004648:	00ca      	lsls	r2, r1, #3
 800464a:	4610      	mov	r0, r2
 800464c:	4619      	mov	r1, r3
 800464e:	4603      	mov	r3, r0
 8004650:	4642      	mov	r2, r8
 8004652:	189b      	adds	r3, r3, r2
 8004654:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004656:	464b      	mov	r3, r9
 8004658:	460a      	mov	r2, r1
 800465a:	eb42 0303 	adc.w	r3, r2, r3
 800465e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	663b      	str	r3, [r7, #96]	@ 0x60
 800466a:	667a      	str	r2, [r7, #100]	@ 0x64
 800466c:	f04f 0200 	mov.w	r2, #0
 8004670:	f04f 0300 	mov.w	r3, #0
 8004674:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004678:	4649      	mov	r1, r9
 800467a:	008b      	lsls	r3, r1, #2
 800467c:	4641      	mov	r1, r8
 800467e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004682:	4641      	mov	r1, r8
 8004684:	008a      	lsls	r2, r1, #2
 8004686:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800468a:	f7fc fa63 	bl	8000b54 <__aeabi_uldivmod>
 800468e:	4602      	mov	r2, r0
 8004690:	460b      	mov	r3, r1
 8004692:	4b0d      	ldr	r3, [pc, #52]	@ (80046c8 <UART_SetConfig+0x4e4>)
 8004694:	fba3 1302 	umull	r1, r3, r3, r2
 8004698:	095b      	lsrs	r3, r3, #5
 800469a:	2164      	movs	r1, #100	@ 0x64
 800469c:	fb01 f303 	mul.w	r3, r1, r3
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	3332      	adds	r3, #50	@ 0x32
 80046a6:	4a08      	ldr	r2, [pc, #32]	@ (80046c8 <UART_SetConfig+0x4e4>)
 80046a8:	fba2 2303 	umull	r2, r3, r2, r3
 80046ac:	095b      	lsrs	r3, r3, #5
 80046ae:	f003 020f 	and.w	r2, r3, #15
 80046b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4422      	add	r2, r4
 80046ba:	609a      	str	r2, [r3, #8]
}
 80046bc:	bf00      	nop
 80046be:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80046c2:	46bd      	mov	sp, r7
 80046c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046c8:	51eb851f 	.word	0x51eb851f

080046cc <memset>:
 80046cc:	4402      	add	r2, r0
 80046ce:	4603      	mov	r3, r0
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d100      	bne.n	80046d6 <memset+0xa>
 80046d4:	4770      	bx	lr
 80046d6:	f803 1b01 	strb.w	r1, [r3], #1
 80046da:	e7f9      	b.n	80046d0 <memset+0x4>

080046dc <__libc_init_array>:
 80046dc:	b570      	push	{r4, r5, r6, lr}
 80046de:	4d0d      	ldr	r5, [pc, #52]	@ (8004714 <__libc_init_array+0x38>)
 80046e0:	4c0d      	ldr	r4, [pc, #52]	@ (8004718 <__libc_init_array+0x3c>)
 80046e2:	1b64      	subs	r4, r4, r5
 80046e4:	10a4      	asrs	r4, r4, #2
 80046e6:	2600      	movs	r6, #0
 80046e8:	42a6      	cmp	r6, r4
 80046ea:	d109      	bne.n	8004700 <__libc_init_array+0x24>
 80046ec:	4d0b      	ldr	r5, [pc, #44]	@ (800471c <__libc_init_array+0x40>)
 80046ee:	4c0c      	ldr	r4, [pc, #48]	@ (8004720 <__libc_init_array+0x44>)
 80046f0:	f000 fa92 	bl	8004c18 <_init>
 80046f4:	1b64      	subs	r4, r4, r5
 80046f6:	10a4      	asrs	r4, r4, #2
 80046f8:	2600      	movs	r6, #0
 80046fa:	42a6      	cmp	r6, r4
 80046fc:	d105      	bne.n	800470a <__libc_init_array+0x2e>
 80046fe:	bd70      	pop	{r4, r5, r6, pc}
 8004700:	f855 3b04 	ldr.w	r3, [r5], #4
 8004704:	4798      	blx	r3
 8004706:	3601      	adds	r6, #1
 8004708:	e7ee      	b.n	80046e8 <__libc_init_array+0xc>
 800470a:	f855 3b04 	ldr.w	r3, [r5], #4
 800470e:	4798      	blx	r3
 8004710:	3601      	adds	r6, #1
 8004712:	e7f2      	b.n	80046fa <__libc_init_array+0x1e>
 8004714:	08004cc0 	.word	0x08004cc0
 8004718:	08004cc0 	.word	0x08004cc0
 800471c:	08004cc0 	.word	0x08004cc0
 8004720:	08004cc4 	.word	0x08004cc4

08004724 <memcpy>:
 8004724:	440a      	add	r2, r1
 8004726:	4291      	cmp	r1, r2
 8004728:	f100 33ff 	add.w	r3, r0, #4294967295
 800472c:	d100      	bne.n	8004730 <memcpy+0xc>
 800472e:	4770      	bx	lr
 8004730:	b510      	push	{r4, lr}
 8004732:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004736:	f803 4f01 	strb.w	r4, [r3, #1]!
 800473a:	4291      	cmp	r1, r2
 800473c:	d1f9      	bne.n	8004732 <memcpy+0xe>
 800473e:	bd10      	pop	{r4, pc}

08004740 <atan2>:
 8004740:	f000 b802 	b.w	8004748 <__ieee754_atan2>
 8004744:	0000      	movs	r0, r0
	...

08004748 <__ieee754_atan2>:
 8004748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800474c:	ec57 6b11 	vmov	r6, r7, d1
 8004750:	4273      	negs	r3, r6
 8004752:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 80048d0 <__ieee754_atan2+0x188>
 8004756:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800475a:	4333      	orrs	r3, r6
 800475c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8004760:	4543      	cmp	r3, r8
 8004762:	ec51 0b10 	vmov	r0, r1, d0
 8004766:	4635      	mov	r5, r6
 8004768:	d809      	bhi.n	800477e <__ieee754_atan2+0x36>
 800476a:	4244      	negs	r4, r0
 800476c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004770:	4304      	orrs	r4, r0
 8004772:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8004776:	4544      	cmp	r4, r8
 8004778:	468e      	mov	lr, r1
 800477a:	4681      	mov	r9, r0
 800477c:	d907      	bls.n	800478e <__ieee754_atan2+0x46>
 800477e:	4632      	mov	r2, r6
 8004780:	463b      	mov	r3, r7
 8004782:	f7fb fd47 	bl	8000214 <__adddf3>
 8004786:	ec41 0b10 	vmov	d0, r0, r1
 800478a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800478e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8004792:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8004796:	4334      	orrs	r4, r6
 8004798:	d103      	bne.n	80047a2 <__ieee754_atan2+0x5a>
 800479a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800479e:	f000 b89b 	b.w	80048d8 <atan>
 80047a2:	17bc      	asrs	r4, r7, #30
 80047a4:	f004 0402 	and.w	r4, r4, #2
 80047a8:	ea53 0909 	orrs.w	r9, r3, r9
 80047ac:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80047b0:	d107      	bne.n	80047c2 <__ieee754_atan2+0x7a>
 80047b2:	2c02      	cmp	r4, #2
 80047b4:	d05f      	beq.n	8004876 <__ieee754_atan2+0x12e>
 80047b6:	2c03      	cmp	r4, #3
 80047b8:	d1e5      	bne.n	8004786 <__ieee754_atan2+0x3e>
 80047ba:	a141      	add	r1, pc, #260	@ (adr r1, 80048c0 <__ieee754_atan2+0x178>)
 80047bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80047c0:	e7e1      	b.n	8004786 <__ieee754_atan2+0x3e>
 80047c2:	4315      	orrs	r5, r2
 80047c4:	d106      	bne.n	80047d4 <__ieee754_atan2+0x8c>
 80047c6:	f1be 0f00 	cmp.w	lr, #0
 80047ca:	da5f      	bge.n	800488c <__ieee754_atan2+0x144>
 80047cc:	a13e      	add	r1, pc, #248	@ (adr r1, 80048c8 <__ieee754_atan2+0x180>)
 80047ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80047d2:	e7d8      	b.n	8004786 <__ieee754_atan2+0x3e>
 80047d4:	4542      	cmp	r2, r8
 80047d6:	d10f      	bne.n	80047f8 <__ieee754_atan2+0xb0>
 80047d8:	4293      	cmp	r3, r2
 80047da:	f104 34ff 	add.w	r4, r4, #4294967295
 80047de:	d107      	bne.n	80047f0 <__ieee754_atan2+0xa8>
 80047e0:	2c02      	cmp	r4, #2
 80047e2:	d84c      	bhi.n	800487e <__ieee754_atan2+0x136>
 80047e4:	4b34      	ldr	r3, [pc, #208]	@ (80048b8 <__ieee754_atan2+0x170>)
 80047e6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80047ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047ee:	e7ca      	b.n	8004786 <__ieee754_atan2+0x3e>
 80047f0:	2c02      	cmp	r4, #2
 80047f2:	d848      	bhi.n	8004886 <__ieee754_atan2+0x13e>
 80047f4:	4b31      	ldr	r3, [pc, #196]	@ (80048bc <__ieee754_atan2+0x174>)
 80047f6:	e7f6      	b.n	80047e6 <__ieee754_atan2+0x9e>
 80047f8:	4543      	cmp	r3, r8
 80047fa:	d0e4      	beq.n	80047c6 <__ieee754_atan2+0x7e>
 80047fc:	1a9b      	subs	r3, r3, r2
 80047fe:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8004802:	ea4f 5223 	mov.w	r2, r3, asr #20
 8004806:	da1e      	bge.n	8004846 <__ieee754_atan2+0xfe>
 8004808:	2f00      	cmp	r7, #0
 800480a:	da01      	bge.n	8004810 <__ieee754_atan2+0xc8>
 800480c:	323c      	adds	r2, #60	@ 0x3c
 800480e:	db1e      	blt.n	800484e <__ieee754_atan2+0x106>
 8004810:	4632      	mov	r2, r6
 8004812:	463b      	mov	r3, r7
 8004814:	f7fb ffde 	bl	80007d4 <__aeabi_ddiv>
 8004818:	ec41 0b10 	vmov	d0, r0, r1
 800481c:	f000 f9f4 	bl	8004c08 <fabs>
 8004820:	f000 f85a 	bl	80048d8 <atan>
 8004824:	ec51 0b10 	vmov	r0, r1, d0
 8004828:	2c01      	cmp	r4, #1
 800482a:	d013      	beq.n	8004854 <__ieee754_atan2+0x10c>
 800482c:	2c02      	cmp	r4, #2
 800482e:	d015      	beq.n	800485c <__ieee754_atan2+0x114>
 8004830:	2c00      	cmp	r4, #0
 8004832:	d0a8      	beq.n	8004786 <__ieee754_atan2+0x3e>
 8004834:	a318      	add	r3, pc, #96	@ (adr r3, 8004898 <__ieee754_atan2+0x150>)
 8004836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483a:	f7fb fce9 	bl	8000210 <__aeabi_dsub>
 800483e:	a318      	add	r3, pc, #96	@ (adr r3, 80048a0 <__ieee754_atan2+0x158>)
 8004840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004844:	e014      	b.n	8004870 <__ieee754_atan2+0x128>
 8004846:	a118      	add	r1, pc, #96	@ (adr r1, 80048a8 <__ieee754_atan2+0x160>)
 8004848:	e9d1 0100 	ldrd	r0, r1, [r1]
 800484c:	e7ec      	b.n	8004828 <__ieee754_atan2+0xe0>
 800484e:	2000      	movs	r0, #0
 8004850:	2100      	movs	r1, #0
 8004852:	e7e9      	b.n	8004828 <__ieee754_atan2+0xe0>
 8004854:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004858:	4619      	mov	r1, r3
 800485a:	e794      	b.n	8004786 <__ieee754_atan2+0x3e>
 800485c:	a30e      	add	r3, pc, #56	@ (adr r3, 8004898 <__ieee754_atan2+0x150>)
 800485e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004862:	f7fb fcd5 	bl	8000210 <__aeabi_dsub>
 8004866:	4602      	mov	r2, r0
 8004868:	460b      	mov	r3, r1
 800486a:	a10d      	add	r1, pc, #52	@ (adr r1, 80048a0 <__ieee754_atan2+0x158>)
 800486c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004870:	f7fb fcce 	bl	8000210 <__aeabi_dsub>
 8004874:	e787      	b.n	8004786 <__ieee754_atan2+0x3e>
 8004876:	a10a      	add	r1, pc, #40	@ (adr r1, 80048a0 <__ieee754_atan2+0x158>)
 8004878:	e9d1 0100 	ldrd	r0, r1, [r1]
 800487c:	e783      	b.n	8004786 <__ieee754_atan2+0x3e>
 800487e:	a10c      	add	r1, pc, #48	@ (adr r1, 80048b0 <__ieee754_atan2+0x168>)
 8004880:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004884:	e77f      	b.n	8004786 <__ieee754_atan2+0x3e>
 8004886:	2000      	movs	r0, #0
 8004888:	2100      	movs	r1, #0
 800488a:	e77c      	b.n	8004786 <__ieee754_atan2+0x3e>
 800488c:	a106      	add	r1, pc, #24	@ (adr r1, 80048a8 <__ieee754_atan2+0x160>)
 800488e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004892:	e778      	b.n	8004786 <__ieee754_atan2+0x3e>
 8004894:	f3af 8000 	nop.w
 8004898:	33145c07 	.word	0x33145c07
 800489c:	3ca1a626 	.word	0x3ca1a626
 80048a0:	54442d18 	.word	0x54442d18
 80048a4:	400921fb 	.word	0x400921fb
 80048a8:	54442d18 	.word	0x54442d18
 80048ac:	3ff921fb 	.word	0x3ff921fb
 80048b0:	54442d18 	.word	0x54442d18
 80048b4:	3fe921fb 	.word	0x3fe921fb
 80048b8:	08004c60 	.word	0x08004c60
 80048bc:	08004c48 	.word	0x08004c48
 80048c0:	54442d18 	.word	0x54442d18
 80048c4:	c00921fb 	.word	0xc00921fb
 80048c8:	54442d18 	.word	0x54442d18
 80048cc:	bff921fb 	.word	0xbff921fb
 80048d0:	7ff00000 	.word	0x7ff00000
 80048d4:	00000000 	.word	0x00000000

080048d8 <atan>:
 80048d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048dc:	ec55 4b10 	vmov	r4, r5, d0
 80048e0:	4bbf      	ldr	r3, [pc, #764]	@ (8004be0 <atan+0x308>)
 80048e2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80048e6:	429e      	cmp	r6, r3
 80048e8:	46ab      	mov	fp, r5
 80048ea:	d918      	bls.n	800491e <atan+0x46>
 80048ec:	4bbd      	ldr	r3, [pc, #756]	@ (8004be4 <atan+0x30c>)
 80048ee:	429e      	cmp	r6, r3
 80048f0:	d801      	bhi.n	80048f6 <atan+0x1e>
 80048f2:	d109      	bne.n	8004908 <atan+0x30>
 80048f4:	b144      	cbz	r4, 8004908 <atan+0x30>
 80048f6:	4622      	mov	r2, r4
 80048f8:	462b      	mov	r3, r5
 80048fa:	4620      	mov	r0, r4
 80048fc:	4629      	mov	r1, r5
 80048fe:	f7fb fc89 	bl	8000214 <__adddf3>
 8004902:	4604      	mov	r4, r0
 8004904:	460d      	mov	r5, r1
 8004906:	e006      	b.n	8004916 <atan+0x3e>
 8004908:	f1bb 0f00 	cmp.w	fp, #0
 800490c:	f340 812b 	ble.w	8004b66 <atan+0x28e>
 8004910:	a597      	add	r5, pc, #604	@ (adr r5, 8004b70 <atan+0x298>)
 8004912:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004916:	ec45 4b10 	vmov	d0, r4, r5
 800491a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800491e:	4bb2      	ldr	r3, [pc, #712]	@ (8004be8 <atan+0x310>)
 8004920:	429e      	cmp	r6, r3
 8004922:	d813      	bhi.n	800494c <atan+0x74>
 8004924:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8004928:	429e      	cmp	r6, r3
 800492a:	d80c      	bhi.n	8004946 <atan+0x6e>
 800492c:	a392      	add	r3, pc, #584	@ (adr r3, 8004b78 <atan+0x2a0>)
 800492e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004932:	4620      	mov	r0, r4
 8004934:	4629      	mov	r1, r5
 8004936:	f7fb fc6d 	bl	8000214 <__adddf3>
 800493a:	4bac      	ldr	r3, [pc, #688]	@ (8004bec <atan+0x314>)
 800493c:	2200      	movs	r2, #0
 800493e:	f7fc f8af 	bl	8000aa0 <__aeabi_dcmpgt>
 8004942:	2800      	cmp	r0, #0
 8004944:	d1e7      	bne.n	8004916 <atan+0x3e>
 8004946:	f04f 3aff 	mov.w	sl, #4294967295
 800494a:	e029      	b.n	80049a0 <atan+0xc8>
 800494c:	f000 f95c 	bl	8004c08 <fabs>
 8004950:	4ba7      	ldr	r3, [pc, #668]	@ (8004bf0 <atan+0x318>)
 8004952:	429e      	cmp	r6, r3
 8004954:	ec55 4b10 	vmov	r4, r5, d0
 8004958:	f200 80bc 	bhi.w	8004ad4 <atan+0x1fc>
 800495c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8004960:	429e      	cmp	r6, r3
 8004962:	f200 809e 	bhi.w	8004aa2 <atan+0x1ca>
 8004966:	4622      	mov	r2, r4
 8004968:	462b      	mov	r3, r5
 800496a:	4620      	mov	r0, r4
 800496c:	4629      	mov	r1, r5
 800496e:	f7fb fc51 	bl	8000214 <__adddf3>
 8004972:	4b9e      	ldr	r3, [pc, #632]	@ (8004bec <atan+0x314>)
 8004974:	2200      	movs	r2, #0
 8004976:	f7fb fc4b 	bl	8000210 <__aeabi_dsub>
 800497a:	2200      	movs	r2, #0
 800497c:	4606      	mov	r6, r0
 800497e:	460f      	mov	r7, r1
 8004980:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004984:	4620      	mov	r0, r4
 8004986:	4629      	mov	r1, r5
 8004988:	f7fb fc44 	bl	8000214 <__adddf3>
 800498c:	4602      	mov	r2, r0
 800498e:	460b      	mov	r3, r1
 8004990:	4630      	mov	r0, r6
 8004992:	4639      	mov	r1, r7
 8004994:	f7fb ff1e 	bl	80007d4 <__aeabi_ddiv>
 8004998:	f04f 0a00 	mov.w	sl, #0
 800499c:	4604      	mov	r4, r0
 800499e:	460d      	mov	r5, r1
 80049a0:	4622      	mov	r2, r4
 80049a2:	462b      	mov	r3, r5
 80049a4:	4620      	mov	r0, r4
 80049a6:	4629      	mov	r1, r5
 80049a8:	f7fb fdea 	bl	8000580 <__aeabi_dmul>
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
 80049b0:	4680      	mov	r8, r0
 80049b2:	4689      	mov	r9, r1
 80049b4:	f7fb fde4 	bl	8000580 <__aeabi_dmul>
 80049b8:	a371      	add	r3, pc, #452	@ (adr r3, 8004b80 <atan+0x2a8>)
 80049ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049be:	4606      	mov	r6, r0
 80049c0:	460f      	mov	r7, r1
 80049c2:	f7fb fddd 	bl	8000580 <__aeabi_dmul>
 80049c6:	a370      	add	r3, pc, #448	@ (adr r3, 8004b88 <atan+0x2b0>)
 80049c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049cc:	f7fb fc22 	bl	8000214 <__adddf3>
 80049d0:	4632      	mov	r2, r6
 80049d2:	463b      	mov	r3, r7
 80049d4:	f7fb fdd4 	bl	8000580 <__aeabi_dmul>
 80049d8:	a36d      	add	r3, pc, #436	@ (adr r3, 8004b90 <atan+0x2b8>)
 80049da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049de:	f7fb fc19 	bl	8000214 <__adddf3>
 80049e2:	4632      	mov	r2, r6
 80049e4:	463b      	mov	r3, r7
 80049e6:	f7fb fdcb 	bl	8000580 <__aeabi_dmul>
 80049ea:	a36b      	add	r3, pc, #428	@ (adr r3, 8004b98 <atan+0x2c0>)
 80049ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f0:	f7fb fc10 	bl	8000214 <__adddf3>
 80049f4:	4632      	mov	r2, r6
 80049f6:	463b      	mov	r3, r7
 80049f8:	f7fb fdc2 	bl	8000580 <__aeabi_dmul>
 80049fc:	a368      	add	r3, pc, #416	@ (adr r3, 8004ba0 <atan+0x2c8>)
 80049fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a02:	f7fb fc07 	bl	8000214 <__adddf3>
 8004a06:	4632      	mov	r2, r6
 8004a08:	463b      	mov	r3, r7
 8004a0a:	f7fb fdb9 	bl	8000580 <__aeabi_dmul>
 8004a0e:	a366      	add	r3, pc, #408	@ (adr r3, 8004ba8 <atan+0x2d0>)
 8004a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a14:	f7fb fbfe 	bl	8000214 <__adddf3>
 8004a18:	4642      	mov	r2, r8
 8004a1a:	464b      	mov	r3, r9
 8004a1c:	f7fb fdb0 	bl	8000580 <__aeabi_dmul>
 8004a20:	a363      	add	r3, pc, #396	@ (adr r3, 8004bb0 <atan+0x2d8>)
 8004a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a26:	4680      	mov	r8, r0
 8004a28:	4689      	mov	r9, r1
 8004a2a:	4630      	mov	r0, r6
 8004a2c:	4639      	mov	r1, r7
 8004a2e:	f7fb fda7 	bl	8000580 <__aeabi_dmul>
 8004a32:	a361      	add	r3, pc, #388	@ (adr r3, 8004bb8 <atan+0x2e0>)
 8004a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a38:	f7fb fbea 	bl	8000210 <__aeabi_dsub>
 8004a3c:	4632      	mov	r2, r6
 8004a3e:	463b      	mov	r3, r7
 8004a40:	f7fb fd9e 	bl	8000580 <__aeabi_dmul>
 8004a44:	a35e      	add	r3, pc, #376	@ (adr r3, 8004bc0 <atan+0x2e8>)
 8004a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4a:	f7fb fbe1 	bl	8000210 <__aeabi_dsub>
 8004a4e:	4632      	mov	r2, r6
 8004a50:	463b      	mov	r3, r7
 8004a52:	f7fb fd95 	bl	8000580 <__aeabi_dmul>
 8004a56:	a35c      	add	r3, pc, #368	@ (adr r3, 8004bc8 <atan+0x2f0>)
 8004a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5c:	f7fb fbd8 	bl	8000210 <__aeabi_dsub>
 8004a60:	4632      	mov	r2, r6
 8004a62:	463b      	mov	r3, r7
 8004a64:	f7fb fd8c 	bl	8000580 <__aeabi_dmul>
 8004a68:	a359      	add	r3, pc, #356	@ (adr r3, 8004bd0 <atan+0x2f8>)
 8004a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6e:	f7fb fbcf 	bl	8000210 <__aeabi_dsub>
 8004a72:	4632      	mov	r2, r6
 8004a74:	463b      	mov	r3, r7
 8004a76:	f7fb fd83 	bl	8000580 <__aeabi_dmul>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	4640      	mov	r0, r8
 8004a80:	4649      	mov	r1, r9
 8004a82:	f7fb fbc7 	bl	8000214 <__adddf3>
 8004a86:	4622      	mov	r2, r4
 8004a88:	462b      	mov	r3, r5
 8004a8a:	f7fb fd79 	bl	8000580 <__aeabi_dmul>
 8004a8e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004a92:	4602      	mov	r2, r0
 8004a94:	460b      	mov	r3, r1
 8004a96:	d148      	bne.n	8004b2a <atan+0x252>
 8004a98:	4620      	mov	r0, r4
 8004a9a:	4629      	mov	r1, r5
 8004a9c:	f7fb fbb8 	bl	8000210 <__aeabi_dsub>
 8004aa0:	e72f      	b.n	8004902 <atan+0x2a>
 8004aa2:	4b52      	ldr	r3, [pc, #328]	@ (8004bec <atan+0x314>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	4629      	mov	r1, r5
 8004aaa:	f7fb fbb1 	bl	8000210 <__aeabi_dsub>
 8004aae:	4b4f      	ldr	r3, [pc, #316]	@ (8004bec <atan+0x314>)
 8004ab0:	4606      	mov	r6, r0
 8004ab2:	460f      	mov	r7, r1
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	4629      	mov	r1, r5
 8004aba:	f7fb fbab 	bl	8000214 <__adddf3>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	4630      	mov	r0, r6
 8004ac4:	4639      	mov	r1, r7
 8004ac6:	f7fb fe85 	bl	80007d4 <__aeabi_ddiv>
 8004aca:	f04f 0a01 	mov.w	sl, #1
 8004ace:	4604      	mov	r4, r0
 8004ad0:	460d      	mov	r5, r1
 8004ad2:	e765      	b.n	80049a0 <atan+0xc8>
 8004ad4:	4b47      	ldr	r3, [pc, #284]	@ (8004bf4 <atan+0x31c>)
 8004ad6:	429e      	cmp	r6, r3
 8004ad8:	d21c      	bcs.n	8004b14 <atan+0x23c>
 8004ada:	4b47      	ldr	r3, [pc, #284]	@ (8004bf8 <atan+0x320>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	4620      	mov	r0, r4
 8004ae0:	4629      	mov	r1, r5
 8004ae2:	f7fb fb95 	bl	8000210 <__aeabi_dsub>
 8004ae6:	4b44      	ldr	r3, [pc, #272]	@ (8004bf8 <atan+0x320>)
 8004ae8:	4606      	mov	r6, r0
 8004aea:	460f      	mov	r7, r1
 8004aec:	2200      	movs	r2, #0
 8004aee:	4620      	mov	r0, r4
 8004af0:	4629      	mov	r1, r5
 8004af2:	f7fb fd45 	bl	8000580 <__aeabi_dmul>
 8004af6:	4b3d      	ldr	r3, [pc, #244]	@ (8004bec <atan+0x314>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	f7fb fb8b 	bl	8000214 <__adddf3>
 8004afe:	4602      	mov	r2, r0
 8004b00:	460b      	mov	r3, r1
 8004b02:	4630      	mov	r0, r6
 8004b04:	4639      	mov	r1, r7
 8004b06:	f7fb fe65 	bl	80007d4 <__aeabi_ddiv>
 8004b0a:	f04f 0a02 	mov.w	sl, #2
 8004b0e:	4604      	mov	r4, r0
 8004b10:	460d      	mov	r5, r1
 8004b12:	e745      	b.n	80049a0 <atan+0xc8>
 8004b14:	4622      	mov	r2, r4
 8004b16:	462b      	mov	r3, r5
 8004b18:	4938      	ldr	r1, [pc, #224]	@ (8004bfc <atan+0x324>)
 8004b1a:	2000      	movs	r0, #0
 8004b1c:	f7fb fe5a 	bl	80007d4 <__aeabi_ddiv>
 8004b20:	f04f 0a03 	mov.w	sl, #3
 8004b24:	4604      	mov	r4, r0
 8004b26:	460d      	mov	r5, r1
 8004b28:	e73a      	b.n	80049a0 <atan+0xc8>
 8004b2a:	4b35      	ldr	r3, [pc, #212]	@ (8004c00 <atan+0x328>)
 8004b2c:	4e35      	ldr	r6, [pc, #212]	@ (8004c04 <atan+0x32c>)
 8004b2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b36:	f7fb fb6b 	bl	8000210 <__aeabi_dsub>
 8004b3a:	4622      	mov	r2, r4
 8004b3c:	462b      	mov	r3, r5
 8004b3e:	f7fb fb67 	bl	8000210 <__aeabi_dsub>
 8004b42:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8004b46:	4602      	mov	r2, r0
 8004b48:	460b      	mov	r3, r1
 8004b4a:	e9d6 0100 	ldrd	r0, r1, [r6]
 8004b4e:	f7fb fb5f 	bl	8000210 <__aeabi_dsub>
 8004b52:	f1bb 0f00 	cmp.w	fp, #0
 8004b56:	4604      	mov	r4, r0
 8004b58:	460d      	mov	r5, r1
 8004b5a:	f6bf aedc 	bge.w	8004916 <atan+0x3e>
 8004b5e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004b62:	461d      	mov	r5, r3
 8004b64:	e6d7      	b.n	8004916 <atan+0x3e>
 8004b66:	a51c      	add	r5, pc, #112	@ (adr r5, 8004bd8 <atan+0x300>)
 8004b68:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004b6c:	e6d3      	b.n	8004916 <atan+0x3e>
 8004b6e:	bf00      	nop
 8004b70:	54442d18 	.word	0x54442d18
 8004b74:	3ff921fb 	.word	0x3ff921fb
 8004b78:	8800759c 	.word	0x8800759c
 8004b7c:	7e37e43c 	.word	0x7e37e43c
 8004b80:	e322da11 	.word	0xe322da11
 8004b84:	3f90ad3a 	.word	0x3f90ad3a
 8004b88:	24760deb 	.word	0x24760deb
 8004b8c:	3fa97b4b 	.word	0x3fa97b4b
 8004b90:	a0d03d51 	.word	0xa0d03d51
 8004b94:	3fb10d66 	.word	0x3fb10d66
 8004b98:	c54c206e 	.word	0xc54c206e
 8004b9c:	3fb745cd 	.word	0x3fb745cd
 8004ba0:	920083ff 	.word	0x920083ff
 8004ba4:	3fc24924 	.word	0x3fc24924
 8004ba8:	5555550d 	.word	0x5555550d
 8004bac:	3fd55555 	.word	0x3fd55555
 8004bb0:	2c6a6c2f 	.word	0x2c6a6c2f
 8004bb4:	bfa2b444 	.word	0xbfa2b444
 8004bb8:	52defd9a 	.word	0x52defd9a
 8004bbc:	3fadde2d 	.word	0x3fadde2d
 8004bc0:	af749a6d 	.word	0xaf749a6d
 8004bc4:	3fb3b0f2 	.word	0x3fb3b0f2
 8004bc8:	fe231671 	.word	0xfe231671
 8004bcc:	3fbc71c6 	.word	0x3fbc71c6
 8004bd0:	9998ebc4 	.word	0x9998ebc4
 8004bd4:	3fc99999 	.word	0x3fc99999
 8004bd8:	54442d18 	.word	0x54442d18
 8004bdc:	bff921fb 	.word	0xbff921fb
 8004be0:	440fffff 	.word	0x440fffff
 8004be4:	7ff00000 	.word	0x7ff00000
 8004be8:	3fdbffff 	.word	0x3fdbffff
 8004bec:	3ff00000 	.word	0x3ff00000
 8004bf0:	3ff2ffff 	.word	0x3ff2ffff
 8004bf4:	40038000 	.word	0x40038000
 8004bf8:	3ff80000 	.word	0x3ff80000
 8004bfc:	bff00000 	.word	0xbff00000
 8004c00:	08004c78 	.word	0x08004c78
 8004c04:	08004c98 	.word	0x08004c98

08004c08 <fabs>:
 8004c08:	ec51 0b10 	vmov	r0, r1, d0
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004c12:	ec43 2b10 	vmov	d0, r2, r3
 8004c16:	4770      	bx	lr

08004c18 <_init>:
 8004c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c1a:	bf00      	nop
 8004c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c1e:	bc08      	pop	{r3}
 8004c20:	469e      	mov	lr, r3
 8004c22:	4770      	bx	lr

08004c24 <_fini>:
 8004c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c26:	bf00      	nop
 8004c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c2a:	bc08      	pop	{r3}
 8004c2c:	469e      	mov	lr, r3
 8004c2e:	4770      	bx	lr
