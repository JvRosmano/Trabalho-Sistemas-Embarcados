
TrabalhoBarco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083fc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  080085d0  080085d0  000095d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008850  08008850  0000a0a0  2**0
                  CONTENTS
  4 .ARM          00000008  08008850  08008850  00009850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008858  08008858  0000a0a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008858  08008858  00009858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800885c  0800885c  0000985c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  08008860  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000097c  200000a0  08008900  0000a0a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a1c  08008900  0000aa1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001280b  00000000  00000000  0000a0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029b6  00000000  00000000  0001c8db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  0001f298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d62  00000000  00000000  00020398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023836  00000000  00000000  000210fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016cb8  00000000  00000000  00044930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4d38  00000000  00000000  0005b5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00130320  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000539c  00000000  00000000  00130364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b2  00000000  00000000  00135700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a0 	.word	0x200000a0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080085b4 	.word	0x080085b4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a4 	.word	0x200000a4
 800020c:	080085b4 	.word	0x080085b4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b96a 	b.w	8000f64 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	460c      	mov	r4, r1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d14e      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb4:	4694      	mov	ip, r2
 8000cb6:	458c      	cmp	ip, r1
 8000cb8:	4686      	mov	lr, r0
 8000cba:	fab2 f282 	clz	r2, r2
 8000cbe:	d962      	bls.n	8000d86 <__udivmoddi4+0xde>
 8000cc0:	b14a      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc2:	f1c2 0320 	rsb	r3, r2, #32
 8000cc6:	4091      	lsls	r1, r2
 8000cc8:	fa20 f303 	lsr.w	r3, r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	4319      	orrs	r1, r3
 8000cd2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cda:	fa1f f68c 	uxth.w	r6, ip
 8000cde:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ce2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb04 f106 	mul.w	r1, r4, r6
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cfe:	f080 8112 	bcs.w	8000f26 <__udivmoddi4+0x27e>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 810f 	bls.w	8000f26 <__udivmoddi4+0x27e>
 8000d08:	3c02      	subs	r4, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	fa1f f38e 	uxth.w	r3, lr
 8000d12:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d16:	fb07 1110 	mls	r1, r7, r0, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb00 f606 	mul.w	r6, r0, r6
 8000d22:	429e      	cmp	r6, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x94>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d2e:	f080 80fc 	bcs.w	8000f2a <__udivmoddi4+0x282>
 8000d32:	429e      	cmp	r6, r3
 8000d34:	f240 80f9 	bls.w	8000f2a <__udivmoddi4+0x282>
 8000d38:	4463      	add	r3, ip
 8000d3a:	3802      	subs	r0, #2
 8000d3c:	1b9b      	subs	r3, r3, r6
 8000d3e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d42:	2100      	movs	r1, #0
 8000d44:	b11d      	cbz	r5, 8000d4e <__udivmoddi4+0xa6>
 8000d46:	40d3      	lsrs	r3, r2
 8000d48:	2200      	movs	r2, #0
 8000d4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d905      	bls.n	8000d62 <__udivmoddi4+0xba>
 8000d56:	b10d      	cbz	r5, 8000d5c <__udivmoddi4+0xb4>
 8000d58:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e7f5      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000d62:	fab3 f183 	clz	r1, r3
 8000d66:	2900      	cmp	r1, #0
 8000d68:	d146      	bne.n	8000df8 <__udivmoddi4+0x150>
 8000d6a:	42a3      	cmp	r3, r4
 8000d6c:	d302      	bcc.n	8000d74 <__udivmoddi4+0xcc>
 8000d6e:	4290      	cmp	r0, r2
 8000d70:	f0c0 80f0 	bcc.w	8000f54 <__udivmoddi4+0x2ac>
 8000d74:	1a86      	subs	r6, r0, r2
 8000d76:	eb64 0303 	sbc.w	r3, r4, r3
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	2d00      	cmp	r5, #0
 8000d7e:	d0e6      	beq.n	8000d4e <__udivmoddi4+0xa6>
 8000d80:	e9c5 6300 	strd	r6, r3, [r5]
 8000d84:	e7e3      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	f040 8090 	bne.w	8000eac <__udivmoddi4+0x204>
 8000d8c:	eba1 040c 	sub.w	r4, r1, ip
 8000d90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d94:	fa1f f78c 	uxth.w	r7, ip
 8000d98:	2101      	movs	r1, #1
 8000d9a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb08 4416 	mls	r4, r8, r6, r4
 8000da6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000daa:	fb07 f006 	mul.w	r0, r7, r6
 8000dae:	4298      	cmp	r0, r3
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x11c>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x11a>
 8000dbc:	4298      	cmp	r0, r3
 8000dbe:	f200 80cd 	bhi.w	8000f5c <__udivmoddi4+0x2b4>
 8000dc2:	4626      	mov	r6, r4
 8000dc4:	1a1c      	subs	r4, r3, r0
 8000dc6:	fa1f f38e 	uxth.w	r3, lr
 8000dca:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dce:	fb08 4410 	mls	r4, r8, r0, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb00 f707 	mul.w	r7, r0, r7
 8000dda:	429f      	cmp	r7, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x148>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x146>
 8000de8:	429f      	cmp	r7, r3
 8000dea:	f200 80b0 	bhi.w	8000f4e <__udivmoddi4+0x2a6>
 8000dee:	4620      	mov	r0, r4
 8000df0:	1bdb      	subs	r3, r3, r7
 8000df2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df6:	e7a5      	b.n	8000d44 <__udivmoddi4+0x9c>
 8000df8:	f1c1 0620 	rsb	r6, r1, #32
 8000dfc:	408b      	lsls	r3, r1
 8000dfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000e02:	431f      	orrs	r7, r3
 8000e04:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e08:	fa04 f301 	lsl.w	r3, r4, r1
 8000e0c:	ea43 030c 	orr.w	r3, r3, ip
 8000e10:	40f4      	lsrs	r4, r6
 8000e12:	fa00 f801 	lsl.w	r8, r0, r1
 8000e16:	0c38      	lsrs	r0, r7, #16
 8000e18:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e1c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e20:	fa1f fc87 	uxth.w	ip, r7
 8000e24:	fb00 441e 	mls	r4, r0, lr, r4
 8000e28:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e2c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e30:	45a1      	cmp	r9, r4
 8000e32:	fa02 f201 	lsl.w	r2, r2, r1
 8000e36:	d90a      	bls.n	8000e4e <__udivmoddi4+0x1a6>
 8000e38:	193c      	adds	r4, r7, r4
 8000e3a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e3e:	f080 8084 	bcs.w	8000f4a <__udivmoddi4+0x2a2>
 8000e42:	45a1      	cmp	r9, r4
 8000e44:	f240 8081 	bls.w	8000f4a <__udivmoddi4+0x2a2>
 8000e48:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e4c:	443c      	add	r4, r7
 8000e4e:	eba4 0409 	sub.w	r4, r4, r9
 8000e52:	fa1f f983 	uxth.w	r9, r3
 8000e56:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e5a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e5e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e62:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e66:	45a4      	cmp	ip, r4
 8000e68:	d907      	bls.n	8000e7a <__udivmoddi4+0x1d2>
 8000e6a:	193c      	adds	r4, r7, r4
 8000e6c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e70:	d267      	bcs.n	8000f42 <__udivmoddi4+0x29a>
 8000e72:	45a4      	cmp	ip, r4
 8000e74:	d965      	bls.n	8000f42 <__udivmoddi4+0x29a>
 8000e76:	3b02      	subs	r3, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e7e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e82:	eba4 040c 	sub.w	r4, r4, ip
 8000e86:	429c      	cmp	r4, r3
 8000e88:	46ce      	mov	lr, r9
 8000e8a:	469c      	mov	ip, r3
 8000e8c:	d351      	bcc.n	8000f32 <__udivmoddi4+0x28a>
 8000e8e:	d04e      	beq.n	8000f2e <__udivmoddi4+0x286>
 8000e90:	b155      	cbz	r5, 8000ea8 <__udivmoddi4+0x200>
 8000e92:	ebb8 030e 	subs.w	r3, r8, lr
 8000e96:	eb64 040c 	sbc.w	r4, r4, ip
 8000e9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e9e:	40cb      	lsrs	r3, r1
 8000ea0:	431e      	orrs	r6, r3
 8000ea2:	40cc      	lsrs	r4, r1
 8000ea4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	e750      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000eac:	f1c2 0320 	rsb	r3, r2, #32
 8000eb0:	fa20 f103 	lsr.w	r1, r0, r3
 8000eb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eb8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ebc:	4094      	lsls	r4, r2
 8000ebe:	430c      	orrs	r4, r1
 8000ec0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ec4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ec8:	fa1f f78c 	uxth.w	r7, ip
 8000ecc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ed0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ed4:	0c23      	lsrs	r3, r4, #16
 8000ed6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eda:	fb00 f107 	mul.w	r1, r0, r7
 8000ede:	4299      	cmp	r1, r3
 8000ee0:	d908      	bls.n	8000ef4 <__udivmoddi4+0x24c>
 8000ee2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ee6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eea:	d22c      	bcs.n	8000f46 <__udivmoddi4+0x29e>
 8000eec:	4299      	cmp	r1, r3
 8000eee:	d92a      	bls.n	8000f46 <__udivmoddi4+0x29e>
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	4463      	add	r3, ip
 8000ef4:	1a5b      	subs	r3, r3, r1
 8000ef6:	b2a4      	uxth	r4, r4
 8000ef8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000efc:	fb08 3311 	mls	r3, r8, r1, r3
 8000f00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f04:	fb01 f307 	mul.w	r3, r1, r7
 8000f08:	42a3      	cmp	r3, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x276>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f14:	d213      	bcs.n	8000f3e <__udivmoddi4+0x296>
 8000f16:	42a3      	cmp	r3, r4
 8000f18:	d911      	bls.n	8000f3e <__udivmoddi4+0x296>
 8000f1a:	3902      	subs	r1, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	1ae4      	subs	r4, r4, r3
 8000f20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f24:	e739      	b.n	8000d9a <__udivmoddi4+0xf2>
 8000f26:	4604      	mov	r4, r0
 8000f28:	e6f0      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f2a:	4608      	mov	r0, r1
 8000f2c:	e706      	b.n	8000d3c <__udivmoddi4+0x94>
 8000f2e:	45c8      	cmp	r8, r9
 8000f30:	d2ae      	bcs.n	8000e90 <__udivmoddi4+0x1e8>
 8000f32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f3a:	3801      	subs	r0, #1
 8000f3c:	e7a8      	b.n	8000e90 <__udivmoddi4+0x1e8>
 8000f3e:	4631      	mov	r1, r6
 8000f40:	e7ed      	b.n	8000f1e <__udivmoddi4+0x276>
 8000f42:	4603      	mov	r3, r0
 8000f44:	e799      	b.n	8000e7a <__udivmoddi4+0x1d2>
 8000f46:	4630      	mov	r0, r6
 8000f48:	e7d4      	b.n	8000ef4 <__udivmoddi4+0x24c>
 8000f4a:	46d6      	mov	lr, sl
 8000f4c:	e77f      	b.n	8000e4e <__udivmoddi4+0x1a6>
 8000f4e:	4463      	add	r3, ip
 8000f50:	3802      	subs	r0, #2
 8000f52:	e74d      	b.n	8000df0 <__udivmoddi4+0x148>
 8000f54:	4606      	mov	r6, r0
 8000f56:	4623      	mov	r3, r4
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e70f      	b.n	8000d7c <__udivmoddi4+0xd4>
 8000f5c:	3e02      	subs	r6, #2
 8000f5e:	4463      	add	r3, ip
 8000f60:	e730      	b.n	8000dc4 <__udivmoddi4+0x11c>
 8000f62:	bf00      	nop

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <HMC5883L_Init>:
#define HMC5883L_4_NUCLEO_64_H_

#include "Drivers/HMC5883L_4_NUCLEO_64.h"
#include "main.h"

void HMC5883L_Init(I2C_HandleTypeDef huart){
 8000f68:	b084      	sub	sp, #16
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b086      	sub	sp, #24
 8000f6e:	af04      	add	r7, sp, #16
 8000f70:	f107 0c10 	add.w	ip, r7, #16
 8000f74:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	 uint8_t data = (COMPASS_SAMPLE8 | COMPASS_RATE15 | COMPASS_MEASURE_NORMAL);
 8000f78:	2370      	movs	r3, #112	@ 0x70
 8000f7a:	71fb      	strb	r3, [r7, #7]
	 uint8_t ScaleMode = COMPASS_SCALE_130;
 8000f7c:	2320      	movs	r3, #32
 8000f7e:	71bb      	strb	r3, [r7, #6]
	 uint8_t Measure = COMPASS_CONTINUOUS;
 8000f80:	2300      	movs	r3, #0
 8000f82:	717b      	strb	r3, [r7, #5]
	 HAL_I2C_Mem_Write(&huart, HMC5883L_ADDRESS, COMPASS_CONFIG_REGISTER_A, 1, &data , 1, 100);
 8000f84:	2364      	movs	r3, #100	@ 0x64
 8000f86:	9302      	str	r3, [sp, #8]
 8000f88:	2301      	movs	r3, #1
 8000f8a:	9301      	str	r3, [sp, #4]
 8000f8c:	1dfb      	adds	r3, r7, #7
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	2301      	movs	r3, #1
 8000f92:	2200      	movs	r2, #0
 8000f94:	213d      	movs	r1, #61	@ 0x3d
 8000f96:	f107 0010 	add.w	r0, r7, #16
 8000f9a:	f002 fb73 	bl	8003684 <HAL_I2C_Mem_Write>
	 HAL_I2C_Mem_Write(&huart, HMC5883L_ADDRESS, COMPASS_CONFIG_REGISTER_B, 1, &ScaleMode , 1, 100);
 8000f9e:	2364      	movs	r3, #100	@ 0x64
 8000fa0:	9302      	str	r3, [sp, #8]
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	9301      	str	r3, [sp, #4]
 8000fa6:	1dbb      	adds	r3, r7, #6
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	2301      	movs	r3, #1
 8000fac:	2201      	movs	r2, #1
 8000fae:	213d      	movs	r1, #61	@ 0x3d
 8000fb0:	f107 0010 	add.w	r0, r7, #16
 8000fb4:	f002 fb66 	bl	8003684 <HAL_I2C_Mem_Write>
	 HAL_I2C_Mem_Write(&huart, HMC5883L_ADDRESS, COMPASS_MODE_REGISTER, 1, &Measure , 1, 100);
 8000fb8:	2364      	movs	r3, #100	@ 0x64
 8000fba:	9302      	str	r3, [sp, #8]
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	9301      	str	r3, [sp, #4]
 8000fc0:	1d7b      	adds	r3, r7, #5
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	213d      	movs	r1, #61	@ 0x3d
 8000fca:	f107 0010 	add.w	r0, r7, #16
 8000fce:	f002 fb59 	bl	8003684 <HAL_I2C_Mem_Write>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fdc:	b004      	add	sp, #16
 8000fde:	4770      	bx	lr

08000fe0 <meanData>:

int16_t meanData(int16_t* buffer) {
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	int16_t mean = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	81fb      	strh	r3, [r7, #14]
	for (int i=0;i<8;i++){
 8000fec:	2300      	movs	r3, #0
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	e00d      	b.n	800100e <meanData+0x2e>
		mean += buffer[i];
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	89fb      	ldrh	r3, [r7, #14]
 8001002:	4413      	add	r3, r2
 8001004:	b29b      	uxth	r3, r3
 8001006:	81fb      	strh	r3, [r7, #14]
	for (int i=0;i<8;i++){
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	3301      	adds	r3, #1
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	2b07      	cmp	r3, #7
 8001012:	ddee      	ble.n	8000ff2 <meanData+0x12>
	}
	return (mean / 8);
 8001014:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001018:	2b00      	cmp	r3, #0
 800101a:	da00      	bge.n	800101e <meanData+0x3e>
 800101c:	3307      	adds	r3, #7
 800101e:	10db      	asrs	r3, r3, #3
 8001020:	b21b      	sxth	r3, r3
}
 8001022:	4618      	mov	r0, r3
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <FilterData>:

int16_t FilterData(int16_t* buffer) {
 800102e:	b580      	push	{r7, lr}
 8001030:	b084      	sub	sp, #16
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
	uint8_t min = 200;
 8001036:	23c8      	movs	r3, #200	@ 0xc8
 8001038:	72fb      	strb	r3, [r7, #11]
	for (int i=1;i<8;i++){
 800103a:	2301      	movs	r3, #1
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	e028      	b.n	8001092 <FilterData+0x64>
		if((abs(buffer[i]-buffer[i-1])) > min ){
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	4413      	add	r3, r2
 8001048:	f9b3 3000 	ldrsh.w	r3, [r3]
 800104c:	4619      	mov	r1, r3
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8001054:	3b01      	subs	r3, #1
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	4413      	add	r3, r2
 800105c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001060:	1acb      	subs	r3, r1, r3
 8001062:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001066:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800106a:	7afb      	ldrb	r3, [r7, #11]
 800106c:	429a      	cmp	r2, r3
 800106e:	dd0d      	ble.n	800108c <FilterData+0x5e>
			buffer[i]=buffer[i-1];
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8001076:	3b01      	subs	r3, #1
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	441a      	add	r2, r3
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	440b      	add	r3, r1
 8001086:	f9b2 2000 	ldrsh.w	r2, [r2]
 800108a:	801a      	strh	r2, [r3, #0]
	for (int i=1;i<8;i++){
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	3301      	adds	r3, #1
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2b07      	cmp	r3, #7
 8001096:	ddd3      	ble.n	8001040 <FilterData+0x12>
		}
	}
	return meanData(buffer);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ffa1 	bl	8000fe0 <meanData>
 800109e:	4603      	mov	r3, r0
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <CompassReadAxis>:

void CompassReadAxis (I2C_HandleTypeDef huart, int16_t* buffer_t_x, int16_t* buffer_t_y){
 80010a8:	b084      	sub	sp, #16
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b088      	sub	sp, #32
 80010ae:	af04      	add	r7, sp, #16
 80010b0:	f107 0c18 	add.w	ip, r7, #24
 80010b4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t buffer[6];
	for (int i=0;i<8;i++){
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	e034      	b.n	8001128 <CompassReadAxis+0x80>
		HAL_I2C_Mem_Read(&huart, HMC5883L_ADDRESS, Data_Output_X_MSB, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&buffer, 6, 100);
 80010be:	2364      	movs	r3, #100	@ 0x64
 80010c0:	9302      	str	r3, [sp, #8]
 80010c2:	2306      	movs	r3, #6
 80010c4:	9301      	str	r3, [sp, #4]
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	2301      	movs	r3, #1
 80010cc:	2203      	movs	r2, #3
 80010ce:	213d      	movs	r1, #61	@ 0x3d
 80010d0:	f107 0018 	add.w	r0, r7, #24
 80010d4:	f002 fbd0 	bl	8003878 <HAL_I2C_Mem_Read>
		buffer_t_x[i] = ((buffer[0] << 8) | buffer[1]);
 80010d8:	793b      	ldrb	r3, [r7, #4]
 80010da:	021b      	lsls	r3, r3, #8
 80010dc:	b219      	sxth	r1, r3
 80010de:	797b      	ldrb	r3, [r7, #5]
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80010e8:	4403      	add	r3, r0
 80010ea:	430a      	orrs	r2, r1
 80010ec:	b212      	sxth	r2, r2
 80010ee:	801a      	strh	r2, [r3, #0]
		HAL_I2C_Mem_Read(&huart, HMC5883L_ADDRESS, Data_Output_Y_MSB, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&buffer, 6, 100);
 80010f0:	2364      	movs	r3, #100	@ 0x64
 80010f2:	9302      	str	r3, [sp, #8]
 80010f4:	2306      	movs	r3, #6
 80010f6:	9301      	str	r3, [sp, #4]
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2301      	movs	r3, #1
 80010fe:	2207      	movs	r2, #7
 8001100:	213d      	movs	r1, #61	@ 0x3d
 8001102:	f107 0018 	add.w	r0, r7, #24
 8001106:	f002 fbb7 	bl	8003878 <HAL_I2C_Mem_Read>
		buffer_t_y[i] = ((buffer[0] << 8) | buffer[1]);
 800110a:	793b      	ldrb	r3, [r7, #4]
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	b219      	sxth	r1, r3
 8001110:	797b      	ldrb	r3, [r7, #5]
 8001112:	b21a      	sxth	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800111a:	4403      	add	r3, r0
 800111c:	430a      	orrs	r2, r1
 800111e:	b212      	sxth	r2, r2
 8001120:	801a      	strh	r2, [r3, #0]
	for (int i=0;i<8;i++){
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	3301      	adds	r3, #1
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2b07      	cmp	r3, #7
 800112c:	ddc7      	ble.n	80010be <CompassReadAxis+0x16>
	}
}
 800112e:	bf00      	nop
 8001130:	bf00      	nop
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800113a:	b004      	add	sp, #16
 800113c:	4770      	bx	lr
	...

08001140 <VectorToAngle>:

float VectorToAngle (int16_t* PosX, int16_t* PosY){
 8001140:	b5b0      	push	{r4, r5, r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
	return (float)atan2(*PosY, *PosX)*180/3.14;
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fa07 	bl	8000564 <__aeabi_i2d>
 8001156:	4604      	mov	r4, r0
 8001158:	460d      	mov	r5, r1
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff f9ff 	bl	8000564 <__aeabi_i2d>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	ec43 2b11 	vmov	d1, r2, r3
 800116e:	ec45 4b10 	vmov	d0, r4, r5
 8001172:	f006 f85d 	bl	8007230 <atan2>
 8001176:	ec53 2b10 	vmov	r2, r3, d0
 800117a:	4610      	mov	r0, r2
 800117c:	4619      	mov	r1, r3
 800117e:	f7ff fd2b 	bl	8000bd8 <__aeabi_d2f>
 8001182:	ee07 0a10 	vmov	s14, r0
 8001186:	eddf 7a10 	vldr	s15, [pc, #64]	@ 80011c8 <VectorToAngle+0x88>
 800118a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800118e:	ee17 0a90 	vmov	r0, s15
 8001192:	f7ff f9f9 	bl	8000588 <__aeabi_f2d>
 8001196:	a30a      	add	r3, pc, #40	@ (adr r3, 80011c0 <VectorToAngle+0x80>)
 8001198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119c:	f7ff fb76 	bl	800088c <__aeabi_ddiv>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	4610      	mov	r0, r2
 80011a6:	4619      	mov	r1, r3
 80011a8:	f7ff fd16 	bl	8000bd8 <__aeabi_d2f>
 80011ac:	4603      	mov	r3, r0
 80011ae:	ee07 3a90 	vmov	s15, r3
}
 80011b2:	eeb0 0a67 	vmov.f32	s0, s15
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bdb0      	pop	{r4, r5, r7, pc}
 80011bc:	f3af 8000 	nop.w
 80011c0:	51eb851f 	.word	0x51eb851f
 80011c4:	40091eb8 	.word	0x40091eb8
 80011c8:	43340000 	.word	0x43340000

080011cc <getDirectionBoat>:

void getDirectionBoat (I2C_HandleTypeDef huart, int16_t* PosX, int16_t* PosY, float* AngleXY){
 80011cc:	b084      	sub	sp, #16
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b09c      	sub	sp, #112	@ 0x70
 80011d2:	af14      	add	r7, sp, #80	@ 0x50
 80011d4:	f107 0c28 	add.w	ip, r7, #40	@ 0x28
 80011d8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int16_t buffer_x[8]; int16_t buffer_y[8];
	CompassReadAxis(huart,buffer_x,buffer_y);
 80011dc:	463b      	mov	r3, r7
 80011de:	9312      	str	r3, [sp, #72]	@ 0x48
 80011e0:	f107 0310 	add.w	r3, r7, #16
 80011e4:	9311      	str	r3, [sp, #68]	@ 0x44
 80011e6:	4668      	mov	r0, sp
 80011e8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011ec:	2244      	movs	r2, #68	@ 0x44
 80011ee:	4619      	mov	r1, r3
 80011f0:	f005 fbd2 	bl	8006998 <memcpy>
 80011f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011fa:	f7ff ff55 	bl	80010a8 <CompassReadAxis>
	*PosX = FilterData(buffer_x);
 80011fe:	f107 0310 	add.w	r3, r7, #16
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ff13 	bl	800102e <FilterData>
 8001208:	4603      	mov	r3, r0
 800120a:	461a      	mov	r2, r3
 800120c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800120e:	801a      	strh	r2, [r3, #0]
	*PosY = FilterData(buffer_y);
 8001210:	463b      	mov	r3, r7
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff ff0b 	bl	800102e <FilterData>
 8001218:	4603      	mov	r3, r0
 800121a:	461a      	mov	r2, r3
 800121c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001220:	801a      	strh	r2, [r3, #0]
    *AngleXY = VectorToAngle(PosY, PosX);
 8001222:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001224:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8001228:	f7ff ff8a 	bl	8001140 <VectorToAngle>
 800122c:	eef0 7a40 	vmov.f32	s15, s0
 8001230:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001234:	edc3 7a00 	vstr	s15, [r3]
}
 8001238:	bf00      	nop
 800123a:	3720      	adds	r7, #32
 800123c:	46bd      	mov	sp, r7
 800123e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001242:	b004      	add	sp, #16
 8001244:	4770      	bx	lr
	...

08001248 <JDY18Driver_Init>:
uint8_t uartBuffer[MAX_SIZE_UART_BUFFER];

scan_t gScan;

void JDY18Driver_Init(JDY18_HandleTypeDef* handler)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	JDY18Driver_SetName(handler->huart, handler->name);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	4619      	mov	r1, r3
 800125a:	4610      	mov	r0, r2
 800125c:	f000 f870 	bl	8001340 <JDY18Driver_SetName>
	JDY18Driver_SetRole(handler->huart, handler->role);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	7a5b      	ldrb	r3, [r3, #9]
 8001268:	4619      	mov	r1, r3
 800126a:	4610      	mov	r0, r2
 800126c:	f000 f8b2 	bl	80013d4 <JDY18Driver_SetRole>
	JDY18Driver_SetBaudRate(handler->huart, handler->baudRate);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	7a1b      	ldrb	r3, [r3, #8]
 8001278:	4619      	mov	r1, r3
 800127a:	4610      	mov	r0, r2
 800127c:	f000 f884 	bl	8001388 <JDY18Driver_SetBaudRate>
	JDY18Driver_SetParity(handler->huart, handler->parity);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	7a9b      	ldrb	r3, [r3, #10]
 8001288:	4619      	mov	r1, r3
 800128a:	4610      	mov	r0, r2
 800128c:	f000 f8c8 	bl	8001420 <JDY18Driver_SetParity>
	JDY18Driver_SetStopBit(handler->huart, handler->stopBit);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	7adb      	ldrb	r3, [r3, #11]
 8001298:	4619      	mov	r1, r3
 800129a:	4610      	mov	r0, r2
 800129c:	f000 f8e6 	bl	800146c <JDY18Driver_SetStopBit>

	HAL_Delay(200);
 80012a0:	20c8      	movs	r0, #200	@ 0xc8
 80012a2:	f001 fcfd 	bl	8002ca0 <HAL_Delay>

	gScan.size = 0;
 80012a6:	4b10      	ldr	r3, [pc, #64]	@ (80012e8 <JDY18Driver_Init+0xa0>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
	memset(uartBuffer, 0, sizeof(uartBuffer));
 80012ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012b2:	2100      	movs	r1, #0
 80012b4:	480d      	ldr	r0, [pc, #52]	@ (80012ec <JDY18Driver_Init+0xa4>)
 80012b6:	f005 fb17 	bl	80068e8 <memset>

	__HAL_UART_ENABLE_IT(handler->huart, UART_IT_IDLE);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	68da      	ldr	r2, [r3, #12]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f042 0210 	orr.w	r2, r2, #16
 80012cc:	60da      	str	r2, [r3, #12]
	HAL_UART_Receive_DMA(handler->huart, uartBuffer, sizeof(uartBuffer));
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012d6:	4905      	ldr	r1, [pc, #20]	@ (80012ec <JDY18Driver_Init+0xa4>)
 80012d8:	4618      	mov	r0, r3
 80012da:	f004 fca8 	bl	8005c2e <HAL_UART_Receive_DMA>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	200004a4 	.word	0x200004a4
 80012ec:	200000bc 	.word	0x200000bc

080012f0 <JDY18Driver_SendData>:

void JDY18Driver_SendData(UART_HandleTypeDef* huart, char *data)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08c      	sub	sp, #48	@ 0x30
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
	char package[MAX_SIZE_DATA + 4];
	memset(package, 0, MAX_SIZE_DATA + 4);
 80012fa:	f107 030c 	add.w	r3, r7, #12
 80012fe:	2222      	movs	r2, #34	@ 0x22
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f005 faf0 	bl	80068e8 <memset>
	sprintf(package, "%s\r\n", data);
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	683a      	ldr	r2, [r7, #0]
 800130e:	490b      	ldr	r1, [pc, #44]	@ (800133c <JDY18Driver_SendData+0x4c>)
 8001310:	4618      	mov	r0, r3
 8001312:	f005 fac9 	bl	80068a8 <siprintf>
	HAL_UART_Transmit(huart, (uint8_t*)package, strlen(package), HAL_MAX_DELAY);
 8001316:	f107 030c 	add.w	r3, r7, #12
 800131a:	4618      	mov	r0, r3
 800131c:	f7fe ff78 	bl	8000210 <strlen>
 8001320:	4603      	mov	r3, r0
 8001322:	b29a      	uxth	r2, r3
 8001324:	f107 010c 	add.w	r1, r7, #12
 8001328:	f04f 33ff 	mov.w	r3, #4294967295
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f004 fbf3 	bl	8005b18 <HAL_UART_Transmit>
}
 8001332:	bf00      	nop
 8001334:	3730      	adds	r7, #48	@ 0x30
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	08008604 	.word	0x08008604

08001340 <JDY18Driver_SetName>:

void JDY18Driver_SetName(UART_HandleTypeDef* huart, char *name)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08c      	sub	sp, #48	@ 0x30
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
	char *instruction = atInstructions[SET_NAME];
 800134a:	4b0d      	ldr	r3, [pc, #52]	@ (8001380 <JDY18Driver_SetName+0x40>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	char data[MAX_SIZE_DATA];
	memset(data, 0, MAX_SIZE_DATA);
 8001350:	f107 030c 	add.w	r3, r7, #12
 8001354:	221e      	movs	r2, #30
 8001356:	2100      	movs	r1, #0
 8001358:	4618      	mov	r0, r3
 800135a:	f005 fac5 	bl	80068e8 <memset>
	sprintf(data, "%s%s", instruction, name);
 800135e:	f107 000c 	add.w	r0, r7, #12
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001366:	4907      	ldr	r1, [pc, #28]	@ (8001384 <JDY18Driver_SetName+0x44>)
 8001368:	f005 fa9e 	bl	80068a8 <siprintf>
	JDY18Driver_SendData(huart, data);
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	4619      	mov	r1, r3
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ffbc 	bl	80012f0 <JDY18Driver_SendData>
}
 8001378:	bf00      	nop
 800137a:	3730      	adds	r7, #48	@ 0x30
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000000 	.word	0x20000000
 8001384:	0800860c 	.word	0x0800860c

08001388 <JDY18Driver_SetBaudRate>:

void JDY18Driver_SetBaudRate(UART_HandleTypeDef* huart, BaudRate_t baudRate)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08c      	sub	sp, #48	@ 0x30
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	70fb      	strb	r3, [r7, #3]
	char *instruction = atInstructions[SET_BAUD_RATE];
 8001394:	4b0d      	ldr	r3, [pc, #52]	@ (80013cc <JDY18Driver_SetBaudRate+0x44>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	62fb      	str	r3, [r7, #44]	@ 0x2c
	char data[MAX_SIZE_DATA];
	memset(data, 0, MAX_SIZE_DATA);
 800139a:	f107 030c 	add.w	r3, r7, #12
 800139e:	221e      	movs	r2, #30
 80013a0:	2100      	movs	r1, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f005 faa0 	bl	80068e8 <memset>
	sprintf(data, "%s%d", instruction, baudRate);
 80013a8:	78fb      	ldrb	r3, [r7, #3]
 80013aa:	f107 000c 	add.w	r0, r7, #12
 80013ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013b0:	4907      	ldr	r1, [pc, #28]	@ (80013d0 <JDY18Driver_SetBaudRate+0x48>)
 80013b2:	f005 fa79 	bl	80068a8 <siprintf>
	JDY18Driver_SendData(huart, data);
 80013b6:	f107 030c 	add.w	r3, r7, #12
 80013ba:	4619      	mov	r1, r3
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff ff97 	bl	80012f0 <JDY18Driver_SendData>
}
 80013c2:	bf00      	nop
 80013c4:	3730      	adds	r7, #48	@ 0x30
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000000 	.word	0x20000000
 80013d0:	08008614 	.word	0x08008614

080013d4 <JDY18Driver_SetRole>:

void JDY18Driver_SetRole(UART_HandleTypeDef* huart, RoleParam_t role)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08c      	sub	sp, #48	@ 0x30
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	70fb      	strb	r3, [r7, #3]
	char *instruction = atInstructions[SET_ROLE];
 80013e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001418 <JDY18Driver_SetRole+0x44>)
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	char data[MAX_SIZE_DATA];
	memset(data, 0, MAX_SIZE_DATA);
 80013e6:	f107 030c 	add.w	r3, r7, #12
 80013ea:	221e      	movs	r2, #30
 80013ec:	2100      	movs	r1, #0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f005 fa7a 	bl	80068e8 <memset>
	sprintf(data, "%s%d", instruction, role);
 80013f4:	78fb      	ldrb	r3, [r7, #3]
 80013f6:	f107 000c 	add.w	r0, r7, #12
 80013fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013fc:	4907      	ldr	r1, [pc, #28]	@ (800141c <JDY18Driver_SetRole+0x48>)
 80013fe:	f005 fa53 	bl	80068a8 <siprintf>
	JDY18Driver_SendData(huart, data);
 8001402:	f107 030c 	add.w	r3, r7, #12
 8001406:	4619      	mov	r1, r3
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff ff71 	bl	80012f0 <JDY18Driver_SendData>
}
 800140e:	bf00      	nop
 8001410:	3730      	adds	r7, #48	@ 0x30
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000000 	.word	0x20000000
 800141c:	08008614 	.word	0x08008614

08001420 <JDY18Driver_SetParity>:

void JDY18Driver_SetParity(UART_HandleTypeDef* huart, ParityParam_t parity)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08c      	sub	sp, #48	@ 0x30
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	70fb      	strb	r3, [r7, #3]
	char *instruction = atInstructions[SET_PARITY];
 800142c:	4b0d      	ldr	r3, [pc, #52]	@ (8001464 <JDY18Driver_SetParity+0x44>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	62fb      	str	r3, [r7, #44]	@ 0x2c
	char data[MAX_SIZE_DATA];
	memset(data, 0, MAX_SIZE_DATA);
 8001432:	f107 030c 	add.w	r3, r7, #12
 8001436:	221e      	movs	r2, #30
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f005 fa54 	bl	80068e8 <memset>
	sprintf(data, "%s%d", instruction, parity);
 8001440:	78fb      	ldrb	r3, [r7, #3]
 8001442:	f107 000c 	add.w	r0, r7, #12
 8001446:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001448:	4907      	ldr	r1, [pc, #28]	@ (8001468 <JDY18Driver_SetParity+0x48>)
 800144a:	f005 fa2d 	bl	80068a8 <siprintf>
	JDY18Driver_SendData(huart, data);
 800144e:	f107 030c 	add.w	r3, r7, #12
 8001452:	4619      	mov	r1, r3
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff ff4b 	bl	80012f0 <JDY18Driver_SendData>
}
 800145a:	bf00      	nop
 800145c:	3730      	adds	r7, #48	@ 0x30
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000000 	.word	0x20000000
 8001468:	08008614 	.word	0x08008614

0800146c <JDY18Driver_SetStopBit>:

void JDY18Driver_SetStopBit(UART_HandleTypeDef* huart, uint8_t stopBit)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08c      	sub	sp, #48	@ 0x30
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	460b      	mov	r3, r1
 8001476:	70fb      	strb	r3, [r7, #3]
	char *instruction = atInstructions[SET_STOP_BIT];
 8001478:	4b0d      	ldr	r3, [pc, #52]	@ (80014b0 <JDY18Driver_SetStopBit+0x44>)
 800147a:	691b      	ldr	r3, [r3, #16]
 800147c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	char data[MAX_SIZE_DATA];
	memset(data, 0, MAX_SIZE_DATA);
 800147e:	f107 030c 	add.w	r3, r7, #12
 8001482:	221e      	movs	r2, #30
 8001484:	2100      	movs	r1, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f005 fa2e 	bl	80068e8 <memset>
	sprintf(data, "%s%d", instruction, stopBit);
 800148c:	78fb      	ldrb	r3, [r7, #3]
 800148e:	f107 000c 	add.w	r0, r7, #12
 8001492:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001494:	4907      	ldr	r1, [pc, #28]	@ (80014b4 <JDY18Driver_SetStopBit+0x48>)
 8001496:	f005 fa07 	bl	80068a8 <siprintf>
	JDY18Driver_SendData(huart, data);
 800149a:	f107 030c 	add.w	r3, r7, #12
 800149e:	4619      	mov	r1, r3
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff ff25 	bl	80012f0 <JDY18Driver_SendData>
}
 80014a6:	bf00      	nop
 80014a8:	3730      	adds	r7, #48	@ 0x30
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000000 	.word	0x20000000
 80014b4:	08008614 	.word	0x08008614

080014b8 <JDY18Driver_InquireDevices>:

void JDY18Driver_InquireDevices(UART_HandleTypeDef* huart)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08c      	sub	sp, #48	@ 0x30
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	char *instruction = atInstructions[MASTER_SCAN_SLAVE];
 80014c0:	4b0d      	ldr	r3, [pc, #52]	@ (80014f8 <JDY18Driver_InquireDevices+0x40>)
 80014c2:	695b      	ldr	r3, [r3, #20]
 80014c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	char data[MAX_SIZE_DATA];
	memset(data, 0, MAX_SIZE_DATA);
 80014c6:	f107 030c 	add.w	r3, r7, #12
 80014ca:	221e      	movs	r2, #30
 80014cc:	2100      	movs	r1, #0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f005 fa0a 	bl	80068e8 <memset>
	sprintf(data, "%s", instruction);
 80014d4:	f107 030c 	add.w	r3, r7, #12
 80014d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80014da:	4908      	ldr	r1, [pc, #32]	@ (80014fc <JDY18Driver_InquireDevices+0x44>)
 80014dc:	4618      	mov	r0, r3
 80014de:	f005 f9e3 	bl	80068a8 <siprintf>
	JDY18Driver_SendData(huart, data);
 80014e2:	f107 030c 	add.w	r3, r7, #12
 80014e6:	4619      	mov	r1, r3
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff ff01 	bl	80012f0 <JDY18Driver_SendData>
}
 80014ee:	bf00      	nop
 80014f0:	3730      	adds	r7, #48	@ 0x30
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000000 	.word	0x20000000
 80014fc:	0800861c 	.word	0x0800861c

08001500 <JDY18Driver_GetScannedDevices>:

void JDY18Driver_GetScannedDevices(scan_t* scan)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	*scan = gScan;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a06      	ldr	r2, [pc, #24]	@ (8001524 <JDY18Driver_GetScannedDevices+0x24>)
 800150c:	4618      	mov	r0, r3
 800150e:	4611      	mov	r1, r2
 8001510:	f44f 73f2 	mov.w	r3, #484	@ 0x1e4
 8001514:	461a      	mov	r2, r3
 8001516:	f005 fa3f 	bl	8006998 <memcpy>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200004a4 	.word	0x200004a4

08001528 <JDY18Driver_LoadDeviceInfo>:

void JDY18Driver_LoadDeviceInfo(char* start, char* end, device_t* device)
{
 8001528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800152c:	b091      	sub	sp, #68	@ 0x44
 800152e:	af00      	add	r7, sp, #0
 8001530:	6178      	str	r0, [r7, #20]
 8001532:	6139      	str	r1, [r7, #16]
 8001534:	60fa      	str	r2, [r7, #12]
 8001536:	466b      	mov	r3, sp
 8001538:	461e      	mov	r6, r3
	size_t size = end - start;
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	63fb      	str	r3, [r7, #60]	@ 0x3c
	char temp[size];
 8001542:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001544:	460b      	mov	r3, r1
 8001546:	3b01      	subs	r3, #1
 8001548:	63bb      	str	r3, [r7, #56]	@ 0x38
 800154a:	2300      	movs	r3, #0
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	f04f 0300 	mov.w	r3, #0
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	00c3      	lsls	r3, r0, #3
 800155c:	6838      	ldr	r0, [r7, #0]
 800155e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001562:	6838      	ldr	r0, [r7, #0]
 8001564:	00c2      	lsls	r2, r0, #3
 8001566:	2300      	movs	r3, #0
 8001568:	468a      	mov	sl, r1
 800156a:	469b      	mov	fp, r3
 800156c:	f04f 0200 	mov.w	r2, #0
 8001570:	f04f 0300 	mov.w	r3, #0
 8001574:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001578:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800157c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001580:	1dcb      	adds	r3, r1, #7
 8001582:	08db      	lsrs	r3, r3, #3
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	ebad 0d03 	sub.w	sp, sp, r3
 800158a:	466b      	mov	r3, sp
 800158c:	3300      	adds	r3, #0
 800158e:	637b      	str	r3, [r7, #52]	@ 0x34
	memcpy(temp, start, size);
 8001590:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001592:	6979      	ldr	r1, [r7, #20]
 8001594:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001596:	f005 f9ff 	bl	8006998 <memcpy>

	char* macAddressPointer = temp + 7;
 800159a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800159c:	3307      	adds	r3, #7
 800159e:	633b      	str	r3, [r7, #48]	@ 0x30
	char* rssiPointer = macAddressPointer + MAC_ADDRESS_SIZE + 1;
 80015a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015a2:	330d      	adds	r3, #13
 80015a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	char* namePointer = strstr(rssiPointer, ",") + 1;
 80015a6:	212c      	movs	r1, #44	@ 0x2c
 80015a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80015aa:	f005 f9a5 	bl	80068f8 <strchr>
 80015ae:	4603      	mov	r3, r0
 80015b0:	3301      	adds	r3, #1
 80015b2:	62bb      	str	r3, [r7, #40]	@ 0x28

	size_t rssiSize = namePointer - rssiPointer - 1;
 80015b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80015b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	3b01      	subs	r3, #1
 80015bc:	627b      	str	r3, [r7, #36]	@ 0x24
	char rssiStr[rssiSize];
 80015be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80015c0:	460b      	mov	r3, r1
 80015c2:	3b01      	subs	r3, #1
 80015c4:	623b      	str	r3, [r7, #32]
 80015c6:	2300      	movs	r3, #0
 80015c8:	4688      	mov	r8, r1
 80015ca:	4699      	mov	r9, r3
 80015cc:	f04f 0200 	mov.w	r2, #0
 80015d0:	f04f 0300 	mov.w	r3, #0
 80015d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80015d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80015dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80015e0:	2300      	movs	r3, #0
 80015e2:	460c      	mov	r4, r1
 80015e4:	461d      	mov	r5, r3
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	f04f 0300 	mov.w	r3, #0
 80015ee:	00eb      	lsls	r3, r5, #3
 80015f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80015f4:	00e2      	lsls	r2, r4, #3
 80015f6:	1dcb      	adds	r3, r1, #7
 80015f8:	08db      	lsrs	r3, r3, #3
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	ebad 0d03 	sub.w	sp, sp, r3
 8001600:	466b      	mov	r3, sp
 8001602:	3300      	adds	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
	memcpy(rssiStr, rssiPointer, rssiSize);
 8001606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001608:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800160a:	69f8      	ldr	r0, [r7, #28]
 800160c:	f005 f9c4 	bl	8006998 <memcpy>

	memcpy(device->mac, macAddressPointer, MAC_ADDRESS_SIZE);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	331e      	adds	r3, #30
 8001614:	220c      	movs	r2, #12
 8001616:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001618:	4618      	mov	r0, r3
 800161a:	f005 f9bd 	bl	8006998 <memcpy>
	memcpy(device->name, namePointer, MAX_DEVICE_NAME_SIZE);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	221e      	movs	r2, #30
 8001622:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001624:	4618      	mov	r0, r3
 8001626:	f005 f9b7 	bl	8006998 <memcpy>
	device->rssi = atoi(rssiStr);
 800162a:	69f8      	ldr	r0, [r7, #28]
 800162c:	f005 f8b4 	bl	8006798 <atoi>
 8001630:	4602      	mov	r2, r0
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001636:	46b5      	mov	sp, r6
}
 8001638:	bf00      	nop
 800163a:	3744      	adds	r7, #68	@ 0x44
 800163c:	46bd      	mov	sp, r7
 800163e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001644 <JDY18Driver_ParseScanResponse>:

void JDY18Driver_ParseScanResponse(char* scanResponse, scan_t* scan)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
	char *start, *end;
	scan->size = 0;
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	2200      	movs	r2, #0
 8001652:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0

	if((start = strstr(scanResponse, INIT_MODULE_RESPONSE_SCAN))) {
 8001656:	4926      	ldr	r1, [pc, #152]	@ (80016f0 <JDY18Driver_ParseScanResponse+0xac>)
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f005 f95a 	bl	8006912 <strstr>
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d040      	beq.n	80016e8 <JDY18Driver_ParseScanResponse+0xa4>
		while((end = strstr(start + 1, INIT_MODULE_RESPONSE_SCAN))) {
 8001666:	e016      	b.n	8001696 <JDY18Driver_ParseScanResponse+0x52>
			JDY18Driver_LoadDeviceInfo(start, end, &scan->devices[scan->size]);
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	f8d3 21e0 	ldr.w	r2, [r3, #480]	@ 0x1e0
 800166e:	4613      	mov	r3, r2
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	4413      	add	r3, r2
 8001674:	011b      	lsls	r3, r3, #4
 8001676:	683a      	ldr	r2, [r7, #0]
 8001678:	4413      	add	r3, r2
 800167a:	461a      	mov	r2, r3
 800167c:	68b9      	ldr	r1, [r7, #8]
 800167e:	68f8      	ldr	r0, [r7, #12]
 8001680:	f7ff ff52 	bl	8001528 <JDY18Driver_LoadDeviceInfo>
			start = end;
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	60fb      	str	r3, [r7, #12]
			scan->size++;
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 800168e:	1c5a      	adds	r2, r3, #1
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
		while((end = strstr(start + 1, INIT_MODULE_RESPONSE_SCAN))) {
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	3301      	adds	r3, #1
 800169a:	4915      	ldr	r1, [pc, #84]	@ (80016f0 <JDY18Driver_ParseScanResponse+0xac>)
 800169c:	4618      	mov	r0, r3
 800169e:	f005 f938 	bl	8006912 <strstr>
 80016a2:	60b8      	str	r0, [r7, #8]
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1de      	bne.n	8001668 <JDY18Driver_ParseScanResponse+0x24>
		}
		if((end = strstr(start + 1, END_RESPONSE_SCAN))) {
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	3301      	adds	r3, #1
 80016ae:	4911      	ldr	r1, [pc, #68]	@ (80016f4 <JDY18Driver_ParseScanResponse+0xb0>)
 80016b0:	4618      	mov	r0, r3
 80016b2:	f005 f92e 	bl	8006912 <strstr>
 80016b6:	60b8      	str	r0, [r7, #8]
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d014      	beq.n	80016e8 <JDY18Driver_ParseScanResponse+0xa4>
			JDY18Driver_LoadDeviceInfo(start, end, &scan->devices[scan->size]);
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	f8d3 21e0 	ldr.w	r2, [r3, #480]	@ 0x1e0
 80016c4:	4613      	mov	r3, r2
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	4413      	add	r3, r2
 80016ca:	011b      	lsls	r3, r3, #4
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	461a      	mov	r2, r3
 80016d2:	68b9      	ldr	r1, [r7, #8]
 80016d4:	68f8      	ldr	r0, [r7, #12]
 80016d6:	f7ff ff27 	bl	8001528 <JDY18Driver_LoadDeviceInfo>
			scan->size++;
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 80016e0:	1c5a      	adds	r2, r3, #1
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
		}
	}
}
 80016e8:	bf00      	nop
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	08008620 	.word	0x08008620
 80016f4:	08008628 	.word	0x08008628

080016f8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0310 	and.w	r3, r3, #16
 800170a:	2b10      	cmp	r3, #16
 800170c:	d124      	bne.n	8001758 <HAL_UART_RxCpltCallback+0x60>
	{
		__HAL_UART_CLEAR_IDLEFLAG(huart);
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	68fb      	ldr	r3, [r7, #12]

		if(strstr((char*)uartBuffer, END_RESPONSE_SCAN)) {
 8001724:	490e      	ldr	r1, [pc, #56]	@ (8001760 <HAL_UART_RxCpltCallback+0x68>)
 8001726:	480f      	ldr	r0, [pc, #60]	@ (8001764 <HAL_UART_RxCpltCallback+0x6c>)
 8001728:	f005 f8f3 	bl	8006912 <strstr>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d012      	beq.n	8001758 <HAL_UART_RxCpltCallback+0x60>
			HAL_UART_DMAStop(huart);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f004 faa0 	bl	8005c78 <HAL_UART_DMAStop>

			JDY18Driver_ParseScanResponse((char*)uartBuffer, &gScan);
 8001738:	490b      	ldr	r1, [pc, #44]	@ (8001768 <HAL_UART_RxCpltCallback+0x70>)
 800173a:	480a      	ldr	r0, [pc, #40]	@ (8001764 <HAL_UART_RxCpltCallback+0x6c>)
 800173c:	f7ff ff82 	bl	8001644 <JDY18Driver_ParseScanResponse>

			memset(uartBuffer, 0, sizeof(uartBuffer));
 8001740:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001744:	2100      	movs	r1, #0
 8001746:	4807      	ldr	r0, [pc, #28]	@ (8001764 <HAL_UART_RxCpltCallback+0x6c>)
 8001748:	f005 f8ce 	bl	80068e8 <memset>
			HAL_UART_Receive_DMA(huart, uartBuffer, sizeof(uartBuffer));
 800174c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001750:	4904      	ldr	r1, [pc, #16]	@ (8001764 <HAL_UART_RxCpltCallback+0x6c>)
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f004 fa6b 	bl	8005c2e <HAL_UART_Receive_DMA>
		}
	}
}
 8001758:	bf00      	nop
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	08008628 	.word	0x08008628
 8001764:	200000bc 	.word	0x200000bc
 8001768:	200004a4 	.word	0x200004a4
 800176c:	00000000 	.word	0x00000000

08001770 <SG90_handlePulse>:

/*
 * É preciso tratar o pulso que é dado. O motor tem funcionamento de 0° a 180°.
 * Limitar o seu pulso no intervalo da largura de pulso de 0.7ms a 2.3ms.
 */
uint16_t SG90_handlePulse(uint16_t period, uint16_t pulse){
 8001770:	b5b0      	push	{r4, r5, r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	460a      	mov	r2, r1
 800177a:	80fb      	strh	r3, [r7, #6]
 800177c:	4613      	mov	r3, r2
 800177e:	80bb      	strh	r3, [r7, #4]
	/*
	 * Retorna o menor pulso se for inferior ao menor possível.
	 * Retorna o maior pulso se for superior ao maior possível.
	 * Retorna o pulso se estiver na faixa aceitável
	 */
	if(pulse < period*DUTY_CYCLE_MIN) pulse = period*DUTY_CYCLE_MIN;
 8001780:	88bb      	ldrh	r3, [r7, #4]
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe feee 	bl	8000564 <__aeabi_i2d>
 8001788:	4604      	mov	r4, r0
 800178a:	460d      	mov	r5, r1
 800178c:	88fb      	ldrh	r3, [r7, #6]
 800178e:	4618      	mov	r0, r3
 8001790:	f7fe fee8 	bl	8000564 <__aeabi_i2d>
 8001794:	a326      	add	r3, pc, #152	@ (adr r3, 8001830 <SG90_handlePulse+0xc0>)
 8001796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179a:	f7fe ff4d 	bl	8000638 <__aeabi_dmul>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4620      	mov	r0, r4
 80017a4:	4629      	mov	r1, r5
 80017a6:	f7ff f9b9 	bl	8000b1c <__aeabi_dcmplt>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d011      	beq.n	80017d4 <SG90_handlePulse+0x64>
 80017b0:	88fb      	ldrh	r3, [r7, #6]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7fe fed6 	bl	8000564 <__aeabi_i2d>
 80017b8:	a31d      	add	r3, pc, #116	@ (adr r3, 8001830 <SG90_handlePulse+0xc0>)
 80017ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017be:	f7fe ff3b 	bl	8000638 <__aeabi_dmul>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4610      	mov	r0, r2
 80017c8:	4619      	mov	r1, r3
 80017ca:	f7ff f9e5 	bl	8000b98 <__aeabi_d2uiz>
 80017ce:	4603      	mov	r3, r0
 80017d0:	80bb      	strh	r3, [r7, #4]
 80017d2:	e028      	b.n	8001826 <SG90_handlePulse+0xb6>
	else if(pulse > period*DUTY_CYCLE_MAX) pulse = period*DUTY_CYCLE_MAX;
 80017d4:	88bb      	ldrh	r3, [r7, #4]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7fe fec4 	bl	8000564 <__aeabi_i2d>
 80017dc:	4604      	mov	r4, r0
 80017de:	460d      	mov	r5, r1
 80017e0:	88fb      	ldrh	r3, [r7, #6]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe febe 	bl	8000564 <__aeabi_i2d>
 80017e8:	a313      	add	r3, pc, #76	@ (adr r3, 8001838 <SG90_handlePulse+0xc8>)
 80017ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ee:	f7fe ff23 	bl	8000638 <__aeabi_dmul>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4620      	mov	r0, r4
 80017f8:	4629      	mov	r1, r5
 80017fa:	f7ff f9ad 	bl	8000b58 <__aeabi_dcmpgt>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d010      	beq.n	8001826 <SG90_handlePulse+0xb6>
 8001804:	88fb      	ldrh	r3, [r7, #6]
 8001806:	4618      	mov	r0, r3
 8001808:	f7fe feac 	bl	8000564 <__aeabi_i2d>
 800180c:	a30a      	add	r3, pc, #40	@ (adr r3, 8001838 <SG90_handlePulse+0xc8>)
 800180e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001812:	f7fe ff11 	bl	8000638 <__aeabi_dmul>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	4610      	mov	r0, r2
 800181c:	4619      	mov	r1, r3
 800181e:	f7ff f9bb 	bl	8000b98 <__aeabi_d2uiz>
 8001822:	4603      	mov	r3, r0
 8001824:	80bb      	strh	r3, [r7, #4]
	return pulse;
 8001826:	88bb      	ldrh	r3, [r7, #4]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bdb0      	pop	{r4, r5, r7, pc}
 8001830:	1eb851ec 	.word	0x1eb851ec
 8001834:	3fa1eb85 	.word	0x3fa1eb85
 8001838:	d70a3d71 	.word	0xd70a3d71
 800183c:	3fbd70a3 	.word	0x3fbd70a3

08001840 <SG90_SetPWM>:

void SG90_SetPWM(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period, uint16_t pulse){
 8001840:	b084      	sub	sp, #16
 8001842:	b580      	push	{r7, lr}
 8001844:	b088      	sub	sp, #32
 8001846:	af00      	add	r7, sp, #0
 8001848:	f107 0c28 	add.w	ip, r7, #40	@ 0x28
 800184c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// Obtém pulso após tratamento de limites.
	pulse = SG90_handlePulse(period, pulse);
 8001850:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 8001854:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8001858:	4611      	mov	r1, r2
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff ff88 	bl	8001770 <SG90_handlePulse>
 8001860:	4603      	mov	r3, r0
 8001862:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
	// Configura registradores para uso do PWM
	HAL_TIM_PWM_Stop(&timer, channel);
 8001866:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001868:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800186c:	f003 fcd4 	bl	8005218 <HAL_TIM_PWM_Stop>
	TIM_OC_InitTypeDef sConfigOC;
	timer.Init.Period = period;
 8001870:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8001874:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_TIM_PWM_Init(&timer);
 8001876:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800187a:	f003 fbb5 	bl	8004fe8 <HAL_TIM_PWM_Init>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800187e:	2360      	movs	r3, #96	@ 0x60
 8001880:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = pulse;
 8001882:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8001886:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
	HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001894:	4619      	mov	r1, r3
 8001896:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800189a:	f003 fd2d 	bl	80052f8 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&timer, channel);
 800189e:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80018a0:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80018a4:	f003 fbf0 	bl	8005088 <HAL_TIM_PWM_Start>
}
 80018a8:	bf00      	nop
 80018aa:	3720      	adds	r7, #32
 80018ac:	46bd      	mov	sp, r7
 80018ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80018b2:	b004      	add	sp, #16
 80018b4:	4770      	bx	lr
	...

080018b8 <SG90_handleAngle>:
/*
Função que irá tratar o ângulo recebibo para as faixas de 0 a 360°.
*/
uint16_t SG90_handleAngle(float angle)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	ed87 0a01 	vstr	s0, [r7, #4]
	// Converter ângulo de -180 a 180 para 0 a 360.
	angle += 180;
 80018c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80018c6:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001918 <SG90_handleAngle+0x60>
 80018ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018ce:	edc7 7a01 	vstr	s15, [r7, #4]
	if (angle > 360)
 80018d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80018d6:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800191c <SG90_handleAngle+0x64>
 80018da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e2:	dd01      	ble.n	80018e8 <SG90_handleAngle+0x30>
		angle = 360;
 80018e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001920 <SG90_handleAngle+0x68>)
 80018e6:	607b      	str	r3, [r7, #4]
	if (angle < 0)
 80018e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80018ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f4:	d502      	bpl.n	80018fc <SG90_handleAngle+0x44>
		angle = 0;
 80018f6:	f04f 0300 	mov.w	r3, #0
 80018fa:	607b      	str	r3, [r7, #4]
	return angle;
 80018fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001904:	ee17 3a90 	vmov	r3, s15
 8001908:	b29b      	uxth	r3, r3
}
 800190a:	4618      	mov	r0, r3
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	43340000 	.word	0x43340000
 800191c:	43b40000 	.word	0x43b40000
 8001920:	43b40000 	.word	0x43b40000
 8001924:	00000000 	.word	0x00000000

08001928 <SG90_angle2Pulse>:
/*
Função que receberá um ângulo e retornará o valor de pulso que o leme deve se movimentar para atender o ângulo.
*/
uint16_t SG90_angle2Pulse(float angle, uint16_t period)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001932:	4603      	mov	r3, r0
 8001934:	807b      	strh	r3, [r7, #2]
	float aux_angle;
	aux_angle = SG90_handleAngle(angle);
 8001936:	ed97 0a01 	vldr	s0, [r7, #4]
 800193a:	f7ff ffbd 	bl	80018b8 <SG90_handleAngle>
 800193e:	4603      	mov	r3, r0
 8001940:	ee07 3a90 	vmov	s15, r3
 8001944:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001948:	edc7 7a03 	vstr	s15, [r7, #12]
	return (44 + aux_angle/3.6);
 800194c:	68f8      	ldr	r0, [r7, #12]
 800194e:	f7fe fe1b 	bl	8000588 <__aeabi_f2d>
 8001952:	a30e      	add	r3, pc, #56	@ (adr r3, 800198c <SG90_angle2Pulse+0x64>)
 8001954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001958:	f7fe ff98 	bl	800088c <__aeabi_ddiv>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4610      	mov	r0, r2
 8001962:	4619      	mov	r1, r3
 8001964:	f04f 0200 	mov.w	r2, #0
 8001968:	4b07      	ldr	r3, [pc, #28]	@ (8001988 <SG90_angle2Pulse+0x60>)
 800196a:	f7fe fcaf 	bl	80002cc <__adddf3>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4610      	mov	r0, r2
 8001974:	4619      	mov	r1, r3
 8001976:	f7ff f90f 	bl	8000b98 <__aeabi_d2uiz>
 800197a:	4603      	mov	r3, r0
 800197c:	b29b      	uxth	r3, r3
}
 800197e:	4618      	mov	r0, r3
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40460000 	.word	0x40460000
 800198c:	cccccccd 	.word	0xcccccccd
 8001990:	400ccccc 	.word	0x400ccccc

08001994 <SG90_Update>:

void SG90_Update(TIM_HandleTypeDef timer, uint32_t channel, float* ActualAngle, float* DesireAngle){
 8001994:	b084      	sub	sp, #16
 8001996:	b5b0      	push	{r4, r5, r7, lr}
 8001998:	b094      	sub	sp, #80	@ 0x50
 800199a:	af12      	add	r7, sp, #72	@ 0x48
 800199c:	f107 0418 	add.w	r4, r7, #24
 80019a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int pulse;
	float DiffAngle = ActualAngle - DesireAngle;
 80019a4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80019a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	109b      	asrs	r3, r3, #2
 80019ac:	ee07 3a90 	vmov	s15, r3
 80019b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019b4:	edc7 7a01 	vstr	s15, [r7, #4]
	pulse = SG90_angle2Pulse(DiffAngle, 1250);
 80019b8:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 80019bc:	ed97 0a01 	vldr	s0, [r7, #4]
 80019c0:	f7ff ffb2 	bl	8001928 <SG90_angle2Pulse>
 80019c4:	4603      	mov	r3, r0
 80019c6:	603b      	str	r3, [r7, #0]
	SG90_SetPWM(timer, channel, 1250, pulse);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	9310      	str	r3, [sp, #64]	@ 0x40
 80019ce:	f240 43e2 	movw	r3, #1250	@ 0x4e2
 80019d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80019d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80019d6:	930e      	str	r3, [sp, #56]	@ 0x38
 80019d8:	466d      	mov	r5, sp
 80019da:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80019de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80019f2:	f107 0318 	add.w	r3, r7, #24
 80019f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019f8:	f7ff ff22 	bl	8001840 <SG90_SetPWM>
}
 80019fc:	bf00      	nop
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001a06:	b004      	add	sp, #16
 8001a08:	4770      	bx	lr
 8001a0a:	0000      	movs	r0, r0
 8001a0c:	0000      	movs	r0, r0
	...

08001a10 <LocationService_Init>:

float trilaterationCalcCPartial = 0;
float trilaterationCalcFPartial = 0;

void LocationService_Init(UART_HandleTypeDef *huart, TIM_HandleTypeDef* htim)
{
 8001a10:	b5b0      	push	{r4, r5, r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
	bleHandler.huart = huart;
 8001a1a:	4a71      	ldr	r2, [pc, #452]	@ (8001be0 <LocationService_Init+0x1d0>)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6013      	str	r3, [r2, #0]
	bleHandler.name = MASTER_BLE_NAME;
 8001a20:	4b6f      	ldr	r3, [pc, #444]	@ (8001be0 <LocationService_Init+0x1d0>)
 8001a22:	4a70      	ldr	r2, [pc, #448]	@ (8001be4 <LocationService_Init+0x1d4>)
 8001a24:	605a      	str	r2, [r3, #4]
	bleHandler.baudRate = BAUD_9600;
 8001a26:	4b6e      	ldr	r3, [pc, #440]	@ (8001be0 <LocationService_Init+0x1d0>)
 8001a28:	2204      	movs	r2, #4
 8001a2a:	721a      	strb	r2, [r3, #8]
	bleHandler.role = MASTER;
 8001a2c:	4b6c      	ldr	r3, [pc, #432]	@ (8001be0 <LocationService_Init+0x1d0>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	725a      	strb	r2, [r3, #9]
	bleHandler.parity = NO_PARITY;
 8001a32:	4b6b      	ldr	r3, [pc, #428]	@ (8001be0 <LocationService_Init+0x1d0>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	729a      	strb	r2, [r3, #10]
	bleHandler.stopBit = 0;
 8001a38:	4b69      	ldr	r3, [pc, #420]	@ (8001be0 <LocationService_Init+0x1d0>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	72da      	strb	r2, [r3, #11]
	JDY18Driver_Init(&bleHandler);
 8001a3e:	4868      	ldr	r0, [pc, #416]	@ (8001be0 <LocationService_Init+0x1d0>)
 8001a40:	f7ff fc02 	bl	8001248 <JDY18Driver_Init>

	DataFilterService_InitBuffer(&b1Buffer);
 8001a44:	4868      	ldr	r0, [pc, #416]	@ (8001be8 <LocationService_Init+0x1d8>)
 8001a46:	f000 fb43 	bl	80020d0 <DataFilterService_InitBuffer>
	DataFilterService_InitBuffer(&b2Buffer);
 8001a4a:	4868      	ldr	r0, [pc, #416]	@ (8001bec <LocationService_Init+0x1dc>)
 8001a4c:	f000 fb40 	bl	80020d0 <DataFilterService_InitBuffer>
	DataFilterService_InitBuffer(&b3Buffer);
 8001a50:	4867      	ldr	r0, [pc, #412]	@ (8001bf0 <LocationService_Init+0x1e0>)
 8001a52:	f000 fb3d 	bl	80020d0 <DataFilterService_InitBuffer>

	trilaterationCalcCPartial = - pow(slaveBeaconLocationB1.longitude, 2) + pow(slaveBeaconLocationB2.longitude, 2) - pow(slaveBeaconLocationB1.latitude, 2) + pow(slaveBeaconLocationB2.latitude, 2);
 8001a56:	4b67      	ldr	r3, [pc, #412]	@ (8001bf4 <LocationService_Init+0x1e4>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7fe fd94 	bl	8000588 <__aeabi_f2d>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	ed9f 1b5c 	vldr	d1, [pc, #368]	@ 8001bd8 <LocationService_Init+0x1c8>
 8001a68:	ec43 2b10 	vmov	d0, r2, r3
 8001a6c:	f005 fbe2 	bl	8007234 <pow>
 8001a70:	ec55 4b10 	vmov	r4, r5, d0
 8001a74:	4b60      	ldr	r3, [pc, #384]	@ (8001bf8 <LocationService_Init+0x1e8>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7fe fd85 	bl	8000588 <__aeabi_f2d>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	ed9f 1b55 	vldr	d1, [pc, #340]	@ 8001bd8 <LocationService_Init+0x1c8>
 8001a86:	ec43 2b10 	vmov	d0, r2, r3
 8001a8a:	f005 fbd3 	bl	8007234 <pow>
 8001a8e:	ec53 2b10 	vmov	r2, r3, d0
 8001a92:	4620      	mov	r0, r4
 8001a94:	4629      	mov	r1, r5
 8001a96:	f7fe fc17 	bl	80002c8 <__aeabi_dsub>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4614      	mov	r4, r2
 8001aa0:	461d      	mov	r5, r3
 8001aa2:	4b55      	ldr	r3, [pc, #340]	@ (8001bf8 <LocationService_Init+0x1e8>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7fe fd6e 	bl	8000588 <__aeabi_f2d>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	ed9f 1b49 	vldr	d1, [pc, #292]	@ 8001bd8 <LocationService_Init+0x1c8>
 8001ab4:	ec43 2b10 	vmov	d0, r2, r3
 8001ab8:	f005 fbbc 	bl	8007234 <pow>
 8001abc:	ec53 2b10 	vmov	r2, r3, d0
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	4629      	mov	r1, r5
 8001ac4:	f7fe fc00 	bl	80002c8 <__aeabi_dsub>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4614      	mov	r4, r2
 8001ace:	461d      	mov	r5, r3
 8001ad0:	4b48      	ldr	r3, [pc, #288]	@ (8001bf4 <LocationService_Init+0x1e4>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe fd57 	bl	8000588 <__aeabi_f2d>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	ed9f 1b3e 	vldr	d1, [pc, #248]	@ 8001bd8 <LocationService_Init+0x1c8>
 8001ae2:	ec43 2b10 	vmov	d0, r2, r3
 8001ae6:	f005 fba5 	bl	8007234 <pow>
 8001aea:	ec53 2b10 	vmov	r2, r3, d0
 8001aee:	4620      	mov	r0, r4
 8001af0:	4629      	mov	r1, r5
 8001af2:	f7fe fbeb 	bl	80002cc <__adddf3>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4610      	mov	r0, r2
 8001afc:	4619      	mov	r1, r3
 8001afe:	f7ff f86b 	bl	8000bd8 <__aeabi_d2f>
 8001b02:	4603      	mov	r3, r0
 8001b04:	4a3d      	ldr	r2, [pc, #244]	@ (8001bfc <LocationService_Init+0x1ec>)
 8001b06:	6013      	str	r3, [r2, #0]
	trilaterationCalcFPartial = - pow(slaveBeaconLocationB2.longitude, 2) + pow(slaveBeaconLocationB3.longitude, 2) - pow(slaveBeaconLocationB2.latitude, 2) + pow(slaveBeaconLocationB3.latitude, 2);
 8001b08:	4b3d      	ldr	r3, [pc, #244]	@ (8001c00 <LocationService_Init+0x1f0>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7fe fd3b 	bl	8000588 <__aeabi_f2d>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	ed9f 1b30 	vldr	d1, [pc, #192]	@ 8001bd8 <LocationService_Init+0x1c8>
 8001b1a:	ec43 2b10 	vmov	d0, r2, r3
 8001b1e:	f005 fb89 	bl	8007234 <pow>
 8001b22:	ec55 4b10 	vmov	r4, r5, d0
 8001b26:	4b33      	ldr	r3, [pc, #204]	@ (8001bf4 <LocationService_Init+0x1e4>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe fd2c 	bl	8000588 <__aeabi_f2d>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	ed9f 1b28 	vldr	d1, [pc, #160]	@ 8001bd8 <LocationService_Init+0x1c8>
 8001b38:	ec43 2b10 	vmov	d0, r2, r3
 8001b3c:	f005 fb7a 	bl	8007234 <pow>
 8001b40:	ec53 2b10 	vmov	r2, r3, d0
 8001b44:	4620      	mov	r0, r4
 8001b46:	4629      	mov	r1, r5
 8001b48:	f7fe fbbe 	bl	80002c8 <__aeabi_dsub>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4614      	mov	r4, r2
 8001b52:	461d      	mov	r5, r3
 8001b54:	4b27      	ldr	r3, [pc, #156]	@ (8001bf4 <LocationService_Init+0x1e4>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7fe fd15 	bl	8000588 <__aeabi_f2d>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	ed9f 1b1d 	vldr	d1, [pc, #116]	@ 8001bd8 <LocationService_Init+0x1c8>
 8001b66:	ec43 2b10 	vmov	d0, r2, r3
 8001b6a:	f005 fb63 	bl	8007234 <pow>
 8001b6e:	ec53 2b10 	vmov	r2, r3, d0
 8001b72:	4620      	mov	r0, r4
 8001b74:	4629      	mov	r1, r5
 8001b76:	f7fe fba7 	bl	80002c8 <__aeabi_dsub>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4614      	mov	r4, r2
 8001b80:	461d      	mov	r5, r3
 8001b82:	4b1f      	ldr	r3, [pc, #124]	@ (8001c00 <LocationService_Init+0x1f0>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe fcfe 	bl	8000588 <__aeabi_f2d>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	ed9f 1b11 	vldr	d1, [pc, #68]	@ 8001bd8 <LocationService_Init+0x1c8>
 8001b94:	ec43 2b10 	vmov	d0, r2, r3
 8001b98:	f005 fb4c 	bl	8007234 <pow>
 8001b9c:	ec53 2b10 	vmov	r2, r3, d0
 8001ba0:	4620      	mov	r0, r4
 8001ba2:	4629      	mov	r1, r5
 8001ba4:	f7fe fb92 	bl	80002cc <__adddf3>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4610      	mov	r0, r2
 8001bae:	4619      	mov	r1, r3
 8001bb0:	f7ff f812 	bl	8000bd8 <__aeabi_d2f>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	4a13      	ldr	r2, [pc, #76]	@ (8001c04 <LocationService_Init+0x1f4>)
 8001bb8:	6013      	str	r3, [r2, #0]

	JDY18Driver_InquireDevices(bleHandler.huart);
 8001bba:	4b09      	ldr	r3, [pc, #36]	@ (8001be0 <LocationService_Init+0x1d0>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff fc7a 	bl	80014b8 <JDY18Driver_InquireDevices>

	HAL_TIM_Base_Start_IT(htim);
 8001bc4:	6838      	ldr	r0, [r7, #0]
 8001bc6:	f003 f99f 	bl	8004f08 <HAL_TIM_Base_Start_IT>
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	f3af 8000 	nop.w
 8001bd8:	00000000 	.word	0x00000000
 8001bdc:	40000000 	.word	0x40000000
 8001be0:	20000688 	.word	0x20000688
 8001be4:	08008634 	.word	0x08008634
 8001be8:	20000694 	.word	0x20000694
 8001bec:	200006c8 	.word	0x200006c8
 8001bf0:	200006fc 	.word	0x200006fc
 8001bf4:	20000020 	.word	0x20000020
 8001bf8:	20000018 	.word	0x20000018
 8001bfc:	20000738 	.word	0x20000738
 8001c00:	20000028 	.word	0x20000028
 8001c04:	2000073c 	.word	0x2000073c

08001c08 <LocationService_CalculateDistance>:

float LocationService_CalculateDistance(int rssi)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
	return pow(10, ((MEASURED_POWER - rssi) / 20));
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	f06f 0351 	mvn.w	r3, #81	@ 0x51
 8001c16:	1a9b      	subs	r3, r3, r2
 8001c18:	4a11      	ldr	r2, [pc, #68]	@ (8001c60 <LocationService_CalculateDistance+0x58>)
 8001c1a:	fb82 1203 	smull	r1, r2, r2, r3
 8001c1e:	10d2      	asrs	r2, r2, #3
 8001c20:	17db      	asrs	r3, r3, #31
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7fe fc9d 	bl	8000564 <__aeabi_i2d>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	ec43 2b11 	vmov	d1, r2, r3
 8001c32:	ed9f 0b09 	vldr	d0, [pc, #36]	@ 8001c58 <LocationService_CalculateDistance+0x50>
 8001c36:	f005 fafd 	bl	8007234 <pow>
 8001c3a:	ec53 2b10 	vmov	r2, r3, d0
 8001c3e:	4610      	mov	r0, r2
 8001c40:	4619      	mov	r1, r3
 8001c42:	f7fe ffc9 	bl	8000bd8 <__aeabi_d2f>
 8001c46:	4603      	mov	r3, r0
 8001c48:	ee07 3a90 	vmov	s15, r3
}
 8001c4c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	00000000 	.word	0x00000000
 8001c5c:	40240000 	.word	0x40240000
 8001c60:	66666667 	.word	0x66666667
 8001c64:	00000000 	.word	0x00000000

08001c68 <LocationService_UpdateLocation>:

void LocationService_UpdateLocation()
{
 8001c68:	b5b0      	push	{r4, r5, r7, lr}
 8001c6a:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8001c6e:	af00      	add	r7, sp, #0
	scan_t scannedDevices;
	float b1Distance = -1, b2Distance = -1, b3Distance = -1;
 8001c70:	4bcb      	ldr	r3, [pc, #812]	@ (8001fa0 <LocationService_UpdateLocation+0x338>)
 8001c72:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8001c76:	4bca      	ldr	r3, [pc, #808]	@ (8001fa0 <LocationService_UpdateLocation+0x338>)
 8001c78:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8001c7c:	4bc8      	ldr	r3, [pc, #800]	@ (8001fa0 <LocationService_UpdateLocation+0x338>)
 8001c7e:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c

	JDY18Driver_GetScannedDevices(&scannedDevices);
 8001c82:	1d3b      	adds	r3, r7, #4
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff fc3b 	bl	8001500 <JDY18Driver_GetScannedDevices>

	for(size_t i = 0; i < scannedDevices.size; i++) {
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 8001c90:	e05e      	b.n	8001d50 <LocationService_UpdateLocation+0xe8>
		char* deviceName = scannedDevices.devices[i].name;
 8001c92:	1d39      	adds	r1, r7, #4
 8001c94:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8001c98:	4613      	mov	r3, r2
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	4413      	add	r3, r2
 8001c9e:	011b      	lsls	r3, r3, #4
 8001ca0:	440b      	add	r3, r1
 8001ca2:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
		int rssi = scannedDevices.devices[i].rssi;
 8001ca6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001caa:	f5a3 7105 	sub.w	r1, r3, #532	@ 0x214
 8001cae:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	4413      	add	r3, r2
 8001cb8:	011b      	lsls	r3, r3, #4
 8001cba:	440b      	add	r3, r1
 8001cbc:	332c      	adds	r3, #44	@ 0x2c
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8

		if(strstr(deviceName, SLAVE_BEACON_NAME_B1) != NULL) {
 8001cc4:	49b7      	ldr	r1, [pc, #732]	@ (8001fa4 <LocationService_UpdateLocation+0x33c>)
 8001cc6:	f8d7 01ec 	ldr.w	r0, [r7, #492]	@ 0x1ec
 8001cca:	f004 fe22 	bl	8006912 <strstr>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00d      	beq.n	8001cf0 <LocationService_UpdateLocation+0x88>
			b1Distance = DataFilterService_MovingAverage(&b1Buffer, LocationService_CalculateDistance(rssi));
 8001cd4:	f8d7 01e8 	ldr.w	r0, [r7, #488]	@ 0x1e8
 8001cd8:	f7ff ff96 	bl	8001c08 <LocationService_CalculateDistance>
 8001cdc:	eef0 7a40 	vmov.f32	s15, s0
 8001ce0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ce4:	48b0      	ldr	r0, [pc, #704]	@ (8001fa8 <LocationService_UpdateLocation+0x340>)
 8001ce6:	f000 fa07 	bl	80020f8 <DataFilterService_MovingAverage>
 8001cea:	ed87 0a85 	vstr	s0, [r7, #532]	@ 0x214
 8001cee:	e02a      	b.n	8001d46 <LocationService_UpdateLocation+0xde>
		} else if(strstr(deviceName, SLAVE_BEACON_NAME_B2) != NULL) {
 8001cf0:	49ae      	ldr	r1, [pc, #696]	@ (8001fac <LocationService_UpdateLocation+0x344>)
 8001cf2:	f8d7 01ec 	ldr.w	r0, [r7, #492]	@ 0x1ec
 8001cf6:	f004 fe0c 	bl	8006912 <strstr>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d00d      	beq.n	8001d1c <LocationService_UpdateLocation+0xb4>
			b2Distance = DataFilterService_MovingAverage(&b2Buffer, LocationService_CalculateDistance(rssi));
 8001d00:	f8d7 01e8 	ldr.w	r0, [r7, #488]	@ 0x1e8
 8001d04:	f7ff ff80 	bl	8001c08 <LocationService_CalculateDistance>
 8001d08:	eef0 7a40 	vmov.f32	s15, s0
 8001d0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d10:	48a7      	ldr	r0, [pc, #668]	@ (8001fb0 <LocationService_UpdateLocation+0x348>)
 8001d12:	f000 f9f1 	bl	80020f8 <DataFilterService_MovingAverage>
 8001d16:	ed87 0a84 	vstr	s0, [r7, #528]	@ 0x210
 8001d1a:	e014      	b.n	8001d46 <LocationService_UpdateLocation+0xde>
		} else if(strstr(deviceName, SLAVE_BEACON_NAME_B3) != NULL) {
 8001d1c:	49a5      	ldr	r1, [pc, #660]	@ (8001fb4 <LocationService_UpdateLocation+0x34c>)
 8001d1e:	f8d7 01ec 	ldr.w	r0, [r7, #492]	@ 0x1ec
 8001d22:	f004 fdf6 	bl	8006912 <strstr>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d00c      	beq.n	8001d46 <LocationService_UpdateLocation+0xde>
			b3Distance = DataFilterService_MovingAverage(&b3Buffer, LocationService_CalculateDistance(rssi));
 8001d2c:	f8d7 01e8 	ldr.w	r0, [r7, #488]	@ 0x1e8
 8001d30:	f7ff ff6a 	bl	8001c08 <LocationService_CalculateDistance>
 8001d34:	eef0 7a40 	vmov.f32	s15, s0
 8001d38:	eeb0 0a67 	vmov.f32	s0, s15
 8001d3c:	489e      	ldr	r0, [pc, #632]	@ (8001fb8 <LocationService_UpdateLocation+0x350>)
 8001d3e:	f000 f9db 	bl	80020f8 <DataFilterService_MovingAverage>
 8001d42:	ed87 0a83 	vstr	s0, [r7, #524]	@ 0x20c
	for(size_t i = 0; i < scannedDevices.size; i++) {
 8001d46:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 8001d50:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001d54:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001d58:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 8001d5c:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d396      	bcc.n	8001c92 <LocationService_UpdateLocation+0x2a>
		}
	}

	if (b1Distance != -1 && b2Distance != -1 && b3Distance != -1) {
 8001d64:	edd7 7a85 	vldr	s15, [r7, #532]	@ 0x214
 8001d68:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001d6c:	eef4 7a47 	vcmp.f32	s15, s14
 8001d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d74:	f000 8106 	beq.w	8001f84 <LocationService_UpdateLocation+0x31c>
 8001d78:	edd7 7a84 	vldr	s15, [r7, #528]	@ 0x210
 8001d7c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001d80:	eef4 7a47 	vcmp.f32	s15, s14
 8001d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d88:	f000 80fc 	beq.w	8001f84 <LocationService_UpdateLocation+0x31c>
 8001d8c:	edd7 7a83 	vldr	s15, [r7, #524]	@ 0x20c
 8001d90:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001d94:	eef4 7a47 	vcmp.f32	s15, s14
 8001d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d9c:	f000 80f2 	beq.w	8001f84 <LocationService_UpdateLocation+0x31c>
		float trilaterationCalcA = -2*slaveBeaconLocationB1.longitude + 2*slaveBeaconLocationB2.longitude;
 8001da0:	4b86      	ldr	r3, [pc, #536]	@ (8001fbc <LocationService_UpdateLocation+0x354>)
 8001da2:	edd3 7a01 	vldr	s15, [r3, #4]
 8001da6:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001daa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001dae:	4b84      	ldr	r3, [pc, #528]	@ (8001fc0 <LocationService_UpdateLocation+0x358>)
 8001db0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001db4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001db8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dbc:	edc7 7a81 	vstr	s15, [r7, #516]	@ 0x204
		float trilaterationCalcB = -2*slaveBeaconLocationB1.latitude + 2*slaveBeaconLocationB2.latitude;
 8001dc0:	4b7e      	ldr	r3, [pc, #504]	@ (8001fbc <LocationService_UpdateLocation+0x354>)
 8001dc2:	edd3 7a00 	vldr	s15, [r3]
 8001dc6:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001dca:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001dce:	4b7c      	ldr	r3, [pc, #496]	@ (8001fc0 <LocationService_UpdateLocation+0x358>)
 8001dd0:	edd3 7a00 	vldr	s15, [r3]
 8001dd4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001dd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ddc:	edc7 7a80 	vstr	s15, [r7, #512]	@ 0x200
		float trilaterationCalcC = pow(b1Distance, 2) - pow(b2Distance, 2) + trilaterationCalcCPartial;
 8001de0:	f8d7 0214 	ldr.w	r0, [r7, #532]	@ 0x214
 8001de4:	f7fe fbd0 	bl	8000588 <__aeabi_f2d>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	ed9f 1b6a 	vldr	d1, [pc, #424]	@ 8001f98 <LocationService_UpdateLocation+0x330>
 8001df0:	ec43 2b10 	vmov	d0, r2, r3
 8001df4:	f005 fa1e 	bl	8007234 <pow>
 8001df8:	ec55 4b10 	vmov	r4, r5, d0
 8001dfc:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8001e00:	f7fe fbc2 	bl	8000588 <__aeabi_f2d>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	ed9f 1b63 	vldr	d1, [pc, #396]	@ 8001f98 <LocationService_UpdateLocation+0x330>
 8001e0c:	ec43 2b10 	vmov	d0, r2, r3
 8001e10:	f005 fa10 	bl	8007234 <pow>
 8001e14:	ec53 2b10 	vmov	r2, r3, d0
 8001e18:	4620      	mov	r0, r4
 8001e1a:	4629      	mov	r1, r5
 8001e1c:	f7fe fa54 	bl	80002c8 <__aeabi_dsub>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4614      	mov	r4, r2
 8001e26:	461d      	mov	r5, r3
 8001e28:	4b66      	ldr	r3, [pc, #408]	@ (8001fc4 <LocationService_UpdateLocation+0x35c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe fbab 	bl	8000588 <__aeabi_f2d>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	4620      	mov	r0, r4
 8001e38:	4629      	mov	r1, r5
 8001e3a:	f7fe fa47 	bl	80002cc <__adddf3>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	4610      	mov	r0, r2
 8001e44:	4619      	mov	r1, r3
 8001e46:	f7fe fec7 	bl	8000bd8 <__aeabi_d2f>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
		float trilaterationCalcD = -2*slaveBeaconLocationB2.longitude + 2*slaveBeaconLocationB3.longitude;
 8001e50:	4b5b      	ldr	r3, [pc, #364]	@ (8001fc0 <LocationService_UpdateLocation+0x358>)
 8001e52:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e56:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001e5a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e5e:	4b5a      	ldr	r3, [pc, #360]	@ (8001fc8 <LocationService_UpdateLocation+0x360>)
 8001e60:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e64:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e6c:	edc7 7a7e 	vstr	s15, [r7, #504]	@ 0x1f8
		float trilaterationCalcE = -2*slaveBeaconLocationB2.latitude + 2*slaveBeaconLocationB3.latitude;
 8001e70:	4b53      	ldr	r3, [pc, #332]	@ (8001fc0 <LocationService_UpdateLocation+0x358>)
 8001e72:	edd3 7a00 	vldr	s15, [r3]
 8001e76:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001e7a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e7e:	4b52      	ldr	r3, [pc, #328]	@ (8001fc8 <LocationService_UpdateLocation+0x360>)
 8001e80:	edd3 7a00 	vldr	s15, [r3]
 8001e84:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e8c:	edc7 7a7d 	vstr	s15, [r7, #500]	@ 0x1f4
		float trilaterationCalcF = pow(b2Distance, 2) - pow(b3Distance, 2) + trilaterationCalcFPartial;
 8001e90:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8001e94:	f7fe fb78 	bl	8000588 <__aeabi_f2d>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	ed9f 1b3e 	vldr	d1, [pc, #248]	@ 8001f98 <LocationService_UpdateLocation+0x330>
 8001ea0:	ec43 2b10 	vmov	d0, r2, r3
 8001ea4:	f005 f9c6 	bl	8007234 <pow>
 8001ea8:	ec55 4b10 	vmov	r4, r5, d0
 8001eac:	f8d7 020c 	ldr.w	r0, [r7, #524]	@ 0x20c
 8001eb0:	f7fe fb6a 	bl	8000588 <__aeabi_f2d>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	ed9f 1b37 	vldr	d1, [pc, #220]	@ 8001f98 <LocationService_UpdateLocation+0x330>
 8001ebc:	ec43 2b10 	vmov	d0, r2, r3
 8001ec0:	f005 f9b8 	bl	8007234 <pow>
 8001ec4:	ec53 2b10 	vmov	r2, r3, d0
 8001ec8:	4620      	mov	r0, r4
 8001eca:	4629      	mov	r1, r5
 8001ecc:	f7fe f9fc 	bl	80002c8 <__aeabi_dsub>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4614      	mov	r4, r2
 8001ed6:	461d      	mov	r5, r3
 8001ed8:	4b3c      	ldr	r3, [pc, #240]	@ (8001fcc <LocationService_UpdateLocation+0x364>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7fe fb53 	bl	8000588 <__aeabi_f2d>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4620      	mov	r0, r4
 8001ee8:	4629      	mov	r1, r5
 8001eea:	f7fe f9ef 	bl	80002cc <__adddf3>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f7fe fe6f 	bl	8000bd8 <__aeabi_d2f>
 8001efa:	4603      	mov	r3, r0
 8001efc:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0

		masterLocation.longitude = (trilaterationCalcC*trilaterationCalcE - trilaterationCalcF*trilaterationCalcB)/(trilaterationCalcE*trilaterationCalcA - trilaterationCalcB*trilaterationCalcD);
 8001f00:	ed97 7a7f 	vldr	s14, [r7, #508]	@ 0x1fc
 8001f04:	edd7 7a7d 	vldr	s15, [r7, #500]	@ 0x1f4
 8001f08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f0c:	edd7 6a7c 	vldr	s13, [r7, #496]	@ 0x1f0
 8001f10:	edd7 7a80 	vldr	s15, [r7, #512]	@ 0x200
 8001f14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f18:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f1c:	ed97 7a7d 	vldr	s14, [r7, #500]	@ 0x1f4
 8001f20:	edd7 7a81 	vldr	s15, [r7, #516]	@ 0x204
 8001f24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f28:	ed97 6a80 	vldr	s12, [r7, #512]	@ 0x200
 8001f2c:	edd7 7a7e 	vldr	s15, [r7, #504]	@ 0x1f8
 8001f30:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f3c:	4b24      	ldr	r3, [pc, #144]	@ (8001fd0 <LocationService_UpdateLocation+0x368>)
 8001f3e:	edc3 7a01 	vstr	s15, [r3, #4]
		masterLocation.latitude= (trilaterationCalcC*trilaterationCalcD - trilaterationCalcA*trilaterationCalcF)/(trilaterationCalcB*trilaterationCalcD - trilaterationCalcA*trilaterationCalcE);
 8001f42:	ed97 7a7f 	vldr	s14, [r7, #508]	@ 0x1fc
 8001f46:	edd7 7a7e 	vldr	s15, [r7, #504]	@ 0x1f8
 8001f4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f4e:	edd7 6a81 	vldr	s13, [r7, #516]	@ 0x204
 8001f52:	edd7 7a7c 	vldr	s15, [r7, #496]	@ 0x1f0
 8001f56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f5a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f5e:	ed97 7a80 	vldr	s14, [r7, #512]	@ 0x200
 8001f62:	edd7 7a7e 	vldr	s15, [r7, #504]	@ 0x1f8
 8001f66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f6a:	ed97 6a81 	vldr	s12, [r7, #516]	@ 0x204
 8001f6e:	edd7 7a7d 	vldr	s15, [r7, #500]	@ 0x1f4
 8001f72:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f76:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f7e:	4b14      	ldr	r3, [pc, #80]	@ (8001fd0 <LocationService_UpdateLocation+0x368>)
 8001f80:	edc3 7a00 	vstr	s15, [r3]
	}

	JDY18Driver_InquireDevices(bleHandler.huart);
 8001f84:	4b13      	ldr	r3, [pc, #76]	@ (8001fd4 <LocationService_UpdateLocation+0x36c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff fa95 	bl	80014b8 <JDY18Driver_InquireDevices>
}
 8001f8e:	bf00      	nop
 8001f90:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bdb0      	pop	{r4, r5, r7, pc}
 8001f98:	00000000 	.word	0x00000000
 8001f9c:	40000000 	.word	0x40000000
 8001fa0:	bf800000 	.word	0xbf800000
 8001fa4:	08008640 	.word	0x08008640
 8001fa8:	20000694 	.word	0x20000694
 8001fac:	0800864c 	.word	0x0800864c
 8001fb0:	200006c8 	.word	0x200006c8
 8001fb4:	08008658 	.word	0x08008658
 8001fb8:	200006fc 	.word	0x200006fc
 8001fbc:	20000018 	.word	0x20000018
 8001fc0:	20000020 	.word	0x20000020
 8001fc4:	20000738 	.word	0x20000738
 8001fc8:	20000028 	.word	0x20000028
 8001fcc:	2000073c 	.word	0x2000073c
 8001fd0:	20000730 	.word	0x20000730
 8001fd4:	20000688 	.word	0x20000688

08001fd8 <LocationService_GetArrivalAngle>:
{
	return masterLocation;
}

float LocationService_GetArrivalAngle()
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
	return atan((masterLocation.longitude - slaveBeaconLocationB2.longitude) / (masterLocation.latitude - slaveBeaconLocationB2.latitude)) * 180 / 3.14159265359 + 180;
 8001fdc:	4b22      	ldr	r3, [pc, #136]	@ (8002068 <LocationService_GetArrivalAngle+0x90>)
 8001fde:	ed93 7a01 	vldr	s14, [r3, #4]
 8001fe2:	4b22      	ldr	r3, [pc, #136]	@ (800206c <LocationService_GetArrivalAngle+0x94>)
 8001fe4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001fe8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fec:	4b1e      	ldr	r3, [pc, #120]	@ (8002068 <LocationService_GetArrivalAngle+0x90>)
 8001fee:	edd3 6a00 	vldr	s13, [r3]
 8001ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800206c <LocationService_GetArrivalAngle+0x94>)
 8001ff4:	edd3 7a00 	vldr	s15, [r3]
 8001ff8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ffc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002000:	ee16 0a90 	vmov	r0, s13
 8002004:	f7fe fac0 	bl	8000588 <__aeabi_f2d>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	ec43 2b10 	vmov	d0, r2, r3
 8002010:	f005 f982 	bl	8007318 <atan>
 8002014:	ec51 0b10 	vmov	r0, r1, d0
 8002018:	f04f 0200 	mov.w	r2, #0
 800201c:	4b14      	ldr	r3, [pc, #80]	@ (8002070 <LocationService_GetArrivalAngle+0x98>)
 800201e:	f7fe fb0b 	bl	8000638 <__aeabi_dmul>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	4610      	mov	r0, r2
 8002028:	4619      	mov	r1, r3
 800202a:	a30d      	add	r3, pc, #52	@ (adr r3, 8002060 <LocationService_GetArrivalAngle+0x88>)
 800202c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002030:	f7fe fc2c 	bl	800088c <__aeabi_ddiv>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	4610      	mov	r0, r2
 800203a:	4619      	mov	r1, r3
 800203c:	f04f 0200 	mov.w	r2, #0
 8002040:	4b0b      	ldr	r3, [pc, #44]	@ (8002070 <LocationService_GetArrivalAngle+0x98>)
 8002042:	f7fe f943 	bl	80002cc <__adddf3>
 8002046:	4602      	mov	r2, r0
 8002048:	460b      	mov	r3, r1
 800204a:	4610      	mov	r0, r2
 800204c:	4619      	mov	r1, r3
 800204e:	f7fe fdc3 	bl	8000bd8 <__aeabi_d2f>
 8002052:	4603      	mov	r3, r0
 8002054:	ee07 3a90 	vmov	s15, r3
}
 8002058:	eeb0 0a67 	vmov.f32	s0, s15
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	54442eea 	.word	0x54442eea
 8002064:	400921fb 	.word	0x400921fb
 8002068:	20000730 	.word	0x20000730
 800206c:	20000020 	.word	0x20000020
 8002070:	40668000 	.word	0x40668000

08002074 <LocationService_IsInDestiny>:

uint8_t LocationService_IsInDestiny()
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
	return ((masterLocation.longitude - slaveBeaconLocationB2.longitude) < PRECISION_BLE_METERS) && ((masterLocation.latitude - slaveBeaconLocationB2.latitude) < PRECISION_BLE_METERS) ? 1 : 0;
 8002078:	4b13      	ldr	r3, [pc, #76]	@ (80020c8 <LocationService_IsInDestiny+0x54>)
 800207a:	ed93 7a01 	vldr	s14, [r3, #4]
 800207e:	4b13      	ldr	r3, [pc, #76]	@ (80020cc <LocationService_IsInDestiny+0x58>)
 8002080:	edd3 7a01 	vldr	s15, [r3, #4]
 8002084:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002088:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800208c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002094:	d510      	bpl.n	80020b8 <LocationService_IsInDestiny+0x44>
 8002096:	4b0c      	ldr	r3, [pc, #48]	@ (80020c8 <LocationService_IsInDestiny+0x54>)
 8002098:	ed93 7a00 	vldr	s14, [r3]
 800209c:	4b0b      	ldr	r3, [pc, #44]	@ (80020cc <LocationService_IsInDestiny+0x58>)
 800209e:	edd3 7a00 	vldr	s15, [r3]
 80020a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020a6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80020aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b2:	d501      	bpl.n	80020b8 <LocationService_IsInDestiny+0x44>
 80020b4:	2301      	movs	r3, #1
 80020b6:	e000      	b.n	80020ba <LocationService_IsInDestiny+0x46>
 80020b8:	2300      	movs	r3, #0
 80020ba:	b2db      	uxtb	r3, r3
}
 80020bc:	4618      	mov	r0, r3
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	20000730 	.word	0x20000730
 80020cc:	20000020 	.word	0x20000020

080020d0 <DataFilterService_InitBuffer>:
 */

#include <Utils/Position_filter.h>

void DataFilterService_InitBuffer(buffer_t* buffer)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
	buffer->size = 0;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	62da      	str	r2, [r3, #44]	@ 0x2c
	buffer->sum = 0;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	629a      	str	r2, [r3, #40]	@ 0x28
	buffer->position = 0;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <DataFilterService_MovingAverage>:

float DataFilterService_MovingAverage(buffer_t* buffer, float newValue) {
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	ed87 0a00 	vstr	s0, [r7]
	if (buffer->size <= MAX_BUFFER_SIZE) buffer->size++;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002108:	2b0a      	cmp	r3, #10
 800210a:	d804      	bhi.n	8002116 <DataFilterService_MovingAverage+0x1e>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002110:	1c5a      	adds	r2, r3, #1
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	62da      	str	r2, [r3, #44]	@ 0x2c
  buffer->sum += newValue - buffer->data[buffer->position];
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	edd3 7a00 	vldr	s15, [r3]
 800212a:	edd7 6a00 	vldr	s13, [r7]
 800212e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002132:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
  buffer->data[buffer->position] = newValue;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	601a      	str	r2, [r3, #0]
  buffer->position = (buffer->position + 1) % MAX_BUFFER_SIZE;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214e:	1c59      	adds	r1, r3, #1
 8002150:	4b0f      	ldr	r3, [pc, #60]	@ (8002190 <DataFilterService_MovingAverage+0x98>)
 8002152:	fba3 2301 	umull	r2, r3, r3, r1
 8002156:	08da      	lsrs	r2, r3, #3
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	1aca      	subs	r2, r1, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	631a      	str	r2, [r3, #48]	@ 0x30
  return (float)buffer->sum / buffer->size;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002170:	ee07 3a90 	vmov	s15, r3
 8002174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002178:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800217c:	eef0 7a66 	vmov.f32	s15, s13
}
 8002180:	eeb0 0a67 	vmov.f32	s0, s15
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	cccccccd 	.word	0xcccccccd

08002194 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002196:	b095      	sub	sp, #84	@ 0x54
 8002198:	af14      	add	r7, sp, #80	@ 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800219a:	f000 fd0f 	bl	8002bbc <HAL_Init>

  /* USER CODE BEGIN Init */
  LocationService_Init(&huart3, &htim3);
 800219e:	4931      	ldr	r1, [pc, #196]	@ (8002264 <main+0xd0>)
 80021a0:	4831      	ldr	r0, [pc, #196]	@ (8002268 <main+0xd4>)
 80021a2:	f7ff fc35 	bl	8001a10 <LocationService_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021a6:	f000 f86f 	bl	8002288 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021aa:	f000 fa03 	bl	80025b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80021ae:	f000 f8cb 	bl	8002348 <MX_I2C1_Init>
  MX_TIM4_Init();
 80021b2:	f000 f951 	bl	8002458 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80021b6:	f000 f9a9 	bl	800250c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80021ba:	f000 f9d1 	bl	8002560 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80021be:	f000 f8f1 	bl	80023a4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HMC5883L_Init(hi2c1);
 80021c2:	4c2a      	ldr	r4, [pc, #168]	@ (800226c <main+0xd8>)
 80021c4:	4668      	mov	r0, sp
 80021c6:	f104 0310 	add.w	r3, r4, #16
 80021ca:	2244      	movs	r2, #68	@ 0x44
 80021cc:	4619      	mov	r1, r3
 80021ce:	f004 fbe3 	bl	8006998 <memcpy>
 80021d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80021d6:	f7fe fec7 	bl	8000f68 <HMC5883L_Init>
  {
    /* USER CODE END WHILE */
	/* USER CODE BEGIN 3 */

	  // Enquanto o barco não chegar no destino é preciso atuar controle sobre ele
	  if(LocationService_IsInDestiny() != 1){
 80021da:	f7ff ff4b 	bl	8002074 <LocationService_IsInDestiny>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d0fa      	beq.n	80021da <main+0x46>
		  // Atualiza magnetômetro
		  getDirectionBoat (hi2c1, &PosBoat.x,&PosBoat.y,&PosBoat.angle);
 80021e4:	4c21      	ldr	r4, [pc, #132]	@ (800226c <main+0xd8>)
 80021e6:	4b22      	ldr	r3, [pc, #136]	@ (8002270 <main+0xdc>)
 80021e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80021ea:	4b22      	ldr	r3, [pc, #136]	@ (8002274 <main+0xe0>)
 80021ec:	9312      	str	r3, [sp, #72]	@ 0x48
 80021ee:	4b22      	ldr	r3, [pc, #136]	@ (8002278 <main+0xe4>)
 80021f0:	9311      	str	r3, [sp, #68]	@ 0x44
 80021f2:	4668      	mov	r0, sp
 80021f4:	f104 0310 	add.w	r3, r4, #16
 80021f8:	2244      	movs	r2, #68	@ 0x44
 80021fa:	4619      	mov	r1, r3
 80021fc:	f004 fbcc 	bl	8006998 <memcpy>
 8002200:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002204:	f7fe ffe2 	bl	80011cc <getDirectionBoat>
		  // Atualiza beacon
		  LocationService_UpdateLocation();
 8002208:	f7ff fd2e 	bl	8001c68 <LocationService_UpdateLocation>
		  DesirePos.angle = LocationService_GetArrivalAngle();
 800220c:	f7ff fee4 	bl	8001fd8 <LocationService_GetArrivalAngle>
 8002210:	eef0 7a40 	vmov.f32	s15, s0
 8002214:	4b19      	ldr	r3, [pc, #100]	@ (800227c <main+0xe8>)
 8002216:	edc3 7a01 	vstr	s15, [r3, #4]
		  PosBoat.angle -= executeControl();
 800221a:	f000 fa33 	bl	8002684 <executeControl>
 800221e:	eeb0 7a40 	vmov.f32	s14, s0
 8002222:	4b15      	ldr	r3, [pc, #84]	@ (8002278 <main+0xe4>)
 8002224:	edd3 7a01 	vldr	s15, [r3, #4]
 8002228:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800222c:	4b12      	ldr	r3, [pc, #72]	@ (8002278 <main+0xe4>)
 800222e:	edc3 7a01 	vstr	s15, [r3, #4]
		  SG90_Update(htim4, TIM_CHANNEL_1, &PosBoat.angle,&DesirePos.angle);
 8002232:	4e13      	ldr	r6, [pc, #76]	@ (8002280 <main+0xec>)
 8002234:	4b13      	ldr	r3, [pc, #76]	@ (8002284 <main+0xf0>)
 8002236:	9310      	str	r3, [sp, #64]	@ 0x40
 8002238:	4b0d      	ldr	r3, [pc, #52]	@ (8002270 <main+0xdc>)
 800223a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800223c:	2300      	movs	r3, #0
 800223e:	930e      	str	r3, [sp, #56]	@ 0x38
 8002240:	466d      	mov	r5, sp
 8002242:	f106 0410 	add.w	r4, r6, #16
 8002246:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002248:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800224a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800224c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800224e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002250:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002252:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002256:	e885 0003 	stmia.w	r5, {r0, r1}
 800225a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800225e:	f7ff fb99 	bl	8001994 <SG90_Update>
	  if(LocationService_IsInDestiny() != 1){
 8002262:	e7ba      	b.n	80021da <main+0x46>
 8002264:	20000794 	.word	0x20000794
 8002268:	2000086c 	.word	0x2000086c
 800226c:	20000740 	.word	0x20000740
 8002270:	200008b8 	.word	0x200008b8
 8002274:	200008b6 	.word	0x200008b6
 8002278:	200008b4 	.word	0x200008b4
 800227c:	200008bc 	.word	0x200008bc
 8002280:	200007dc 	.word	0x200007dc
 8002284:	200008c0 	.word	0x200008c0

08002288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b094      	sub	sp, #80	@ 0x50
 800228c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800228e:	f107 031c 	add.w	r3, r7, #28
 8002292:	2234      	movs	r2, #52	@ 0x34
 8002294:	2100      	movs	r1, #0
 8002296:	4618      	mov	r0, r3
 8002298:	f004 fb26 	bl	80068e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800229c:	f107 0308 	add.w	r3, r7, #8
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ac:	2300      	movs	r3, #0
 80022ae:	607b      	str	r3, [r7, #4]
 80022b0:	4b23      	ldr	r3, [pc, #140]	@ (8002340 <SystemClock_Config+0xb8>)
 80022b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b4:	4a22      	ldr	r2, [pc, #136]	@ (8002340 <SystemClock_Config+0xb8>)
 80022b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80022bc:	4b20      	ldr	r3, [pc, #128]	@ (8002340 <SystemClock_Config+0xb8>)
 80022be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022c4:	607b      	str	r3, [r7, #4]
 80022c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80022c8:	2300      	movs	r3, #0
 80022ca:	603b      	str	r3, [r7, #0]
 80022cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002344 <SystemClock_Config+0xbc>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80022d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002344 <SystemClock_Config+0xbc>)
 80022d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022da:	6013      	str	r3, [r2, #0]
 80022dc:	4b19      	ldr	r3, [pc, #100]	@ (8002344 <SystemClock_Config+0xbc>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80022e4:	603b      	str	r3, [r7, #0]
 80022e6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022e8:	2302      	movs	r3, #2
 80022ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022ec:	2301      	movs	r3, #1
 80022ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022f0:	2310      	movs	r3, #16
 80022f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80022f4:	2300      	movs	r3, #0
 80022f6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022f8:	f107 031c 	add.w	r3, r7, #28
 80022fc:	4618      	mov	r0, r3
 80022fe:	f002 fb65 	bl	80049cc <HAL_RCC_OscConfig>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002308:	f000 fa08 	bl	800271c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800230c:	230f      	movs	r3, #15
 800230e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002310:	2300      	movs	r3, #0
 8002312:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002314:	2300      	movs	r3, #0
 8002316:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8002318:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800231c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800231e:	2300      	movs	r3, #0
 8002320:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002322:	f107 0308 	add.w	r3, r7, #8
 8002326:	2100      	movs	r1, #0
 8002328:	4618      	mov	r0, r3
 800232a:	f002 f88b 	bl	8004444 <HAL_RCC_ClockConfig>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002334:	f000 f9f2 	bl	800271c <Error_Handler>
  }
}
 8002338:	bf00      	nop
 800233a:	3750      	adds	r7, #80	@ 0x50
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40023800 	.word	0x40023800
 8002344:	40007000 	.word	0x40007000

08002348 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800234c:	4b12      	ldr	r3, [pc, #72]	@ (8002398 <MX_I2C1_Init+0x50>)
 800234e:	4a13      	ldr	r2, [pc, #76]	@ (800239c <MX_I2C1_Init+0x54>)
 8002350:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002352:	4b11      	ldr	r3, [pc, #68]	@ (8002398 <MX_I2C1_Init+0x50>)
 8002354:	4a12      	ldr	r2, [pc, #72]	@ (80023a0 <MX_I2C1_Init+0x58>)
 8002356:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002358:	4b0f      	ldr	r3, [pc, #60]	@ (8002398 <MX_I2C1_Init+0x50>)
 800235a:	2200      	movs	r2, #0
 800235c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800235e:	4b0e      	ldr	r3, [pc, #56]	@ (8002398 <MX_I2C1_Init+0x50>)
 8002360:	2200      	movs	r2, #0
 8002362:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002364:	4b0c      	ldr	r3, [pc, #48]	@ (8002398 <MX_I2C1_Init+0x50>)
 8002366:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800236a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800236c:	4b0a      	ldr	r3, [pc, #40]	@ (8002398 <MX_I2C1_Init+0x50>)
 800236e:	2200      	movs	r2, #0
 8002370:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002372:	4b09      	ldr	r3, [pc, #36]	@ (8002398 <MX_I2C1_Init+0x50>)
 8002374:	2200      	movs	r2, #0
 8002376:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002378:	4b07      	ldr	r3, [pc, #28]	@ (8002398 <MX_I2C1_Init+0x50>)
 800237a:	2200      	movs	r2, #0
 800237c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800237e:	4b06      	ldr	r3, [pc, #24]	@ (8002398 <MX_I2C1_Init+0x50>)
 8002380:	2200      	movs	r2, #0
 8002382:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002384:	4804      	ldr	r0, [pc, #16]	@ (8002398 <MX_I2C1_Init+0x50>)
 8002386:	f001 f839 	bl	80033fc <HAL_I2C_Init>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002390:	f000 f9c4 	bl	800271c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002394:	bf00      	nop
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20000740 	.word	0x20000740
 800239c:	40005400 	.word	0x40005400
 80023a0:	000186a0 	.word	0x000186a0

080023a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08a      	sub	sp, #40	@ 0x28
 80023a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023aa:	f107 0320 	add.w	r3, r7, #32
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023b4:	1d3b      	adds	r3, r7, #4
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	605a      	str	r2, [r3, #4]
 80023bc:	609a      	str	r2, [r3, #8]
 80023be:	60da      	str	r2, [r3, #12]
 80023c0:	611a      	str	r2, [r3, #16]
 80023c2:	615a      	str	r2, [r3, #20]
 80023c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023c6:	4b22      	ldr	r3, [pc, #136]	@ (8002450 <MX_TIM3_Init+0xac>)
 80023c8:	4a22      	ldr	r2, [pc, #136]	@ (8002454 <MX_TIM3_Init+0xb0>)
 80023ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 80023cc:	4b20      	ldr	r3, [pc, #128]	@ (8002450 <MX_TIM3_Init+0xac>)
 80023ce:	223f      	movs	r2, #63	@ 0x3f
 80023d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002450 <MX_TIM3_Init+0xac>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1250;
 80023d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002450 <MX_TIM3_Init+0xac>)
 80023da:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 80023de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002450 <MX_TIM3_Init+0xac>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002450 <MX_TIM3_Init+0xac>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80023ec:	4818      	ldr	r0, [pc, #96]	@ (8002450 <MX_TIM3_Init+0xac>)
 80023ee:	f002 fdfb 	bl	8004fe8 <HAL_TIM_PWM_Init>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80023f8:	f000 f990 	bl	800271c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023fc:	2300      	movs	r3, #0
 80023fe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002400:	2300      	movs	r3, #0
 8002402:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002404:	f107 0320 	add.w	r3, r7, #32
 8002408:	4619      	mov	r1, r3
 800240a:	4811      	ldr	r0, [pc, #68]	@ (8002450 <MX_TIM3_Init+0xac>)
 800240c:	f003 fab8 	bl	8005980 <HAL_TIMEx_MasterConfigSynchronization>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002416:	f000 f981 	bl	800271c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800241a:	2360      	movs	r3, #96	@ 0x60
 800241c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800241e:	2300      	movs	r3, #0
 8002420:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800242a:	1d3b      	adds	r3, r7, #4
 800242c:	2204      	movs	r2, #4
 800242e:	4619      	mov	r1, r3
 8002430:	4807      	ldr	r0, [pc, #28]	@ (8002450 <MX_TIM3_Init+0xac>)
 8002432:	f002 ff61 	bl	80052f8 <HAL_TIM_PWM_ConfigChannel>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800243c:	f000 f96e 	bl	800271c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002440:	4803      	ldr	r0, [pc, #12]	@ (8002450 <MX_TIM3_Init+0xac>)
 8002442:	f000 fa19 	bl	8002878 <HAL_TIM_MspPostInit>

}
 8002446:	bf00      	nop
 8002448:	3728      	adds	r7, #40	@ 0x28
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20000794 	.word	0x20000794
 8002454:	40000400 	.word	0x40000400

08002458 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08a      	sub	sp, #40	@ 0x28
 800245c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800245e:	f107 0320 	add.w	r3, r7, #32
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002468:	1d3b      	adds	r3, r7, #4
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	605a      	str	r2, [r3, #4]
 8002470:	609a      	str	r2, [r3, #8]
 8002472:	60da      	str	r2, [r3, #12]
 8002474:	611a      	str	r2, [r3, #16]
 8002476:	615a      	str	r2, [r3, #20]
 8002478:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800247a:	4b22      	ldr	r3, [pc, #136]	@ (8002504 <MX_TIM4_Init+0xac>)
 800247c:	4a22      	ldr	r2, [pc, #136]	@ (8002508 <MX_TIM4_Init+0xb0>)
 800247e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64-1;
 8002480:	4b20      	ldr	r3, [pc, #128]	@ (8002504 <MX_TIM4_Init+0xac>)
 8002482:	223f      	movs	r2, #63	@ 0x3f
 8002484:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002486:	4b1f      	ldr	r3, [pc, #124]	@ (8002504 <MX_TIM4_Init+0xac>)
 8002488:	2200      	movs	r2, #0
 800248a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1250;
 800248c:	4b1d      	ldr	r3, [pc, #116]	@ (8002504 <MX_TIM4_Init+0xac>)
 800248e:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8002492:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002494:	4b1b      	ldr	r3, [pc, #108]	@ (8002504 <MX_TIM4_Init+0xac>)
 8002496:	2200      	movs	r2, #0
 8002498:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800249a:	4b1a      	ldr	r3, [pc, #104]	@ (8002504 <MX_TIM4_Init+0xac>)
 800249c:	2200      	movs	r2, #0
 800249e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80024a0:	4818      	ldr	r0, [pc, #96]	@ (8002504 <MX_TIM4_Init+0xac>)
 80024a2:	f002 fda1 	bl	8004fe8 <HAL_TIM_PWM_Init>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80024ac:	f000 f936 	bl	800271c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024b0:	2300      	movs	r3, #0
 80024b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024b4:	2300      	movs	r3, #0
 80024b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80024b8:	f107 0320 	add.w	r3, r7, #32
 80024bc:	4619      	mov	r1, r3
 80024be:	4811      	ldr	r0, [pc, #68]	@ (8002504 <MX_TIM4_Init+0xac>)
 80024c0:	f003 fa5e 	bl	8005980 <HAL_TIMEx_MasterConfigSynchronization>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80024ca:	f000 f927 	bl	800271c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024ce:	2360      	movs	r3, #96	@ 0x60
 80024d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024da:	2300      	movs	r3, #0
 80024dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024de:	1d3b      	adds	r3, r7, #4
 80024e0:	2200      	movs	r2, #0
 80024e2:	4619      	mov	r1, r3
 80024e4:	4807      	ldr	r0, [pc, #28]	@ (8002504 <MX_TIM4_Init+0xac>)
 80024e6:	f002 ff07 	bl	80052f8 <HAL_TIM_PWM_ConfigChannel>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80024f0:	f000 f914 	bl	800271c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80024f4:	4803      	ldr	r0, [pc, #12]	@ (8002504 <MX_TIM4_Init+0xac>)
 80024f6:	f000 f9bf 	bl	8002878 <HAL_TIM_MspPostInit>

}
 80024fa:	bf00      	nop
 80024fc:	3728      	adds	r7, #40	@ 0x28
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	200007dc 	.word	0x200007dc
 8002508:	40000800 	.word	0x40000800

0800250c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002510:	4b11      	ldr	r3, [pc, #68]	@ (8002558 <MX_USART2_UART_Init+0x4c>)
 8002512:	4a12      	ldr	r2, [pc, #72]	@ (800255c <MX_USART2_UART_Init+0x50>)
 8002514:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002516:	4b10      	ldr	r3, [pc, #64]	@ (8002558 <MX_USART2_UART_Init+0x4c>)
 8002518:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800251c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800251e:	4b0e      	ldr	r3, [pc, #56]	@ (8002558 <MX_USART2_UART_Init+0x4c>)
 8002520:	2200      	movs	r2, #0
 8002522:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002524:	4b0c      	ldr	r3, [pc, #48]	@ (8002558 <MX_USART2_UART_Init+0x4c>)
 8002526:	2200      	movs	r2, #0
 8002528:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800252a:	4b0b      	ldr	r3, [pc, #44]	@ (8002558 <MX_USART2_UART_Init+0x4c>)
 800252c:	2200      	movs	r2, #0
 800252e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002530:	4b09      	ldr	r3, [pc, #36]	@ (8002558 <MX_USART2_UART_Init+0x4c>)
 8002532:	220c      	movs	r2, #12
 8002534:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002536:	4b08      	ldr	r3, [pc, #32]	@ (8002558 <MX_USART2_UART_Init+0x4c>)
 8002538:	2200      	movs	r2, #0
 800253a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800253c:	4b06      	ldr	r3, [pc, #24]	@ (8002558 <MX_USART2_UART_Init+0x4c>)
 800253e:	2200      	movs	r2, #0
 8002540:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002542:	4805      	ldr	r0, [pc, #20]	@ (8002558 <MX_USART2_UART_Init+0x4c>)
 8002544:	f003 fa98 	bl	8005a78 <HAL_UART_Init>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800254e:	f000 f8e5 	bl	800271c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000824 	.word	0x20000824
 800255c:	40004400 	.word	0x40004400

08002560 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002564:	4b11      	ldr	r3, [pc, #68]	@ (80025ac <MX_USART3_UART_Init+0x4c>)
 8002566:	4a12      	ldr	r2, [pc, #72]	@ (80025b0 <MX_USART3_UART_Init+0x50>)
 8002568:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800256a:	4b10      	ldr	r3, [pc, #64]	@ (80025ac <MX_USART3_UART_Init+0x4c>)
 800256c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002570:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002572:	4b0e      	ldr	r3, [pc, #56]	@ (80025ac <MX_USART3_UART_Init+0x4c>)
 8002574:	2200      	movs	r2, #0
 8002576:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002578:	4b0c      	ldr	r3, [pc, #48]	@ (80025ac <MX_USART3_UART_Init+0x4c>)
 800257a:	2200      	movs	r2, #0
 800257c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800257e:	4b0b      	ldr	r3, [pc, #44]	@ (80025ac <MX_USART3_UART_Init+0x4c>)
 8002580:	2200      	movs	r2, #0
 8002582:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002584:	4b09      	ldr	r3, [pc, #36]	@ (80025ac <MX_USART3_UART_Init+0x4c>)
 8002586:	220c      	movs	r2, #12
 8002588:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800258a:	4b08      	ldr	r3, [pc, #32]	@ (80025ac <MX_USART3_UART_Init+0x4c>)
 800258c:	2200      	movs	r2, #0
 800258e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002590:	4b06      	ldr	r3, [pc, #24]	@ (80025ac <MX_USART3_UART_Init+0x4c>)
 8002592:	2200      	movs	r2, #0
 8002594:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002596:	4805      	ldr	r0, [pc, #20]	@ (80025ac <MX_USART3_UART_Init+0x4c>)
 8002598:	f003 fa6e 	bl	8005a78 <HAL_UART_Init>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80025a2:	f000 f8bb 	bl	800271c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	2000086c 	.word	0x2000086c
 80025b0:	40004800 	.word	0x40004800

080025b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b088      	sub	sp, #32
 80025b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ba:	f107 030c 	add.w	r3, r7, #12
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	605a      	str	r2, [r3, #4]
 80025c4:	609a      	str	r2, [r3, #8]
 80025c6:	60da      	str	r2, [r3, #12]
 80025c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	60bb      	str	r3, [r7, #8]
 80025ce:	4b2a      	ldr	r3, [pc, #168]	@ (8002678 <MX_GPIO_Init+0xc4>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d2:	4a29      	ldr	r2, [pc, #164]	@ (8002678 <MX_GPIO_Init+0xc4>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025da:	4b27      	ldr	r3, [pc, #156]	@ (8002678 <MX_GPIO_Init+0xc4>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	60bb      	str	r3, [r7, #8]
 80025e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	607b      	str	r3, [r7, #4]
 80025ea:	4b23      	ldr	r3, [pc, #140]	@ (8002678 <MX_GPIO_Init+0xc4>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ee:	4a22      	ldr	r2, [pc, #136]	@ (8002678 <MX_GPIO_Init+0xc4>)
 80025f0:	f043 0304 	orr.w	r3, r3, #4
 80025f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025f6:	4b20      	ldr	r3, [pc, #128]	@ (8002678 <MX_GPIO_Init+0xc4>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fa:	f003 0304 	and.w	r3, r3, #4
 80025fe:	607b      	str	r3, [r7, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	603b      	str	r3, [r7, #0]
 8002606:	4b1c      	ldr	r3, [pc, #112]	@ (8002678 <MX_GPIO_Init+0xc4>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260a:	4a1b      	ldr	r2, [pc, #108]	@ (8002678 <MX_GPIO_Init+0xc4>)
 800260c:	f043 0302 	orr.w	r3, r3, #2
 8002610:	6313      	str	r3, [r2, #48]	@ 0x30
 8002612:	4b19      	ldr	r3, [pc, #100]	@ (8002678 <MX_GPIO_Init+0xc4>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, L293D_LATCH_Pin|L293D_EN_Pin|L293D_SER_Pin, GPIO_PIN_RESET);
 800261e:	2200      	movs	r2, #0
 8002620:	f44f 7150 	mov.w	r1, #832	@ 0x340
 8002624:	4815      	ldr	r0, [pc, #84]	@ (800267c <MX_GPIO_Init+0xc8>)
 8002626:	f000 fecf 	bl	80033c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L293D_CLK_GPIO_Port, L293D_CLK_Pin, GPIO_PIN_RESET);
 800262a:	2200      	movs	r2, #0
 800262c:	2120      	movs	r1, #32
 800262e:	4814      	ldr	r0, [pc, #80]	@ (8002680 <MX_GPIO_Init+0xcc>)
 8002630:	f000 feca 	bl	80033c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : L293D_LATCH_Pin L293D_EN_Pin L293D_SER_Pin */
  GPIO_InitStruct.Pin = L293D_LATCH_Pin|L293D_EN_Pin|L293D_SER_Pin;
 8002634:	f44f 7350 	mov.w	r3, #832	@ 0x340
 8002638:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800263a:	2301      	movs	r3, #1
 800263c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263e:	2300      	movs	r3, #0
 8002640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002642:	2300      	movs	r3, #0
 8002644:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002646:	f107 030c 	add.w	r3, r7, #12
 800264a:	4619      	mov	r1, r3
 800264c:	480b      	ldr	r0, [pc, #44]	@ (800267c <MX_GPIO_Init+0xc8>)
 800264e:	f000 fd27 	bl	80030a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : L293D_CLK_Pin */
  GPIO_InitStruct.Pin = L293D_CLK_Pin;
 8002652:	2320      	movs	r3, #32
 8002654:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002656:	2301      	movs	r3, #1
 8002658:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265e:	2300      	movs	r3, #0
 8002660:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(L293D_CLK_GPIO_Port, &GPIO_InitStruct);
 8002662:	f107 030c 	add.w	r3, r7, #12
 8002666:	4619      	mov	r1, r3
 8002668:	4805      	ldr	r0, [pc, #20]	@ (8002680 <MX_GPIO_Init+0xcc>)
 800266a:	f000 fd19 	bl	80030a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800266e:	bf00      	nop
 8002670:	3720      	adds	r7, #32
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40023800 	.word	0x40023800
 800267c:	40020000 	.word	0x40020000
 8002680:	40020400 	.word	0x40020400

08002684 <executeControl>:

/* USER CODE BEGIN 4 */
float executeControl(){
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
    erro = PosBoat.angle - DesirePos.angle;
 8002688:	4b1e      	ldr	r3, [pc, #120]	@ (8002704 <executeControl+0x80>)
 800268a:	ed93 7a01 	vldr	s14, [r3, #4]
 800268e:	4b1e      	ldr	r3, [pc, #120]	@ (8002708 <executeControl+0x84>)
 8002690:	edd3 7a01 	vldr	s15, [r3, #4]
 8002694:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002698:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800269c:	ee17 3a90 	vmov	r3, s15
 80026a0:	b21a      	sxth	r2, r3
 80026a2:	4b1a      	ldr	r3, [pc, #104]	@ (800270c <executeControl+0x88>)
 80026a4:	801a      	strh	r2, [r3, #0]
	integrador += erro;
 80026a6:	4b19      	ldr	r3, [pc, #100]	@ (800270c <executeControl+0x88>)
 80026a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026ac:	ee07 3a90 	vmov	s15, r3
 80026b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026b4:	4b16      	ldr	r3, [pc, #88]	@ (8002710 <executeControl+0x8c>)
 80026b6:	edd3 7a00 	vldr	s15, [r3]
 80026ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026be:	4b14      	ldr	r3, [pc, #80]	@ (8002710 <executeControl+0x8c>)
 80026c0:	edc3 7a00 	vstr	s15, [r3]
	return Kp*erro + Ki*integrador;
 80026c4:	4b13      	ldr	r3, [pc, #76]	@ (8002714 <executeControl+0x90>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	461a      	mov	r2, r3
 80026ca:	4b10      	ldr	r3, [pc, #64]	@ (800270c <executeControl+0x88>)
 80026cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026d0:	fb02 f303 	mul.w	r3, r2, r3
 80026d4:	ee07 3a90 	vmov	s15, r3
 80026d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002718 <executeControl+0x94>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	ee07 3a90 	vmov	s15, r3
 80026e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80026e8:	4b09      	ldr	r3, [pc, #36]	@ (8002710 <executeControl+0x8c>)
 80026ea:	edd3 7a00 	vldr	s15, [r3]
 80026ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026f2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80026f6:	eeb0 0a67 	vmov.f32	s0, s15
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	200008b4 	.word	0x200008b4
 8002708:	200008bc 	.word	0x200008bc
 800270c:	200008c4 	.word	0x200008c4
 8002710:	200008c8 	.word	0x200008c8
 8002714:	20000030 	.word	0x20000030
 8002718:	20000031 	.word	0x20000031

0800271c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002720:	b672      	cpsid	i
}
 8002722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002724:	bf00      	nop
 8002726:	e7fd      	b.n	8002724 <Error_Handler+0x8>

08002728 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	607b      	str	r3, [r7, #4]
 8002732:	4b10      	ldr	r3, [pc, #64]	@ (8002774 <HAL_MspInit+0x4c>)
 8002734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002736:	4a0f      	ldr	r2, [pc, #60]	@ (8002774 <HAL_MspInit+0x4c>)
 8002738:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800273c:	6453      	str	r3, [r2, #68]	@ 0x44
 800273e:	4b0d      	ldr	r3, [pc, #52]	@ (8002774 <HAL_MspInit+0x4c>)
 8002740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002742:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002746:	607b      	str	r3, [r7, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	603b      	str	r3, [r7, #0]
 800274e:	4b09      	ldr	r3, [pc, #36]	@ (8002774 <HAL_MspInit+0x4c>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002752:	4a08      	ldr	r2, [pc, #32]	@ (8002774 <HAL_MspInit+0x4c>)
 8002754:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002758:	6413      	str	r3, [r2, #64]	@ 0x40
 800275a:	4b06      	ldr	r3, [pc, #24]	@ (8002774 <HAL_MspInit+0x4c>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002762:	603b      	str	r3, [r7, #0]
 8002764:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40023800 	.word	0x40023800

08002778 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b08a      	sub	sp, #40	@ 0x28
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002780:	f107 0314 	add.w	r3, r7, #20
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	60da      	str	r2, [r3, #12]
 800278e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a19      	ldr	r2, [pc, #100]	@ (80027fc <HAL_I2C_MspInit+0x84>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d12c      	bne.n	80027f4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	613b      	str	r3, [r7, #16]
 800279e:	4b18      	ldr	r3, [pc, #96]	@ (8002800 <HAL_I2C_MspInit+0x88>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a2:	4a17      	ldr	r2, [pc, #92]	@ (8002800 <HAL_I2C_MspInit+0x88>)
 80027a4:	f043 0302 	orr.w	r3, r3, #2
 80027a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027aa:	4b15      	ldr	r3, [pc, #84]	@ (8002800 <HAL_I2C_MspInit+0x88>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	613b      	str	r3, [r7, #16]
 80027b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = MAG_SDA_Pin|MAG_SCL_Pin;
 80027b6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80027ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027bc:	2312      	movs	r3, #18
 80027be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c4:	2303      	movs	r3, #3
 80027c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027c8:	2304      	movs	r3, #4
 80027ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027cc:	f107 0314 	add.w	r3, r7, #20
 80027d0:	4619      	mov	r1, r3
 80027d2:	480c      	ldr	r0, [pc, #48]	@ (8002804 <HAL_I2C_MspInit+0x8c>)
 80027d4:	f000 fc64 	bl	80030a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027d8:	2300      	movs	r3, #0
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	4b08      	ldr	r3, [pc, #32]	@ (8002800 <HAL_I2C_MspInit+0x88>)
 80027de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e0:	4a07      	ldr	r2, [pc, #28]	@ (8002800 <HAL_I2C_MspInit+0x88>)
 80027e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80027e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80027e8:	4b05      	ldr	r3, [pc, #20]	@ (8002800 <HAL_I2C_MspInit+0x88>)
 80027ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80027f4:	bf00      	nop
 80027f6:	3728      	adds	r7, #40	@ 0x28
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40005400 	.word	0x40005400
 8002800:	40023800 	.word	0x40023800
 8002804:	40020400 	.word	0x40020400

08002808 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a15      	ldr	r2, [pc, #84]	@ (800286c <HAL_TIM_PWM_MspInit+0x64>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d10e      	bne.n	8002838 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	4b14      	ldr	r3, [pc, #80]	@ (8002870 <HAL_TIM_PWM_MspInit+0x68>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002822:	4a13      	ldr	r2, [pc, #76]	@ (8002870 <HAL_TIM_PWM_MspInit+0x68>)
 8002824:	f043 0302 	orr.w	r3, r3, #2
 8002828:	6413      	str	r3, [r2, #64]	@ 0x40
 800282a:	4b11      	ldr	r3, [pc, #68]	@ (8002870 <HAL_TIM_PWM_MspInit+0x68>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002836:	e012      	b.n	800285e <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a0d      	ldr	r2, [pc, #52]	@ (8002874 <HAL_TIM_PWM_MspInit+0x6c>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d10d      	bne.n	800285e <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	60bb      	str	r3, [r7, #8]
 8002846:	4b0a      	ldr	r3, [pc, #40]	@ (8002870 <HAL_TIM_PWM_MspInit+0x68>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284a:	4a09      	ldr	r2, [pc, #36]	@ (8002870 <HAL_TIM_PWM_MspInit+0x68>)
 800284c:	f043 0304 	orr.w	r3, r3, #4
 8002850:	6413      	str	r3, [r2, #64]	@ 0x40
 8002852:	4b07      	ldr	r3, [pc, #28]	@ (8002870 <HAL_TIM_PWM_MspInit+0x68>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002856:	f003 0304 	and.w	r3, r3, #4
 800285a:	60bb      	str	r3, [r7, #8]
 800285c:	68bb      	ldr	r3, [r7, #8]
}
 800285e:	bf00      	nop
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	40000400 	.word	0x40000400
 8002870:	40023800 	.word	0x40023800
 8002874:	40000800 	.word	0x40000800

08002878 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b08a      	sub	sp, #40	@ 0x28
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002880:	f107 0314 	add.w	r3, r7, #20
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	605a      	str	r2, [r3, #4]
 800288a:	609a      	str	r2, [r3, #8]
 800288c:	60da      	str	r2, [r3, #12]
 800288e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a24      	ldr	r2, [pc, #144]	@ (8002928 <HAL_TIM_MspPostInit+0xb0>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d11e      	bne.n	80028d8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	613b      	str	r3, [r7, #16]
 800289e:	4b23      	ldr	r3, [pc, #140]	@ (800292c <HAL_TIM_MspPostInit+0xb4>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a2:	4a22      	ldr	r2, [pc, #136]	@ (800292c <HAL_TIM_MspPostInit+0xb4>)
 80028a4:	f043 0301 	orr.w	r3, r3, #1
 80028a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028aa:	4b20      	ldr	r3, [pc, #128]	@ (800292c <HAL_TIM_MspPostInit+0xb4>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	613b      	str	r3, [r7, #16]
 80028b4:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = L293D_PWM_Pin;
 80028b6:	2380      	movs	r3, #128	@ 0x80
 80028b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ba:	2302      	movs	r3, #2
 80028bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028be:	2300      	movs	r3, #0
 80028c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c2:	2300      	movs	r3, #0
 80028c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028c6:	2302      	movs	r3, #2
 80028c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(L293D_PWM_GPIO_Port, &GPIO_InitStruct);
 80028ca:	f107 0314 	add.w	r3, r7, #20
 80028ce:	4619      	mov	r1, r3
 80028d0:	4817      	ldr	r0, [pc, #92]	@ (8002930 <HAL_TIM_MspPostInit+0xb8>)
 80028d2:	f000 fbe5 	bl	80030a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80028d6:	e022      	b.n	800291e <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a15      	ldr	r2, [pc, #84]	@ (8002934 <HAL_TIM_MspPostInit+0xbc>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d11d      	bne.n	800291e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	4b11      	ldr	r3, [pc, #68]	@ (800292c <HAL_TIM_MspPostInit+0xb4>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ea:	4a10      	ldr	r2, [pc, #64]	@ (800292c <HAL_TIM_MspPostInit+0xb4>)
 80028ec:	f043 0302 	orr.w	r3, r3, #2
 80028f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028f2:	4b0e      	ldr	r3, [pc, #56]	@ (800292c <HAL_TIM_MspPostInit+0xb4>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SG90_PWM_Pin;
 80028fe:	2340      	movs	r3, #64	@ 0x40
 8002900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002902:	2302      	movs	r3, #2
 8002904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002906:	2300      	movs	r3, #0
 8002908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290a:	2300      	movs	r3, #0
 800290c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800290e:	2302      	movs	r3, #2
 8002910:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SG90_PWM_GPIO_Port, &GPIO_InitStruct);
 8002912:	f107 0314 	add.w	r3, r7, #20
 8002916:	4619      	mov	r1, r3
 8002918:	4807      	ldr	r0, [pc, #28]	@ (8002938 <HAL_TIM_MspPostInit+0xc0>)
 800291a:	f000 fbc1 	bl	80030a0 <HAL_GPIO_Init>
}
 800291e:	bf00      	nop
 8002920:	3728      	adds	r7, #40	@ 0x28
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40000400 	.word	0x40000400
 800292c:	40023800 	.word	0x40023800
 8002930:	40020000 	.word	0x40020000
 8002934:	40000800 	.word	0x40000800
 8002938:	40020400 	.word	0x40020400

0800293c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b08c      	sub	sp, #48	@ 0x30
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002944:	f107 031c 	add.w	r3, r7, #28
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	605a      	str	r2, [r3, #4]
 800294e:	609a      	str	r2, [r3, #8]
 8002950:	60da      	str	r2, [r3, #12]
 8002952:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a41      	ldr	r2, [pc, #260]	@ (8002a60 <HAL_UART_MspInit+0x124>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d12c      	bne.n	80029b8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	61bb      	str	r3, [r7, #24]
 8002962:	4b40      	ldr	r3, [pc, #256]	@ (8002a64 <HAL_UART_MspInit+0x128>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002966:	4a3f      	ldr	r2, [pc, #252]	@ (8002a64 <HAL_UART_MspInit+0x128>)
 8002968:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800296c:	6413      	str	r3, [r2, #64]	@ 0x40
 800296e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a64 <HAL_UART_MspInit+0x128>)
 8002970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002976:	61bb      	str	r3, [r7, #24]
 8002978:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]
 800297e:	4b39      	ldr	r3, [pc, #228]	@ (8002a64 <HAL_UART_MspInit+0x128>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002982:	4a38      	ldr	r2, [pc, #224]	@ (8002a64 <HAL_UART_MspInit+0x128>)
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	6313      	str	r3, [r2, #48]	@ 0x30
 800298a:	4b36      	ldr	r3, [pc, #216]	@ (8002a64 <HAL_UART_MspInit+0x128>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	617b      	str	r3, [r7, #20]
 8002994:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8002996:	230c      	movs	r3, #12
 8002998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299a:	2302      	movs	r3, #2
 800299c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299e:	2300      	movs	r3, #0
 80029a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a2:	2303      	movs	r3, #3
 80029a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029a6:	2307      	movs	r3, #7
 80029a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029aa:	f107 031c 	add.w	r3, r7, #28
 80029ae:	4619      	mov	r1, r3
 80029b0:	482d      	ldr	r0, [pc, #180]	@ (8002a68 <HAL_UART_MspInit+0x12c>)
 80029b2:	f000 fb75 	bl	80030a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80029b6:	e04f      	b.n	8002a58 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART3)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a2b      	ldr	r2, [pc, #172]	@ (8002a6c <HAL_UART_MspInit+0x130>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d14a      	bne.n	8002a58 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	613b      	str	r3, [r7, #16]
 80029c6:	4b27      	ldr	r3, [pc, #156]	@ (8002a64 <HAL_UART_MspInit+0x128>)
 80029c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ca:	4a26      	ldr	r2, [pc, #152]	@ (8002a64 <HAL_UART_MspInit+0x128>)
 80029cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80029d2:	4b24      	ldr	r3, [pc, #144]	@ (8002a64 <HAL_UART_MspInit+0x128>)
 80029d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029da:	613b      	str	r3, [r7, #16]
 80029dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	4b20      	ldr	r3, [pc, #128]	@ (8002a64 <HAL_UART_MspInit+0x128>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e6:	4a1f      	ldr	r2, [pc, #124]	@ (8002a64 <HAL_UART_MspInit+0x128>)
 80029e8:	f043 0304 	orr.w	r3, r3, #4
 80029ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002a64 <HAL_UART_MspInit+0x128>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f2:	f003 0304 	and.w	r3, r3, #4
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	4b19      	ldr	r3, [pc, #100]	@ (8002a64 <HAL_UART_MspInit+0x128>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a02:	4a18      	ldr	r2, [pc, #96]	@ (8002a64 <HAL_UART_MspInit+0x128>)
 8002a04:	f043 0302 	orr.w	r3, r3, #2
 8002a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a0a:	4b16      	ldr	r3, [pc, #88]	@ (8002a64 <HAL_UART_MspInit+0x128>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	60bb      	str	r3, [r7, #8]
 8002a14:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BLE_RX_Pin;
 8002a16:	2320      	movs	r3, #32
 8002a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a22:	2303      	movs	r3, #3
 8002a24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a26:	2307      	movs	r3, #7
 8002a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BLE_RX_GPIO_Port, &GPIO_InitStruct);
 8002a2a:	f107 031c 	add.w	r3, r7, #28
 8002a2e:	4619      	mov	r1, r3
 8002a30:	480f      	ldr	r0, [pc, #60]	@ (8002a70 <HAL_UART_MspInit+0x134>)
 8002a32:	f000 fb35 	bl	80030a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BLE_TX_Pin;
 8002a36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a40:	2300      	movs	r3, #0
 8002a42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a44:	2303      	movs	r3, #3
 8002a46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a48:	2307      	movs	r3, #7
 8002a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BLE_TX_GPIO_Port, &GPIO_InitStruct);
 8002a4c:	f107 031c 	add.w	r3, r7, #28
 8002a50:	4619      	mov	r1, r3
 8002a52:	4808      	ldr	r0, [pc, #32]	@ (8002a74 <HAL_UART_MspInit+0x138>)
 8002a54:	f000 fb24 	bl	80030a0 <HAL_GPIO_Init>
}
 8002a58:	bf00      	nop
 8002a5a:	3730      	adds	r7, #48	@ 0x30
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40004400 	.word	0x40004400
 8002a64:	40023800 	.word	0x40023800
 8002a68:	40020000 	.word	0x40020000
 8002a6c:	40004800 	.word	0x40004800
 8002a70:	40020800 	.word	0x40020800
 8002a74:	40020400 	.word	0x40020400

08002a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a7c:	bf00      	nop
 8002a7e:	e7fd      	b.n	8002a7c <NMI_Handler+0x4>

08002a80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a84:	bf00      	nop
 8002a86:	e7fd      	b.n	8002a84 <HardFault_Handler+0x4>

08002a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a8c:	bf00      	nop
 8002a8e:	e7fd      	b.n	8002a8c <MemManage_Handler+0x4>

08002a90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a94:	bf00      	nop
 8002a96:	e7fd      	b.n	8002a94 <BusFault_Handler+0x4>

08002a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a9c:	bf00      	nop
 8002a9e:	e7fd      	b.n	8002a9c <UsageFault_Handler+0x4>

08002aa0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002aa4:	bf00      	nop
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ab2:	bf00      	nop
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ac0:	bf00      	nop
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ace:	f000 f8c7 	bl	8002c60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ae0:	4a14      	ldr	r2, [pc, #80]	@ (8002b34 <_sbrk+0x5c>)
 8002ae2:	4b15      	ldr	r3, [pc, #84]	@ (8002b38 <_sbrk+0x60>)
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002aec:	4b13      	ldr	r3, [pc, #76]	@ (8002b3c <_sbrk+0x64>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d102      	bne.n	8002afa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002af4:	4b11      	ldr	r3, [pc, #68]	@ (8002b3c <_sbrk+0x64>)
 8002af6:	4a12      	ldr	r2, [pc, #72]	@ (8002b40 <_sbrk+0x68>)
 8002af8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002afa:	4b10      	ldr	r3, [pc, #64]	@ (8002b3c <_sbrk+0x64>)
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4413      	add	r3, r2
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d207      	bcs.n	8002b18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b08:	f003 ff1a 	bl	8006940 <__errno>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	220c      	movs	r2, #12
 8002b10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b12:	f04f 33ff 	mov.w	r3, #4294967295
 8002b16:	e009      	b.n	8002b2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b18:	4b08      	ldr	r3, [pc, #32]	@ (8002b3c <_sbrk+0x64>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b1e:	4b07      	ldr	r3, [pc, #28]	@ (8002b3c <_sbrk+0x64>)
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4413      	add	r3, r2
 8002b26:	4a05      	ldr	r2, [pc, #20]	@ (8002b3c <_sbrk+0x64>)
 8002b28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3718      	adds	r7, #24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	20020000 	.word	0x20020000
 8002b38:	00000400 	.word	0x00000400
 8002b3c:	200008cc 	.word	0x200008cc
 8002b40:	20000a20 	.word	0x20000a20

08002b44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b48:	4b06      	ldr	r3, [pc, #24]	@ (8002b64 <SystemInit+0x20>)
 8002b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b4e:	4a05      	ldr	r2, [pc, #20]	@ (8002b64 <SystemInit+0x20>)
 8002b50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b58:	bf00      	nop
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <Reset_Handler>:
 8002b68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ba0 <LoopFillZerobss+0xe>
 8002b6c:	f7ff ffea 	bl	8002b44 <SystemInit>
 8002b70:	480c      	ldr	r0, [pc, #48]	@ (8002ba4 <LoopFillZerobss+0x12>)
 8002b72:	490d      	ldr	r1, [pc, #52]	@ (8002ba8 <LoopFillZerobss+0x16>)
 8002b74:	4a0d      	ldr	r2, [pc, #52]	@ (8002bac <LoopFillZerobss+0x1a>)
 8002b76:	2300      	movs	r3, #0
 8002b78:	e002      	b.n	8002b80 <LoopCopyDataInit>

08002b7a <CopyDataInit>:
 8002b7a:	58d4      	ldr	r4, [r2, r3]
 8002b7c:	50c4      	str	r4, [r0, r3]
 8002b7e:	3304      	adds	r3, #4

08002b80 <LoopCopyDataInit>:
 8002b80:	18c4      	adds	r4, r0, r3
 8002b82:	428c      	cmp	r4, r1
 8002b84:	d3f9      	bcc.n	8002b7a <CopyDataInit>
 8002b86:	4a0a      	ldr	r2, [pc, #40]	@ (8002bb0 <LoopFillZerobss+0x1e>)
 8002b88:	4c0a      	ldr	r4, [pc, #40]	@ (8002bb4 <LoopFillZerobss+0x22>)
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	e001      	b.n	8002b92 <LoopFillZerobss>

08002b8e <FillZerobss>:
 8002b8e:	6013      	str	r3, [r2, #0]
 8002b90:	3204      	adds	r2, #4

08002b92 <LoopFillZerobss>:
 8002b92:	42a2      	cmp	r2, r4
 8002b94:	d3fb      	bcc.n	8002b8e <FillZerobss>
 8002b96:	f003 fed9 	bl	800694c <__libc_init_array>
 8002b9a:	f7ff fafb 	bl	8002194 <main>
 8002b9e:	4770      	bx	lr
 8002ba0:	20020000 	.word	0x20020000
 8002ba4:	20000000 	.word	0x20000000
 8002ba8:	200000a0 	.word	0x200000a0
 8002bac:	08008860 	.word	0x08008860
 8002bb0:	200000a0 	.word	0x200000a0
 8002bb4:	20000a1c 	.word	0x20000a1c

08002bb8 <ADC_IRQHandler>:
 8002bb8:	e7fe      	b.n	8002bb8 <ADC_IRQHandler>
	...

08002bbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8002bfc <HAL_Init+0x40>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8002bfc <HAL_Init+0x40>)
 8002bc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8002bfc <HAL_Init+0x40>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a0a      	ldr	r2, [pc, #40]	@ (8002bfc <HAL_Init+0x40>)
 8002bd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002bd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bd8:	4b08      	ldr	r3, [pc, #32]	@ (8002bfc <HAL_Init+0x40>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a07      	ldr	r2, [pc, #28]	@ (8002bfc <HAL_Init+0x40>)
 8002bde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002be2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002be4:	2003      	movs	r0, #3
 8002be6:	f000 f931 	bl	8002e4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bea:	200f      	movs	r0, #15
 8002bec:	f000 f808 	bl	8002c00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bf0:	f7ff fd9a 	bl	8002728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40023c00 	.word	0x40023c00

08002c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c08:	4b12      	ldr	r3, [pc, #72]	@ (8002c54 <HAL_InitTick+0x54>)
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	4b12      	ldr	r3, [pc, #72]	@ (8002c58 <HAL_InitTick+0x58>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	4619      	mov	r1, r3
 8002c12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 f93b 	bl	8002e9a <HAL_SYSTICK_Config>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e00e      	b.n	8002c4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b0f      	cmp	r3, #15
 8002c32:	d80a      	bhi.n	8002c4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c34:	2200      	movs	r2, #0
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	f04f 30ff 	mov.w	r0, #4294967295
 8002c3c:	f000 f911 	bl	8002e62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c40:	4a06      	ldr	r2, [pc, #24]	@ (8002c5c <HAL_InitTick+0x5c>)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
 8002c48:	e000      	b.n	8002c4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	20000034 	.word	0x20000034
 8002c58:	2000003c 	.word	0x2000003c
 8002c5c:	20000038 	.word	0x20000038

08002c60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c64:	4b06      	ldr	r3, [pc, #24]	@ (8002c80 <HAL_IncTick+0x20>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	461a      	mov	r2, r3
 8002c6a:	4b06      	ldr	r3, [pc, #24]	@ (8002c84 <HAL_IncTick+0x24>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4413      	add	r3, r2
 8002c70:	4a04      	ldr	r2, [pc, #16]	@ (8002c84 <HAL_IncTick+0x24>)
 8002c72:	6013      	str	r3, [r2, #0]
}
 8002c74:	bf00      	nop
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	2000003c 	.word	0x2000003c
 8002c84:	200008d0 	.word	0x200008d0

08002c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c8c:	4b03      	ldr	r3, [pc, #12]	@ (8002c9c <HAL_GetTick+0x14>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	200008d0 	.word	0x200008d0

08002ca0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ca8:	f7ff ffee 	bl	8002c88 <HAL_GetTick>
 8002cac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb8:	d005      	beq.n	8002cc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cba:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce4 <HAL_Delay+0x44>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cc6:	bf00      	nop
 8002cc8:	f7ff ffde 	bl	8002c88 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d8f7      	bhi.n	8002cc8 <HAL_Delay+0x28>
  {
  }
}
 8002cd8:	bf00      	nop
 8002cda:	bf00      	nop
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	2000003c 	.word	0x2000003c

08002ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8002d2c <__NVIC_SetPriorityGrouping+0x44>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cfe:	68ba      	ldr	r2, [r7, #8]
 8002d00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d04:	4013      	ands	r3, r2
 8002d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d1a:	4a04      	ldr	r2, [pc, #16]	@ (8002d2c <__NVIC_SetPriorityGrouping+0x44>)
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	60d3      	str	r3, [r2, #12]
}
 8002d20:	bf00      	nop
 8002d22:	3714      	adds	r7, #20
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	e000ed00 	.word	0xe000ed00

08002d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d34:	4b04      	ldr	r3, [pc, #16]	@ (8002d48 <__NVIC_GetPriorityGrouping+0x18>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	0a1b      	lsrs	r3, r3, #8
 8002d3a:	f003 0307 	and.w	r3, r3, #7
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	e000ed00 	.word	0xe000ed00

08002d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	4603      	mov	r3, r0
 8002d54:	6039      	str	r1, [r7, #0]
 8002d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	db0a      	blt.n	8002d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	490c      	ldr	r1, [pc, #48]	@ (8002d98 <__NVIC_SetPriority+0x4c>)
 8002d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6a:	0112      	lsls	r2, r2, #4
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	440b      	add	r3, r1
 8002d70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d74:	e00a      	b.n	8002d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	4908      	ldr	r1, [pc, #32]	@ (8002d9c <__NVIC_SetPriority+0x50>)
 8002d7c:	79fb      	ldrb	r3, [r7, #7]
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	3b04      	subs	r3, #4
 8002d84:	0112      	lsls	r2, r2, #4
 8002d86:	b2d2      	uxtb	r2, r2
 8002d88:	440b      	add	r3, r1
 8002d8a:	761a      	strb	r2, [r3, #24]
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	e000e100 	.word	0xe000e100
 8002d9c:	e000ed00 	.word	0xe000ed00

08002da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b089      	sub	sp, #36	@ 0x24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	f1c3 0307 	rsb	r3, r3, #7
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	bf28      	it	cs
 8002dbe:	2304      	movcs	r3, #4
 8002dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	2b06      	cmp	r3, #6
 8002dc8:	d902      	bls.n	8002dd0 <NVIC_EncodePriority+0x30>
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	3b03      	subs	r3, #3
 8002dce:	e000      	b.n	8002dd2 <NVIC_EncodePriority+0x32>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43da      	mvns	r2, r3
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	401a      	ands	r2, r3
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002de8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	fa01 f303 	lsl.w	r3, r1, r3
 8002df2:	43d9      	mvns	r1, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df8:	4313      	orrs	r3, r2
         );
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3724      	adds	r7, #36	@ 0x24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
	...

08002e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e18:	d301      	bcc.n	8002e1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e00f      	b.n	8002e3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002e48 <SysTick_Config+0x40>)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e26:	210f      	movs	r1, #15
 8002e28:	f04f 30ff 	mov.w	r0, #4294967295
 8002e2c:	f7ff ff8e 	bl	8002d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e30:	4b05      	ldr	r3, [pc, #20]	@ (8002e48 <SysTick_Config+0x40>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e36:	4b04      	ldr	r3, [pc, #16]	@ (8002e48 <SysTick_Config+0x40>)
 8002e38:	2207      	movs	r2, #7
 8002e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	e000e010 	.word	0xe000e010

08002e4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f7ff ff47 	bl	8002ce8 <__NVIC_SetPriorityGrouping>
}
 8002e5a:	bf00      	nop
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b086      	sub	sp, #24
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	4603      	mov	r3, r0
 8002e6a:	60b9      	str	r1, [r7, #8]
 8002e6c:	607a      	str	r2, [r7, #4]
 8002e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e74:	f7ff ff5c 	bl	8002d30 <__NVIC_GetPriorityGrouping>
 8002e78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	68b9      	ldr	r1, [r7, #8]
 8002e7e:	6978      	ldr	r0, [r7, #20]
 8002e80:	f7ff ff8e 	bl	8002da0 <NVIC_EncodePriority>
 8002e84:	4602      	mov	r2, r0
 8002e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e8a:	4611      	mov	r1, r2
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff ff5d 	bl	8002d4c <__NVIC_SetPriority>
}
 8002e92:	bf00      	nop
 8002e94:	3718      	adds	r7, #24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b082      	sub	sp, #8
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7ff ffb0 	bl	8002e08 <SysTick_Config>
 8002ea8:	4603      	mov	r3, r0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b086      	sub	sp, #24
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	60f8      	str	r0, [r7, #12]
 8002eba:	60b9      	str	r1, [r7, #8]
 8002ebc:	607a      	str	r2, [r7, #4]
 8002ebe:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec8:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d101      	bne.n	8002ed8 <HAL_DMA_Start_IT+0x26>
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	e040      	b.n	8002f5a <HAL_DMA_Start_IT+0xa8>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d12f      	bne.n	8002f4c <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2202      	movs	r2, #2
 8002ef0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	68b9      	ldr	r1, [r7, #8]
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 f89e 	bl	8003042 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f0a:	223f      	movs	r2, #63	@ 0x3f
 8002f0c:	409a      	lsls	r2, r3
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f042 0216 	orr.w	r2, r2, #22
 8002f20:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d007      	beq.n	8002f3a <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f042 0208 	orr.w	r2, r2, #8
 8002f38:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f042 0201 	orr.w	r2, r2, #1
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	e005      	b.n	8002f58 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f54:	2302      	movs	r3, #2
 8002f56:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f58:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3718      	adds	r7, #24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b084      	sub	sp, #16
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f6e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f70:	f7ff fe8a 	bl	8002c88 <HAL_GetTick>
 8002f74:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d008      	beq.n	8002f94 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2280      	movs	r2, #128	@ 0x80
 8002f86:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e052      	b.n	800303a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0216 	bic.w	r2, r2, #22
 8002fa2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	695a      	ldr	r2, [r3, #20]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002fb2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d103      	bne.n	8002fc4 <HAL_DMA_Abort+0x62>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d007      	beq.n	8002fd4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0208 	bic.w	r2, r2, #8
 8002fd2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 0201 	bic.w	r2, r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fe4:	e013      	b.n	800300e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fe6:	f7ff fe4f 	bl	8002c88 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b05      	cmp	r3, #5
 8002ff2:	d90c      	bls.n	800300e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2203      	movs	r2, #3
 8002ffe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e015      	b.n	800303a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1e4      	bne.n	8002fe6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003020:	223f      	movs	r2, #63	@ 0x3f
 8003022:	409a      	lsls	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003042:	b480      	push	{r7}
 8003044:	b085      	sub	sp, #20
 8003046:	af00      	add	r7, sp, #0
 8003048:	60f8      	str	r0, [r7, #12]
 800304a:	60b9      	str	r1, [r7, #8]
 800304c:	607a      	str	r2, [r7, #4]
 800304e:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800305e:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	2b40      	cmp	r3, #64	@ 0x40
 800306e:	d108      	bne.n	8003082 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003080:	e007      	b.n	8003092 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	60da      	str	r2, [r3, #12]
}
 8003092:	bf00      	nop
 8003094:	3714      	adds	r7, #20
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
	...

080030a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b089      	sub	sp, #36	@ 0x24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030aa:	2300      	movs	r3, #0
 80030ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030b6:	2300      	movs	r3, #0
 80030b8:	61fb      	str	r3, [r7, #28]
 80030ba:	e165      	b.n	8003388 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030bc:	2201      	movs	r2, #1
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	4013      	ands	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	f040 8154 	bne.w	8003382 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d005      	beq.n	80030f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d130      	bne.n	8003154 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	2203      	movs	r2, #3
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	43db      	mvns	r3, r3
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	4013      	ands	r3, r2
 8003108:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	68da      	ldr	r2, [r3, #12]
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	4313      	orrs	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003128:	2201      	movs	r2, #1
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	43db      	mvns	r3, r3
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	4013      	ands	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	091b      	lsrs	r3, r3, #4
 800313e:	f003 0201 	and.w	r2, r3, #1
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4313      	orrs	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f003 0303 	and.w	r3, r3, #3
 800315c:	2b03      	cmp	r3, #3
 800315e:	d017      	beq.n	8003190 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	2203      	movs	r2, #3
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	43db      	mvns	r3, r3
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4013      	ands	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	4313      	orrs	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f003 0303 	and.w	r3, r3, #3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d123      	bne.n	80031e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	08da      	lsrs	r2, r3, #3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3208      	adds	r2, #8
 80031a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	220f      	movs	r2, #15
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	43db      	mvns	r3, r3
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	4013      	ands	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	691a      	ldr	r2, [r3, #16]
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	08da      	lsrs	r2, r3, #3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	3208      	adds	r2, #8
 80031de:	69b9      	ldr	r1, [r7, #24]
 80031e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	2203      	movs	r2, #3
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	43db      	mvns	r3, r3
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	4013      	ands	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f003 0203 	and.w	r2, r3, #3
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4313      	orrs	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 80ae 	beq.w	8003382 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003226:	2300      	movs	r3, #0
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	4b5d      	ldr	r3, [pc, #372]	@ (80033a0 <HAL_GPIO_Init+0x300>)
 800322c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800322e:	4a5c      	ldr	r2, [pc, #368]	@ (80033a0 <HAL_GPIO_Init+0x300>)
 8003230:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003234:	6453      	str	r3, [r2, #68]	@ 0x44
 8003236:	4b5a      	ldr	r3, [pc, #360]	@ (80033a0 <HAL_GPIO_Init+0x300>)
 8003238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800323a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003242:	4a58      	ldr	r2, [pc, #352]	@ (80033a4 <HAL_GPIO_Init+0x304>)
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	089b      	lsrs	r3, r3, #2
 8003248:	3302      	adds	r3, #2
 800324a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800324e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	f003 0303 	and.w	r3, r3, #3
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	220f      	movs	r2, #15
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	43db      	mvns	r3, r3
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	4013      	ands	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a4f      	ldr	r2, [pc, #316]	@ (80033a8 <HAL_GPIO_Init+0x308>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d025      	beq.n	80032ba <HAL_GPIO_Init+0x21a>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a4e      	ldr	r2, [pc, #312]	@ (80033ac <HAL_GPIO_Init+0x30c>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d01f      	beq.n	80032b6 <HAL_GPIO_Init+0x216>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a4d      	ldr	r2, [pc, #308]	@ (80033b0 <HAL_GPIO_Init+0x310>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d019      	beq.n	80032b2 <HAL_GPIO_Init+0x212>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a4c      	ldr	r2, [pc, #304]	@ (80033b4 <HAL_GPIO_Init+0x314>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d013      	beq.n	80032ae <HAL_GPIO_Init+0x20e>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a4b      	ldr	r2, [pc, #300]	@ (80033b8 <HAL_GPIO_Init+0x318>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d00d      	beq.n	80032aa <HAL_GPIO_Init+0x20a>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a4a      	ldr	r2, [pc, #296]	@ (80033bc <HAL_GPIO_Init+0x31c>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d007      	beq.n	80032a6 <HAL_GPIO_Init+0x206>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a49      	ldr	r2, [pc, #292]	@ (80033c0 <HAL_GPIO_Init+0x320>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d101      	bne.n	80032a2 <HAL_GPIO_Init+0x202>
 800329e:	2306      	movs	r3, #6
 80032a0:	e00c      	b.n	80032bc <HAL_GPIO_Init+0x21c>
 80032a2:	2307      	movs	r3, #7
 80032a4:	e00a      	b.n	80032bc <HAL_GPIO_Init+0x21c>
 80032a6:	2305      	movs	r3, #5
 80032a8:	e008      	b.n	80032bc <HAL_GPIO_Init+0x21c>
 80032aa:	2304      	movs	r3, #4
 80032ac:	e006      	b.n	80032bc <HAL_GPIO_Init+0x21c>
 80032ae:	2303      	movs	r3, #3
 80032b0:	e004      	b.n	80032bc <HAL_GPIO_Init+0x21c>
 80032b2:	2302      	movs	r3, #2
 80032b4:	e002      	b.n	80032bc <HAL_GPIO_Init+0x21c>
 80032b6:	2301      	movs	r3, #1
 80032b8:	e000      	b.n	80032bc <HAL_GPIO_Init+0x21c>
 80032ba:	2300      	movs	r3, #0
 80032bc:	69fa      	ldr	r2, [r7, #28]
 80032be:	f002 0203 	and.w	r2, r2, #3
 80032c2:	0092      	lsls	r2, r2, #2
 80032c4:	4093      	lsls	r3, r2
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032cc:	4935      	ldr	r1, [pc, #212]	@ (80033a4 <HAL_GPIO_Init+0x304>)
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	089b      	lsrs	r3, r3, #2
 80032d2:	3302      	adds	r3, #2
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032da:	4b3a      	ldr	r3, [pc, #232]	@ (80033c4 <HAL_GPIO_Init+0x324>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	43db      	mvns	r3, r3
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	4013      	ands	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032fe:	4a31      	ldr	r2, [pc, #196]	@ (80033c4 <HAL_GPIO_Init+0x324>)
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003304:	4b2f      	ldr	r3, [pc, #188]	@ (80033c4 <HAL_GPIO_Init+0x324>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	43db      	mvns	r3, r3
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	4013      	ands	r3, r2
 8003312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d003      	beq.n	8003328 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4313      	orrs	r3, r2
 8003326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003328:	4a26      	ldr	r2, [pc, #152]	@ (80033c4 <HAL_GPIO_Init+0x324>)
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800332e:	4b25      	ldr	r3, [pc, #148]	@ (80033c4 <HAL_GPIO_Init+0x324>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	43db      	mvns	r3, r3
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	4013      	ands	r3, r2
 800333c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	4313      	orrs	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003352:	4a1c      	ldr	r2, [pc, #112]	@ (80033c4 <HAL_GPIO_Init+0x324>)
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003358:	4b1a      	ldr	r3, [pc, #104]	@ (80033c4 <HAL_GPIO_Init+0x324>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	43db      	mvns	r3, r3
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	4013      	ands	r3, r2
 8003366:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	4313      	orrs	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800337c:	4a11      	ldr	r2, [pc, #68]	@ (80033c4 <HAL_GPIO_Init+0x324>)
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	3301      	adds	r3, #1
 8003386:	61fb      	str	r3, [r7, #28]
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	2b0f      	cmp	r3, #15
 800338c:	f67f ae96 	bls.w	80030bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003390:	bf00      	nop
 8003392:	bf00      	nop
 8003394:	3724      	adds	r7, #36	@ 0x24
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	40023800 	.word	0x40023800
 80033a4:	40013800 	.word	0x40013800
 80033a8:	40020000 	.word	0x40020000
 80033ac:	40020400 	.word	0x40020400
 80033b0:	40020800 	.word	0x40020800
 80033b4:	40020c00 	.word	0x40020c00
 80033b8:	40021000 	.word	0x40021000
 80033bc:	40021400 	.word	0x40021400
 80033c0:	40021800 	.word	0x40021800
 80033c4:	40013c00 	.word	0x40013c00

080033c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	807b      	strh	r3, [r7, #2]
 80033d4:	4613      	mov	r3, r2
 80033d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033d8:	787b      	ldrb	r3, [r7, #1]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033de:	887a      	ldrh	r2, [r7, #2]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033e4:	e003      	b.n	80033ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033e6:	887b      	ldrh	r3, [r7, #2]
 80033e8:	041a      	lsls	r2, r3, #16
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	619a      	str	r2, [r3, #24]
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
	...

080033fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e12b      	b.n	8003666 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d106      	bne.n	8003428 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7ff f9a8 	bl	8002778 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2224      	movs	r2, #36	@ 0x24
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0201 	bic.w	r2, r2, #1
 800343e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800344e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800345e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003460:	f001 f8e2 	bl	8004628 <HAL_RCC_GetPCLK1Freq>
 8003464:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	4a81      	ldr	r2, [pc, #516]	@ (8003670 <HAL_I2C_Init+0x274>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d807      	bhi.n	8003480 <HAL_I2C_Init+0x84>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	4a80      	ldr	r2, [pc, #512]	@ (8003674 <HAL_I2C_Init+0x278>)
 8003474:	4293      	cmp	r3, r2
 8003476:	bf94      	ite	ls
 8003478:	2301      	movls	r3, #1
 800347a:	2300      	movhi	r3, #0
 800347c:	b2db      	uxtb	r3, r3
 800347e:	e006      	b.n	800348e <HAL_I2C_Init+0x92>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4a7d      	ldr	r2, [pc, #500]	@ (8003678 <HAL_I2C_Init+0x27c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	bf94      	ite	ls
 8003488:	2301      	movls	r3, #1
 800348a:	2300      	movhi	r3, #0
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e0e7      	b.n	8003666 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	4a78      	ldr	r2, [pc, #480]	@ (800367c <HAL_I2C_Init+0x280>)
 800349a:	fba2 2303 	umull	r2, r3, r2, r3
 800349e:	0c9b      	lsrs	r3, r3, #18
 80034a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	4a6a      	ldr	r2, [pc, #424]	@ (8003670 <HAL_I2C_Init+0x274>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d802      	bhi.n	80034d0 <HAL_I2C_Init+0xd4>
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	3301      	adds	r3, #1
 80034ce:	e009      	b.n	80034e4 <HAL_I2C_Init+0xe8>
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80034d6:	fb02 f303 	mul.w	r3, r2, r3
 80034da:	4a69      	ldr	r2, [pc, #420]	@ (8003680 <HAL_I2C_Init+0x284>)
 80034dc:	fba2 2303 	umull	r2, r3, r2, r3
 80034e0:	099b      	lsrs	r3, r3, #6
 80034e2:	3301      	adds	r3, #1
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	6812      	ldr	r2, [r2, #0]
 80034e8:	430b      	orrs	r3, r1
 80034ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80034f6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	495c      	ldr	r1, [pc, #368]	@ (8003670 <HAL_I2C_Init+0x274>)
 8003500:	428b      	cmp	r3, r1
 8003502:	d819      	bhi.n	8003538 <HAL_I2C_Init+0x13c>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	1e59      	subs	r1, r3, #1
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003512:	1c59      	adds	r1, r3, #1
 8003514:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003518:	400b      	ands	r3, r1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00a      	beq.n	8003534 <HAL_I2C_Init+0x138>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	1e59      	subs	r1, r3, #1
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	fbb1 f3f3 	udiv	r3, r1, r3
 800352c:	3301      	adds	r3, #1
 800352e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003532:	e051      	b.n	80035d8 <HAL_I2C_Init+0x1dc>
 8003534:	2304      	movs	r3, #4
 8003536:	e04f      	b.n	80035d8 <HAL_I2C_Init+0x1dc>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d111      	bne.n	8003564 <HAL_I2C_Init+0x168>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	1e58      	subs	r0, r3, #1
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6859      	ldr	r1, [r3, #4]
 8003548:	460b      	mov	r3, r1
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	440b      	add	r3, r1
 800354e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003552:	3301      	adds	r3, #1
 8003554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003558:	2b00      	cmp	r3, #0
 800355a:	bf0c      	ite	eq
 800355c:	2301      	moveq	r3, #1
 800355e:	2300      	movne	r3, #0
 8003560:	b2db      	uxtb	r3, r3
 8003562:	e012      	b.n	800358a <HAL_I2C_Init+0x18e>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	1e58      	subs	r0, r3, #1
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6859      	ldr	r1, [r3, #4]
 800356c:	460b      	mov	r3, r1
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	0099      	lsls	r1, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	fbb0 f3f3 	udiv	r3, r0, r3
 800357a:	3301      	adds	r3, #1
 800357c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003580:	2b00      	cmp	r3, #0
 8003582:	bf0c      	ite	eq
 8003584:	2301      	moveq	r3, #1
 8003586:	2300      	movne	r3, #0
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <HAL_I2C_Init+0x196>
 800358e:	2301      	movs	r3, #1
 8003590:	e022      	b.n	80035d8 <HAL_I2C_Init+0x1dc>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10e      	bne.n	80035b8 <HAL_I2C_Init+0x1bc>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	1e58      	subs	r0, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6859      	ldr	r1, [r3, #4]
 80035a2:	460b      	mov	r3, r1
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	440b      	add	r3, r1
 80035a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ac:	3301      	adds	r3, #1
 80035ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035b6:	e00f      	b.n	80035d8 <HAL_I2C_Init+0x1dc>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	1e58      	subs	r0, r3, #1
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6859      	ldr	r1, [r3, #4]
 80035c0:	460b      	mov	r3, r1
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	0099      	lsls	r1, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ce:	3301      	adds	r3, #1
 80035d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	6809      	ldr	r1, [r1, #0]
 80035dc:	4313      	orrs	r3, r2
 80035de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	69da      	ldr	r2, [r3, #28]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003606:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	6911      	ldr	r1, [r2, #16]
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	68d2      	ldr	r2, [r2, #12]
 8003612:	4311      	orrs	r1, r2
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6812      	ldr	r2, [r2, #0]
 8003618:	430b      	orrs	r3, r1
 800361a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	695a      	ldr	r2, [r3, #20]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0201 	orr.w	r2, r2, #1
 8003646:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2220      	movs	r2, #32
 8003652:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	000186a0 	.word	0x000186a0
 8003674:	001e847f 	.word	0x001e847f
 8003678:	003d08ff 	.word	0x003d08ff
 800367c:	431bde83 	.word	0x431bde83
 8003680:	10624dd3 	.word	0x10624dd3

08003684 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b088      	sub	sp, #32
 8003688:	af02      	add	r7, sp, #8
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	4608      	mov	r0, r1
 800368e:	4611      	mov	r1, r2
 8003690:	461a      	mov	r2, r3
 8003692:	4603      	mov	r3, r0
 8003694:	817b      	strh	r3, [r7, #10]
 8003696:	460b      	mov	r3, r1
 8003698:	813b      	strh	r3, [r7, #8]
 800369a:	4613      	mov	r3, r2
 800369c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800369e:	f7ff faf3 	bl	8002c88 <HAL_GetTick>
 80036a2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b20      	cmp	r3, #32
 80036ae:	f040 80d9 	bne.w	8003864 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	2319      	movs	r3, #25
 80036b8:	2201      	movs	r2, #1
 80036ba:	496d      	ldr	r1, [pc, #436]	@ (8003870 <HAL_I2C_Mem_Write+0x1ec>)
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 fc8b 	bl	8003fd8 <I2C_WaitOnFlagUntilTimeout>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80036c8:	2302      	movs	r3, #2
 80036ca:	e0cc      	b.n	8003866 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d101      	bne.n	80036da <HAL_I2C_Mem_Write+0x56>
 80036d6:	2302      	movs	r3, #2
 80036d8:	e0c5      	b.n	8003866 <HAL_I2C_Mem_Write+0x1e2>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d007      	beq.n	8003700 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800370e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2221      	movs	r2, #33	@ 0x21
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2240      	movs	r2, #64	@ 0x40
 800371c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6a3a      	ldr	r2, [r7, #32]
 800372a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003730:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003736:	b29a      	uxth	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4a4d      	ldr	r2, [pc, #308]	@ (8003874 <HAL_I2C_Mem_Write+0x1f0>)
 8003740:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003742:	88f8      	ldrh	r0, [r7, #6]
 8003744:	893a      	ldrh	r2, [r7, #8]
 8003746:	8979      	ldrh	r1, [r7, #10]
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	9301      	str	r3, [sp, #4]
 800374c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	4603      	mov	r3, r0
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 fac2 	bl	8003cdc <I2C_RequestMemoryWrite>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d052      	beq.n	8003804 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e081      	b.n	8003866 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 fd50 	bl	800420c <I2C_WaitOnTXEFlagUntilTimeout>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00d      	beq.n	800378e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003776:	2b04      	cmp	r3, #4
 8003778:	d107      	bne.n	800378a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003788:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e06b      	b.n	8003866 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003792:	781a      	ldrb	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379e:	1c5a      	adds	r2, r3, #1
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037a8:	3b01      	subs	r3, #1
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	3b01      	subs	r3, #1
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	f003 0304 	and.w	r3, r3, #4
 80037c8:	2b04      	cmp	r3, #4
 80037ca:	d11b      	bne.n	8003804 <HAL_I2C_Mem_Write+0x180>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d017      	beq.n	8003804 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d8:	781a      	ldrb	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e4:	1c5a      	adds	r2, r3, #1
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ee:	3b01      	subs	r3, #1
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b29a      	uxth	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1aa      	bne.n	8003762 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f000 fd43 	bl	800429c <I2C_WaitOnBTFFlagUntilTimeout>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00d      	beq.n	8003838 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003820:	2b04      	cmp	r3, #4
 8003822:	d107      	bne.n	8003834 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003832:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e016      	b.n	8003866 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003846:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2220      	movs	r2, #32
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003860:	2300      	movs	r3, #0
 8003862:	e000      	b.n	8003866 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003864:	2302      	movs	r3, #2
  }
}
 8003866:	4618      	mov	r0, r3
 8003868:	3718      	adds	r7, #24
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	00100002 	.word	0x00100002
 8003874:	ffff0000 	.word	0xffff0000

08003878 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b08c      	sub	sp, #48	@ 0x30
 800387c:	af02      	add	r7, sp, #8
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	4608      	mov	r0, r1
 8003882:	4611      	mov	r1, r2
 8003884:	461a      	mov	r2, r3
 8003886:	4603      	mov	r3, r0
 8003888:	817b      	strh	r3, [r7, #10]
 800388a:	460b      	mov	r3, r1
 800388c:	813b      	strh	r3, [r7, #8]
 800388e:	4613      	mov	r3, r2
 8003890:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003892:	f7ff f9f9 	bl	8002c88 <HAL_GetTick>
 8003896:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b20      	cmp	r3, #32
 80038a2:	f040 8214 	bne.w	8003cce <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	2319      	movs	r3, #25
 80038ac:	2201      	movs	r2, #1
 80038ae:	497b      	ldr	r1, [pc, #492]	@ (8003a9c <HAL_I2C_Mem_Read+0x224>)
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f000 fb91 	bl	8003fd8 <I2C_WaitOnFlagUntilTimeout>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80038bc:	2302      	movs	r3, #2
 80038be:	e207      	b.n	8003cd0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d101      	bne.n	80038ce <HAL_I2C_Mem_Read+0x56>
 80038ca:	2302      	movs	r3, #2
 80038cc:	e200      	b.n	8003cd0 <HAL_I2C_Mem_Read+0x458>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d007      	beq.n	80038f4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0201 	orr.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003902:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2222      	movs	r2, #34	@ 0x22
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2240      	movs	r2, #64	@ 0x40
 8003910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800391e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003924:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800392a:	b29a      	uxth	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4a5b      	ldr	r2, [pc, #364]	@ (8003aa0 <HAL_I2C_Mem_Read+0x228>)
 8003934:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003936:	88f8      	ldrh	r0, [r7, #6]
 8003938:	893a      	ldrh	r2, [r7, #8]
 800393a:	8979      	ldrh	r1, [r7, #10]
 800393c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393e:	9301      	str	r3, [sp, #4]
 8003940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	4603      	mov	r3, r0
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f000 fa5e 	bl	8003e08 <I2C_RequestMemoryRead>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e1bc      	b.n	8003cd0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800395a:	2b00      	cmp	r3, #0
 800395c:	d113      	bne.n	8003986 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800395e:	2300      	movs	r3, #0
 8003960:	623b      	str	r3, [r7, #32]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	623b      	str	r3, [r7, #32]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	623b      	str	r3, [r7, #32]
 8003972:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	e190      	b.n	8003ca8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800398a:	2b01      	cmp	r3, #1
 800398c:	d11b      	bne.n	80039c6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800399c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800399e:	2300      	movs	r3, #0
 80039a0:	61fb      	str	r3, [r7, #28]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	61fb      	str	r3, [r7, #28]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	61fb      	str	r3, [r7, #28]
 80039b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	e170      	b.n	8003ca8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d11b      	bne.n	8003a06 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ee:	2300      	movs	r3, #0
 80039f0:	61bb      	str	r3, [r7, #24]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	61bb      	str	r3, [r7, #24]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	61bb      	str	r3, [r7, #24]
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	e150      	b.n	8003ca8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a06:	2300      	movs	r3, #0
 8003a08:	617b      	str	r3, [r7, #20]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	617b      	str	r3, [r7, #20]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	617b      	str	r3, [r7, #20]
 8003a1a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003a1c:	e144      	b.n	8003ca8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a22:	2b03      	cmp	r3, #3
 8003a24:	f200 80f1 	bhi.w	8003c0a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d123      	bne.n	8003a78 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a32:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f000 fc79 	bl	800432c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e145      	b.n	8003cd0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	691a      	ldr	r2, [r3, #16]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a76:	e117      	b.n	8003ca8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d14e      	bne.n	8003b1e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a86:	2200      	movs	r2, #0
 8003a88:	4906      	ldr	r1, [pc, #24]	@ (8003aa4 <HAL_I2C_Mem_Read+0x22c>)
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 faa4 	bl	8003fd8 <I2C_WaitOnFlagUntilTimeout>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d008      	beq.n	8003aa8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e11a      	b.n	8003cd0 <HAL_I2C_Mem_Read+0x458>
 8003a9a:	bf00      	nop
 8003a9c:	00100002 	.word	0x00100002
 8003aa0:	ffff0000 	.word	0xffff0000
 8003aa4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ab6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	691a      	ldr	r2, [r3, #16]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac2:	b2d2      	uxtb	r2, r2
 8003ac4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aca:	1c5a      	adds	r2, r3, #1
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	691a      	ldr	r2, [r3, #16]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af4:	b2d2      	uxtb	r2, r2
 8003af6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afc:	1c5a      	adds	r2, r3, #1
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b06:	3b01      	subs	r3, #1
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b1c:	e0c4      	b.n	8003ca8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b24:	2200      	movs	r2, #0
 8003b26:	496c      	ldr	r1, [pc, #432]	@ (8003cd8 <HAL_I2C_Mem_Read+0x460>)
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 fa55 	bl	8003fd8 <I2C_WaitOnFlagUntilTimeout>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e0cb      	b.n	8003cd0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	691a      	ldr	r2, [r3, #16]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5a:	1c5a      	adds	r2, r3, #1
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b64:	3b01      	subs	r3, #1
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	3b01      	subs	r3, #1
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b80:	2200      	movs	r2, #0
 8003b82:	4955      	ldr	r1, [pc, #340]	@ (8003cd8 <HAL_I2C_Mem_Read+0x460>)
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 fa27 	bl	8003fd8 <I2C_WaitOnFlagUntilTimeout>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e09d      	b.n	8003cd0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ba2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	691a      	ldr	r2, [r3, #16]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb6:	1c5a      	adds	r2, r3, #1
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	691a      	ldr	r2, [r3, #16]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be0:	b2d2      	uxtb	r2, r2
 8003be2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be8:	1c5a      	adds	r2, r3, #1
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	3b01      	subs	r3, #1
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c08:	e04e      	b.n	8003ca8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c0c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 fb8c 	bl	800432c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e058      	b.n	8003cd0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	691a      	ldr	r2, [r3, #16]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c28:	b2d2      	uxtb	r2, r2
 8003c2a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c30:	1c5a      	adds	r2, r3, #1
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	f003 0304 	and.w	r3, r3, #4
 8003c5a:	2b04      	cmp	r3, #4
 8003c5c:	d124      	bne.n	8003ca8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c62:	2b03      	cmp	r3, #3
 8003c64:	d107      	bne.n	8003c76 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c74:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	691a      	ldr	r2, [r3, #16]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c80:	b2d2      	uxtb	r2, r2
 8003c82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c88:	1c5a      	adds	r2, r3, #1
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c92:	3b01      	subs	r3, #1
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f47f aeb6 	bne.w	8003a1e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	e000      	b.n	8003cd0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003cce:	2302      	movs	r3, #2
  }
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3728      	adds	r7, #40	@ 0x28
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	00010004 	.word	0x00010004

08003cdc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b088      	sub	sp, #32
 8003ce0:	af02      	add	r7, sp, #8
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	4608      	mov	r0, r1
 8003ce6:	4611      	mov	r1, r2
 8003ce8:	461a      	mov	r2, r3
 8003cea:	4603      	mov	r3, r0
 8003cec:	817b      	strh	r3, [r7, #10]
 8003cee:	460b      	mov	r3, r1
 8003cf0:	813b      	strh	r3, [r7, #8]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f000 f960 	bl	8003fd8 <I2C_WaitOnFlagUntilTimeout>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00d      	beq.n	8003d3a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d2c:	d103      	bne.n	8003d36 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d34:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e05f      	b.n	8003dfa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d3a:	897b      	ldrh	r3, [r7, #10]
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	461a      	mov	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4c:	6a3a      	ldr	r2, [r7, #32]
 8003d4e:	492d      	ldr	r1, [pc, #180]	@ (8003e04 <I2C_RequestMemoryWrite+0x128>)
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f000 f9bb 	bl	80040cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e04c      	b.n	8003dfa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d60:	2300      	movs	r3, #0
 8003d62:	617b      	str	r3, [r7, #20]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	617b      	str	r3, [r7, #20]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	617b      	str	r3, [r7, #20]
 8003d74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d78:	6a39      	ldr	r1, [r7, #32]
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f000 fa46 	bl	800420c <I2C_WaitOnTXEFlagUntilTimeout>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00d      	beq.n	8003da2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8a:	2b04      	cmp	r3, #4
 8003d8c:	d107      	bne.n	8003d9e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e02b      	b.n	8003dfa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003da2:	88fb      	ldrh	r3, [r7, #6]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d105      	bne.n	8003db4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003da8:	893b      	ldrh	r3, [r7, #8]
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	611a      	str	r2, [r3, #16]
 8003db2:	e021      	b.n	8003df8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003db4:	893b      	ldrh	r3, [r7, #8]
 8003db6:	0a1b      	lsrs	r3, r3, #8
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	b2da      	uxtb	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dc4:	6a39      	ldr	r1, [r7, #32]
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f000 fa20 	bl	800420c <I2C_WaitOnTXEFlagUntilTimeout>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00d      	beq.n	8003dee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	d107      	bne.n	8003dea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003de8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e005      	b.n	8003dfa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dee:	893b      	ldrh	r3, [r7, #8]
 8003df0:	b2da      	uxtb	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3718      	adds	r7, #24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	00010002 	.word	0x00010002

08003e08 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b088      	sub	sp, #32
 8003e0c:	af02      	add	r7, sp, #8
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	4608      	mov	r0, r1
 8003e12:	4611      	mov	r1, r2
 8003e14:	461a      	mov	r2, r3
 8003e16:	4603      	mov	r3, r0
 8003e18:	817b      	strh	r3, [r7, #10]
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	813b      	strh	r3, [r7, #8]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e30:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	6a3b      	ldr	r3, [r7, #32]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 f8c2 	bl	8003fd8 <I2C_WaitOnFlagUntilTimeout>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00d      	beq.n	8003e76 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e68:	d103      	bne.n	8003e72 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e70:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e0aa      	b.n	8003fcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e76:	897b      	ldrh	r3, [r7, #10]
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e88:	6a3a      	ldr	r2, [r7, #32]
 8003e8a:	4952      	ldr	r1, [pc, #328]	@ (8003fd4 <I2C_RequestMemoryRead+0x1cc>)
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 f91d 	bl	80040cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e097      	b.n	8003fcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	617b      	str	r3, [r7, #20]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	617b      	str	r3, [r7, #20]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	617b      	str	r3, [r7, #20]
 8003eb0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eb4:	6a39      	ldr	r1, [r7, #32]
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 f9a8 	bl	800420c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00d      	beq.n	8003ede <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	d107      	bne.n	8003eda <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ed8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e076      	b.n	8003fcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ede:	88fb      	ldrh	r3, [r7, #6]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d105      	bne.n	8003ef0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ee4:	893b      	ldrh	r3, [r7, #8]
 8003ee6:	b2da      	uxtb	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	611a      	str	r2, [r3, #16]
 8003eee:	e021      	b.n	8003f34 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ef0:	893b      	ldrh	r3, [r7, #8]
 8003ef2:	0a1b      	lsrs	r3, r3, #8
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	b2da      	uxtb	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003efe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f00:	6a39      	ldr	r1, [r7, #32]
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 f982 	bl	800420c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00d      	beq.n	8003f2a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	d107      	bne.n	8003f26 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f24:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e050      	b.n	8003fcc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f2a:	893b      	ldrh	r3, [r7, #8]
 8003f2c:	b2da      	uxtb	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f36:	6a39      	ldr	r1, [r7, #32]
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f000 f967 	bl	800420c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00d      	beq.n	8003f60 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f48:	2b04      	cmp	r3, #4
 8003f4a:	d107      	bne.n	8003f5c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f5a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e035      	b.n	8003fcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f6e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f000 f82b 	bl	8003fd8 <I2C_WaitOnFlagUntilTimeout>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00d      	beq.n	8003fa4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f96:	d103      	bne.n	8003fa0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f9e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e013      	b.n	8003fcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003fa4:	897b      	ldrh	r3, [r7, #10]
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	f043 0301 	orr.w	r3, r3, #1
 8003fac:	b2da      	uxtb	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb6:	6a3a      	ldr	r2, [r7, #32]
 8003fb8:	4906      	ldr	r1, [pc, #24]	@ (8003fd4 <I2C_RequestMemoryRead+0x1cc>)
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f000 f886 	bl	80040cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e000      	b.n	8003fcc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3718      	adds	r7, #24
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	00010002 	.word	0x00010002

08003fd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	603b      	str	r3, [r7, #0]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fe8:	e048      	b.n	800407c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff0:	d044      	beq.n	800407c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ff2:	f7fe fe49 	bl	8002c88 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d302      	bcc.n	8004008 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d139      	bne.n	800407c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	0c1b      	lsrs	r3, r3, #16
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b01      	cmp	r3, #1
 8004010:	d10d      	bne.n	800402e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	43da      	mvns	r2, r3
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	4013      	ands	r3, r2
 800401e:	b29b      	uxth	r3, r3
 8004020:	2b00      	cmp	r3, #0
 8004022:	bf0c      	ite	eq
 8004024:	2301      	moveq	r3, #1
 8004026:	2300      	movne	r3, #0
 8004028:	b2db      	uxtb	r3, r3
 800402a:	461a      	mov	r2, r3
 800402c:	e00c      	b.n	8004048 <I2C_WaitOnFlagUntilTimeout+0x70>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	43da      	mvns	r2, r3
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	4013      	ands	r3, r2
 800403a:	b29b      	uxth	r3, r3
 800403c:	2b00      	cmp	r3, #0
 800403e:	bf0c      	ite	eq
 8004040:	2301      	moveq	r3, #1
 8004042:	2300      	movne	r3, #0
 8004044:	b2db      	uxtb	r3, r3
 8004046:	461a      	mov	r2, r3
 8004048:	79fb      	ldrb	r3, [r7, #7]
 800404a:	429a      	cmp	r2, r3
 800404c:	d116      	bne.n	800407c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2220      	movs	r2, #32
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004068:	f043 0220 	orr.w	r2, r3, #32
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e023      	b.n	80040c4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	0c1b      	lsrs	r3, r3, #16
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b01      	cmp	r3, #1
 8004084:	d10d      	bne.n	80040a2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	43da      	mvns	r2, r3
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	4013      	ands	r3, r2
 8004092:	b29b      	uxth	r3, r3
 8004094:	2b00      	cmp	r3, #0
 8004096:	bf0c      	ite	eq
 8004098:	2301      	moveq	r3, #1
 800409a:	2300      	movne	r3, #0
 800409c:	b2db      	uxtb	r3, r3
 800409e:	461a      	mov	r2, r3
 80040a0:	e00c      	b.n	80040bc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	43da      	mvns	r2, r3
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	4013      	ands	r3, r2
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	bf0c      	ite	eq
 80040b4:	2301      	moveq	r3, #1
 80040b6:	2300      	movne	r3, #0
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	461a      	mov	r2, r3
 80040bc:	79fb      	ldrb	r3, [r7, #7]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d093      	beq.n	8003fea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
 80040d8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040da:	e071      	b.n	80041c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040ea:	d123      	bne.n	8004134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040fa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004104:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2220      	movs	r2, #32
 8004110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004120:	f043 0204 	orr.w	r2, r3, #4
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e067      	b.n	8004204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413a:	d041      	beq.n	80041c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800413c:	f7fe fda4 	bl	8002c88 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	429a      	cmp	r2, r3
 800414a:	d302      	bcc.n	8004152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d136      	bne.n	80041c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	0c1b      	lsrs	r3, r3, #16
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b01      	cmp	r3, #1
 800415a:	d10c      	bne.n	8004176 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	43da      	mvns	r2, r3
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	4013      	ands	r3, r2
 8004168:	b29b      	uxth	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	bf14      	ite	ne
 800416e:	2301      	movne	r3, #1
 8004170:	2300      	moveq	r3, #0
 8004172:	b2db      	uxtb	r3, r3
 8004174:	e00b      	b.n	800418e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	43da      	mvns	r2, r3
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	4013      	ands	r3, r2
 8004182:	b29b      	uxth	r3, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	bf14      	ite	ne
 8004188:	2301      	movne	r3, #1
 800418a:	2300      	moveq	r3, #0
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d016      	beq.n	80041c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2220      	movs	r2, #32
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ac:	f043 0220 	orr.w	r2, r3, #32
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e021      	b.n	8004204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	0c1b      	lsrs	r3, r3, #16
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d10c      	bne.n	80041e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	43da      	mvns	r2, r3
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	4013      	ands	r3, r2
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	bf14      	ite	ne
 80041dc:	2301      	movne	r3, #1
 80041de:	2300      	moveq	r3, #0
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	e00b      	b.n	80041fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	43da      	mvns	r2, r3
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	4013      	ands	r3, r2
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	bf14      	ite	ne
 80041f6:	2301      	movne	r3, #1
 80041f8:	2300      	moveq	r3, #0
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f47f af6d 	bne.w	80040dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004218:	e034      	b.n	8004284 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f000 f8e3 	bl	80043e6 <I2C_IsAcknowledgeFailed>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e034      	b.n	8004294 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004230:	d028      	beq.n	8004284 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004232:	f7fe fd29 	bl	8002c88 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	429a      	cmp	r2, r3
 8004240:	d302      	bcc.n	8004248 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d11d      	bne.n	8004284 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004252:	2b80      	cmp	r3, #128	@ 0x80
 8004254:	d016      	beq.n	8004284 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2220      	movs	r2, #32
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004270:	f043 0220 	orr.w	r2, r3, #32
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e007      	b.n	8004294 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800428e:	2b80      	cmp	r3, #128	@ 0x80
 8004290:	d1c3      	bne.n	800421a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042a8:	e034      	b.n	8004314 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f000 f89b 	bl	80043e6 <I2C_IsAcknowledgeFailed>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e034      	b.n	8004324 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c0:	d028      	beq.n	8004314 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c2:	f7fe fce1 	bl	8002c88 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d302      	bcc.n	80042d8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d11d      	bne.n	8004314 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	f003 0304 	and.w	r3, r3, #4
 80042e2:	2b04      	cmp	r3, #4
 80042e4:	d016      	beq.n	8004314 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2220      	movs	r2, #32
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004300:	f043 0220 	orr.w	r2, r3, #32
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e007      	b.n	8004324 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	f003 0304 	and.w	r3, r3, #4
 800431e:	2b04      	cmp	r3, #4
 8004320:	d1c3      	bne.n	80042aa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3710      	adds	r7, #16
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004338:	e049      	b.n	80043ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	f003 0310 	and.w	r3, r3, #16
 8004344:	2b10      	cmp	r3, #16
 8004346:	d119      	bne.n	800437c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f06f 0210 	mvn.w	r2, #16
 8004350:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2220      	movs	r2, #32
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e030      	b.n	80043de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800437c:	f7fe fc84 	bl	8002c88 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	429a      	cmp	r2, r3
 800438a:	d302      	bcc.n	8004392 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d11d      	bne.n	80043ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800439c:	2b40      	cmp	r3, #64	@ 0x40
 800439e:	d016      	beq.n	80043ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2220      	movs	r2, #32
 80043aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ba:	f043 0220 	orr.w	r2, r3, #32
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e007      	b.n	80043de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d8:	2b40      	cmp	r3, #64	@ 0x40
 80043da:	d1ae      	bne.n	800433a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80043e6:	b480      	push	{r7}
 80043e8:	b083      	sub	sp, #12
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043fc:	d11b      	bne.n	8004436 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004406:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2220      	movs	r2, #32
 8004412:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004422:	f043 0204 	orr.w	r2, r3, #4
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e000      	b.n	8004438 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e0cc      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004458:	4b68      	ldr	r3, [pc, #416]	@ (80045fc <HAL_RCC_ClockConfig+0x1b8>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 030f 	and.w	r3, r3, #15
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	429a      	cmp	r2, r3
 8004464:	d90c      	bls.n	8004480 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004466:	4b65      	ldr	r3, [pc, #404]	@ (80045fc <HAL_RCC_ClockConfig+0x1b8>)
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	b2d2      	uxtb	r2, r2
 800446c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800446e:	4b63      	ldr	r3, [pc, #396]	@ (80045fc <HAL_RCC_ClockConfig+0x1b8>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 030f 	and.w	r3, r3, #15
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	429a      	cmp	r2, r3
 800447a:	d001      	beq.n	8004480 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e0b8      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d020      	beq.n	80044ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0304 	and.w	r3, r3, #4
 8004494:	2b00      	cmp	r3, #0
 8004496:	d005      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004498:	4b59      	ldr	r3, [pc, #356]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	4a58      	ldr	r2, [pc, #352]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 800449e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80044a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0308 	and.w	r3, r3, #8
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d005      	beq.n	80044bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044b0:	4b53      	ldr	r3, [pc, #332]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	4a52      	ldr	r2, [pc, #328]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80044b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80044ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044bc:	4b50      	ldr	r3, [pc, #320]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	494d      	ldr	r1, [pc, #308]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d044      	beq.n	8004564 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d107      	bne.n	80044f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044e2:	4b47      	ldr	r3, [pc, #284]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d119      	bne.n	8004522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e07f      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d003      	beq.n	8004502 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044fe:	2b03      	cmp	r3, #3
 8004500:	d107      	bne.n	8004512 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004502:	4b3f      	ldr	r3, [pc, #252]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d109      	bne.n	8004522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e06f      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004512:	4b3b      	ldr	r3, [pc, #236]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e067      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004522:	4b37      	ldr	r3, [pc, #220]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f023 0203 	bic.w	r2, r3, #3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	4934      	ldr	r1, [pc, #208]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 8004530:	4313      	orrs	r3, r2
 8004532:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004534:	f7fe fba8 	bl	8002c88 <HAL_GetTick>
 8004538:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800453a:	e00a      	b.n	8004552 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800453c:	f7fe fba4 	bl	8002c88 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	f241 3288 	movw	r2, #5000	@ 0x1388
 800454a:	4293      	cmp	r3, r2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e04f      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004552:	4b2b      	ldr	r3, [pc, #172]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 020c 	and.w	r2, r3, #12
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	429a      	cmp	r2, r3
 8004562:	d1eb      	bne.n	800453c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004564:	4b25      	ldr	r3, [pc, #148]	@ (80045fc <HAL_RCC_ClockConfig+0x1b8>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 030f 	and.w	r3, r3, #15
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	429a      	cmp	r2, r3
 8004570:	d20c      	bcs.n	800458c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004572:	4b22      	ldr	r3, [pc, #136]	@ (80045fc <HAL_RCC_ClockConfig+0x1b8>)
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	b2d2      	uxtb	r2, r2
 8004578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800457a:	4b20      	ldr	r3, [pc, #128]	@ (80045fc <HAL_RCC_ClockConfig+0x1b8>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 030f 	and.w	r3, r3, #15
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	429a      	cmp	r2, r3
 8004586:	d001      	beq.n	800458c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e032      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	2b00      	cmp	r3, #0
 8004596:	d008      	beq.n	80045aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004598:	4b19      	ldr	r3, [pc, #100]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	4916      	ldr	r1, [pc, #88]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0308 	and.w	r3, r3, #8
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d009      	beq.n	80045ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045b6:	4b12      	ldr	r3, [pc, #72]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	490e      	ldr	r1, [pc, #56]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80045ca:	f000 f855 	bl	8004678 <HAL_RCC_GetSysClockFreq>
 80045ce:	4602      	mov	r2, r0
 80045d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	091b      	lsrs	r3, r3, #4
 80045d6:	f003 030f 	and.w	r3, r3, #15
 80045da:	490a      	ldr	r1, [pc, #40]	@ (8004604 <HAL_RCC_ClockConfig+0x1c0>)
 80045dc:	5ccb      	ldrb	r3, [r1, r3]
 80045de:	fa22 f303 	lsr.w	r3, r2, r3
 80045e2:	4a09      	ldr	r2, [pc, #36]	@ (8004608 <HAL_RCC_ClockConfig+0x1c4>)
 80045e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80045e6:	4b09      	ldr	r3, [pc, #36]	@ (800460c <HAL_RCC_ClockConfig+0x1c8>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fe fb08 	bl	8002c00 <HAL_InitTick>

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	40023c00 	.word	0x40023c00
 8004600:	40023800 	.word	0x40023800
 8004604:	08008664 	.word	0x08008664
 8004608:	20000034 	.word	0x20000034
 800460c:	20000038 	.word	0x20000038

08004610 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004614:	4b03      	ldr	r3, [pc, #12]	@ (8004624 <HAL_RCC_GetHCLKFreq+0x14>)
 8004616:	681b      	ldr	r3, [r3, #0]
}
 8004618:	4618      	mov	r0, r3
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	20000034 	.word	0x20000034

08004628 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800462c:	f7ff fff0 	bl	8004610 <HAL_RCC_GetHCLKFreq>
 8004630:	4602      	mov	r2, r0
 8004632:	4b05      	ldr	r3, [pc, #20]	@ (8004648 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	0a9b      	lsrs	r3, r3, #10
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	4903      	ldr	r1, [pc, #12]	@ (800464c <HAL_RCC_GetPCLK1Freq+0x24>)
 800463e:	5ccb      	ldrb	r3, [r1, r3]
 8004640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004644:	4618      	mov	r0, r3
 8004646:	bd80      	pop	{r7, pc}
 8004648:	40023800 	.word	0x40023800
 800464c:	08008674 	.word	0x08008674

08004650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004654:	f7ff ffdc 	bl	8004610 <HAL_RCC_GetHCLKFreq>
 8004658:	4602      	mov	r2, r0
 800465a:	4b05      	ldr	r3, [pc, #20]	@ (8004670 <HAL_RCC_GetPCLK2Freq+0x20>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	0b5b      	lsrs	r3, r3, #13
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	4903      	ldr	r1, [pc, #12]	@ (8004674 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004666:	5ccb      	ldrb	r3, [r1, r3]
 8004668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800466c:	4618      	mov	r0, r3
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40023800 	.word	0x40023800
 8004674:	08008674 	.word	0x08008674

08004678 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800467c:	b0a6      	sub	sp, #152	@ 0x98
 800467e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004680:	2300      	movs	r3, #0
 8004682:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8004686:	2300      	movs	r3, #0
 8004688:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800468c:	2300      	movs	r3, #0
 800468e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8004692:	2300      	movs	r3, #0
 8004694:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8004698:	2300      	movs	r3, #0
 800469a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800469e:	4bc8      	ldr	r3, [pc, #800]	@ (80049c0 <HAL_RCC_GetSysClockFreq+0x348>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 030c 	and.w	r3, r3, #12
 80046a6:	2b0c      	cmp	r3, #12
 80046a8:	f200 817e 	bhi.w	80049a8 <HAL_RCC_GetSysClockFreq+0x330>
 80046ac:	a201      	add	r2, pc, #4	@ (adr r2, 80046b4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80046ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b2:	bf00      	nop
 80046b4:	080046e9 	.word	0x080046e9
 80046b8:	080049a9 	.word	0x080049a9
 80046bc:	080049a9 	.word	0x080049a9
 80046c0:	080049a9 	.word	0x080049a9
 80046c4:	080046f1 	.word	0x080046f1
 80046c8:	080049a9 	.word	0x080049a9
 80046cc:	080049a9 	.word	0x080049a9
 80046d0:	080049a9 	.word	0x080049a9
 80046d4:	080046f9 	.word	0x080046f9
 80046d8:	080049a9 	.word	0x080049a9
 80046dc:	080049a9 	.word	0x080049a9
 80046e0:	080049a9 	.word	0x080049a9
 80046e4:	08004863 	.word	0x08004863
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046e8:	4bb6      	ldr	r3, [pc, #728]	@ (80049c4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80046ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80046ee:	e15f      	b.n	80049b0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046f0:	4bb5      	ldr	r3, [pc, #724]	@ (80049c8 <HAL_RCC_GetSysClockFreq+0x350>)
 80046f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80046f6:	e15b      	b.n	80049b0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046f8:	4bb1      	ldr	r3, [pc, #708]	@ (80049c0 <HAL_RCC_GetSysClockFreq+0x348>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004700:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004704:	4bae      	ldr	r3, [pc, #696]	@ (80049c0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d031      	beq.n	8004774 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004710:	4bab      	ldr	r3, [pc, #684]	@ (80049c0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	099b      	lsrs	r3, r3, #6
 8004716:	2200      	movs	r2, #0
 8004718:	66bb      	str	r3, [r7, #104]	@ 0x68
 800471a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800471c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800471e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004722:	663b      	str	r3, [r7, #96]	@ 0x60
 8004724:	2300      	movs	r3, #0
 8004726:	667b      	str	r3, [r7, #100]	@ 0x64
 8004728:	4ba7      	ldr	r3, [pc, #668]	@ (80049c8 <HAL_RCC_GetSysClockFreq+0x350>)
 800472a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800472e:	462a      	mov	r2, r5
 8004730:	fb03 f202 	mul.w	r2, r3, r2
 8004734:	2300      	movs	r3, #0
 8004736:	4621      	mov	r1, r4
 8004738:	fb01 f303 	mul.w	r3, r1, r3
 800473c:	4413      	add	r3, r2
 800473e:	4aa2      	ldr	r2, [pc, #648]	@ (80049c8 <HAL_RCC_GetSysClockFreq+0x350>)
 8004740:	4621      	mov	r1, r4
 8004742:	fba1 1202 	umull	r1, r2, r1, r2
 8004746:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004748:	460a      	mov	r2, r1
 800474a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800474c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800474e:	4413      	add	r3, r2
 8004750:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004752:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004756:	2200      	movs	r2, #0
 8004758:	65bb      	str	r3, [r7, #88]	@ 0x58
 800475a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800475c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004760:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8004764:	f7fc fa88 	bl	8000c78 <__aeabi_uldivmod>
 8004768:	4602      	mov	r2, r0
 800476a:	460b      	mov	r3, r1
 800476c:	4613      	mov	r3, r2
 800476e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004772:	e064      	b.n	800483e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004774:	4b92      	ldr	r3, [pc, #584]	@ (80049c0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	099b      	lsrs	r3, r3, #6
 800477a:	2200      	movs	r2, #0
 800477c:	653b      	str	r3, [r7, #80]	@ 0x50
 800477e:	657a      	str	r2, [r7, #84]	@ 0x54
 8004780:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004786:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004788:	2300      	movs	r3, #0
 800478a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800478c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8004790:	4622      	mov	r2, r4
 8004792:	462b      	mov	r3, r5
 8004794:	f04f 0000 	mov.w	r0, #0
 8004798:	f04f 0100 	mov.w	r1, #0
 800479c:	0159      	lsls	r1, r3, #5
 800479e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047a2:	0150      	lsls	r0, r2, #5
 80047a4:	4602      	mov	r2, r0
 80047a6:	460b      	mov	r3, r1
 80047a8:	4621      	mov	r1, r4
 80047aa:	1a51      	subs	r1, r2, r1
 80047ac:	6139      	str	r1, [r7, #16]
 80047ae:	4629      	mov	r1, r5
 80047b0:	eb63 0301 	sbc.w	r3, r3, r1
 80047b4:	617b      	str	r3, [r7, #20]
 80047b6:	f04f 0200 	mov.w	r2, #0
 80047ba:	f04f 0300 	mov.w	r3, #0
 80047be:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047c2:	4659      	mov	r1, fp
 80047c4:	018b      	lsls	r3, r1, #6
 80047c6:	4651      	mov	r1, sl
 80047c8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047cc:	4651      	mov	r1, sl
 80047ce:	018a      	lsls	r2, r1, #6
 80047d0:	4651      	mov	r1, sl
 80047d2:	ebb2 0801 	subs.w	r8, r2, r1
 80047d6:	4659      	mov	r1, fp
 80047d8:	eb63 0901 	sbc.w	r9, r3, r1
 80047dc:	f04f 0200 	mov.w	r2, #0
 80047e0:	f04f 0300 	mov.w	r3, #0
 80047e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047f0:	4690      	mov	r8, r2
 80047f2:	4699      	mov	r9, r3
 80047f4:	4623      	mov	r3, r4
 80047f6:	eb18 0303 	adds.w	r3, r8, r3
 80047fa:	60bb      	str	r3, [r7, #8]
 80047fc:	462b      	mov	r3, r5
 80047fe:	eb49 0303 	adc.w	r3, r9, r3
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	f04f 0200 	mov.w	r2, #0
 8004808:	f04f 0300 	mov.w	r3, #0
 800480c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004810:	4629      	mov	r1, r5
 8004812:	028b      	lsls	r3, r1, #10
 8004814:	4621      	mov	r1, r4
 8004816:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800481a:	4621      	mov	r1, r4
 800481c:	028a      	lsls	r2, r1, #10
 800481e:	4610      	mov	r0, r2
 8004820:	4619      	mov	r1, r3
 8004822:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004826:	2200      	movs	r2, #0
 8004828:	643b      	str	r3, [r7, #64]	@ 0x40
 800482a:	647a      	str	r2, [r7, #68]	@ 0x44
 800482c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004830:	f7fc fa22 	bl	8000c78 <__aeabi_uldivmod>
 8004834:	4602      	mov	r2, r0
 8004836:	460b      	mov	r3, r1
 8004838:	4613      	mov	r3, r2
 800483a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800483e:	4b60      	ldr	r3, [pc, #384]	@ (80049c0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	0c1b      	lsrs	r3, r3, #16
 8004844:	f003 0303 	and.w	r3, r3, #3
 8004848:	3301      	adds	r3, #1
 800484a:	005b      	lsls	r3, r3, #1
 800484c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8004850:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004854:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004858:	fbb2 f3f3 	udiv	r3, r2, r3
 800485c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004860:	e0a6      	b.n	80049b0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004862:	4b57      	ldr	r3, [pc, #348]	@ (80049c0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800486a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800486e:	4b54      	ldr	r3, [pc, #336]	@ (80049c0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d02a      	beq.n	80048d0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800487a:	4b51      	ldr	r3, [pc, #324]	@ (80049c0 <HAL_RCC_GetSysClockFreq+0x348>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	099b      	lsrs	r3, r3, #6
 8004880:	2200      	movs	r2, #0
 8004882:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004884:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004888:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800488c:	2100      	movs	r1, #0
 800488e:	4b4e      	ldr	r3, [pc, #312]	@ (80049c8 <HAL_RCC_GetSysClockFreq+0x350>)
 8004890:	fb03 f201 	mul.w	r2, r3, r1
 8004894:	2300      	movs	r3, #0
 8004896:	fb00 f303 	mul.w	r3, r0, r3
 800489a:	4413      	add	r3, r2
 800489c:	4a4a      	ldr	r2, [pc, #296]	@ (80049c8 <HAL_RCC_GetSysClockFreq+0x350>)
 800489e:	fba0 1202 	umull	r1, r2, r0, r2
 80048a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80048a4:	460a      	mov	r2, r1
 80048a6:	673a      	str	r2, [r7, #112]	@ 0x70
 80048a8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80048aa:	4413      	add	r3, r2
 80048ac:	677b      	str	r3, [r7, #116]	@ 0x74
 80048ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048b2:	2200      	movs	r2, #0
 80048b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80048b6:	637a      	str	r2, [r7, #52]	@ 0x34
 80048b8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80048bc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80048c0:	f7fc f9da 	bl	8000c78 <__aeabi_uldivmod>
 80048c4:	4602      	mov	r2, r0
 80048c6:	460b      	mov	r3, r1
 80048c8:	4613      	mov	r3, r2
 80048ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80048ce:	e05b      	b.n	8004988 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048d0:	4b3b      	ldr	r3, [pc, #236]	@ (80049c0 <HAL_RCC_GetSysClockFreq+0x348>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	099b      	lsrs	r3, r3, #6
 80048d6:	2200      	movs	r2, #0
 80048d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048e2:	623b      	str	r3, [r7, #32]
 80048e4:	2300      	movs	r3, #0
 80048e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80048e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80048ec:	4642      	mov	r2, r8
 80048ee:	464b      	mov	r3, r9
 80048f0:	f04f 0000 	mov.w	r0, #0
 80048f4:	f04f 0100 	mov.w	r1, #0
 80048f8:	0159      	lsls	r1, r3, #5
 80048fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048fe:	0150      	lsls	r0, r2, #5
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	4641      	mov	r1, r8
 8004906:	ebb2 0a01 	subs.w	sl, r2, r1
 800490a:	4649      	mov	r1, r9
 800490c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004910:	f04f 0200 	mov.w	r2, #0
 8004914:	f04f 0300 	mov.w	r3, #0
 8004918:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800491c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004920:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004924:	ebb2 040a 	subs.w	r4, r2, sl
 8004928:	eb63 050b 	sbc.w	r5, r3, fp
 800492c:	f04f 0200 	mov.w	r2, #0
 8004930:	f04f 0300 	mov.w	r3, #0
 8004934:	00eb      	lsls	r3, r5, #3
 8004936:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800493a:	00e2      	lsls	r2, r4, #3
 800493c:	4614      	mov	r4, r2
 800493e:	461d      	mov	r5, r3
 8004940:	4643      	mov	r3, r8
 8004942:	18e3      	adds	r3, r4, r3
 8004944:	603b      	str	r3, [r7, #0]
 8004946:	464b      	mov	r3, r9
 8004948:	eb45 0303 	adc.w	r3, r5, r3
 800494c:	607b      	str	r3, [r7, #4]
 800494e:	f04f 0200 	mov.w	r2, #0
 8004952:	f04f 0300 	mov.w	r3, #0
 8004956:	e9d7 4500 	ldrd	r4, r5, [r7]
 800495a:	4629      	mov	r1, r5
 800495c:	028b      	lsls	r3, r1, #10
 800495e:	4621      	mov	r1, r4
 8004960:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004964:	4621      	mov	r1, r4
 8004966:	028a      	lsls	r2, r1, #10
 8004968:	4610      	mov	r0, r2
 800496a:	4619      	mov	r1, r3
 800496c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004970:	2200      	movs	r2, #0
 8004972:	61bb      	str	r3, [r7, #24]
 8004974:	61fa      	str	r2, [r7, #28]
 8004976:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800497a:	f7fc f97d 	bl	8000c78 <__aeabi_uldivmod>
 800497e:	4602      	mov	r2, r0
 8004980:	460b      	mov	r3, r1
 8004982:	4613      	mov	r3, r2
 8004984:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004988:	4b0d      	ldr	r3, [pc, #52]	@ (80049c0 <HAL_RCC_GetSysClockFreq+0x348>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	0f1b      	lsrs	r3, r3, #28
 800498e:	f003 0307 	and.w	r3, r3, #7
 8004992:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8004996:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800499a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800499e:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80049a6:	e003      	b.n	80049b0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049a8:	4b06      	ldr	r3, [pc, #24]	@ (80049c4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80049aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80049ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3798      	adds	r7, #152	@ 0x98
 80049b8:	46bd      	mov	sp, r7
 80049ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049be:	bf00      	nop
 80049c0:	40023800 	.word	0x40023800
 80049c4:	00f42400 	.word	0x00f42400
 80049c8:	017d7840 	.word	0x017d7840

080049cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e28d      	b.n	8004efa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f000 8083 	beq.w	8004af2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80049ec:	4b94      	ldr	r3, [pc, #592]	@ (8004c40 <HAL_RCC_OscConfig+0x274>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f003 030c 	and.w	r3, r3, #12
 80049f4:	2b04      	cmp	r3, #4
 80049f6:	d019      	beq.n	8004a2c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80049f8:	4b91      	ldr	r3, [pc, #580]	@ (8004c40 <HAL_RCC_OscConfig+0x274>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f003 030c 	and.w	r3, r3, #12
        || \
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d106      	bne.n	8004a12 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004a04:	4b8e      	ldr	r3, [pc, #568]	@ (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a10:	d00c      	beq.n	8004a2c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a12:	4b8b      	ldr	r3, [pc, #556]	@ (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004a1a:	2b0c      	cmp	r3, #12
 8004a1c:	d112      	bne.n	8004a44 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a1e:	4b88      	ldr	r3, [pc, #544]	@ (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a2a:	d10b      	bne.n	8004a44 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a2c:	4b84      	ldr	r3, [pc, #528]	@ (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d05b      	beq.n	8004af0 <HAL_RCC_OscConfig+0x124>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d157      	bne.n	8004af0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e25a      	b.n	8004efa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a4c:	d106      	bne.n	8004a5c <HAL_RCC_OscConfig+0x90>
 8004a4e:	4b7c      	ldr	r3, [pc, #496]	@ (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a7b      	ldr	r2, [pc, #492]	@ (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004a54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	e01d      	b.n	8004a98 <HAL_RCC_OscConfig+0xcc>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a64:	d10c      	bne.n	8004a80 <HAL_RCC_OscConfig+0xb4>
 8004a66:	4b76      	ldr	r3, [pc, #472]	@ (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a75      	ldr	r2, [pc, #468]	@ (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004a6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a70:	6013      	str	r3, [r2, #0]
 8004a72:	4b73      	ldr	r3, [pc, #460]	@ (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a72      	ldr	r2, [pc, #456]	@ (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004a78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a7c:	6013      	str	r3, [r2, #0]
 8004a7e:	e00b      	b.n	8004a98 <HAL_RCC_OscConfig+0xcc>
 8004a80:	4b6f      	ldr	r3, [pc, #444]	@ (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a6e      	ldr	r2, [pc, #440]	@ (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004a86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a8a:	6013      	str	r3, [r2, #0]
 8004a8c:	4b6c      	ldr	r3, [pc, #432]	@ (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a6b      	ldr	r2, [pc, #428]	@ (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004a92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d013      	beq.n	8004ac8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa0:	f7fe f8f2 	bl	8002c88 <HAL_GetTick>
 8004aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aa6:	e008      	b.n	8004aba <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004aa8:	f7fe f8ee 	bl	8002c88 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b64      	cmp	r3, #100	@ 0x64
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e21f      	b.n	8004efa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aba:	4b61      	ldr	r3, [pc, #388]	@ (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0f0      	beq.n	8004aa8 <HAL_RCC_OscConfig+0xdc>
 8004ac6:	e014      	b.n	8004af2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac8:	f7fe f8de 	bl	8002c88 <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ad0:	f7fe f8da 	bl	8002c88 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b64      	cmp	r3, #100	@ 0x64
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e20b      	b.n	8004efa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ae2:	4b57      	ldr	r3, [pc, #348]	@ (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1f0      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x104>
 8004aee:	e000      	b.n	8004af2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d06f      	beq.n	8004bde <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004afe:	4b50      	ldr	r3, [pc, #320]	@ (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f003 030c 	and.w	r3, r3, #12
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d017      	beq.n	8004b3a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004b0a:	4b4d      	ldr	r3, [pc, #308]	@ (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f003 030c 	and.w	r3, r3, #12
        || \
 8004b12:	2b08      	cmp	r3, #8
 8004b14:	d105      	bne.n	8004b22 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004b16:	4b4a      	ldr	r3, [pc, #296]	@ (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00b      	beq.n	8004b3a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b22:	4b47      	ldr	r3, [pc, #284]	@ (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004b2a:	2b0c      	cmp	r3, #12
 8004b2c:	d11c      	bne.n	8004b68 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b2e:	4b44      	ldr	r3, [pc, #272]	@ (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d116      	bne.n	8004b68 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b3a:	4b41      	ldr	r3, [pc, #260]	@ (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d005      	beq.n	8004b52 <HAL_RCC_OscConfig+0x186>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d001      	beq.n	8004b52 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e1d3      	b.n	8004efa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b52:	4b3b      	ldr	r3, [pc, #236]	@ (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	00db      	lsls	r3, r3, #3
 8004b60:	4937      	ldr	r1, [pc, #220]	@ (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b66:	e03a      	b.n	8004bde <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d020      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b70:	4b34      	ldr	r3, [pc, #208]	@ (8004c44 <HAL_RCC_OscConfig+0x278>)
 8004b72:	2201      	movs	r2, #1
 8004b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b76:	f7fe f887 	bl	8002c88 <HAL_GetTick>
 8004b7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b7c:	e008      	b.n	8004b90 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b7e:	f7fe f883 	bl	8002c88 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d901      	bls.n	8004b90 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e1b4      	b.n	8004efa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b90:	4b2b      	ldr	r3, [pc, #172]	@ (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d0f0      	beq.n	8004b7e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b9c:	4b28      	ldr	r3, [pc, #160]	@ (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	00db      	lsls	r3, r3, #3
 8004baa:	4925      	ldr	r1, [pc, #148]	@ (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	600b      	str	r3, [r1, #0]
 8004bb0:	e015      	b.n	8004bde <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bb2:	4b24      	ldr	r3, [pc, #144]	@ (8004c44 <HAL_RCC_OscConfig+0x278>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb8:	f7fe f866 	bl	8002c88 <HAL_GetTick>
 8004bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bc0:	f7fe f862 	bl	8002c88 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e193      	b.n	8004efa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1f0      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0308 	and.w	r3, r3, #8
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d036      	beq.n	8004c58 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d016      	beq.n	8004c20 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bf2:	4b15      	ldr	r3, [pc, #84]	@ (8004c48 <HAL_RCC_OscConfig+0x27c>)
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf8:	f7fe f846 	bl	8002c88 <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c00:	f7fe f842 	bl	8002c88 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e173      	b.n	8004efa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c12:	4b0b      	ldr	r3, [pc, #44]	@ (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004c14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d0f0      	beq.n	8004c00 <HAL_RCC_OscConfig+0x234>
 8004c1e:	e01b      	b.n	8004c58 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c20:	4b09      	ldr	r3, [pc, #36]	@ (8004c48 <HAL_RCC_OscConfig+0x27c>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c26:	f7fe f82f 	bl	8002c88 <HAL_GetTick>
 8004c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c2c:	e00e      	b.n	8004c4c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c2e:	f7fe f82b 	bl	8002c88 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d907      	bls.n	8004c4c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e15c      	b.n	8004efa <HAL_RCC_OscConfig+0x52e>
 8004c40:	40023800 	.word	0x40023800
 8004c44:	42470000 	.word	0x42470000
 8004c48:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c4c:	4b8a      	ldr	r3, [pc, #552]	@ (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004c4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1ea      	bne.n	8004c2e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f000 8097 	beq.w	8004d94 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c66:	2300      	movs	r3, #0
 8004c68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c6a:	4b83      	ldr	r3, [pc, #524]	@ (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10f      	bne.n	8004c96 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c76:	2300      	movs	r3, #0
 8004c78:	60bb      	str	r3, [r7, #8]
 8004c7a:	4b7f      	ldr	r3, [pc, #508]	@ (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c7e:	4a7e      	ldr	r2, [pc, #504]	@ (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004c80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c84:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c86:	4b7c      	ldr	r3, [pc, #496]	@ (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c8e:	60bb      	str	r3, [r7, #8]
 8004c90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c92:	2301      	movs	r3, #1
 8004c94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c96:	4b79      	ldr	r3, [pc, #484]	@ (8004e7c <HAL_RCC_OscConfig+0x4b0>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d118      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ca2:	4b76      	ldr	r3, [pc, #472]	@ (8004e7c <HAL_RCC_OscConfig+0x4b0>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a75      	ldr	r2, [pc, #468]	@ (8004e7c <HAL_RCC_OscConfig+0x4b0>)
 8004ca8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cae:	f7fd ffeb 	bl	8002c88 <HAL_GetTick>
 8004cb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb4:	e008      	b.n	8004cc8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cb6:	f7fd ffe7 	bl	8002c88 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d901      	bls.n	8004cc8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e118      	b.n	8004efa <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cc8:	4b6c      	ldr	r3, [pc, #432]	@ (8004e7c <HAL_RCC_OscConfig+0x4b0>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d0f0      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d106      	bne.n	8004cea <HAL_RCC_OscConfig+0x31e>
 8004cdc:	4b66      	ldr	r3, [pc, #408]	@ (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ce0:	4a65      	ldr	r2, [pc, #404]	@ (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004ce2:	f043 0301 	orr.w	r3, r3, #1
 8004ce6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ce8:	e01c      	b.n	8004d24 <HAL_RCC_OscConfig+0x358>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	2b05      	cmp	r3, #5
 8004cf0:	d10c      	bne.n	8004d0c <HAL_RCC_OscConfig+0x340>
 8004cf2:	4b61      	ldr	r3, [pc, #388]	@ (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cf6:	4a60      	ldr	r2, [pc, #384]	@ (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004cf8:	f043 0304 	orr.w	r3, r3, #4
 8004cfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cfe:	4b5e      	ldr	r3, [pc, #376]	@ (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d02:	4a5d      	ldr	r2, [pc, #372]	@ (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004d04:	f043 0301 	orr.w	r3, r3, #1
 8004d08:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d0a:	e00b      	b.n	8004d24 <HAL_RCC_OscConfig+0x358>
 8004d0c:	4b5a      	ldr	r3, [pc, #360]	@ (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004d0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d10:	4a59      	ldr	r2, [pc, #356]	@ (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004d12:	f023 0301 	bic.w	r3, r3, #1
 8004d16:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d18:	4b57      	ldr	r3, [pc, #348]	@ (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004d1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d1c:	4a56      	ldr	r2, [pc, #344]	@ (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004d1e:	f023 0304 	bic.w	r3, r3, #4
 8004d22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d015      	beq.n	8004d58 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d2c:	f7fd ffac 	bl	8002c88 <HAL_GetTick>
 8004d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d32:	e00a      	b.n	8004d4a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d34:	f7fd ffa8 	bl	8002c88 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e0d7      	b.n	8004efa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d4a:	4b4b      	ldr	r3, [pc, #300]	@ (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d0ee      	beq.n	8004d34 <HAL_RCC_OscConfig+0x368>
 8004d56:	e014      	b.n	8004d82 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d58:	f7fd ff96 	bl	8002c88 <HAL_GetTick>
 8004d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d5e:	e00a      	b.n	8004d76 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d60:	f7fd ff92 	bl	8002c88 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e0c1      	b.n	8004efa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d76:	4b40      	ldr	r3, [pc, #256]	@ (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1ee      	bne.n	8004d60 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d82:	7dfb      	ldrb	r3, [r7, #23]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d105      	bne.n	8004d94 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d88:	4b3b      	ldr	r3, [pc, #236]	@ (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d8c:	4a3a      	ldr	r2, [pc, #232]	@ (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004d8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d92:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 80ad 	beq.w	8004ef8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d9e:	4b36      	ldr	r3, [pc, #216]	@ (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f003 030c 	and.w	r3, r3, #12
 8004da6:	2b08      	cmp	r3, #8
 8004da8:	d060      	beq.n	8004e6c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d145      	bne.n	8004e3e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004db2:	4b33      	ldr	r3, [pc, #204]	@ (8004e80 <HAL_RCC_OscConfig+0x4b4>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db8:	f7fd ff66 	bl	8002c88 <HAL_GetTick>
 8004dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dbe:	e008      	b.n	8004dd2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dc0:	f7fd ff62 	bl	8002c88 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e093      	b.n	8004efa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dd2:	4b29      	ldr	r3, [pc, #164]	@ (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1f0      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	69da      	ldr	r2, [r3, #28]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	431a      	orrs	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dec:	019b      	lsls	r3, r3, #6
 8004dee:	431a      	orrs	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df4:	085b      	lsrs	r3, r3, #1
 8004df6:	3b01      	subs	r3, #1
 8004df8:	041b      	lsls	r3, r3, #16
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e00:	061b      	lsls	r3, r3, #24
 8004e02:	431a      	orrs	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e08:	071b      	lsls	r3, r3, #28
 8004e0a:	491b      	ldr	r1, [pc, #108]	@ (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e10:	4b1b      	ldr	r3, [pc, #108]	@ (8004e80 <HAL_RCC_OscConfig+0x4b4>)
 8004e12:	2201      	movs	r2, #1
 8004e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e16:	f7fd ff37 	bl	8002c88 <HAL_GetTick>
 8004e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e1c:	e008      	b.n	8004e30 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e1e:	f7fd ff33 	bl	8002c88 <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d901      	bls.n	8004e30 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e064      	b.n	8004efa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e30:	4b11      	ldr	r3, [pc, #68]	@ (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d0f0      	beq.n	8004e1e <HAL_RCC_OscConfig+0x452>
 8004e3c:	e05c      	b.n	8004ef8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e3e:	4b10      	ldr	r3, [pc, #64]	@ (8004e80 <HAL_RCC_OscConfig+0x4b4>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e44:	f7fd ff20 	bl	8002c88 <HAL_GetTick>
 8004e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e4a:	e008      	b.n	8004e5e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e4c:	f7fd ff1c 	bl	8002c88 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d901      	bls.n	8004e5e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e04d      	b.n	8004efa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e5e:	4b06      	ldr	r3, [pc, #24]	@ (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1f0      	bne.n	8004e4c <HAL_RCC_OscConfig+0x480>
 8004e6a:	e045      	b.n	8004ef8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d107      	bne.n	8004e84 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e040      	b.n	8004efa <HAL_RCC_OscConfig+0x52e>
 8004e78:	40023800 	.word	0x40023800
 8004e7c:	40007000 	.word	0x40007000
 8004e80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e84:	4b1f      	ldr	r3, [pc, #124]	@ (8004f04 <HAL_RCC_OscConfig+0x538>)
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d030      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d129      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d122      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004eba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d119      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eca:	085b      	lsrs	r3, r3, #1
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d10f      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ede:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d107      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d001      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e000      	b.n	8004efa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3718      	adds	r7, #24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	40023800 	.word	0x40023800

08004f08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d001      	beq.n	8004f20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e04e      	b.n	8004fbe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68da      	ldr	r2, [r3, #12]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 0201 	orr.w	r2, r2, #1
 8004f36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a23      	ldr	r2, [pc, #140]	@ (8004fcc <HAL_TIM_Base_Start_IT+0xc4>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d022      	beq.n	8004f88 <HAL_TIM_Base_Start_IT+0x80>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f4a:	d01d      	beq.n	8004f88 <HAL_TIM_Base_Start_IT+0x80>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a1f      	ldr	r2, [pc, #124]	@ (8004fd0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d018      	beq.n	8004f88 <HAL_TIM_Base_Start_IT+0x80>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a1e      	ldr	r2, [pc, #120]	@ (8004fd4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d013      	beq.n	8004f88 <HAL_TIM_Base_Start_IT+0x80>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a1c      	ldr	r2, [pc, #112]	@ (8004fd8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d00e      	beq.n	8004f88 <HAL_TIM_Base_Start_IT+0x80>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a1b      	ldr	r2, [pc, #108]	@ (8004fdc <HAL_TIM_Base_Start_IT+0xd4>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d009      	beq.n	8004f88 <HAL_TIM_Base_Start_IT+0x80>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a19      	ldr	r2, [pc, #100]	@ (8004fe0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d004      	beq.n	8004f88 <HAL_TIM_Base_Start_IT+0x80>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a18      	ldr	r2, [pc, #96]	@ (8004fe4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d111      	bne.n	8004fac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f003 0307 	and.w	r3, r3, #7
 8004f92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2b06      	cmp	r3, #6
 8004f98:	d010      	beq.n	8004fbc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f042 0201 	orr.w	r2, r2, #1
 8004fa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004faa:	e007      	b.n	8004fbc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f042 0201 	orr.w	r2, r2, #1
 8004fba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3714      	adds	r7, #20
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	40010000 	.word	0x40010000
 8004fd0:	40000400 	.word	0x40000400
 8004fd4:	40000800 	.word	0x40000800
 8004fd8:	40000c00 	.word	0x40000c00
 8004fdc:	40010400 	.word	0x40010400
 8004fe0:	40014000 	.word	0x40014000
 8004fe4:	40001800 	.word	0x40001800

08004fe8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e041      	b.n	800507e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d106      	bne.n	8005014 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f7fd fbfa 	bl	8002808 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2202      	movs	r2, #2
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	3304      	adds	r3, #4
 8005024:	4619      	mov	r1, r3
 8005026:	4610      	mov	r0, r2
 8005028:	f000 fa28 	bl	800547c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3708      	adds	r7, #8
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
	...

08005088 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d109      	bne.n	80050ac <HAL_TIM_PWM_Start+0x24>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	bf14      	ite	ne
 80050a4:	2301      	movne	r3, #1
 80050a6:	2300      	moveq	r3, #0
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	e022      	b.n	80050f2 <HAL_TIM_PWM_Start+0x6a>
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	2b04      	cmp	r3, #4
 80050b0:	d109      	bne.n	80050c6 <HAL_TIM_PWM_Start+0x3e>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	bf14      	ite	ne
 80050be:	2301      	movne	r3, #1
 80050c0:	2300      	moveq	r3, #0
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	e015      	b.n	80050f2 <HAL_TIM_PWM_Start+0x6a>
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	2b08      	cmp	r3, #8
 80050ca:	d109      	bne.n	80050e0 <HAL_TIM_PWM_Start+0x58>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	bf14      	ite	ne
 80050d8:	2301      	movne	r3, #1
 80050da:	2300      	moveq	r3, #0
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	e008      	b.n	80050f2 <HAL_TIM_PWM_Start+0x6a>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	bf14      	ite	ne
 80050ec:	2301      	movne	r3, #1
 80050ee:	2300      	moveq	r3, #0
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e07c      	b.n	80051f4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d104      	bne.n	800510a <HAL_TIM_PWM_Start+0x82>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2202      	movs	r2, #2
 8005104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005108:	e013      	b.n	8005132 <HAL_TIM_PWM_Start+0xaa>
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	2b04      	cmp	r3, #4
 800510e:	d104      	bne.n	800511a <HAL_TIM_PWM_Start+0x92>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2202      	movs	r2, #2
 8005114:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005118:	e00b      	b.n	8005132 <HAL_TIM_PWM_Start+0xaa>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2b08      	cmp	r3, #8
 800511e:	d104      	bne.n	800512a <HAL_TIM_PWM_Start+0xa2>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2202      	movs	r2, #2
 8005124:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005128:	e003      	b.n	8005132 <HAL_TIM_PWM_Start+0xaa>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2202      	movs	r2, #2
 800512e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2201      	movs	r2, #1
 8005138:	6839      	ldr	r1, [r7, #0]
 800513a:	4618      	mov	r0, r3
 800513c:	f000 fbfa 	bl	8005934 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a2d      	ldr	r2, [pc, #180]	@ (80051fc <HAL_TIM_PWM_Start+0x174>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d004      	beq.n	8005154 <HAL_TIM_PWM_Start+0xcc>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a2c      	ldr	r2, [pc, #176]	@ (8005200 <HAL_TIM_PWM_Start+0x178>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d101      	bne.n	8005158 <HAL_TIM_PWM_Start+0xd0>
 8005154:	2301      	movs	r3, #1
 8005156:	e000      	b.n	800515a <HAL_TIM_PWM_Start+0xd2>
 8005158:	2300      	movs	r3, #0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d007      	beq.n	800516e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800516c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a22      	ldr	r2, [pc, #136]	@ (80051fc <HAL_TIM_PWM_Start+0x174>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d022      	beq.n	80051be <HAL_TIM_PWM_Start+0x136>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005180:	d01d      	beq.n	80051be <HAL_TIM_PWM_Start+0x136>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a1f      	ldr	r2, [pc, #124]	@ (8005204 <HAL_TIM_PWM_Start+0x17c>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d018      	beq.n	80051be <HAL_TIM_PWM_Start+0x136>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a1d      	ldr	r2, [pc, #116]	@ (8005208 <HAL_TIM_PWM_Start+0x180>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d013      	beq.n	80051be <HAL_TIM_PWM_Start+0x136>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a1c      	ldr	r2, [pc, #112]	@ (800520c <HAL_TIM_PWM_Start+0x184>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d00e      	beq.n	80051be <HAL_TIM_PWM_Start+0x136>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a16      	ldr	r2, [pc, #88]	@ (8005200 <HAL_TIM_PWM_Start+0x178>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d009      	beq.n	80051be <HAL_TIM_PWM_Start+0x136>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a18      	ldr	r2, [pc, #96]	@ (8005210 <HAL_TIM_PWM_Start+0x188>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d004      	beq.n	80051be <HAL_TIM_PWM_Start+0x136>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a16      	ldr	r2, [pc, #88]	@ (8005214 <HAL_TIM_PWM_Start+0x18c>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d111      	bne.n	80051e2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f003 0307 	and.w	r3, r3, #7
 80051c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2b06      	cmp	r3, #6
 80051ce:	d010      	beq.n	80051f2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f042 0201 	orr.w	r2, r2, #1
 80051de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051e0:	e007      	b.n	80051f2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f042 0201 	orr.w	r2, r2, #1
 80051f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	40010000 	.word	0x40010000
 8005200:	40010400 	.word	0x40010400
 8005204:	40000400 	.word	0x40000400
 8005208:	40000800 	.word	0x40000800
 800520c:	40000c00 	.word	0x40000c00
 8005210:	40014000 	.word	0x40014000
 8005214:	40001800 	.word	0x40001800

08005218 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2200      	movs	r2, #0
 8005228:	6839      	ldr	r1, [r7, #0]
 800522a:	4618      	mov	r0, r3
 800522c:	f000 fb82 	bl	8005934 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a2e      	ldr	r2, [pc, #184]	@ (80052f0 <HAL_TIM_PWM_Stop+0xd8>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d004      	beq.n	8005244 <HAL_TIM_PWM_Stop+0x2c>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a2d      	ldr	r2, [pc, #180]	@ (80052f4 <HAL_TIM_PWM_Stop+0xdc>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d101      	bne.n	8005248 <HAL_TIM_PWM_Stop+0x30>
 8005244:	2301      	movs	r3, #1
 8005246:	e000      	b.n	800524a <HAL_TIM_PWM_Stop+0x32>
 8005248:	2300      	movs	r3, #0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d017      	beq.n	800527e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6a1a      	ldr	r2, [r3, #32]
 8005254:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005258:	4013      	ands	r3, r2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10f      	bne.n	800527e <HAL_TIM_PWM_Stop+0x66>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	6a1a      	ldr	r2, [r3, #32]
 8005264:	f240 4344 	movw	r3, #1092	@ 0x444
 8005268:	4013      	ands	r3, r2
 800526a:	2b00      	cmp	r3, #0
 800526c:	d107      	bne.n	800527e <HAL_TIM_PWM_Stop+0x66>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800527c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6a1a      	ldr	r2, [r3, #32]
 8005284:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005288:	4013      	ands	r3, r2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10f      	bne.n	80052ae <HAL_TIM_PWM_Stop+0x96>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	6a1a      	ldr	r2, [r3, #32]
 8005294:	f240 4344 	movw	r3, #1092	@ 0x444
 8005298:	4013      	ands	r3, r2
 800529a:	2b00      	cmp	r3, #0
 800529c:	d107      	bne.n	80052ae <HAL_TIM_PWM_Stop+0x96>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f022 0201 	bic.w	r2, r2, #1
 80052ac:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d104      	bne.n	80052be <HAL_TIM_PWM_Stop+0xa6>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052bc:	e013      	b.n	80052e6 <HAL_TIM_PWM_Stop+0xce>
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	2b04      	cmp	r3, #4
 80052c2:	d104      	bne.n	80052ce <HAL_TIM_PWM_Stop+0xb6>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052cc:	e00b      	b.n	80052e6 <HAL_TIM_PWM_Stop+0xce>
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	2b08      	cmp	r3, #8
 80052d2:	d104      	bne.n	80052de <HAL_TIM_PWM_Stop+0xc6>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052dc:	e003      	b.n	80052e6 <HAL_TIM_PWM_Stop+0xce>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3708      	adds	r7, #8
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	40010000 	.word	0x40010000
 80052f4:	40010400 	.word	0x40010400

080052f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005304:	2300      	movs	r3, #0
 8005306:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800530e:	2b01      	cmp	r3, #1
 8005310:	d101      	bne.n	8005316 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005312:	2302      	movs	r3, #2
 8005314:	e0ae      	b.n	8005474 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2b0c      	cmp	r3, #12
 8005322:	f200 809f 	bhi.w	8005464 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005326:	a201      	add	r2, pc, #4	@ (adr r2, 800532c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800532c:	08005361 	.word	0x08005361
 8005330:	08005465 	.word	0x08005465
 8005334:	08005465 	.word	0x08005465
 8005338:	08005465 	.word	0x08005465
 800533c:	080053a1 	.word	0x080053a1
 8005340:	08005465 	.word	0x08005465
 8005344:	08005465 	.word	0x08005465
 8005348:	08005465 	.word	0x08005465
 800534c:	080053e3 	.word	0x080053e3
 8005350:	08005465 	.word	0x08005465
 8005354:	08005465 	.word	0x08005465
 8005358:	08005465 	.word	0x08005465
 800535c:	08005423 	.word	0x08005423
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68b9      	ldr	r1, [r7, #8]
 8005366:	4618      	mov	r0, r3
 8005368:	f000 f934 	bl	80055d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	699a      	ldr	r2, [r3, #24]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f042 0208 	orr.w	r2, r2, #8
 800537a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	699a      	ldr	r2, [r3, #24]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f022 0204 	bic.w	r2, r2, #4
 800538a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6999      	ldr	r1, [r3, #24]
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	691a      	ldr	r2, [r3, #16]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	619a      	str	r2, [r3, #24]
      break;
 800539e:	e064      	b.n	800546a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68b9      	ldr	r1, [r7, #8]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f000 f984 	bl	80056b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	699a      	ldr	r2, [r3, #24]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	699a      	ldr	r2, [r3, #24]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6999      	ldr	r1, [r3, #24]
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	021a      	lsls	r2, r3, #8
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	430a      	orrs	r2, r1
 80053de:	619a      	str	r2, [r3, #24]
      break;
 80053e0:	e043      	b.n	800546a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68b9      	ldr	r1, [r7, #8]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 f9d9 	bl	80057a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	69da      	ldr	r2, [r3, #28]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f042 0208 	orr.w	r2, r2, #8
 80053fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	69da      	ldr	r2, [r3, #28]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f022 0204 	bic.w	r2, r2, #4
 800540c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	69d9      	ldr	r1, [r3, #28]
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	691a      	ldr	r2, [r3, #16]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	430a      	orrs	r2, r1
 800541e:	61da      	str	r2, [r3, #28]
      break;
 8005420:	e023      	b.n	800546a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68b9      	ldr	r1, [r7, #8]
 8005428:	4618      	mov	r0, r3
 800542a:	f000 fa2d 	bl	8005888 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	69da      	ldr	r2, [r3, #28]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800543c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	69da      	ldr	r2, [r3, #28]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800544c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	69d9      	ldr	r1, [r3, #28]
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	021a      	lsls	r2, r3, #8
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	430a      	orrs	r2, r1
 8005460:	61da      	str	r2, [r3, #28]
      break;
 8005462:	e002      	b.n	800546a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	75fb      	strb	r3, [r7, #23]
      break;
 8005468:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005472:	7dfb      	ldrb	r3, [r7, #23]
}
 8005474:	4618      	mov	r0, r3
 8005476:	3718      	adds	r7, #24
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a46      	ldr	r2, [pc, #280]	@ (80055a8 <TIM_Base_SetConfig+0x12c>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d013      	beq.n	80054bc <TIM_Base_SetConfig+0x40>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800549a:	d00f      	beq.n	80054bc <TIM_Base_SetConfig+0x40>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a43      	ldr	r2, [pc, #268]	@ (80055ac <TIM_Base_SetConfig+0x130>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d00b      	beq.n	80054bc <TIM_Base_SetConfig+0x40>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a42      	ldr	r2, [pc, #264]	@ (80055b0 <TIM_Base_SetConfig+0x134>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d007      	beq.n	80054bc <TIM_Base_SetConfig+0x40>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a41      	ldr	r2, [pc, #260]	@ (80055b4 <TIM_Base_SetConfig+0x138>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d003      	beq.n	80054bc <TIM_Base_SetConfig+0x40>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a40      	ldr	r2, [pc, #256]	@ (80055b8 <TIM_Base_SetConfig+0x13c>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d108      	bne.n	80054ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a35      	ldr	r2, [pc, #212]	@ (80055a8 <TIM_Base_SetConfig+0x12c>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d02b      	beq.n	800552e <TIM_Base_SetConfig+0xb2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054dc:	d027      	beq.n	800552e <TIM_Base_SetConfig+0xb2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a32      	ldr	r2, [pc, #200]	@ (80055ac <TIM_Base_SetConfig+0x130>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d023      	beq.n	800552e <TIM_Base_SetConfig+0xb2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a31      	ldr	r2, [pc, #196]	@ (80055b0 <TIM_Base_SetConfig+0x134>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d01f      	beq.n	800552e <TIM_Base_SetConfig+0xb2>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a30      	ldr	r2, [pc, #192]	@ (80055b4 <TIM_Base_SetConfig+0x138>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d01b      	beq.n	800552e <TIM_Base_SetConfig+0xb2>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a2f      	ldr	r2, [pc, #188]	@ (80055b8 <TIM_Base_SetConfig+0x13c>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d017      	beq.n	800552e <TIM_Base_SetConfig+0xb2>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a2e      	ldr	r2, [pc, #184]	@ (80055bc <TIM_Base_SetConfig+0x140>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d013      	beq.n	800552e <TIM_Base_SetConfig+0xb2>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a2d      	ldr	r2, [pc, #180]	@ (80055c0 <TIM_Base_SetConfig+0x144>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d00f      	beq.n	800552e <TIM_Base_SetConfig+0xb2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a2c      	ldr	r2, [pc, #176]	@ (80055c4 <TIM_Base_SetConfig+0x148>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d00b      	beq.n	800552e <TIM_Base_SetConfig+0xb2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a2b      	ldr	r2, [pc, #172]	@ (80055c8 <TIM_Base_SetConfig+0x14c>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d007      	beq.n	800552e <TIM_Base_SetConfig+0xb2>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a2a      	ldr	r2, [pc, #168]	@ (80055cc <TIM_Base_SetConfig+0x150>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d003      	beq.n	800552e <TIM_Base_SetConfig+0xb2>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a29      	ldr	r2, [pc, #164]	@ (80055d0 <TIM_Base_SetConfig+0x154>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d108      	bne.n	8005540 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005534:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	4313      	orrs	r3, r2
 800553e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	4313      	orrs	r3, r2
 800554c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	689a      	ldr	r2, [r3, #8]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a10      	ldr	r2, [pc, #64]	@ (80055a8 <TIM_Base_SetConfig+0x12c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d003      	beq.n	8005574 <TIM_Base_SetConfig+0xf8>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a12      	ldr	r2, [pc, #72]	@ (80055b8 <TIM_Base_SetConfig+0x13c>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d103      	bne.n	800557c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	691a      	ldr	r2, [r3, #16]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	2b01      	cmp	r3, #1
 800558c:	d105      	bne.n	800559a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	f023 0201 	bic.w	r2, r3, #1
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	611a      	str	r2, [r3, #16]
  }
}
 800559a:	bf00      	nop
 800559c:	3714      	adds	r7, #20
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	40010000 	.word	0x40010000
 80055ac:	40000400 	.word	0x40000400
 80055b0:	40000800 	.word	0x40000800
 80055b4:	40000c00 	.word	0x40000c00
 80055b8:	40010400 	.word	0x40010400
 80055bc:	40014000 	.word	0x40014000
 80055c0:	40014400 	.word	0x40014400
 80055c4:	40014800 	.word	0x40014800
 80055c8:	40001800 	.word	0x40001800
 80055cc:	40001c00 	.word	0x40001c00
 80055d0:	40002000 	.word	0x40002000

080055d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b087      	sub	sp, #28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a1b      	ldr	r3, [r3, #32]
 80055e8:	f023 0201 	bic.w	r2, r3, #1
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f023 0303 	bic.w	r3, r3, #3
 800560a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	4313      	orrs	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f023 0302 	bic.w	r3, r3, #2
 800561c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	4313      	orrs	r3, r2
 8005626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a20      	ldr	r2, [pc, #128]	@ (80056ac <TIM_OC1_SetConfig+0xd8>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d003      	beq.n	8005638 <TIM_OC1_SetConfig+0x64>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a1f      	ldr	r2, [pc, #124]	@ (80056b0 <TIM_OC1_SetConfig+0xdc>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d10c      	bne.n	8005652 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	f023 0308 	bic.w	r3, r3, #8
 800563e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	4313      	orrs	r3, r2
 8005648:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	f023 0304 	bic.w	r3, r3, #4
 8005650:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a15      	ldr	r2, [pc, #84]	@ (80056ac <TIM_OC1_SetConfig+0xd8>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d003      	beq.n	8005662 <TIM_OC1_SetConfig+0x8e>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a14      	ldr	r2, [pc, #80]	@ (80056b0 <TIM_OC1_SetConfig+0xdc>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d111      	bne.n	8005686 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005668:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005670:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	4313      	orrs	r3, r2
 800567a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	4313      	orrs	r3, r2
 8005684:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	685a      	ldr	r2, [r3, #4]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	621a      	str	r2, [r3, #32]
}
 80056a0:	bf00      	nop
 80056a2:	371c      	adds	r7, #28
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr
 80056ac:	40010000 	.word	0x40010000
 80056b0:	40010400 	.word	0x40010400

080056b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b087      	sub	sp, #28
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a1b      	ldr	r3, [r3, #32]
 80056c8:	f023 0210 	bic.w	r2, r3, #16
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	021b      	lsls	r3, r3, #8
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	f023 0320 	bic.w	r3, r3, #32
 80056fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	011b      	lsls	r3, r3, #4
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	4313      	orrs	r3, r2
 800570a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a22      	ldr	r2, [pc, #136]	@ (8005798 <TIM_OC2_SetConfig+0xe4>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d003      	beq.n	800571c <TIM_OC2_SetConfig+0x68>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a21      	ldr	r2, [pc, #132]	@ (800579c <TIM_OC2_SetConfig+0xe8>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d10d      	bne.n	8005738 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005722:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	011b      	lsls	r3, r3, #4
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	4313      	orrs	r3, r2
 800572e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005736:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a17      	ldr	r2, [pc, #92]	@ (8005798 <TIM_OC2_SetConfig+0xe4>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d003      	beq.n	8005748 <TIM_OC2_SetConfig+0x94>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a16      	ldr	r2, [pc, #88]	@ (800579c <TIM_OC2_SetConfig+0xe8>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d113      	bne.n	8005770 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800574e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005756:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	4313      	orrs	r3, r2
 8005762:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	4313      	orrs	r3, r2
 800576e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	621a      	str	r2, [r3, #32]
}
 800578a:	bf00      	nop
 800578c:	371c      	adds	r7, #28
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	40010000 	.word	0x40010000
 800579c:	40010400 	.word	0x40010400

080057a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b087      	sub	sp, #28
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a1b      	ldr	r3, [r3, #32]
 80057b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f023 0303 	bic.w	r3, r3, #3
 80057d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	4313      	orrs	r3, r2
 80057e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	021b      	lsls	r3, r3, #8
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a21      	ldr	r2, [pc, #132]	@ (8005880 <TIM_OC3_SetConfig+0xe0>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d003      	beq.n	8005806 <TIM_OC3_SetConfig+0x66>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a20      	ldr	r2, [pc, #128]	@ (8005884 <TIM_OC3_SetConfig+0xe4>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d10d      	bne.n	8005822 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800580c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	021b      	lsls	r3, r3, #8
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	4313      	orrs	r3, r2
 8005818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a16      	ldr	r2, [pc, #88]	@ (8005880 <TIM_OC3_SetConfig+0xe0>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d003      	beq.n	8005832 <TIM_OC3_SetConfig+0x92>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a15      	ldr	r2, [pc, #84]	@ (8005884 <TIM_OC3_SetConfig+0xe4>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d113      	bne.n	800585a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005838:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005840:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	011b      	lsls	r3, r3, #4
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	4313      	orrs	r3, r2
 800584c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	011b      	lsls	r3, r3, #4
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	4313      	orrs	r3, r2
 8005858:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	685a      	ldr	r2, [r3, #4]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	621a      	str	r2, [r3, #32]
}
 8005874:	bf00      	nop
 8005876:	371c      	adds	r7, #28
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr
 8005880:	40010000 	.word	0x40010000
 8005884:	40010400 	.word	0x40010400

08005888 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005888:	b480      	push	{r7}
 800588a:	b087      	sub	sp, #28
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	69db      	ldr	r3, [r3, #28]
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	021b      	lsls	r3, r3, #8
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80058d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	031b      	lsls	r3, r3, #12
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	4313      	orrs	r3, r2
 80058de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a12      	ldr	r2, [pc, #72]	@ (800592c <TIM_OC4_SetConfig+0xa4>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d003      	beq.n	80058f0 <TIM_OC4_SetConfig+0x68>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a11      	ldr	r2, [pc, #68]	@ (8005930 <TIM_OC4_SetConfig+0xa8>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d109      	bne.n	8005904 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	019b      	lsls	r3, r3, #6
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	4313      	orrs	r3, r2
 8005902:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	621a      	str	r2, [r3, #32]
}
 800591e:	bf00      	nop
 8005920:	371c      	adds	r7, #28
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	40010000 	.word	0x40010000
 8005930:	40010400 	.word	0x40010400

08005934 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005934:	b480      	push	{r7}
 8005936:	b087      	sub	sp, #28
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	f003 031f 	and.w	r3, r3, #31
 8005946:	2201      	movs	r2, #1
 8005948:	fa02 f303 	lsl.w	r3, r2, r3
 800594c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6a1a      	ldr	r2, [r3, #32]
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	43db      	mvns	r3, r3
 8005956:	401a      	ands	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6a1a      	ldr	r2, [r3, #32]
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	f003 031f 	and.w	r3, r3, #31
 8005966:	6879      	ldr	r1, [r7, #4]
 8005968:	fa01 f303 	lsl.w	r3, r1, r3
 800596c:	431a      	orrs	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	621a      	str	r2, [r3, #32]
}
 8005972:	bf00      	nop
 8005974:	371c      	adds	r7, #28
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
	...

08005980 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005980:	b480      	push	{r7}
 8005982:	b085      	sub	sp, #20
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005990:	2b01      	cmp	r3, #1
 8005992:	d101      	bne.n	8005998 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005994:	2302      	movs	r3, #2
 8005996:	e05a      	b.n	8005a4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2202      	movs	r2, #2
 80059a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a21      	ldr	r2, [pc, #132]	@ (8005a5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d022      	beq.n	8005a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059e4:	d01d      	beq.n	8005a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a1d      	ldr	r2, [pc, #116]	@ (8005a60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d018      	beq.n	8005a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a1b      	ldr	r2, [pc, #108]	@ (8005a64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d013      	beq.n	8005a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a1a      	ldr	r2, [pc, #104]	@ (8005a68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d00e      	beq.n	8005a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a18      	ldr	r2, [pc, #96]	@ (8005a6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d009      	beq.n	8005a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a17      	ldr	r2, [pc, #92]	@ (8005a70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d004      	beq.n	8005a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a15      	ldr	r2, [pc, #84]	@ (8005a74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d10c      	bne.n	8005a3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3714      	adds	r7, #20
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	40010000 	.word	0x40010000
 8005a60:	40000400 	.word	0x40000400
 8005a64:	40000800 	.word	0x40000800
 8005a68:	40000c00 	.word	0x40000c00
 8005a6c:	40010400 	.word	0x40010400
 8005a70:	40014000 	.word	0x40014000
 8005a74:	40001800 	.word	0x40001800

08005a78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d101      	bne.n	8005a8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e042      	b.n	8005b10 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d106      	bne.n	8005aa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7fc ff4c 	bl	800293c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2224      	movs	r2, #36	@ 0x24
 8005aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68da      	ldr	r2, [r3, #12]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005aba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 fbf7 	bl	80062b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	691a      	ldr	r2, [r3, #16]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ad0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	695a      	ldr	r2, [r3, #20]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ae0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68da      	ldr	r2, [r3, #12]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005af0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2220      	movs	r2, #32
 8005afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2220      	movs	r2, #32
 8005b04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3708      	adds	r7, #8
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b08a      	sub	sp, #40	@ 0x28
 8005b1c:	af02      	add	r7, sp, #8
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	603b      	str	r3, [r7, #0]
 8005b24:	4613      	mov	r3, r2
 8005b26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	2b20      	cmp	r3, #32
 8005b36:	d175      	bne.n	8005c24 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d002      	beq.n	8005b44 <HAL_UART_Transmit+0x2c>
 8005b3e:	88fb      	ldrh	r3, [r7, #6]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d101      	bne.n	8005b48 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e06e      	b.n	8005c26 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2221      	movs	r2, #33	@ 0x21
 8005b52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b56:	f7fd f897 	bl	8002c88 <HAL_GetTick>
 8005b5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	88fa      	ldrh	r2, [r7, #6]
 8005b60:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	88fa      	ldrh	r2, [r7, #6]
 8005b66:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b70:	d108      	bne.n	8005b84 <HAL_UART_Transmit+0x6c>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d104      	bne.n	8005b84 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	61bb      	str	r3, [r7, #24]
 8005b82:	e003      	b.n	8005b8c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b8c:	e02e      	b.n	8005bec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	9300      	str	r3, [sp, #0]
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2200      	movs	r2, #0
 8005b96:	2180      	movs	r1, #128	@ 0x80
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f000 fa0a 	bl	8005fb2 <UART_WaitOnFlagUntilTimeout>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d005      	beq.n	8005bb0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e03a      	b.n	8005c26 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d10b      	bne.n	8005bce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	881b      	ldrh	r3, [r3, #0]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bc4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	3302      	adds	r3, #2
 8005bca:	61bb      	str	r3, [r7, #24]
 8005bcc:	e007      	b.n	8005bde <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	781a      	ldrb	r2, [r3, #0]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	3b01      	subs	r3, #1
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1cb      	bne.n	8005b8e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	9300      	str	r3, [sp, #0]
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	2140      	movs	r1, #64	@ 0x40
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f000 f9d6 	bl	8005fb2 <UART_WaitOnFlagUntilTimeout>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d005      	beq.n	8005c18 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2220      	movs	r2, #32
 8005c10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e006      	b.n	8005c26 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005c20:	2300      	movs	r3, #0
 8005c22:	e000      	b.n	8005c26 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005c24:	2302      	movs	r3, #2
  }
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3720      	adds	r7, #32
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b084      	sub	sp, #16
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	60f8      	str	r0, [r7, #12]
 8005c36:	60b9      	str	r1, [r7, #8]
 8005c38:	4613      	mov	r3, r2
 8005c3a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	2b20      	cmp	r3, #32
 8005c46:	d112      	bne.n	8005c6e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d002      	beq.n	8005c54 <HAL_UART_Receive_DMA+0x26>
 8005c4e:	88fb      	ldrh	r3, [r7, #6]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d101      	bne.n	8005c58 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e00b      	b.n	8005c70 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005c5e:	88fb      	ldrh	r3, [r7, #6]
 8005c60:	461a      	mov	r2, r3
 8005c62:	68b9      	ldr	r1, [r7, #8]
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	f000 f9fd 	bl	8006064 <UART_Start_Receive_DMA>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	e000      	b.n	8005c70 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005c6e:	2302      	movs	r3, #2
  }
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b090      	sub	sp, #64	@ 0x40
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005c80:	2300      	movs	r3, #0
 8005c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c8e:	2b80      	cmp	r3, #128	@ 0x80
 8005c90:	bf0c      	ite	eq
 8005c92:	2301      	moveq	r3, #1
 8005c94:	2300      	movne	r3, #0
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	2b21      	cmp	r3, #33	@ 0x21
 8005ca4:	d128      	bne.n	8005cf8 <HAL_UART_DMAStop+0x80>
 8005ca6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d025      	beq.n	8005cf8 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	3314      	adds	r3, #20
 8005cb2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb6:	e853 3f00 	ldrex	r3, [r3]
 8005cba:	623b      	str	r3, [r7, #32]
   return(result);
 8005cbc:	6a3b      	ldr	r3, [r7, #32]
 8005cbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	3314      	adds	r3, #20
 8005cca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005ccc:	633a      	str	r2, [r7, #48]	@ 0x30
 8005cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005cd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cd4:	e841 2300 	strex	r3, r2, [r1]
 8005cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1e5      	bne.n	8005cac <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d004      	beq.n	8005cf2 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cec:	4618      	mov	r0, r3
 8005cee:	f7fd f938 	bl	8002f62 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 fa50 	bl	8006198 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d02:	2b40      	cmp	r3, #64	@ 0x40
 8005d04:	bf0c      	ite	eq
 8005d06:	2301      	moveq	r3, #1
 8005d08:	2300      	movne	r3, #0
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b22      	cmp	r3, #34	@ 0x22
 8005d18:	d128      	bne.n	8005d6c <HAL_UART_DMAStop+0xf4>
 8005d1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d025      	beq.n	8005d6c <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	3314      	adds	r3, #20
 8005d26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	e853 3f00 	ldrex	r3, [r3]
 8005d2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d36:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	3314      	adds	r3, #20
 8005d3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d40:	61fa      	str	r2, [r7, #28]
 8005d42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d44:	69b9      	ldr	r1, [r7, #24]
 8005d46:	69fa      	ldr	r2, [r7, #28]
 8005d48:	e841 2300 	strex	r3, r2, [r1]
 8005d4c:	617b      	str	r3, [r7, #20]
   return(result);
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d1e5      	bne.n	8005d20 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d004      	beq.n	8005d66 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7fd f8fe 	bl	8002f62 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 fa3e 	bl	80061e8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3740      	adds	r7, #64	@ 0x40
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005d76:	b480      	push	{r7}
 8005d78:	b083      	sub	sp, #12
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005d7e:	bf00      	nop
 8005d80:	370c      	adds	r7, #12
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b083      	sub	sp, #12
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d92:	bf00      	nop
 8005d94:	370c      	adds	r7, #12
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b083      	sub	sp, #12
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
 8005da6:	460b      	mov	r3, r1
 8005da8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005daa:	bf00      	nop
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b09c      	sub	sp, #112	@ 0x70
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dc2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d172      	bne.n	8005eb8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005dd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005dd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	330c      	adds	r3, #12
 8005dde:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005de2:	e853 3f00 	ldrex	r3, [r3]
 8005de6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005de8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005dea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005dee:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005df0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	330c      	adds	r3, #12
 8005df6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005df8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005dfa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005dfe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e00:	e841 2300 	strex	r3, r2, [r1]
 8005e04:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005e06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1e5      	bne.n	8005dd8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	3314      	adds	r3, #20
 8005e12:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e16:	e853 3f00 	ldrex	r3, [r3]
 8005e1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e1e:	f023 0301 	bic.w	r3, r3, #1
 8005e22:	667b      	str	r3, [r7, #100]	@ 0x64
 8005e24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	3314      	adds	r3, #20
 8005e2a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005e2c:	647a      	str	r2, [r7, #68]	@ 0x44
 8005e2e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e34:	e841 2300 	strex	r3, r2, [r1]
 8005e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1e5      	bne.n	8005e0c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	3314      	adds	r3, #20
 8005e46:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e4a:	e853 3f00 	ldrex	r3, [r3]
 8005e4e:	623b      	str	r3, [r7, #32]
   return(result);
 8005e50:	6a3b      	ldr	r3, [r7, #32]
 8005e52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e56:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	3314      	adds	r3, #20
 8005e5e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005e60:	633a      	str	r2, [r7, #48]	@ 0x30
 8005e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e68:	e841 2300 	strex	r3, r2, [r1]
 8005e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1e5      	bne.n	8005e40 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e76:	2220      	movs	r2, #32
 8005e78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d119      	bne.n	8005eb8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	330c      	adds	r3, #12
 8005e8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	e853 3f00 	ldrex	r3, [r3]
 8005e92:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f023 0310 	bic.w	r3, r3, #16
 8005e9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	330c      	adds	r3, #12
 8005ea2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005ea4:	61fa      	str	r2, [r7, #28]
 8005ea6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea8:	69b9      	ldr	r1, [r7, #24]
 8005eaa:	69fa      	ldr	r2, [r7, #28]
 8005eac:	e841 2300 	strex	r3, r2, [r1]
 8005eb0:	617b      	str	r3, [r7, #20]
   return(result);
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d1e5      	bne.n	8005e84 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005eb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005eba:	2200      	movs	r2, #0
 8005ebc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ebe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d106      	bne.n	8005ed4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ec6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ec8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005eca:	4619      	mov	r1, r3
 8005ecc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005ece:	f7ff ff66 	bl	8005d9e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005ed2:	e002      	b.n	8005eda <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005ed4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005ed6:	f7fb fc0f 	bl	80016f8 <HAL_UART_RxCpltCallback>
}
 8005eda:	bf00      	nop
 8005edc:	3770      	adds	r7, #112	@ 0x70
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b084      	sub	sp, #16
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d108      	bne.n	8005f10 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005f02:	085b      	lsrs	r3, r3, #1
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	4619      	mov	r1, r3
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f7ff ff48 	bl	8005d9e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f0e:	e002      	b.n	8005f16 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f7ff ff30 	bl	8005d76 <HAL_UART_RxHalfCpltCallback>
}
 8005f16:	bf00      	nop
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b084      	sub	sp, #16
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005f26:	2300      	movs	r3, #0
 8005f28:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f2e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f3a:	2b80      	cmp	r3, #128	@ 0x80
 8005f3c:	bf0c      	ite	eq
 8005f3e:	2301      	moveq	r3, #1
 8005f40:	2300      	movne	r3, #0
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2b21      	cmp	r3, #33	@ 0x21
 8005f50:	d108      	bne.n	8005f64 <UART_DMAError+0x46>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d005      	beq.n	8005f64 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005f5e:	68b8      	ldr	r0, [r7, #8]
 8005f60:	f000 f91a 	bl	8006198 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f6e:	2b40      	cmp	r3, #64	@ 0x40
 8005f70:	bf0c      	ite	eq
 8005f72:	2301      	moveq	r3, #1
 8005f74:	2300      	movne	r3, #0
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	2b22      	cmp	r3, #34	@ 0x22
 8005f84:	d108      	bne.n	8005f98 <UART_DMAError+0x7a>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d005      	beq.n	8005f98 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005f92:	68b8      	ldr	r0, [r7, #8]
 8005f94:	f000 f928 	bl	80061e8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f9c:	f043 0210 	orr.w	r2, r3, #16
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fa4:	68b8      	ldr	r0, [r7, #8]
 8005fa6:	f7ff fef0 	bl	8005d8a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005faa:	bf00      	nop
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b086      	sub	sp, #24
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	60f8      	str	r0, [r7, #12]
 8005fba:	60b9      	str	r1, [r7, #8]
 8005fbc:	603b      	str	r3, [r7, #0]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fc2:	e03b      	b.n	800603c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fc4:	6a3b      	ldr	r3, [r7, #32]
 8005fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fca:	d037      	beq.n	800603c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fcc:	f7fc fe5c 	bl	8002c88 <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	6a3a      	ldr	r2, [r7, #32]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d302      	bcc.n	8005fe2 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fdc:	6a3b      	ldr	r3, [r7, #32]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d101      	bne.n	8005fe6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e03a      	b.n	800605c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	f003 0304 	and.w	r3, r3, #4
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d023      	beq.n	800603c <UART_WaitOnFlagUntilTimeout+0x8a>
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	2b80      	cmp	r3, #128	@ 0x80
 8005ff8:	d020      	beq.n	800603c <UART_WaitOnFlagUntilTimeout+0x8a>
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	2b40      	cmp	r3, #64	@ 0x40
 8005ffe:	d01d      	beq.n	800603c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0308 	and.w	r3, r3, #8
 800600a:	2b08      	cmp	r3, #8
 800600c:	d116      	bne.n	800603c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800600e:	2300      	movs	r3, #0
 8006010:	617b      	str	r3, [r7, #20]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	617b      	str	r3, [r7, #20]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	617b      	str	r3, [r7, #20]
 8006022:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f000 f8df 	bl	80061e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2208      	movs	r2, #8
 800602e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e00f      	b.n	800605c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	4013      	ands	r3, r2
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	429a      	cmp	r2, r3
 800604a:	bf0c      	ite	eq
 800604c:	2301      	moveq	r3, #1
 800604e:	2300      	movne	r3, #0
 8006050:	b2db      	uxtb	r3, r3
 8006052:	461a      	mov	r2, r3
 8006054:	79fb      	ldrb	r3, [r7, #7]
 8006056:	429a      	cmp	r2, r3
 8006058:	d0b4      	beq.n	8005fc4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3718      	adds	r7, #24
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b098      	sub	sp, #96	@ 0x60
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	4613      	mov	r3, r2
 8006070:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	88fa      	ldrh	r2, [r7, #6]
 800607c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2222      	movs	r2, #34	@ 0x22
 8006088:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006090:	4a3e      	ldr	r2, [pc, #248]	@ (800618c <UART_Start_Receive_DMA+0x128>)
 8006092:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006098:	4a3d      	ldr	r2, [pc, #244]	@ (8006190 <UART_Start_Receive_DMA+0x12c>)
 800609a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060a0:	4a3c      	ldr	r2, [pc, #240]	@ (8006194 <UART_Start_Receive_DMA+0x130>)
 80060a2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060a8:	2200      	movs	r2, #0
 80060aa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80060ac:	f107 0308 	add.w	r3, r7, #8
 80060b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	3304      	adds	r3, #4
 80060bc:	4619      	mov	r1, r3
 80060be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	88fb      	ldrh	r3, [r7, #6]
 80060c4:	f7fc fef5 	bl	8002eb2 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80060c8:	2300      	movs	r3, #0
 80060ca:	613b      	str	r3, [r7, #16]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	613b      	str	r3, [r7, #16]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	613b      	str	r3, [r7, #16]
 80060dc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d019      	beq.n	800611a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	330c      	adds	r3, #12
 80060ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060f0:	e853 3f00 	ldrex	r3, [r3]
 80060f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80060f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	330c      	adds	r3, #12
 8006104:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006106:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006108:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800610c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800610e:	e841 2300 	strex	r3, r2, [r1]
 8006112:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006114:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1e5      	bne.n	80060e6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	3314      	adds	r3, #20
 8006120:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006124:	e853 3f00 	ldrex	r3, [r3]
 8006128:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800612a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800612c:	f043 0301 	orr.w	r3, r3, #1
 8006130:	657b      	str	r3, [r7, #84]	@ 0x54
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	3314      	adds	r3, #20
 8006138:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800613a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800613c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006140:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006142:	e841 2300 	strex	r3, r2, [r1]
 8006146:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1e5      	bne.n	800611a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	3314      	adds	r3, #20
 8006154:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	e853 3f00 	ldrex	r3, [r3]
 800615c:	617b      	str	r3, [r7, #20]
   return(result);
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006164:	653b      	str	r3, [r7, #80]	@ 0x50
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	3314      	adds	r3, #20
 800616c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800616e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006170:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006172:	6a39      	ldr	r1, [r7, #32]
 8006174:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006176:	e841 2300 	strex	r3, r2, [r1]
 800617a:	61fb      	str	r3, [r7, #28]
   return(result);
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1e5      	bne.n	800614e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3760      	adds	r7, #96	@ 0x60
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	08005db7 	.word	0x08005db7
 8006190:	08005ee3 	.word	0x08005ee3
 8006194:	08005f1f 	.word	0x08005f1f

08006198 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006198:	b480      	push	{r7}
 800619a:	b089      	sub	sp, #36	@ 0x24
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	330c      	adds	r3, #12
 80061a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	e853 3f00 	ldrex	r3, [r3]
 80061ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80061b6:	61fb      	str	r3, [r7, #28]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	330c      	adds	r3, #12
 80061be:	69fa      	ldr	r2, [r7, #28]
 80061c0:	61ba      	str	r2, [r7, #24]
 80061c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c4:	6979      	ldr	r1, [r7, #20]
 80061c6:	69ba      	ldr	r2, [r7, #24]
 80061c8:	e841 2300 	strex	r3, r2, [r1]
 80061cc:	613b      	str	r3, [r7, #16]
   return(result);
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1e5      	bne.n	80061a0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2220      	movs	r2, #32
 80061d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80061dc:	bf00      	nop
 80061de:	3724      	adds	r7, #36	@ 0x24
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b095      	sub	sp, #84	@ 0x54
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	330c      	adds	r3, #12
 80061f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061fa:	e853 3f00 	ldrex	r3, [r3]
 80061fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006202:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006206:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	330c      	adds	r3, #12
 800620e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006210:	643a      	str	r2, [r7, #64]	@ 0x40
 8006212:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006214:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006216:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006218:	e841 2300 	strex	r3, r2, [r1]
 800621c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800621e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1e5      	bne.n	80061f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	3314      	adds	r3, #20
 800622a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	e853 3f00 	ldrex	r3, [r3]
 8006232:	61fb      	str	r3, [r7, #28]
   return(result);
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	f023 0301 	bic.w	r3, r3, #1
 800623a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	3314      	adds	r3, #20
 8006242:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006244:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006246:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006248:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800624a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800624c:	e841 2300 	strex	r3, r2, [r1]
 8006250:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006254:	2b00      	cmp	r3, #0
 8006256:	d1e5      	bne.n	8006224 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800625c:	2b01      	cmp	r3, #1
 800625e:	d119      	bne.n	8006294 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	330c      	adds	r3, #12
 8006266:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	e853 3f00 	ldrex	r3, [r3]
 800626e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	f023 0310 	bic.w	r3, r3, #16
 8006276:	647b      	str	r3, [r7, #68]	@ 0x44
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	330c      	adds	r3, #12
 800627e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006280:	61ba      	str	r2, [r7, #24]
 8006282:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006284:	6979      	ldr	r1, [r7, #20]
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	e841 2300 	strex	r3, r2, [r1]
 800628c:	613b      	str	r3, [r7, #16]
   return(result);
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1e5      	bne.n	8006260 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2220      	movs	r2, #32
 8006298:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80062a2:	bf00      	nop
 80062a4:	3754      	adds	r7, #84	@ 0x54
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
	...

080062b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062b4:	b0c0      	sub	sp, #256	@ 0x100
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80062c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062cc:	68d9      	ldr	r1, [r3, #12]
 80062ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	ea40 0301 	orr.w	r3, r0, r1
 80062d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062de:	689a      	ldr	r2, [r3, #8]
 80062e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	431a      	orrs	r2, r3
 80062e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	431a      	orrs	r2, r3
 80062f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062f4:	69db      	ldr	r3, [r3, #28]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80062fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006308:	f021 010c 	bic.w	r1, r1, #12
 800630c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006316:	430b      	orrs	r3, r1
 8006318:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800631a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800632a:	6999      	ldr	r1, [r3, #24]
 800632c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	ea40 0301 	orr.w	r3, r0, r1
 8006336:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	4b8f      	ldr	r3, [pc, #572]	@ (800657c <UART_SetConfig+0x2cc>)
 8006340:	429a      	cmp	r2, r3
 8006342:	d005      	beq.n	8006350 <UART_SetConfig+0xa0>
 8006344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	4b8d      	ldr	r3, [pc, #564]	@ (8006580 <UART_SetConfig+0x2d0>)
 800634c:	429a      	cmp	r2, r3
 800634e:	d104      	bne.n	800635a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006350:	f7fe f97e 	bl	8004650 <HAL_RCC_GetPCLK2Freq>
 8006354:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006358:	e003      	b.n	8006362 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800635a:	f7fe f965 	bl	8004628 <HAL_RCC_GetPCLK1Freq>
 800635e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006366:	69db      	ldr	r3, [r3, #28]
 8006368:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800636c:	f040 810c 	bne.w	8006588 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006370:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006374:	2200      	movs	r2, #0
 8006376:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800637a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800637e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006382:	4622      	mov	r2, r4
 8006384:	462b      	mov	r3, r5
 8006386:	1891      	adds	r1, r2, r2
 8006388:	65b9      	str	r1, [r7, #88]	@ 0x58
 800638a:	415b      	adcs	r3, r3
 800638c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800638e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006392:	4621      	mov	r1, r4
 8006394:	eb12 0801 	adds.w	r8, r2, r1
 8006398:	4629      	mov	r1, r5
 800639a:	eb43 0901 	adc.w	r9, r3, r1
 800639e:	f04f 0200 	mov.w	r2, #0
 80063a2:	f04f 0300 	mov.w	r3, #0
 80063a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063b2:	4690      	mov	r8, r2
 80063b4:	4699      	mov	r9, r3
 80063b6:	4623      	mov	r3, r4
 80063b8:	eb18 0303 	adds.w	r3, r8, r3
 80063bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80063c0:	462b      	mov	r3, r5
 80063c2:	eb49 0303 	adc.w	r3, r9, r3
 80063c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80063ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80063d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80063da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80063de:	460b      	mov	r3, r1
 80063e0:	18db      	adds	r3, r3, r3
 80063e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80063e4:	4613      	mov	r3, r2
 80063e6:	eb42 0303 	adc.w	r3, r2, r3
 80063ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80063ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80063f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80063f4:	f7fa fc40 	bl	8000c78 <__aeabi_uldivmod>
 80063f8:	4602      	mov	r2, r0
 80063fa:	460b      	mov	r3, r1
 80063fc:	4b61      	ldr	r3, [pc, #388]	@ (8006584 <UART_SetConfig+0x2d4>)
 80063fe:	fba3 2302 	umull	r2, r3, r3, r2
 8006402:	095b      	lsrs	r3, r3, #5
 8006404:	011c      	lsls	r4, r3, #4
 8006406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800640a:	2200      	movs	r2, #0
 800640c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006410:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006414:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006418:	4642      	mov	r2, r8
 800641a:	464b      	mov	r3, r9
 800641c:	1891      	adds	r1, r2, r2
 800641e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006420:	415b      	adcs	r3, r3
 8006422:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006424:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006428:	4641      	mov	r1, r8
 800642a:	eb12 0a01 	adds.w	sl, r2, r1
 800642e:	4649      	mov	r1, r9
 8006430:	eb43 0b01 	adc.w	fp, r3, r1
 8006434:	f04f 0200 	mov.w	r2, #0
 8006438:	f04f 0300 	mov.w	r3, #0
 800643c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006440:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006444:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006448:	4692      	mov	sl, r2
 800644a:	469b      	mov	fp, r3
 800644c:	4643      	mov	r3, r8
 800644e:	eb1a 0303 	adds.w	r3, sl, r3
 8006452:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006456:	464b      	mov	r3, r9
 8006458:	eb4b 0303 	adc.w	r3, fp, r3
 800645c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800646c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006470:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006474:	460b      	mov	r3, r1
 8006476:	18db      	adds	r3, r3, r3
 8006478:	643b      	str	r3, [r7, #64]	@ 0x40
 800647a:	4613      	mov	r3, r2
 800647c:	eb42 0303 	adc.w	r3, r2, r3
 8006480:	647b      	str	r3, [r7, #68]	@ 0x44
 8006482:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006486:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800648a:	f7fa fbf5 	bl	8000c78 <__aeabi_uldivmod>
 800648e:	4602      	mov	r2, r0
 8006490:	460b      	mov	r3, r1
 8006492:	4611      	mov	r1, r2
 8006494:	4b3b      	ldr	r3, [pc, #236]	@ (8006584 <UART_SetConfig+0x2d4>)
 8006496:	fba3 2301 	umull	r2, r3, r3, r1
 800649a:	095b      	lsrs	r3, r3, #5
 800649c:	2264      	movs	r2, #100	@ 0x64
 800649e:	fb02 f303 	mul.w	r3, r2, r3
 80064a2:	1acb      	subs	r3, r1, r3
 80064a4:	00db      	lsls	r3, r3, #3
 80064a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80064aa:	4b36      	ldr	r3, [pc, #216]	@ (8006584 <UART_SetConfig+0x2d4>)
 80064ac:	fba3 2302 	umull	r2, r3, r3, r2
 80064b0:	095b      	lsrs	r3, r3, #5
 80064b2:	005b      	lsls	r3, r3, #1
 80064b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80064b8:	441c      	add	r4, r3
 80064ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064be:	2200      	movs	r2, #0
 80064c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80064c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80064c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80064cc:	4642      	mov	r2, r8
 80064ce:	464b      	mov	r3, r9
 80064d0:	1891      	adds	r1, r2, r2
 80064d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80064d4:	415b      	adcs	r3, r3
 80064d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80064dc:	4641      	mov	r1, r8
 80064de:	1851      	adds	r1, r2, r1
 80064e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80064e2:	4649      	mov	r1, r9
 80064e4:	414b      	adcs	r3, r1
 80064e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80064e8:	f04f 0200 	mov.w	r2, #0
 80064ec:	f04f 0300 	mov.w	r3, #0
 80064f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80064f4:	4659      	mov	r1, fp
 80064f6:	00cb      	lsls	r3, r1, #3
 80064f8:	4651      	mov	r1, sl
 80064fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064fe:	4651      	mov	r1, sl
 8006500:	00ca      	lsls	r2, r1, #3
 8006502:	4610      	mov	r0, r2
 8006504:	4619      	mov	r1, r3
 8006506:	4603      	mov	r3, r0
 8006508:	4642      	mov	r2, r8
 800650a:	189b      	adds	r3, r3, r2
 800650c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006510:	464b      	mov	r3, r9
 8006512:	460a      	mov	r2, r1
 8006514:	eb42 0303 	adc.w	r3, r2, r3
 8006518:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800651c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006528:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800652c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006530:	460b      	mov	r3, r1
 8006532:	18db      	adds	r3, r3, r3
 8006534:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006536:	4613      	mov	r3, r2
 8006538:	eb42 0303 	adc.w	r3, r2, r3
 800653c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800653e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006542:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006546:	f7fa fb97 	bl	8000c78 <__aeabi_uldivmod>
 800654a:	4602      	mov	r2, r0
 800654c:	460b      	mov	r3, r1
 800654e:	4b0d      	ldr	r3, [pc, #52]	@ (8006584 <UART_SetConfig+0x2d4>)
 8006550:	fba3 1302 	umull	r1, r3, r3, r2
 8006554:	095b      	lsrs	r3, r3, #5
 8006556:	2164      	movs	r1, #100	@ 0x64
 8006558:	fb01 f303 	mul.w	r3, r1, r3
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	00db      	lsls	r3, r3, #3
 8006560:	3332      	adds	r3, #50	@ 0x32
 8006562:	4a08      	ldr	r2, [pc, #32]	@ (8006584 <UART_SetConfig+0x2d4>)
 8006564:	fba2 2303 	umull	r2, r3, r2, r3
 8006568:	095b      	lsrs	r3, r3, #5
 800656a:	f003 0207 	and.w	r2, r3, #7
 800656e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4422      	add	r2, r4
 8006576:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006578:	e106      	b.n	8006788 <UART_SetConfig+0x4d8>
 800657a:	bf00      	nop
 800657c:	40011000 	.word	0x40011000
 8006580:	40011400 	.word	0x40011400
 8006584:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006588:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800658c:	2200      	movs	r2, #0
 800658e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006592:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006596:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800659a:	4642      	mov	r2, r8
 800659c:	464b      	mov	r3, r9
 800659e:	1891      	adds	r1, r2, r2
 80065a0:	6239      	str	r1, [r7, #32]
 80065a2:	415b      	adcs	r3, r3
 80065a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80065a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065aa:	4641      	mov	r1, r8
 80065ac:	1854      	adds	r4, r2, r1
 80065ae:	4649      	mov	r1, r9
 80065b0:	eb43 0501 	adc.w	r5, r3, r1
 80065b4:	f04f 0200 	mov.w	r2, #0
 80065b8:	f04f 0300 	mov.w	r3, #0
 80065bc:	00eb      	lsls	r3, r5, #3
 80065be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065c2:	00e2      	lsls	r2, r4, #3
 80065c4:	4614      	mov	r4, r2
 80065c6:	461d      	mov	r5, r3
 80065c8:	4643      	mov	r3, r8
 80065ca:	18e3      	adds	r3, r4, r3
 80065cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80065d0:	464b      	mov	r3, r9
 80065d2:	eb45 0303 	adc.w	r3, r5, r3
 80065d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80065da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80065e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80065ea:	f04f 0200 	mov.w	r2, #0
 80065ee:	f04f 0300 	mov.w	r3, #0
 80065f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80065f6:	4629      	mov	r1, r5
 80065f8:	008b      	lsls	r3, r1, #2
 80065fa:	4621      	mov	r1, r4
 80065fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006600:	4621      	mov	r1, r4
 8006602:	008a      	lsls	r2, r1, #2
 8006604:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006608:	f7fa fb36 	bl	8000c78 <__aeabi_uldivmod>
 800660c:	4602      	mov	r2, r0
 800660e:	460b      	mov	r3, r1
 8006610:	4b60      	ldr	r3, [pc, #384]	@ (8006794 <UART_SetConfig+0x4e4>)
 8006612:	fba3 2302 	umull	r2, r3, r3, r2
 8006616:	095b      	lsrs	r3, r3, #5
 8006618:	011c      	lsls	r4, r3, #4
 800661a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800661e:	2200      	movs	r2, #0
 8006620:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006624:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006628:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800662c:	4642      	mov	r2, r8
 800662e:	464b      	mov	r3, r9
 8006630:	1891      	adds	r1, r2, r2
 8006632:	61b9      	str	r1, [r7, #24]
 8006634:	415b      	adcs	r3, r3
 8006636:	61fb      	str	r3, [r7, #28]
 8006638:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800663c:	4641      	mov	r1, r8
 800663e:	1851      	adds	r1, r2, r1
 8006640:	6139      	str	r1, [r7, #16]
 8006642:	4649      	mov	r1, r9
 8006644:	414b      	adcs	r3, r1
 8006646:	617b      	str	r3, [r7, #20]
 8006648:	f04f 0200 	mov.w	r2, #0
 800664c:	f04f 0300 	mov.w	r3, #0
 8006650:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006654:	4659      	mov	r1, fp
 8006656:	00cb      	lsls	r3, r1, #3
 8006658:	4651      	mov	r1, sl
 800665a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800665e:	4651      	mov	r1, sl
 8006660:	00ca      	lsls	r2, r1, #3
 8006662:	4610      	mov	r0, r2
 8006664:	4619      	mov	r1, r3
 8006666:	4603      	mov	r3, r0
 8006668:	4642      	mov	r2, r8
 800666a:	189b      	adds	r3, r3, r2
 800666c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006670:	464b      	mov	r3, r9
 8006672:	460a      	mov	r2, r1
 8006674:	eb42 0303 	adc.w	r3, r2, r3
 8006678:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800667c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006686:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006688:	f04f 0200 	mov.w	r2, #0
 800668c:	f04f 0300 	mov.w	r3, #0
 8006690:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006694:	4649      	mov	r1, r9
 8006696:	008b      	lsls	r3, r1, #2
 8006698:	4641      	mov	r1, r8
 800669a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800669e:	4641      	mov	r1, r8
 80066a0:	008a      	lsls	r2, r1, #2
 80066a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80066a6:	f7fa fae7 	bl	8000c78 <__aeabi_uldivmod>
 80066aa:	4602      	mov	r2, r0
 80066ac:	460b      	mov	r3, r1
 80066ae:	4611      	mov	r1, r2
 80066b0:	4b38      	ldr	r3, [pc, #224]	@ (8006794 <UART_SetConfig+0x4e4>)
 80066b2:	fba3 2301 	umull	r2, r3, r3, r1
 80066b6:	095b      	lsrs	r3, r3, #5
 80066b8:	2264      	movs	r2, #100	@ 0x64
 80066ba:	fb02 f303 	mul.w	r3, r2, r3
 80066be:	1acb      	subs	r3, r1, r3
 80066c0:	011b      	lsls	r3, r3, #4
 80066c2:	3332      	adds	r3, #50	@ 0x32
 80066c4:	4a33      	ldr	r2, [pc, #204]	@ (8006794 <UART_SetConfig+0x4e4>)
 80066c6:	fba2 2303 	umull	r2, r3, r2, r3
 80066ca:	095b      	lsrs	r3, r3, #5
 80066cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80066d0:	441c      	add	r4, r3
 80066d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066d6:	2200      	movs	r2, #0
 80066d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80066da:	677a      	str	r2, [r7, #116]	@ 0x74
 80066dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80066e0:	4642      	mov	r2, r8
 80066e2:	464b      	mov	r3, r9
 80066e4:	1891      	adds	r1, r2, r2
 80066e6:	60b9      	str	r1, [r7, #8]
 80066e8:	415b      	adcs	r3, r3
 80066ea:	60fb      	str	r3, [r7, #12]
 80066ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066f0:	4641      	mov	r1, r8
 80066f2:	1851      	adds	r1, r2, r1
 80066f4:	6039      	str	r1, [r7, #0]
 80066f6:	4649      	mov	r1, r9
 80066f8:	414b      	adcs	r3, r1
 80066fa:	607b      	str	r3, [r7, #4]
 80066fc:	f04f 0200 	mov.w	r2, #0
 8006700:	f04f 0300 	mov.w	r3, #0
 8006704:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006708:	4659      	mov	r1, fp
 800670a:	00cb      	lsls	r3, r1, #3
 800670c:	4651      	mov	r1, sl
 800670e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006712:	4651      	mov	r1, sl
 8006714:	00ca      	lsls	r2, r1, #3
 8006716:	4610      	mov	r0, r2
 8006718:	4619      	mov	r1, r3
 800671a:	4603      	mov	r3, r0
 800671c:	4642      	mov	r2, r8
 800671e:	189b      	adds	r3, r3, r2
 8006720:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006722:	464b      	mov	r3, r9
 8006724:	460a      	mov	r2, r1
 8006726:	eb42 0303 	adc.w	r3, r2, r3
 800672a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800672c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	663b      	str	r3, [r7, #96]	@ 0x60
 8006736:	667a      	str	r2, [r7, #100]	@ 0x64
 8006738:	f04f 0200 	mov.w	r2, #0
 800673c:	f04f 0300 	mov.w	r3, #0
 8006740:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006744:	4649      	mov	r1, r9
 8006746:	008b      	lsls	r3, r1, #2
 8006748:	4641      	mov	r1, r8
 800674a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800674e:	4641      	mov	r1, r8
 8006750:	008a      	lsls	r2, r1, #2
 8006752:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006756:	f7fa fa8f 	bl	8000c78 <__aeabi_uldivmod>
 800675a:	4602      	mov	r2, r0
 800675c:	460b      	mov	r3, r1
 800675e:	4b0d      	ldr	r3, [pc, #52]	@ (8006794 <UART_SetConfig+0x4e4>)
 8006760:	fba3 1302 	umull	r1, r3, r3, r2
 8006764:	095b      	lsrs	r3, r3, #5
 8006766:	2164      	movs	r1, #100	@ 0x64
 8006768:	fb01 f303 	mul.w	r3, r1, r3
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	011b      	lsls	r3, r3, #4
 8006770:	3332      	adds	r3, #50	@ 0x32
 8006772:	4a08      	ldr	r2, [pc, #32]	@ (8006794 <UART_SetConfig+0x4e4>)
 8006774:	fba2 2303 	umull	r2, r3, r2, r3
 8006778:	095b      	lsrs	r3, r3, #5
 800677a:	f003 020f 	and.w	r2, r3, #15
 800677e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4422      	add	r2, r4
 8006786:	609a      	str	r2, [r3, #8]
}
 8006788:	bf00      	nop
 800678a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800678e:	46bd      	mov	sp, r7
 8006790:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006794:	51eb851f 	.word	0x51eb851f

08006798 <atoi>:
 8006798:	220a      	movs	r2, #10
 800679a:	2100      	movs	r1, #0
 800679c:	f000 b87a 	b.w	8006894 <strtol>

080067a0 <_strtol_l.constprop.0>:
 80067a0:	2b24      	cmp	r3, #36	@ 0x24
 80067a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067a6:	4686      	mov	lr, r0
 80067a8:	4690      	mov	r8, r2
 80067aa:	d801      	bhi.n	80067b0 <_strtol_l.constprop.0+0x10>
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d106      	bne.n	80067be <_strtol_l.constprop.0+0x1e>
 80067b0:	f000 f8c6 	bl	8006940 <__errno>
 80067b4:	2316      	movs	r3, #22
 80067b6:	6003      	str	r3, [r0, #0]
 80067b8:	2000      	movs	r0, #0
 80067ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067be:	4834      	ldr	r0, [pc, #208]	@ (8006890 <_strtol_l.constprop.0+0xf0>)
 80067c0:	460d      	mov	r5, r1
 80067c2:	462a      	mov	r2, r5
 80067c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80067c8:	5d06      	ldrb	r6, [r0, r4]
 80067ca:	f016 0608 	ands.w	r6, r6, #8
 80067ce:	d1f8      	bne.n	80067c2 <_strtol_l.constprop.0+0x22>
 80067d0:	2c2d      	cmp	r4, #45	@ 0x2d
 80067d2:	d12d      	bne.n	8006830 <_strtol_l.constprop.0+0x90>
 80067d4:	782c      	ldrb	r4, [r5, #0]
 80067d6:	2601      	movs	r6, #1
 80067d8:	1c95      	adds	r5, r2, #2
 80067da:	f033 0210 	bics.w	r2, r3, #16
 80067de:	d109      	bne.n	80067f4 <_strtol_l.constprop.0+0x54>
 80067e0:	2c30      	cmp	r4, #48	@ 0x30
 80067e2:	d12a      	bne.n	800683a <_strtol_l.constprop.0+0x9a>
 80067e4:	782a      	ldrb	r2, [r5, #0]
 80067e6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80067ea:	2a58      	cmp	r2, #88	@ 0x58
 80067ec:	d125      	bne.n	800683a <_strtol_l.constprop.0+0x9a>
 80067ee:	786c      	ldrb	r4, [r5, #1]
 80067f0:	2310      	movs	r3, #16
 80067f2:	3502      	adds	r5, #2
 80067f4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80067f8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80067fc:	2200      	movs	r2, #0
 80067fe:	fbbc f9f3 	udiv	r9, ip, r3
 8006802:	4610      	mov	r0, r2
 8006804:	fb03 ca19 	mls	sl, r3, r9, ip
 8006808:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800680c:	2f09      	cmp	r7, #9
 800680e:	d81b      	bhi.n	8006848 <_strtol_l.constprop.0+0xa8>
 8006810:	463c      	mov	r4, r7
 8006812:	42a3      	cmp	r3, r4
 8006814:	dd27      	ble.n	8006866 <_strtol_l.constprop.0+0xc6>
 8006816:	1c57      	adds	r7, r2, #1
 8006818:	d007      	beq.n	800682a <_strtol_l.constprop.0+0x8a>
 800681a:	4581      	cmp	r9, r0
 800681c:	d320      	bcc.n	8006860 <_strtol_l.constprop.0+0xc0>
 800681e:	d101      	bne.n	8006824 <_strtol_l.constprop.0+0x84>
 8006820:	45a2      	cmp	sl, r4
 8006822:	db1d      	blt.n	8006860 <_strtol_l.constprop.0+0xc0>
 8006824:	fb00 4003 	mla	r0, r0, r3, r4
 8006828:	2201      	movs	r2, #1
 800682a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800682e:	e7eb      	b.n	8006808 <_strtol_l.constprop.0+0x68>
 8006830:	2c2b      	cmp	r4, #43	@ 0x2b
 8006832:	bf04      	itt	eq
 8006834:	782c      	ldrbeq	r4, [r5, #0]
 8006836:	1c95      	addeq	r5, r2, #2
 8006838:	e7cf      	b.n	80067da <_strtol_l.constprop.0+0x3a>
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1da      	bne.n	80067f4 <_strtol_l.constprop.0+0x54>
 800683e:	2c30      	cmp	r4, #48	@ 0x30
 8006840:	bf0c      	ite	eq
 8006842:	2308      	moveq	r3, #8
 8006844:	230a      	movne	r3, #10
 8006846:	e7d5      	b.n	80067f4 <_strtol_l.constprop.0+0x54>
 8006848:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800684c:	2f19      	cmp	r7, #25
 800684e:	d801      	bhi.n	8006854 <_strtol_l.constprop.0+0xb4>
 8006850:	3c37      	subs	r4, #55	@ 0x37
 8006852:	e7de      	b.n	8006812 <_strtol_l.constprop.0+0x72>
 8006854:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006858:	2f19      	cmp	r7, #25
 800685a:	d804      	bhi.n	8006866 <_strtol_l.constprop.0+0xc6>
 800685c:	3c57      	subs	r4, #87	@ 0x57
 800685e:	e7d8      	b.n	8006812 <_strtol_l.constprop.0+0x72>
 8006860:	f04f 32ff 	mov.w	r2, #4294967295
 8006864:	e7e1      	b.n	800682a <_strtol_l.constprop.0+0x8a>
 8006866:	1c53      	adds	r3, r2, #1
 8006868:	d108      	bne.n	800687c <_strtol_l.constprop.0+0xdc>
 800686a:	2322      	movs	r3, #34	@ 0x22
 800686c:	f8ce 3000 	str.w	r3, [lr]
 8006870:	4660      	mov	r0, ip
 8006872:	f1b8 0f00 	cmp.w	r8, #0
 8006876:	d0a0      	beq.n	80067ba <_strtol_l.constprop.0+0x1a>
 8006878:	1e69      	subs	r1, r5, #1
 800687a:	e006      	b.n	800688a <_strtol_l.constprop.0+0xea>
 800687c:	b106      	cbz	r6, 8006880 <_strtol_l.constprop.0+0xe0>
 800687e:	4240      	negs	r0, r0
 8006880:	f1b8 0f00 	cmp.w	r8, #0
 8006884:	d099      	beq.n	80067ba <_strtol_l.constprop.0+0x1a>
 8006886:	2a00      	cmp	r2, #0
 8006888:	d1f6      	bne.n	8006878 <_strtol_l.constprop.0+0xd8>
 800688a:	f8c8 1000 	str.w	r1, [r8]
 800688e:	e794      	b.n	80067ba <_strtol_l.constprop.0+0x1a>
 8006890:	0800867d 	.word	0x0800867d

08006894 <strtol>:
 8006894:	4613      	mov	r3, r2
 8006896:	460a      	mov	r2, r1
 8006898:	4601      	mov	r1, r0
 800689a:	4802      	ldr	r0, [pc, #8]	@ (80068a4 <strtol+0x10>)
 800689c:	6800      	ldr	r0, [r0, #0]
 800689e:	f7ff bf7f 	b.w	80067a0 <_strtol_l.constprop.0>
 80068a2:	bf00      	nop
 80068a4:	20000040 	.word	0x20000040

080068a8 <siprintf>:
 80068a8:	b40e      	push	{r1, r2, r3}
 80068aa:	b500      	push	{lr}
 80068ac:	b09c      	sub	sp, #112	@ 0x70
 80068ae:	ab1d      	add	r3, sp, #116	@ 0x74
 80068b0:	9002      	str	r0, [sp, #8]
 80068b2:	9006      	str	r0, [sp, #24]
 80068b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80068b8:	4809      	ldr	r0, [pc, #36]	@ (80068e0 <siprintf+0x38>)
 80068ba:	9107      	str	r1, [sp, #28]
 80068bc:	9104      	str	r1, [sp, #16]
 80068be:	4909      	ldr	r1, [pc, #36]	@ (80068e4 <siprintf+0x3c>)
 80068c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80068c4:	9105      	str	r1, [sp, #20]
 80068c6:	6800      	ldr	r0, [r0, #0]
 80068c8:	9301      	str	r3, [sp, #4]
 80068ca:	a902      	add	r1, sp, #8
 80068cc:	f000 f9c6 	bl	8006c5c <_svfiprintf_r>
 80068d0:	9b02      	ldr	r3, [sp, #8]
 80068d2:	2200      	movs	r2, #0
 80068d4:	701a      	strb	r2, [r3, #0]
 80068d6:	b01c      	add	sp, #112	@ 0x70
 80068d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80068dc:	b003      	add	sp, #12
 80068de:	4770      	bx	lr
 80068e0:	20000040 	.word	0x20000040
 80068e4:	ffff0208 	.word	0xffff0208

080068e8 <memset>:
 80068e8:	4402      	add	r2, r0
 80068ea:	4603      	mov	r3, r0
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d100      	bne.n	80068f2 <memset+0xa>
 80068f0:	4770      	bx	lr
 80068f2:	f803 1b01 	strb.w	r1, [r3], #1
 80068f6:	e7f9      	b.n	80068ec <memset+0x4>

080068f8 <strchr>:
 80068f8:	b2c9      	uxtb	r1, r1
 80068fa:	4603      	mov	r3, r0
 80068fc:	4618      	mov	r0, r3
 80068fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006902:	b112      	cbz	r2, 800690a <strchr+0x12>
 8006904:	428a      	cmp	r2, r1
 8006906:	d1f9      	bne.n	80068fc <strchr+0x4>
 8006908:	4770      	bx	lr
 800690a:	2900      	cmp	r1, #0
 800690c:	bf18      	it	ne
 800690e:	2000      	movne	r0, #0
 8006910:	4770      	bx	lr

08006912 <strstr>:
 8006912:	780a      	ldrb	r2, [r1, #0]
 8006914:	b570      	push	{r4, r5, r6, lr}
 8006916:	b96a      	cbnz	r2, 8006934 <strstr+0x22>
 8006918:	bd70      	pop	{r4, r5, r6, pc}
 800691a:	429a      	cmp	r2, r3
 800691c:	d109      	bne.n	8006932 <strstr+0x20>
 800691e:	460c      	mov	r4, r1
 8006920:	4605      	mov	r5, r0
 8006922:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006926:	2b00      	cmp	r3, #0
 8006928:	d0f6      	beq.n	8006918 <strstr+0x6>
 800692a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800692e:	429e      	cmp	r6, r3
 8006930:	d0f7      	beq.n	8006922 <strstr+0x10>
 8006932:	3001      	adds	r0, #1
 8006934:	7803      	ldrb	r3, [r0, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1ef      	bne.n	800691a <strstr+0x8>
 800693a:	4618      	mov	r0, r3
 800693c:	e7ec      	b.n	8006918 <strstr+0x6>
	...

08006940 <__errno>:
 8006940:	4b01      	ldr	r3, [pc, #4]	@ (8006948 <__errno+0x8>)
 8006942:	6818      	ldr	r0, [r3, #0]
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop
 8006948:	20000040 	.word	0x20000040

0800694c <__libc_init_array>:
 800694c:	b570      	push	{r4, r5, r6, lr}
 800694e:	4d0d      	ldr	r5, [pc, #52]	@ (8006984 <__libc_init_array+0x38>)
 8006950:	4c0d      	ldr	r4, [pc, #52]	@ (8006988 <__libc_init_array+0x3c>)
 8006952:	1b64      	subs	r4, r4, r5
 8006954:	10a4      	asrs	r4, r4, #2
 8006956:	2600      	movs	r6, #0
 8006958:	42a6      	cmp	r6, r4
 800695a:	d109      	bne.n	8006970 <__libc_init_array+0x24>
 800695c:	4d0b      	ldr	r5, [pc, #44]	@ (800698c <__libc_init_array+0x40>)
 800695e:	4c0c      	ldr	r4, [pc, #48]	@ (8006990 <__libc_init_array+0x44>)
 8006960:	f001 fe28 	bl	80085b4 <_init>
 8006964:	1b64      	subs	r4, r4, r5
 8006966:	10a4      	asrs	r4, r4, #2
 8006968:	2600      	movs	r6, #0
 800696a:	42a6      	cmp	r6, r4
 800696c:	d105      	bne.n	800697a <__libc_init_array+0x2e>
 800696e:	bd70      	pop	{r4, r5, r6, pc}
 8006970:	f855 3b04 	ldr.w	r3, [r5], #4
 8006974:	4798      	blx	r3
 8006976:	3601      	adds	r6, #1
 8006978:	e7ee      	b.n	8006958 <__libc_init_array+0xc>
 800697a:	f855 3b04 	ldr.w	r3, [r5], #4
 800697e:	4798      	blx	r3
 8006980:	3601      	adds	r6, #1
 8006982:	e7f2      	b.n	800696a <__libc_init_array+0x1e>
 8006984:	08008858 	.word	0x08008858
 8006988:	08008858 	.word	0x08008858
 800698c:	08008858 	.word	0x08008858
 8006990:	0800885c 	.word	0x0800885c

08006994 <__retarget_lock_acquire_recursive>:
 8006994:	4770      	bx	lr

08006996 <__retarget_lock_release_recursive>:
 8006996:	4770      	bx	lr

08006998 <memcpy>:
 8006998:	440a      	add	r2, r1
 800699a:	4291      	cmp	r1, r2
 800699c:	f100 33ff 	add.w	r3, r0, #4294967295
 80069a0:	d100      	bne.n	80069a4 <memcpy+0xc>
 80069a2:	4770      	bx	lr
 80069a4:	b510      	push	{r4, lr}
 80069a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069ae:	4291      	cmp	r1, r2
 80069b0:	d1f9      	bne.n	80069a6 <memcpy+0xe>
 80069b2:	bd10      	pop	{r4, pc}

080069b4 <_free_r>:
 80069b4:	b538      	push	{r3, r4, r5, lr}
 80069b6:	4605      	mov	r5, r0
 80069b8:	2900      	cmp	r1, #0
 80069ba:	d041      	beq.n	8006a40 <_free_r+0x8c>
 80069bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069c0:	1f0c      	subs	r4, r1, #4
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	bfb8      	it	lt
 80069c6:	18e4      	addlt	r4, r4, r3
 80069c8:	f000 f8e0 	bl	8006b8c <__malloc_lock>
 80069cc:	4a1d      	ldr	r2, [pc, #116]	@ (8006a44 <_free_r+0x90>)
 80069ce:	6813      	ldr	r3, [r2, #0]
 80069d0:	b933      	cbnz	r3, 80069e0 <_free_r+0x2c>
 80069d2:	6063      	str	r3, [r4, #4]
 80069d4:	6014      	str	r4, [r2, #0]
 80069d6:	4628      	mov	r0, r5
 80069d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069dc:	f000 b8dc 	b.w	8006b98 <__malloc_unlock>
 80069e0:	42a3      	cmp	r3, r4
 80069e2:	d908      	bls.n	80069f6 <_free_r+0x42>
 80069e4:	6820      	ldr	r0, [r4, #0]
 80069e6:	1821      	adds	r1, r4, r0
 80069e8:	428b      	cmp	r3, r1
 80069ea:	bf01      	itttt	eq
 80069ec:	6819      	ldreq	r1, [r3, #0]
 80069ee:	685b      	ldreq	r3, [r3, #4]
 80069f0:	1809      	addeq	r1, r1, r0
 80069f2:	6021      	streq	r1, [r4, #0]
 80069f4:	e7ed      	b.n	80069d2 <_free_r+0x1e>
 80069f6:	461a      	mov	r2, r3
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	b10b      	cbz	r3, 8006a00 <_free_r+0x4c>
 80069fc:	42a3      	cmp	r3, r4
 80069fe:	d9fa      	bls.n	80069f6 <_free_r+0x42>
 8006a00:	6811      	ldr	r1, [r2, #0]
 8006a02:	1850      	adds	r0, r2, r1
 8006a04:	42a0      	cmp	r0, r4
 8006a06:	d10b      	bne.n	8006a20 <_free_r+0x6c>
 8006a08:	6820      	ldr	r0, [r4, #0]
 8006a0a:	4401      	add	r1, r0
 8006a0c:	1850      	adds	r0, r2, r1
 8006a0e:	4283      	cmp	r3, r0
 8006a10:	6011      	str	r1, [r2, #0]
 8006a12:	d1e0      	bne.n	80069d6 <_free_r+0x22>
 8006a14:	6818      	ldr	r0, [r3, #0]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	6053      	str	r3, [r2, #4]
 8006a1a:	4408      	add	r0, r1
 8006a1c:	6010      	str	r0, [r2, #0]
 8006a1e:	e7da      	b.n	80069d6 <_free_r+0x22>
 8006a20:	d902      	bls.n	8006a28 <_free_r+0x74>
 8006a22:	230c      	movs	r3, #12
 8006a24:	602b      	str	r3, [r5, #0]
 8006a26:	e7d6      	b.n	80069d6 <_free_r+0x22>
 8006a28:	6820      	ldr	r0, [r4, #0]
 8006a2a:	1821      	adds	r1, r4, r0
 8006a2c:	428b      	cmp	r3, r1
 8006a2e:	bf04      	itt	eq
 8006a30:	6819      	ldreq	r1, [r3, #0]
 8006a32:	685b      	ldreq	r3, [r3, #4]
 8006a34:	6063      	str	r3, [r4, #4]
 8006a36:	bf04      	itt	eq
 8006a38:	1809      	addeq	r1, r1, r0
 8006a3a:	6021      	streq	r1, [r4, #0]
 8006a3c:	6054      	str	r4, [r2, #4]
 8006a3e:	e7ca      	b.n	80069d6 <_free_r+0x22>
 8006a40:	bd38      	pop	{r3, r4, r5, pc}
 8006a42:	bf00      	nop
 8006a44:	20000a18 	.word	0x20000a18

08006a48 <sbrk_aligned>:
 8006a48:	b570      	push	{r4, r5, r6, lr}
 8006a4a:	4e0f      	ldr	r6, [pc, #60]	@ (8006a88 <sbrk_aligned+0x40>)
 8006a4c:	460c      	mov	r4, r1
 8006a4e:	6831      	ldr	r1, [r6, #0]
 8006a50:	4605      	mov	r5, r0
 8006a52:	b911      	cbnz	r1, 8006a5a <sbrk_aligned+0x12>
 8006a54:	f000 fba6 	bl	80071a4 <_sbrk_r>
 8006a58:	6030      	str	r0, [r6, #0]
 8006a5a:	4621      	mov	r1, r4
 8006a5c:	4628      	mov	r0, r5
 8006a5e:	f000 fba1 	bl	80071a4 <_sbrk_r>
 8006a62:	1c43      	adds	r3, r0, #1
 8006a64:	d103      	bne.n	8006a6e <sbrk_aligned+0x26>
 8006a66:	f04f 34ff 	mov.w	r4, #4294967295
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	bd70      	pop	{r4, r5, r6, pc}
 8006a6e:	1cc4      	adds	r4, r0, #3
 8006a70:	f024 0403 	bic.w	r4, r4, #3
 8006a74:	42a0      	cmp	r0, r4
 8006a76:	d0f8      	beq.n	8006a6a <sbrk_aligned+0x22>
 8006a78:	1a21      	subs	r1, r4, r0
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	f000 fb92 	bl	80071a4 <_sbrk_r>
 8006a80:	3001      	adds	r0, #1
 8006a82:	d1f2      	bne.n	8006a6a <sbrk_aligned+0x22>
 8006a84:	e7ef      	b.n	8006a66 <sbrk_aligned+0x1e>
 8006a86:	bf00      	nop
 8006a88:	20000a14 	.word	0x20000a14

08006a8c <_malloc_r>:
 8006a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a90:	1ccd      	adds	r5, r1, #3
 8006a92:	f025 0503 	bic.w	r5, r5, #3
 8006a96:	3508      	adds	r5, #8
 8006a98:	2d0c      	cmp	r5, #12
 8006a9a:	bf38      	it	cc
 8006a9c:	250c      	movcc	r5, #12
 8006a9e:	2d00      	cmp	r5, #0
 8006aa0:	4606      	mov	r6, r0
 8006aa2:	db01      	blt.n	8006aa8 <_malloc_r+0x1c>
 8006aa4:	42a9      	cmp	r1, r5
 8006aa6:	d904      	bls.n	8006ab2 <_malloc_r+0x26>
 8006aa8:	230c      	movs	r3, #12
 8006aaa:	6033      	str	r3, [r6, #0]
 8006aac:	2000      	movs	r0, #0
 8006aae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ab2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006b88 <_malloc_r+0xfc>
 8006ab6:	f000 f869 	bl	8006b8c <__malloc_lock>
 8006aba:	f8d8 3000 	ldr.w	r3, [r8]
 8006abe:	461c      	mov	r4, r3
 8006ac0:	bb44      	cbnz	r4, 8006b14 <_malloc_r+0x88>
 8006ac2:	4629      	mov	r1, r5
 8006ac4:	4630      	mov	r0, r6
 8006ac6:	f7ff ffbf 	bl	8006a48 <sbrk_aligned>
 8006aca:	1c43      	adds	r3, r0, #1
 8006acc:	4604      	mov	r4, r0
 8006ace:	d158      	bne.n	8006b82 <_malloc_r+0xf6>
 8006ad0:	f8d8 4000 	ldr.w	r4, [r8]
 8006ad4:	4627      	mov	r7, r4
 8006ad6:	2f00      	cmp	r7, #0
 8006ad8:	d143      	bne.n	8006b62 <_malloc_r+0xd6>
 8006ada:	2c00      	cmp	r4, #0
 8006adc:	d04b      	beq.n	8006b76 <_malloc_r+0xea>
 8006ade:	6823      	ldr	r3, [r4, #0]
 8006ae0:	4639      	mov	r1, r7
 8006ae2:	4630      	mov	r0, r6
 8006ae4:	eb04 0903 	add.w	r9, r4, r3
 8006ae8:	f000 fb5c 	bl	80071a4 <_sbrk_r>
 8006aec:	4581      	cmp	r9, r0
 8006aee:	d142      	bne.n	8006b76 <_malloc_r+0xea>
 8006af0:	6821      	ldr	r1, [r4, #0]
 8006af2:	1a6d      	subs	r5, r5, r1
 8006af4:	4629      	mov	r1, r5
 8006af6:	4630      	mov	r0, r6
 8006af8:	f7ff ffa6 	bl	8006a48 <sbrk_aligned>
 8006afc:	3001      	adds	r0, #1
 8006afe:	d03a      	beq.n	8006b76 <_malloc_r+0xea>
 8006b00:	6823      	ldr	r3, [r4, #0]
 8006b02:	442b      	add	r3, r5
 8006b04:	6023      	str	r3, [r4, #0]
 8006b06:	f8d8 3000 	ldr.w	r3, [r8]
 8006b0a:	685a      	ldr	r2, [r3, #4]
 8006b0c:	bb62      	cbnz	r2, 8006b68 <_malloc_r+0xdc>
 8006b0e:	f8c8 7000 	str.w	r7, [r8]
 8006b12:	e00f      	b.n	8006b34 <_malloc_r+0xa8>
 8006b14:	6822      	ldr	r2, [r4, #0]
 8006b16:	1b52      	subs	r2, r2, r5
 8006b18:	d420      	bmi.n	8006b5c <_malloc_r+0xd0>
 8006b1a:	2a0b      	cmp	r2, #11
 8006b1c:	d917      	bls.n	8006b4e <_malloc_r+0xc2>
 8006b1e:	1961      	adds	r1, r4, r5
 8006b20:	42a3      	cmp	r3, r4
 8006b22:	6025      	str	r5, [r4, #0]
 8006b24:	bf18      	it	ne
 8006b26:	6059      	strne	r1, [r3, #4]
 8006b28:	6863      	ldr	r3, [r4, #4]
 8006b2a:	bf08      	it	eq
 8006b2c:	f8c8 1000 	streq.w	r1, [r8]
 8006b30:	5162      	str	r2, [r4, r5]
 8006b32:	604b      	str	r3, [r1, #4]
 8006b34:	4630      	mov	r0, r6
 8006b36:	f000 f82f 	bl	8006b98 <__malloc_unlock>
 8006b3a:	f104 000b 	add.w	r0, r4, #11
 8006b3e:	1d23      	adds	r3, r4, #4
 8006b40:	f020 0007 	bic.w	r0, r0, #7
 8006b44:	1ac2      	subs	r2, r0, r3
 8006b46:	bf1c      	itt	ne
 8006b48:	1a1b      	subne	r3, r3, r0
 8006b4a:	50a3      	strne	r3, [r4, r2]
 8006b4c:	e7af      	b.n	8006aae <_malloc_r+0x22>
 8006b4e:	6862      	ldr	r2, [r4, #4]
 8006b50:	42a3      	cmp	r3, r4
 8006b52:	bf0c      	ite	eq
 8006b54:	f8c8 2000 	streq.w	r2, [r8]
 8006b58:	605a      	strne	r2, [r3, #4]
 8006b5a:	e7eb      	b.n	8006b34 <_malloc_r+0xa8>
 8006b5c:	4623      	mov	r3, r4
 8006b5e:	6864      	ldr	r4, [r4, #4]
 8006b60:	e7ae      	b.n	8006ac0 <_malloc_r+0x34>
 8006b62:	463c      	mov	r4, r7
 8006b64:	687f      	ldr	r7, [r7, #4]
 8006b66:	e7b6      	b.n	8006ad6 <_malloc_r+0x4a>
 8006b68:	461a      	mov	r2, r3
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	42a3      	cmp	r3, r4
 8006b6e:	d1fb      	bne.n	8006b68 <_malloc_r+0xdc>
 8006b70:	2300      	movs	r3, #0
 8006b72:	6053      	str	r3, [r2, #4]
 8006b74:	e7de      	b.n	8006b34 <_malloc_r+0xa8>
 8006b76:	230c      	movs	r3, #12
 8006b78:	6033      	str	r3, [r6, #0]
 8006b7a:	4630      	mov	r0, r6
 8006b7c:	f000 f80c 	bl	8006b98 <__malloc_unlock>
 8006b80:	e794      	b.n	8006aac <_malloc_r+0x20>
 8006b82:	6005      	str	r5, [r0, #0]
 8006b84:	e7d6      	b.n	8006b34 <_malloc_r+0xa8>
 8006b86:	bf00      	nop
 8006b88:	20000a18 	.word	0x20000a18

08006b8c <__malloc_lock>:
 8006b8c:	4801      	ldr	r0, [pc, #4]	@ (8006b94 <__malloc_lock+0x8>)
 8006b8e:	f7ff bf01 	b.w	8006994 <__retarget_lock_acquire_recursive>
 8006b92:	bf00      	nop
 8006b94:	20000a10 	.word	0x20000a10

08006b98 <__malloc_unlock>:
 8006b98:	4801      	ldr	r0, [pc, #4]	@ (8006ba0 <__malloc_unlock+0x8>)
 8006b9a:	f7ff befc 	b.w	8006996 <__retarget_lock_release_recursive>
 8006b9e:	bf00      	nop
 8006ba0:	20000a10 	.word	0x20000a10

08006ba4 <__ssputs_r>:
 8006ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ba8:	688e      	ldr	r6, [r1, #8]
 8006baa:	461f      	mov	r7, r3
 8006bac:	42be      	cmp	r6, r7
 8006bae:	680b      	ldr	r3, [r1, #0]
 8006bb0:	4682      	mov	sl, r0
 8006bb2:	460c      	mov	r4, r1
 8006bb4:	4690      	mov	r8, r2
 8006bb6:	d82d      	bhi.n	8006c14 <__ssputs_r+0x70>
 8006bb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006bbc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006bc0:	d026      	beq.n	8006c10 <__ssputs_r+0x6c>
 8006bc2:	6965      	ldr	r5, [r4, #20]
 8006bc4:	6909      	ldr	r1, [r1, #16]
 8006bc6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006bca:	eba3 0901 	sub.w	r9, r3, r1
 8006bce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006bd2:	1c7b      	adds	r3, r7, #1
 8006bd4:	444b      	add	r3, r9
 8006bd6:	106d      	asrs	r5, r5, #1
 8006bd8:	429d      	cmp	r5, r3
 8006bda:	bf38      	it	cc
 8006bdc:	461d      	movcc	r5, r3
 8006bde:	0553      	lsls	r3, r2, #21
 8006be0:	d527      	bpl.n	8006c32 <__ssputs_r+0x8e>
 8006be2:	4629      	mov	r1, r5
 8006be4:	f7ff ff52 	bl	8006a8c <_malloc_r>
 8006be8:	4606      	mov	r6, r0
 8006bea:	b360      	cbz	r0, 8006c46 <__ssputs_r+0xa2>
 8006bec:	6921      	ldr	r1, [r4, #16]
 8006bee:	464a      	mov	r2, r9
 8006bf0:	f7ff fed2 	bl	8006998 <memcpy>
 8006bf4:	89a3      	ldrh	r3, [r4, #12]
 8006bf6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006bfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bfe:	81a3      	strh	r3, [r4, #12]
 8006c00:	6126      	str	r6, [r4, #16]
 8006c02:	6165      	str	r5, [r4, #20]
 8006c04:	444e      	add	r6, r9
 8006c06:	eba5 0509 	sub.w	r5, r5, r9
 8006c0a:	6026      	str	r6, [r4, #0]
 8006c0c:	60a5      	str	r5, [r4, #8]
 8006c0e:	463e      	mov	r6, r7
 8006c10:	42be      	cmp	r6, r7
 8006c12:	d900      	bls.n	8006c16 <__ssputs_r+0x72>
 8006c14:	463e      	mov	r6, r7
 8006c16:	6820      	ldr	r0, [r4, #0]
 8006c18:	4632      	mov	r2, r6
 8006c1a:	4641      	mov	r1, r8
 8006c1c:	f000 faa8 	bl	8007170 <memmove>
 8006c20:	68a3      	ldr	r3, [r4, #8]
 8006c22:	1b9b      	subs	r3, r3, r6
 8006c24:	60a3      	str	r3, [r4, #8]
 8006c26:	6823      	ldr	r3, [r4, #0]
 8006c28:	4433      	add	r3, r6
 8006c2a:	6023      	str	r3, [r4, #0]
 8006c2c:	2000      	movs	r0, #0
 8006c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c32:	462a      	mov	r2, r5
 8006c34:	f000 fac6 	bl	80071c4 <_realloc_r>
 8006c38:	4606      	mov	r6, r0
 8006c3a:	2800      	cmp	r0, #0
 8006c3c:	d1e0      	bne.n	8006c00 <__ssputs_r+0x5c>
 8006c3e:	6921      	ldr	r1, [r4, #16]
 8006c40:	4650      	mov	r0, sl
 8006c42:	f7ff feb7 	bl	80069b4 <_free_r>
 8006c46:	230c      	movs	r3, #12
 8006c48:	f8ca 3000 	str.w	r3, [sl]
 8006c4c:	89a3      	ldrh	r3, [r4, #12]
 8006c4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c52:	81a3      	strh	r3, [r4, #12]
 8006c54:	f04f 30ff 	mov.w	r0, #4294967295
 8006c58:	e7e9      	b.n	8006c2e <__ssputs_r+0x8a>
	...

08006c5c <_svfiprintf_r>:
 8006c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c60:	4698      	mov	r8, r3
 8006c62:	898b      	ldrh	r3, [r1, #12]
 8006c64:	061b      	lsls	r3, r3, #24
 8006c66:	b09d      	sub	sp, #116	@ 0x74
 8006c68:	4607      	mov	r7, r0
 8006c6a:	460d      	mov	r5, r1
 8006c6c:	4614      	mov	r4, r2
 8006c6e:	d510      	bpl.n	8006c92 <_svfiprintf_r+0x36>
 8006c70:	690b      	ldr	r3, [r1, #16]
 8006c72:	b973      	cbnz	r3, 8006c92 <_svfiprintf_r+0x36>
 8006c74:	2140      	movs	r1, #64	@ 0x40
 8006c76:	f7ff ff09 	bl	8006a8c <_malloc_r>
 8006c7a:	6028      	str	r0, [r5, #0]
 8006c7c:	6128      	str	r0, [r5, #16]
 8006c7e:	b930      	cbnz	r0, 8006c8e <_svfiprintf_r+0x32>
 8006c80:	230c      	movs	r3, #12
 8006c82:	603b      	str	r3, [r7, #0]
 8006c84:	f04f 30ff 	mov.w	r0, #4294967295
 8006c88:	b01d      	add	sp, #116	@ 0x74
 8006c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c8e:	2340      	movs	r3, #64	@ 0x40
 8006c90:	616b      	str	r3, [r5, #20]
 8006c92:	2300      	movs	r3, #0
 8006c94:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c96:	2320      	movs	r3, #32
 8006c98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ca0:	2330      	movs	r3, #48	@ 0x30
 8006ca2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006e40 <_svfiprintf_r+0x1e4>
 8006ca6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006caa:	f04f 0901 	mov.w	r9, #1
 8006cae:	4623      	mov	r3, r4
 8006cb0:	469a      	mov	sl, r3
 8006cb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cb6:	b10a      	cbz	r2, 8006cbc <_svfiprintf_r+0x60>
 8006cb8:	2a25      	cmp	r2, #37	@ 0x25
 8006cba:	d1f9      	bne.n	8006cb0 <_svfiprintf_r+0x54>
 8006cbc:	ebba 0b04 	subs.w	fp, sl, r4
 8006cc0:	d00b      	beq.n	8006cda <_svfiprintf_r+0x7e>
 8006cc2:	465b      	mov	r3, fp
 8006cc4:	4622      	mov	r2, r4
 8006cc6:	4629      	mov	r1, r5
 8006cc8:	4638      	mov	r0, r7
 8006cca:	f7ff ff6b 	bl	8006ba4 <__ssputs_r>
 8006cce:	3001      	adds	r0, #1
 8006cd0:	f000 80a7 	beq.w	8006e22 <_svfiprintf_r+0x1c6>
 8006cd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006cd6:	445a      	add	r2, fp
 8006cd8:	9209      	str	r2, [sp, #36]	@ 0x24
 8006cda:	f89a 3000 	ldrb.w	r3, [sl]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f000 809f 	beq.w	8006e22 <_svfiprintf_r+0x1c6>
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8006cea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cee:	f10a 0a01 	add.w	sl, sl, #1
 8006cf2:	9304      	str	r3, [sp, #16]
 8006cf4:	9307      	str	r3, [sp, #28]
 8006cf6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006cfa:	931a      	str	r3, [sp, #104]	@ 0x68
 8006cfc:	4654      	mov	r4, sl
 8006cfe:	2205      	movs	r2, #5
 8006d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d04:	484e      	ldr	r0, [pc, #312]	@ (8006e40 <_svfiprintf_r+0x1e4>)
 8006d06:	f7f9 fa8b 	bl	8000220 <memchr>
 8006d0a:	9a04      	ldr	r2, [sp, #16]
 8006d0c:	b9d8      	cbnz	r0, 8006d46 <_svfiprintf_r+0xea>
 8006d0e:	06d0      	lsls	r0, r2, #27
 8006d10:	bf44      	itt	mi
 8006d12:	2320      	movmi	r3, #32
 8006d14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d18:	0711      	lsls	r1, r2, #28
 8006d1a:	bf44      	itt	mi
 8006d1c:	232b      	movmi	r3, #43	@ 0x2b
 8006d1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d22:	f89a 3000 	ldrb.w	r3, [sl]
 8006d26:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d28:	d015      	beq.n	8006d56 <_svfiprintf_r+0xfa>
 8006d2a:	9a07      	ldr	r2, [sp, #28]
 8006d2c:	4654      	mov	r4, sl
 8006d2e:	2000      	movs	r0, #0
 8006d30:	f04f 0c0a 	mov.w	ip, #10
 8006d34:	4621      	mov	r1, r4
 8006d36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d3a:	3b30      	subs	r3, #48	@ 0x30
 8006d3c:	2b09      	cmp	r3, #9
 8006d3e:	d94b      	bls.n	8006dd8 <_svfiprintf_r+0x17c>
 8006d40:	b1b0      	cbz	r0, 8006d70 <_svfiprintf_r+0x114>
 8006d42:	9207      	str	r2, [sp, #28]
 8006d44:	e014      	b.n	8006d70 <_svfiprintf_r+0x114>
 8006d46:	eba0 0308 	sub.w	r3, r0, r8
 8006d4a:	fa09 f303 	lsl.w	r3, r9, r3
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	9304      	str	r3, [sp, #16]
 8006d52:	46a2      	mov	sl, r4
 8006d54:	e7d2      	b.n	8006cfc <_svfiprintf_r+0xa0>
 8006d56:	9b03      	ldr	r3, [sp, #12]
 8006d58:	1d19      	adds	r1, r3, #4
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	9103      	str	r1, [sp, #12]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	bfbb      	ittet	lt
 8006d62:	425b      	neglt	r3, r3
 8006d64:	f042 0202 	orrlt.w	r2, r2, #2
 8006d68:	9307      	strge	r3, [sp, #28]
 8006d6a:	9307      	strlt	r3, [sp, #28]
 8006d6c:	bfb8      	it	lt
 8006d6e:	9204      	strlt	r2, [sp, #16]
 8006d70:	7823      	ldrb	r3, [r4, #0]
 8006d72:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d74:	d10a      	bne.n	8006d8c <_svfiprintf_r+0x130>
 8006d76:	7863      	ldrb	r3, [r4, #1]
 8006d78:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d7a:	d132      	bne.n	8006de2 <_svfiprintf_r+0x186>
 8006d7c:	9b03      	ldr	r3, [sp, #12]
 8006d7e:	1d1a      	adds	r2, r3, #4
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	9203      	str	r2, [sp, #12]
 8006d84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d88:	3402      	adds	r4, #2
 8006d8a:	9305      	str	r3, [sp, #20]
 8006d8c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006e50 <_svfiprintf_r+0x1f4>
 8006d90:	7821      	ldrb	r1, [r4, #0]
 8006d92:	2203      	movs	r2, #3
 8006d94:	4650      	mov	r0, sl
 8006d96:	f7f9 fa43 	bl	8000220 <memchr>
 8006d9a:	b138      	cbz	r0, 8006dac <_svfiprintf_r+0x150>
 8006d9c:	9b04      	ldr	r3, [sp, #16]
 8006d9e:	eba0 000a 	sub.w	r0, r0, sl
 8006da2:	2240      	movs	r2, #64	@ 0x40
 8006da4:	4082      	lsls	r2, r0
 8006da6:	4313      	orrs	r3, r2
 8006da8:	3401      	adds	r4, #1
 8006daa:	9304      	str	r3, [sp, #16]
 8006dac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006db0:	4824      	ldr	r0, [pc, #144]	@ (8006e44 <_svfiprintf_r+0x1e8>)
 8006db2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006db6:	2206      	movs	r2, #6
 8006db8:	f7f9 fa32 	bl	8000220 <memchr>
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	d036      	beq.n	8006e2e <_svfiprintf_r+0x1d2>
 8006dc0:	4b21      	ldr	r3, [pc, #132]	@ (8006e48 <_svfiprintf_r+0x1ec>)
 8006dc2:	bb1b      	cbnz	r3, 8006e0c <_svfiprintf_r+0x1b0>
 8006dc4:	9b03      	ldr	r3, [sp, #12]
 8006dc6:	3307      	adds	r3, #7
 8006dc8:	f023 0307 	bic.w	r3, r3, #7
 8006dcc:	3308      	adds	r3, #8
 8006dce:	9303      	str	r3, [sp, #12]
 8006dd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dd2:	4433      	add	r3, r6
 8006dd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006dd6:	e76a      	b.n	8006cae <_svfiprintf_r+0x52>
 8006dd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ddc:	460c      	mov	r4, r1
 8006dde:	2001      	movs	r0, #1
 8006de0:	e7a8      	b.n	8006d34 <_svfiprintf_r+0xd8>
 8006de2:	2300      	movs	r3, #0
 8006de4:	3401      	adds	r4, #1
 8006de6:	9305      	str	r3, [sp, #20]
 8006de8:	4619      	mov	r1, r3
 8006dea:	f04f 0c0a 	mov.w	ip, #10
 8006dee:	4620      	mov	r0, r4
 8006df0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006df4:	3a30      	subs	r2, #48	@ 0x30
 8006df6:	2a09      	cmp	r2, #9
 8006df8:	d903      	bls.n	8006e02 <_svfiprintf_r+0x1a6>
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d0c6      	beq.n	8006d8c <_svfiprintf_r+0x130>
 8006dfe:	9105      	str	r1, [sp, #20]
 8006e00:	e7c4      	b.n	8006d8c <_svfiprintf_r+0x130>
 8006e02:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e06:	4604      	mov	r4, r0
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e7f0      	b.n	8006dee <_svfiprintf_r+0x192>
 8006e0c:	ab03      	add	r3, sp, #12
 8006e0e:	9300      	str	r3, [sp, #0]
 8006e10:	462a      	mov	r2, r5
 8006e12:	4b0e      	ldr	r3, [pc, #56]	@ (8006e4c <_svfiprintf_r+0x1f0>)
 8006e14:	a904      	add	r1, sp, #16
 8006e16:	4638      	mov	r0, r7
 8006e18:	f3af 8000 	nop.w
 8006e1c:	1c42      	adds	r2, r0, #1
 8006e1e:	4606      	mov	r6, r0
 8006e20:	d1d6      	bne.n	8006dd0 <_svfiprintf_r+0x174>
 8006e22:	89ab      	ldrh	r3, [r5, #12]
 8006e24:	065b      	lsls	r3, r3, #25
 8006e26:	f53f af2d 	bmi.w	8006c84 <_svfiprintf_r+0x28>
 8006e2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e2c:	e72c      	b.n	8006c88 <_svfiprintf_r+0x2c>
 8006e2e:	ab03      	add	r3, sp, #12
 8006e30:	9300      	str	r3, [sp, #0]
 8006e32:	462a      	mov	r2, r5
 8006e34:	4b05      	ldr	r3, [pc, #20]	@ (8006e4c <_svfiprintf_r+0x1f0>)
 8006e36:	a904      	add	r1, sp, #16
 8006e38:	4638      	mov	r0, r7
 8006e3a:	f000 f879 	bl	8006f30 <_printf_i>
 8006e3e:	e7ed      	b.n	8006e1c <_svfiprintf_r+0x1c0>
 8006e40:	0800877d 	.word	0x0800877d
 8006e44:	08008787 	.word	0x08008787
 8006e48:	00000000 	.word	0x00000000
 8006e4c:	08006ba5 	.word	0x08006ba5
 8006e50:	08008783 	.word	0x08008783

08006e54 <_printf_common>:
 8006e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e58:	4616      	mov	r6, r2
 8006e5a:	4698      	mov	r8, r3
 8006e5c:	688a      	ldr	r2, [r1, #8]
 8006e5e:	690b      	ldr	r3, [r1, #16]
 8006e60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e64:	4293      	cmp	r3, r2
 8006e66:	bfb8      	it	lt
 8006e68:	4613      	movlt	r3, r2
 8006e6a:	6033      	str	r3, [r6, #0]
 8006e6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006e70:	4607      	mov	r7, r0
 8006e72:	460c      	mov	r4, r1
 8006e74:	b10a      	cbz	r2, 8006e7a <_printf_common+0x26>
 8006e76:	3301      	adds	r3, #1
 8006e78:	6033      	str	r3, [r6, #0]
 8006e7a:	6823      	ldr	r3, [r4, #0]
 8006e7c:	0699      	lsls	r1, r3, #26
 8006e7e:	bf42      	ittt	mi
 8006e80:	6833      	ldrmi	r3, [r6, #0]
 8006e82:	3302      	addmi	r3, #2
 8006e84:	6033      	strmi	r3, [r6, #0]
 8006e86:	6825      	ldr	r5, [r4, #0]
 8006e88:	f015 0506 	ands.w	r5, r5, #6
 8006e8c:	d106      	bne.n	8006e9c <_printf_common+0x48>
 8006e8e:	f104 0a19 	add.w	sl, r4, #25
 8006e92:	68e3      	ldr	r3, [r4, #12]
 8006e94:	6832      	ldr	r2, [r6, #0]
 8006e96:	1a9b      	subs	r3, r3, r2
 8006e98:	42ab      	cmp	r3, r5
 8006e9a:	dc26      	bgt.n	8006eea <_printf_common+0x96>
 8006e9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006ea0:	6822      	ldr	r2, [r4, #0]
 8006ea2:	3b00      	subs	r3, #0
 8006ea4:	bf18      	it	ne
 8006ea6:	2301      	movne	r3, #1
 8006ea8:	0692      	lsls	r2, r2, #26
 8006eaa:	d42b      	bmi.n	8006f04 <_printf_common+0xb0>
 8006eac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006eb0:	4641      	mov	r1, r8
 8006eb2:	4638      	mov	r0, r7
 8006eb4:	47c8      	blx	r9
 8006eb6:	3001      	adds	r0, #1
 8006eb8:	d01e      	beq.n	8006ef8 <_printf_common+0xa4>
 8006eba:	6823      	ldr	r3, [r4, #0]
 8006ebc:	6922      	ldr	r2, [r4, #16]
 8006ebe:	f003 0306 	and.w	r3, r3, #6
 8006ec2:	2b04      	cmp	r3, #4
 8006ec4:	bf02      	ittt	eq
 8006ec6:	68e5      	ldreq	r5, [r4, #12]
 8006ec8:	6833      	ldreq	r3, [r6, #0]
 8006eca:	1aed      	subeq	r5, r5, r3
 8006ecc:	68a3      	ldr	r3, [r4, #8]
 8006ece:	bf0c      	ite	eq
 8006ed0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ed4:	2500      	movne	r5, #0
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	bfc4      	itt	gt
 8006eda:	1a9b      	subgt	r3, r3, r2
 8006edc:	18ed      	addgt	r5, r5, r3
 8006ede:	2600      	movs	r6, #0
 8006ee0:	341a      	adds	r4, #26
 8006ee2:	42b5      	cmp	r5, r6
 8006ee4:	d11a      	bne.n	8006f1c <_printf_common+0xc8>
 8006ee6:	2000      	movs	r0, #0
 8006ee8:	e008      	b.n	8006efc <_printf_common+0xa8>
 8006eea:	2301      	movs	r3, #1
 8006eec:	4652      	mov	r2, sl
 8006eee:	4641      	mov	r1, r8
 8006ef0:	4638      	mov	r0, r7
 8006ef2:	47c8      	blx	r9
 8006ef4:	3001      	adds	r0, #1
 8006ef6:	d103      	bne.n	8006f00 <_printf_common+0xac>
 8006ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8006efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f00:	3501      	adds	r5, #1
 8006f02:	e7c6      	b.n	8006e92 <_printf_common+0x3e>
 8006f04:	18e1      	adds	r1, r4, r3
 8006f06:	1c5a      	adds	r2, r3, #1
 8006f08:	2030      	movs	r0, #48	@ 0x30
 8006f0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006f0e:	4422      	add	r2, r4
 8006f10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006f14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006f18:	3302      	adds	r3, #2
 8006f1a:	e7c7      	b.n	8006eac <_printf_common+0x58>
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	4622      	mov	r2, r4
 8006f20:	4641      	mov	r1, r8
 8006f22:	4638      	mov	r0, r7
 8006f24:	47c8      	blx	r9
 8006f26:	3001      	adds	r0, #1
 8006f28:	d0e6      	beq.n	8006ef8 <_printf_common+0xa4>
 8006f2a:	3601      	adds	r6, #1
 8006f2c:	e7d9      	b.n	8006ee2 <_printf_common+0x8e>
	...

08006f30 <_printf_i>:
 8006f30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f34:	7e0f      	ldrb	r7, [r1, #24]
 8006f36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f38:	2f78      	cmp	r7, #120	@ 0x78
 8006f3a:	4691      	mov	r9, r2
 8006f3c:	4680      	mov	r8, r0
 8006f3e:	460c      	mov	r4, r1
 8006f40:	469a      	mov	sl, r3
 8006f42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006f46:	d807      	bhi.n	8006f58 <_printf_i+0x28>
 8006f48:	2f62      	cmp	r7, #98	@ 0x62
 8006f4a:	d80a      	bhi.n	8006f62 <_printf_i+0x32>
 8006f4c:	2f00      	cmp	r7, #0
 8006f4e:	f000 80d2 	beq.w	80070f6 <_printf_i+0x1c6>
 8006f52:	2f58      	cmp	r7, #88	@ 0x58
 8006f54:	f000 80b9 	beq.w	80070ca <_printf_i+0x19a>
 8006f58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006f60:	e03a      	b.n	8006fd8 <_printf_i+0xa8>
 8006f62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006f66:	2b15      	cmp	r3, #21
 8006f68:	d8f6      	bhi.n	8006f58 <_printf_i+0x28>
 8006f6a:	a101      	add	r1, pc, #4	@ (adr r1, 8006f70 <_printf_i+0x40>)
 8006f6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f70:	08006fc9 	.word	0x08006fc9
 8006f74:	08006fdd 	.word	0x08006fdd
 8006f78:	08006f59 	.word	0x08006f59
 8006f7c:	08006f59 	.word	0x08006f59
 8006f80:	08006f59 	.word	0x08006f59
 8006f84:	08006f59 	.word	0x08006f59
 8006f88:	08006fdd 	.word	0x08006fdd
 8006f8c:	08006f59 	.word	0x08006f59
 8006f90:	08006f59 	.word	0x08006f59
 8006f94:	08006f59 	.word	0x08006f59
 8006f98:	08006f59 	.word	0x08006f59
 8006f9c:	080070dd 	.word	0x080070dd
 8006fa0:	08007007 	.word	0x08007007
 8006fa4:	08007097 	.word	0x08007097
 8006fa8:	08006f59 	.word	0x08006f59
 8006fac:	08006f59 	.word	0x08006f59
 8006fb0:	080070ff 	.word	0x080070ff
 8006fb4:	08006f59 	.word	0x08006f59
 8006fb8:	08007007 	.word	0x08007007
 8006fbc:	08006f59 	.word	0x08006f59
 8006fc0:	08006f59 	.word	0x08006f59
 8006fc4:	0800709f 	.word	0x0800709f
 8006fc8:	6833      	ldr	r3, [r6, #0]
 8006fca:	1d1a      	adds	r2, r3, #4
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	6032      	str	r2, [r6, #0]
 8006fd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fd4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e09d      	b.n	8007118 <_printf_i+0x1e8>
 8006fdc:	6833      	ldr	r3, [r6, #0]
 8006fde:	6820      	ldr	r0, [r4, #0]
 8006fe0:	1d19      	adds	r1, r3, #4
 8006fe2:	6031      	str	r1, [r6, #0]
 8006fe4:	0606      	lsls	r6, r0, #24
 8006fe6:	d501      	bpl.n	8006fec <_printf_i+0xbc>
 8006fe8:	681d      	ldr	r5, [r3, #0]
 8006fea:	e003      	b.n	8006ff4 <_printf_i+0xc4>
 8006fec:	0645      	lsls	r5, r0, #25
 8006fee:	d5fb      	bpl.n	8006fe8 <_printf_i+0xb8>
 8006ff0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006ff4:	2d00      	cmp	r5, #0
 8006ff6:	da03      	bge.n	8007000 <_printf_i+0xd0>
 8006ff8:	232d      	movs	r3, #45	@ 0x2d
 8006ffa:	426d      	negs	r5, r5
 8006ffc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007000:	4859      	ldr	r0, [pc, #356]	@ (8007168 <_printf_i+0x238>)
 8007002:	230a      	movs	r3, #10
 8007004:	e011      	b.n	800702a <_printf_i+0xfa>
 8007006:	6821      	ldr	r1, [r4, #0]
 8007008:	6833      	ldr	r3, [r6, #0]
 800700a:	0608      	lsls	r0, r1, #24
 800700c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007010:	d402      	bmi.n	8007018 <_printf_i+0xe8>
 8007012:	0649      	lsls	r1, r1, #25
 8007014:	bf48      	it	mi
 8007016:	b2ad      	uxthmi	r5, r5
 8007018:	2f6f      	cmp	r7, #111	@ 0x6f
 800701a:	4853      	ldr	r0, [pc, #332]	@ (8007168 <_printf_i+0x238>)
 800701c:	6033      	str	r3, [r6, #0]
 800701e:	bf14      	ite	ne
 8007020:	230a      	movne	r3, #10
 8007022:	2308      	moveq	r3, #8
 8007024:	2100      	movs	r1, #0
 8007026:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800702a:	6866      	ldr	r6, [r4, #4]
 800702c:	60a6      	str	r6, [r4, #8]
 800702e:	2e00      	cmp	r6, #0
 8007030:	bfa2      	ittt	ge
 8007032:	6821      	ldrge	r1, [r4, #0]
 8007034:	f021 0104 	bicge.w	r1, r1, #4
 8007038:	6021      	strge	r1, [r4, #0]
 800703a:	b90d      	cbnz	r5, 8007040 <_printf_i+0x110>
 800703c:	2e00      	cmp	r6, #0
 800703e:	d04b      	beq.n	80070d8 <_printf_i+0x1a8>
 8007040:	4616      	mov	r6, r2
 8007042:	fbb5 f1f3 	udiv	r1, r5, r3
 8007046:	fb03 5711 	mls	r7, r3, r1, r5
 800704a:	5dc7      	ldrb	r7, [r0, r7]
 800704c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007050:	462f      	mov	r7, r5
 8007052:	42bb      	cmp	r3, r7
 8007054:	460d      	mov	r5, r1
 8007056:	d9f4      	bls.n	8007042 <_printf_i+0x112>
 8007058:	2b08      	cmp	r3, #8
 800705a:	d10b      	bne.n	8007074 <_printf_i+0x144>
 800705c:	6823      	ldr	r3, [r4, #0]
 800705e:	07df      	lsls	r7, r3, #31
 8007060:	d508      	bpl.n	8007074 <_printf_i+0x144>
 8007062:	6923      	ldr	r3, [r4, #16]
 8007064:	6861      	ldr	r1, [r4, #4]
 8007066:	4299      	cmp	r1, r3
 8007068:	bfde      	ittt	le
 800706a:	2330      	movle	r3, #48	@ 0x30
 800706c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007070:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007074:	1b92      	subs	r2, r2, r6
 8007076:	6122      	str	r2, [r4, #16]
 8007078:	f8cd a000 	str.w	sl, [sp]
 800707c:	464b      	mov	r3, r9
 800707e:	aa03      	add	r2, sp, #12
 8007080:	4621      	mov	r1, r4
 8007082:	4640      	mov	r0, r8
 8007084:	f7ff fee6 	bl	8006e54 <_printf_common>
 8007088:	3001      	adds	r0, #1
 800708a:	d14a      	bne.n	8007122 <_printf_i+0x1f2>
 800708c:	f04f 30ff 	mov.w	r0, #4294967295
 8007090:	b004      	add	sp, #16
 8007092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007096:	6823      	ldr	r3, [r4, #0]
 8007098:	f043 0320 	orr.w	r3, r3, #32
 800709c:	6023      	str	r3, [r4, #0]
 800709e:	4833      	ldr	r0, [pc, #204]	@ (800716c <_printf_i+0x23c>)
 80070a0:	2778      	movs	r7, #120	@ 0x78
 80070a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80070a6:	6823      	ldr	r3, [r4, #0]
 80070a8:	6831      	ldr	r1, [r6, #0]
 80070aa:	061f      	lsls	r7, r3, #24
 80070ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80070b0:	d402      	bmi.n	80070b8 <_printf_i+0x188>
 80070b2:	065f      	lsls	r7, r3, #25
 80070b4:	bf48      	it	mi
 80070b6:	b2ad      	uxthmi	r5, r5
 80070b8:	6031      	str	r1, [r6, #0]
 80070ba:	07d9      	lsls	r1, r3, #31
 80070bc:	bf44      	itt	mi
 80070be:	f043 0320 	orrmi.w	r3, r3, #32
 80070c2:	6023      	strmi	r3, [r4, #0]
 80070c4:	b11d      	cbz	r5, 80070ce <_printf_i+0x19e>
 80070c6:	2310      	movs	r3, #16
 80070c8:	e7ac      	b.n	8007024 <_printf_i+0xf4>
 80070ca:	4827      	ldr	r0, [pc, #156]	@ (8007168 <_printf_i+0x238>)
 80070cc:	e7e9      	b.n	80070a2 <_printf_i+0x172>
 80070ce:	6823      	ldr	r3, [r4, #0]
 80070d0:	f023 0320 	bic.w	r3, r3, #32
 80070d4:	6023      	str	r3, [r4, #0]
 80070d6:	e7f6      	b.n	80070c6 <_printf_i+0x196>
 80070d8:	4616      	mov	r6, r2
 80070da:	e7bd      	b.n	8007058 <_printf_i+0x128>
 80070dc:	6833      	ldr	r3, [r6, #0]
 80070de:	6825      	ldr	r5, [r4, #0]
 80070e0:	6961      	ldr	r1, [r4, #20]
 80070e2:	1d18      	adds	r0, r3, #4
 80070e4:	6030      	str	r0, [r6, #0]
 80070e6:	062e      	lsls	r6, r5, #24
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	d501      	bpl.n	80070f0 <_printf_i+0x1c0>
 80070ec:	6019      	str	r1, [r3, #0]
 80070ee:	e002      	b.n	80070f6 <_printf_i+0x1c6>
 80070f0:	0668      	lsls	r0, r5, #25
 80070f2:	d5fb      	bpl.n	80070ec <_printf_i+0x1bc>
 80070f4:	8019      	strh	r1, [r3, #0]
 80070f6:	2300      	movs	r3, #0
 80070f8:	6123      	str	r3, [r4, #16]
 80070fa:	4616      	mov	r6, r2
 80070fc:	e7bc      	b.n	8007078 <_printf_i+0x148>
 80070fe:	6833      	ldr	r3, [r6, #0]
 8007100:	1d1a      	adds	r2, r3, #4
 8007102:	6032      	str	r2, [r6, #0]
 8007104:	681e      	ldr	r6, [r3, #0]
 8007106:	6862      	ldr	r2, [r4, #4]
 8007108:	2100      	movs	r1, #0
 800710a:	4630      	mov	r0, r6
 800710c:	f7f9 f888 	bl	8000220 <memchr>
 8007110:	b108      	cbz	r0, 8007116 <_printf_i+0x1e6>
 8007112:	1b80      	subs	r0, r0, r6
 8007114:	6060      	str	r0, [r4, #4]
 8007116:	6863      	ldr	r3, [r4, #4]
 8007118:	6123      	str	r3, [r4, #16]
 800711a:	2300      	movs	r3, #0
 800711c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007120:	e7aa      	b.n	8007078 <_printf_i+0x148>
 8007122:	6923      	ldr	r3, [r4, #16]
 8007124:	4632      	mov	r2, r6
 8007126:	4649      	mov	r1, r9
 8007128:	4640      	mov	r0, r8
 800712a:	47d0      	blx	sl
 800712c:	3001      	adds	r0, #1
 800712e:	d0ad      	beq.n	800708c <_printf_i+0x15c>
 8007130:	6823      	ldr	r3, [r4, #0]
 8007132:	079b      	lsls	r3, r3, #30
 8007134:	d413      	bmi.n	800715e <_printf_i+0x22e>
 8007136:	68e0      	ldr	r0, [r4, #12]
 8007138:	9b03      	ldr	r3, [sp, #12]
 800713a:	4298      	cmp	r0, r3
 800713c:	bfb8      	it	lt
 800713e:	4618      	movlt	r0, r3
 8007140:	e7a6      	b.n	8007090 <_printf_i+0x160>
 8007142:	2301      	movs	r3, #1
 8007144:	4632      	mov	r2, r6
 8007146:	4649      	mov	r1, r9
 8007148:	4640      	mov	r0, r8
 800714a:	47d0      	blx	sl
 800714c:	3001      	adds	r0, #1
 800714e:	d09d      	beq.n	800708c <_printf_i+0x15c>
 8007150:	3501      	adds	r5, #1
 8007152:	68e3      	ldr	r3, [r4, #12]
 8007154:	9903      	ldr	r1, [sp, #12]
 8007156:	1a5b      	subs	r3, r3, r1
 8007158:	42ab      	cmp	r3, r5
 800715a:	dcf2      	bgt.n	8007142 <_printf_i+0x212>
 800715c:	e7eb      	b.n	8007136 <_printf_i+0x206>
 800715e:	2500      	movs	r5, #0
 8007160:	f104 0619 	add.w	r6, r4, #25
 8007164:	e7f5      	b.n	8007152 <_printf_i+0x222>
 8007166:	bf00      	nop
 8007168:	0800878e 	.word	0x0800878e
 800716c:	0800879f 	.word	0x0800879f

08007170 <memmove>:
 8007170:	4288      	cmp	r0, r1
 8007172:	b510      	push	{r4, lr}
 8007174:	eb01 0402 	add.w	r4, r1, r2
 8007178:	d902      	bls.n	8007180 <memmove+0x10>
 800717a:	4284      	cmp	r4, r0
 800717c:	4623      	mov	r3, r4
 800717e:	d807      	bhi.n	8007190 <memmove+0x20>
 8007180:	1e43      	subs	r3, r0, #1
 8007182:	42a1      	cmp	r1, r4
 8007184:	d008      	beq.n	8007198 <memmove+0x28>
 8007186:	f811 2b01 	ldrb.w	r2, [r1], #1
 800718a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800718e:	e7f8      	b.n	8007182 <memmove+0x12>
 8007190:	4402      	add	r2, r0
 8007192:	4601      	mov	r1, r0
 8007194:	428a      	cmp	r2, r1
 8007196:	d100      	bne.n	800719a <memmove+0x2a>
 8007198:	bd10      	pop	{r4, pc}
 800719a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800719e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071a2:	e7f7      	b.n	8007194 <memmove+0x24>

080071a4 <_sbrk_r>:
 80071a4:	b538      	push	{r3, r4, r5, lr}
 80071a6:	4d06      	ldr	r5, [pc, #24]	@ (80071c0 <_sbrk_r+0x1c>)
 80071a8:	2300      	movs	r3, #0
 80071aa:	4604      	mov	r4, r0
 80071ac:	4608      	mov	r0, r1
 80071ae:	602b      	str	r3, [r5, #0]
 80071b0:	f7fb fc92 	bl	8002ad8 <_sbrk>
 80071b4:	1c43      	adds	r3, r0, #1
 80071b6:	d102      	bne.n	80071be <_sbrk_r+0x1a>
 80071b8:	682b      	ldr	r3, [r5, #0]
 80071ba:	b103      	cbz	r3, 80071be <_sbrk_r+0x1a>
 80071bc:	6023      	str	r3, [r4, #0]
 80071be:	bd38      	pop	{r3, r4, r5, pc}
 80071c0:	20000a0c 	.word	0x20000a0c

080071c4 <_realloc_r>:
 80071c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071c8:	4680      	mov	r8, r0
 80071ca:	4615      	mov	r5, r2
 80071cc:	460c      	mov	r4, r1
 80071ce:	b921      	cbnz	r1, 80071da <_realloc_r+0x16>
 80071d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071d4:	4611      	mov	r1, r2
 80071d6:	f7ff bc59 	b.w	8006a8c <_malloc_r>
 80071da:	b92a      	cbnz	r2, 80071e8 <_realloc_r+0x24>
 80071dc:	f7ff fbea 	bl	80069b4 <_free_r>
 80071e0:	2400      	movs	r4, #0
 80071e2:	4620      	mov	r0, r4
 80071e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071e8:	f000 f81a 	bl	8007220 <_malloc_usable_size_r>
 80071ec:	4285      	cmp	r5, r0
 80071ee:	4606      	mov	r6, r0
 80071f0:	d802      	bhi.n	80071f8 <_realloc_r+0x34>
 80071f2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80071f6:	d8f4      	bhi.n	80071e2 <_realloc_r+0x1e>
 80071f8:	4629      	mov	r1, r5
 80071fa:	4640      	mov	r0, r8
 80071fc:	f7ff fc46 	bl	8006a8c <_malloc_r>
 8007200:	4607      	mov	r7, r0
 8007202:	2800      	cmp	r0, #0
 8007204:	d0ec      	beq.n	80071e0 <_realloc_r+0x1c>
 8007206:	42b5      	cmp	r5, r6
 8007208:	462a      	mov	r2, r5
 800720a:	4621      	mov	r1, r4
 800720c:	bf28      	it	cs
 800720e:	4632      	movcs	r2, r6
 8007210:	f7ff fbc2 	bl	8006998 <memcpy>
 8007214:	4621      	mov	r1, r4
 8007216:	4640      	mov	r0, r8
 8007218:	f7ff fbcc 	bl	80069b4 <_free_r>
 800721c:	463c      	mov	r4, r7
 800721e:	e7e0      	b.n	80071e2 <_realloc_r+0x1e>

08007220 <_malloc_usable_size_r>:
 8007220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007224:	1f18      	subs	r0, r3, #4
 8007226:	2b00      	cmp	r3, #0
 8007228:	bfbc      	itt	lt
 800722a:	580b      	ldrlt	r3, [r1, r0]
 800722c:	18c0      	addlt	r0, r0, r3
 800722e:	4770      	bx	lr

08007230 <atan2>:
 8007230:	f000 ba1e 	b.w	8007670 <__ieee754_atan2>

08007234 <pow>:
 8007234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007236:	ed2d 8b02 	vpush	{d8}
 800723a:	eeb0 8a40 	vmov.f32	s16, s0
 800723e:	eef0 8a60 	vmov.f32	s17, s1
 8007242:	ec55 4b11 	vmov	r4, r5, d1
 8007246:	f000 fadb 	bl	8007800 <__ieee754_pow>
 800724a:	4622      	mov	r2, r4
 800724c:	462b      	mov	r3, r5
 800724e:	4620      	mov	r0, r4
 8007250:	4629      	mov	r1, r5
 8007252:	ec57 6b10 	vmov	r6, r7, d0
 8007256:	f7f9 fc89 	bl	8000b6c <__aeabi_dcmpun>
 800725a:	2800      	cmp	r0, #0
 800725c:	d13b      	bne.n	80072d6 <pow+0xa2>
 800725e:	ec51 0b18 	vmov	r0, r1, d8
 8007262:	2200      	movs	r2, #0
 8007264:	2300      	movs	r3, #0
 8007266:	f7f9 fc4f 	bl	8000b08 <__aeabi_dcmpeq>
 800726a:	b1b8      	cbz	r0, 800729c <pow+0x68>
 800726c:	2200      	movs	r2, #0
 800726e:	2300      	movs	r3, #0
 8007270:	4620      	mov	r0, r4
 8007272:	4629      	mov	r1, r5
 8007274:	f7f9 fc48 	bl	8000b08 <__aeabi_dcmpeq>
 8007278:	2800      	cmp	r0, #0
 800727a:	d146      	bne.n	800730a <pow+0xd6>
 800727c:	ec45 4b10 	vmov	d0, r4, r5
 8007280:	f000 f9ea 	bl	8007658 <finite>
 8007284:	b338      	cbz	r0, 80072d6 <pow+0xa2>
 8007286:	2200      	movs	r2, #0
 8007288:	2300      	movs	r3, #0
 800728a:	4620      	mov	r0, r4
 800728c:	4629      	mov	r1, r5
 800728e:	f7f9 fc45 	bl	8000b1c <__aeabi_dcmplt>
 8007292:	b300      	cbz	r0, 80072d6 <pow+0xa2>
 8007294:	f7ff fb54 	bl	8006940 <__errno>
 8007298:	2322      	movs	r3, #34	@ 0x22
 800729a:	e01b      	b.n	80072d4 <pow+0xa0>
 800729c:	ec47 6b10 	vmov	d0, r6, r7
 80072a0:	f000 f9da 	bl	8007658 <finite>
 80072a4:	b9e0      	cbnz	r0, 80072e0 <pow+0xac>
 80072a6:	eeb0 0a48 	vmov.f32	s0, s16
 80072aa:	eef0 0a68 	vmov.f32	s1, s17
 80072ae:	f000 f9d3 	bl	8007658 <finite>
 80072b2:	b1a8      	cbz	r0, 80072e0 <pow+0xac>
 80072b4:	ec45 4b10 	vmov	d0, r4, r5
 80072b8:	f000 f9ce 	bl	8007658 <finite>
 80072bc:	b180      	cbz	r0, 80072e0 <pow+0xac>
 80072be:	4632      	mov	r2, r6
 80072c0:	463b      	mov	r3, r7
 80072c2:	4630      	mov	r0, r6
 80072c4:	4639      	mov	r1, r7
 80072c6:	f7f9 fc51 	bl	8000b6c <__aeabi_dcmpun>
 80072ca:	2800      	cmp	r0, #0
 80072cc:	d0e2      	beq.n	8007294 <pow+0x60>
 80072ce:	f7ff fb37 	bl	8006940 <__errno>
 80072d2:	2321      	movs	r3, #33	@ 0x21
 80072d4:	6003      	str	r3, [r0, #0]
 80072d6:	ecbd 8b02 	vpop	{d8}
 80072da:	ec47 6b10 	vmov	d0, r6, r7
 80072de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072e0:	2200      	movs	r2, #0
 80072e2:	2300      	movs	r3, #0
 80072e4:	4630      	mov	r0, r6
 80072e6:	4639      	mov	r1, r7
 80072e8:	f7f9 fc0e 	bl	8000b08 <__aeabi_dcmpeq>
 80072ec:	2800      	cmp	r0, #0
 80072ee:	d0f2      	beq.n	80072d6 <pow+0xa2>
 80072f0:	eeb0 0a48 	vmov.f32	s0, s16
 80072f4:	eef0 0a68 	vmov.f32	s1, s17
 80072f8:	f000 f9ae 	bl	8007658 <finite>
 80072fc:	2800      	cmp	r0, #0
 80072fe:	d0ea      	beq.n	80072d6 <pow+0xa2>
 8007300:	ec45 4b10 	vmov	d0, r4, r5
 8007304:	f000 f9a8 	bl	8007658 <finite>
 8007308:	e7c3      	b.n	8007292 <pow+0x5e>
 800730a:	4f01      	ldr	r7, [pc, #4]	@ (8007310 <pow+0xdc>)
 800730c:	2600      	movs	r6, #0
 800730e:	e7e2      	b.n	80072d6 <pow+0xa2>
 8007310:	3ff00000 	.word	0x3ff00000
 8007314:	00000000 	.word	0x00000000

08007318 <atan>:
 8007318:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800731c:	ec55 4b10 	vmov	r4, r5, d0
 8007320:	4bbf      	ldr	r3, [pc, #764]	@ (8007620 <atan+0x308>)
 8007322:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8007326:	429e      	cmp	r6, r3
 8007328:	46ab      	mov	fp, r5
 800732a:	d918      	bls.n	800735e <atan+0x46>
 800732c:	4bbd      	ldr	r3, [pc, #756]	@ (8007624 <atan+0x30c>)
 800732e:	429e      	cmp	r6, r3
 8007330:	d801      	bhi.n	8007336 <atan+0x1e>
 8007332:	d109      	bne.n	8007348 <atan+0x30>
 8007334:	b144      	cbz	r4, 8007348 <atan+0x30>
 8007336:	4622      	mov	r2, r4
 8007338:	462b      	mov	r3, r5
 800733a:	4620      	mov	r0, r4
 800733c:	4629      	mov	r1, r5
 800733e:	f7f8 ffc5 	bl	80002cc <__adddf3>
 8007342:	4604      	mov	r4, r0
 8007344:	460d      	mov	r5, r1
 8007346:	e006      	b.n	8007356 <atan+0x3e>
 8007348:	f1bb 0f00 	cmp.w	fp, #0
 800734c:	f340 812b 	ble.w	80075a6 <atan+0x28e>
 8007350:	a597      	add	r5, pc, #604	@ (adr r5, 80075b0 <atan+0x298>)
 8007352:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007356:	ec45 4b10 	vmov	d0, r4, r5
 800735a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800735e:	4bb2      	ldr	r3, [pc, #712]	@ (8007628 <atan+0x310>)
 8007360:	429e      	cmp	r6, r3
 8007362:	d813      	bhi.n	800738c <atan+0x74>
 8007364:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8007368:	429e      	cmp	r6, r3
 800736a:	d80c      	bhi.n	8007386 <atan+0x6e>
 800736c:	a392      	add	r3, pc, #584	@ (adr r3, 80075b8 <atan+0x2a0>)
 800736e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007372:	4620      	mov	r0, r4
 8007374:	4629      	mov	r1, r5
 8007376:	f7f8 ffa9 	bl	80002cc <__adddf3>
 800737a:	4bac      	ldr	r3, [pc, #688]	@ (800762c <atan+0x314>)
 800737c:	2200      	movs	r2, #0
 800737e:	f7f9 fbeb 	bl	8000b58 <__aeabi_dcmpgt>
 8007382:	2800      	cmp	r0, #0
 8007384:	d1e7      	bne.n	8007356 <atan+0x3e>
 8007386:	f04f 3aff 	mov.w	sl, #4294967295
 800738a:	e029      	b.n	80073e0 <atan+0xc8>
 800738c:	f000 f95c 	bl	8007648 <fabs>
 8007390:	4ba7      	ldr	r3, [pc, #668]	@ (8007630 <atan+0x318>)
 8007392:	429e      	cmp	r6, r3
 8007394:	ec55 4b10 	vmov	r4, r5, d0
 8007398:	f200 80bc 	bhi.w	8007514 <atan+0x1fc>
 800739c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80073a0:	429e      	cmp	r6, r3
 80073a2:	f200 809e 	bhi.w	80074e2 <atan+0x1ca>
 80073a6:	4622      	mov	r2, r4
 80073a8:	462b      	mov	r3, r5
 80073aa:	4620      	mov	r0, r4
 80073ac:	4629      	mov	r1, r5
 80073ae:	f7f8 ff8d 	bl	80002cc <__adddf3>
 80073b2:	4b9e      	ldr	r3, [pc, #632]	@ (800762c <atan+0x314>)
 80073b4:	2200      	movs	r2, #0
 80073b6:	f7f8 ff87 	bl	80002c8 <__aeabi_dsub>
 80073ba:	2200      	movs	r2, #0
 80073bc:	4606      	mov	r6, r0
 80073be:	460f      	mov	r7, r1
 80073c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80073c4:	4620      	mov	r0, r4
 80073c6:	4629      	mov	r1, r5
 80073c8:	f7f8 ff80 	bl	80002cc <__adddf3>
 80073cc:	4602      	mov	r2, r0
 80073ce:	460b      	mov	r3, r1
 80073d0:	4630      	mov	r0, r6
 80073d2:	4639      	mov	r1, r7
 80073d4:	f7f9 fa5a 	bl	800088c <__aeabi_ddiv>
 80073d8:	f04f 0a00 	mov.w	sl, #0
 80073dc:	4604      	mov	r4, r0
 80073de:	460d      	mov	r5, r1
 80073e0:	4622      	mov	r2, r4
 80073e2:	462b      	mov	r3, r5
 80073e4:	4620      	mov	r0, r4
 80073e6:	4629      	mov	r1, r5
 80073e8:	f7f9 f926 	bl	8000638 <__aeabi_dmul>
 80073ec:	4602      	mov	r2, r0
 80073ee:	460b      	mov	r3, r1
 80073f0:	4680      	mov	r8, r0
 80073f2:	4689      	mov	r9, r1
 80073f4:	f7f9 f920 	bl	8000638 <__aeabi_dmul>
 80073f8:	a371      	add	r3, pc, #452	@ (adr r3, 80075c0 <atan+0x2a8>)
 80073fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fe:	4606      	mov	r6, r0
 8007400:	460f      	mov	r7, r1
 8007402:	f7f9 f919 	bl	8000638 <__aeabi_dmul>
 8007406:	a370      	add	r3, pc, #448	@ (adr r3, 80075c8 <atan+0x2b0>)
 8007408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740c:	f7f8 ff5e 	bl	80002cc <__adddf3>
 8007410:	4632      	mov	r2, r6
 8007412:	463b      	mov	r3, r7
 8007414:	f7f9 f910 	bl	8000638 <__aeabi_dmul>
 8007418:	a36d      	add	r3, pc, #436	@ (adr r3, 80075d0 <atan+0x2b8>)
 800741a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741e:	f7f8 ff55 	bl	80002cc <__adddf3>
 8007422:	4632      	mov	r2, r6
 8007424:	463b      	mov	r3, r7
 8007426:	f7f9 f907 	bl	8000638 <__aeabi_dmul>
 800742a:	a36b      	add	r3, pc, #428	@ (adr r3, 80075d8 <atan+0x2c0>)
 800742c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007430:	f7f8 ff4c 	bl	80002cc <__adddf3>
 8007434:	4632      	mov	r2, r6
 8007436:	463b      	mov	r3, r7
 8007438:	f7f9 f8fe 	bl	8000638 <__aeabi_dmul>
 800743c:	a368      	add	r3, pc, #416	@ (adr r3, 80075e0 <atan+0x2c8>)
 800743e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007442:	f7f8 ff43 	bl	80002cc <__adddf3>
 8007446:	4632      	mov	r2, r6
 8007448:	463b      	mov	r3, r7
 800744a:	f7f9 f8f5 	bl	8000638 <__aeabi_dmul>
 800744e:	a366      	add	r3, pc, #408	@ (adr r3, 80075e8 <atan+0x2d0>)
 8007450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007454:	f7f8 ff3a 	bl	80002cc <__adddf3>
 8007458:	4642      	mov	r2, r8
 800745a:	464b      	mov	r3, r9
 800745c:	f7f9 f8ec 	bl	8000638 <__aeabi_dmul>
 8007460:	a363      	add	r3, pc, #396	@ (adr r3, 80075f0 <atan+0x2d8>)
 8007462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007466:	4680      	mov	r8, r0
 8007468:	4689      	mov	r9, r1
 800746a:	4630      	mov	r0, r6
 800746c:	4639      	mov	r1, r7
 800746e:	f7f9 f8e3 	bl	8000638 <__aeabi_dmul>
 8007472:	a361      	add	r3, pc, #388	@ (adr r3, 80075f8 <atan+0x2e0>)
 8007474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007478:	f7f8 ff26 	bl	80002c8 <__aeabi_dsub>
 800747c:	4632      	mov	r2, r6
 800747e:	463b      	mov	r3, r7
 8007480:	f7f9 f8da 	bl	8000638 <__aeabi_dmul>
 8007484:	a35e      	add	r3, pc, #376	@ (adr r3, 8007600 <atan+0x2e8>)
 8007486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748a:	f7f8 ff1d 	bl	80002c8 <__aeabi_dsub>
 800748e:	4632      	mov	r2, r6
 8007490:	463b      	mov	r3, r7
 8007492:	f7f9 f8d1 	bl	8000638 <__aeabi_dmul>
 8007496:	a35c      	add	r3, pc, #368	@ (adr r3, 8007608 <atan+0x2f0>)
 8007498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749c:	f7f8 ff14 	bl	80002c8 <__aeabi_dsub>
 80074a0:	4632      	mov	r2, r6
 80074a2:	463b      	mov	r3, r7
 80074a4:	f7f9 f8c8 	bl	8000638 <__aeabi_dmul>
 80074a8:	a359      	add	r3, pc, #356	@ (adr r3, 8007610 <atan+0x2f8>)
 80074aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ae:	f7f8 ff0b 	bl	80002c8 <__aeabi_dsub>
 80074b2:	4632      	mov	r2, r6
 80074b4:	463b      	mov	r3, r7
 80074b6:	f7f9 f8bf 	bl	8000638 <__aeabi_dmul>
 80074ba:	4602      	mov	r2, r0
 80074bc:	460b      	mov	r3, r1
 80074be:	4640      	mov	r0, r8
 80074c0:	4649      	mov	r1, r9
 80074c2:	f7f8 ff03 	bl	80002cc <__adddf3>
 80074c6:	4622      	mov	r2, r4
 80074c8:	462b      	mov	r3, r5
 80074ca:	f7f9 f8b5 	bl	8000638 <__aeabi_dmul>
 80074ce:	f1ba 3fff 	cmp.w	sl, #4294967295
 80074d2:	4602      	mov	r2, r0
 80074d4:	460b      	mov	r3, r1
 80074d6:	d148      	bne.n	800756a <atan+0x252>
 80074d8:	4620      	mov	r0, r4
 80074da:	4629      	mov	r1, r5
 80074dc:	f7f8 fef4 	bl	80002c8 <__aeabi_dsub>
 80074e0:	e72f      	b.n	8007342 <atan+0x2a>
 80074e2:	4b52      	ldr	r3, [pc, #328]	@ (800762c <atan+0x314>)
 80074e4:	2200      	movs	r2, #0
 80074e6:	4620      	mov	r0, r4
 80074e8:	4629      	mov	r1, r5
 80074ea:	f7f8 feed 	bl	80002c8 <__aeabi_dsub>
 80074ee:	4b4f      	ldr	r3, [pc, #316]	@ (800762c <atan+0x314>)
 80074f0:	4606      	mov	r6, r0
 80074f2:	460f      	mov	r7, r1
 80074f4:	2200      	movs	r2, #0
 80074f6:	4620      	mov	r0, r4
 80074f8:	4629      	mov	r1, r5
 80074fa:	f7f8 fee7 	bl	80002cc <__adddf3>
 80074fe:	4602      	mov	r2, r0
 8007500:	460b      	mov	r3, r1
 8007502:	4630      	mov	r0, r6
 8007504:	4639      	mov	r1, r7
 8007506:	f7f9 f9c1 	bl	800088c <__aeabi_ddiv>
 800750a:	f04f 0a01 	mov.w	sl, #1
 800750e:	4604      	mov	r4, r0
 8007510:	460d      	mov	r5, r1
 8007512:	e765      	b.n	80073e0 <atan+0xc8>
 8007514:	4b47      	ldr	r3, [pc, #284]	@ (8007634 <atan+0x31c>)
 8007516:	429e      	cmp	r6, r3
 8007518:	d21c      	bcs.n	8007554 <atan+0x23c>
 800751a:	4b47      	ldr	r3, [pc, #284]	@ (8007638 <atan+0x320>)
 800751c:	2200      	movs	r2, #0
 800751e:	4620      	mov	r0, r4
 8007520:	4629      	mov	r1, r5
 8007522:	f7f8 fed1 	bl	80002c8 <__aeabi_dsub>
 8007526:	4b44      	ldr	r3, [pc, #272]	@ (8007638 <atan+0x320>)
 8007528:	4606      	mov	r6, r0
 800752a:	460f      	mov	r7, r1
 800752c:	2200      	movs	r2, #0
 800752e:	4620      	mov	r0, r4
 8007530:	4629      	mov	r1, r5
 8007532:	f7f9 f881 	bl	8000638 <__aeabi_dmul>
 8007536:	4b3d      	ldr	r3, [pc, #244]	@ (800762c <atan+0x314>)
 8007538:	2200      	movs	r2, #0
 800753a:	f7f8 fec7 	bl	80002cc <__adddf3>
 800753e:	4602      	mov	r2, r0
 8007540:	460b      	mov	r3, r1
 8007542:	4630      	mov	r0, r6
 8007544:	4639      	mov	r1, r7
 8007546:	f7f9 f9a1 	bl	800088c <__aeabi_ddiv>
 800754a:	f04f 0a02 	mov.w	sl, #2
 800754e:	4604      	mov	r4, r0
 8007550:	460d      	mov	r5, r1
 8007552:	e745      	b.n	80073e0 <atan+0xc8>
 8007554:	4622      	mov	r2, r4
 8007556:	462b      	mov	r3, r5
 8007558:	4938      	ldr	r1, [pc, #224]	@ (800763c <atan+0x324>)
 800755a:	2000      	movs	r0, #0
 800755c:	f7f9 f996 	bl	800088c <__aeabi_ddiv>
 8007560:	f04f 0a03 	mov.w	sl, #3
 8007564:	4604      	mov	r4, r0
 8007566:	460d      	mov	r5, r1
 8007568:	e73a      	b.n	80073e0 <atan+0xc8>
 800756a:	4b35      	ldr	r3, [pc, #212]	@ (8007640 <atan+0x328>)
 800756c:	4e35      	ldr	r6, [pc, #212]	@ (8007644 <atan+0x32c>)
 800756e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007576:	f7f8 fea7 	bl	80002c8 <__aeabi_dsub>
 800757a:	4622      	mov	r2, r4
 800757c:	462b      	mov	r3, r5
 800757e:	f7f8 fea3 	bl	80002c8 <__aeabi_dsub>
 8007582:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007586:	4602      	mov	r2, r0
 8007588:	460b      	mov	r3, r1
 800758a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800758e:	f7f8 fe9b 	bl	80002c8 <__aeabi_dsub>
 8007592:	f1bb 0f00 	cmp.w	fp, #0
 8007596:	4604      	mov	r4, r0
 8007598:	460d      	mov	r5, r1
 800759a:	f6bf aedc 	bge.w	8007356 <atan+0x3e>
 800759e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80075a2:	461d      	mov	r5, r3
 80075a4:	e6d7      	b.n	8007356 <atan+0x3e>
 80075a6:	a51c      	add	r5, pc, #112	@ (adr r5, 8007618 <atan+0x300>)
 80075a8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80075ac:	e6d3      	b.n	8007356 <atan+0x3e>
 80075ae:	bf00      	nop
 80075b0:	54442d18 	.word	0x54442d18
 80075b4:	3ff921fb 	.word	0x3ff921fb
 80075b8:	8800759c 	.word	0x8800759c
 80075bc:	7e37e43c 	.word	0x7e37e43c
 80075c0:	e322da11 	.word	0xe322da11
 80075c4:	3f90ad3a 	.word	0x3f90ad3a
 80075c8:	24760deb 	.word	0x24760deb
 80075cc:	3fa97b4b 	.word	0x3fa97b4b
 80075d0:	a0d03d51 	.word	0xa0d03d51
 80075d4:	3fb10d66 	.word	0x3fb10d66
 80075d8:	c54c206e 	.word	0xc54c206e
 80075dc:	3fb745cd 	.word	0x3fb745cd
 80075e0:	920083ff 	.word	0x920083ff
 80075e4:	3fc24924 	.word	0x3fc24924
 80075e8:	5555550d 	.word	0x5555550d
 80075ec:	3fd55555 	.word	0x3fd55555
 80075f0:	2c6a6c2f 	.word	0x2c6a6c2f
 80075f4:	bfa2b444 	.word	0xbfa2b444
 80075f8:	52defd9a 	.word	0x52defd9a
 80075fc:	3fadde2d 	.word	0x3fadde2d
 8007600:	af749a6d 	.word	0xaf749a6d
 8007604:	3fb3b0f2 	.word	0x3fb3b0f2
 8007608:	fe231671 	.word	0xfe231671
 800760c:	3fbc71c6 	.word	0x3fbc71c6
 8007610:	9998ebc4 	.word	0x9998ebc4
 8007614:	3fc99999 	.word	0x3fc99999
 8007618:	54442d18 	.word	0x54442d18
 800761c:	bff921fb 	.word	0xbff921fb
 8007620:	440fffff 	.word	0x440fffff
 8007624:	7ff00000 	.word	0x7ff00000
 8007628:	3fdbffff 	.word	0x3fdbffff
 800762c:	3ff00000 	.word	0x3ff00000
 8007630:	3ff2ffff 	.word	0x3ff2ffff
 8007634:	40038000 	.word	0x40038000
 8007638:	3ff80000 	.word	0x3ff80000
 800763c:	bff00000 	.word	0xbff00000
 8007640:	080087b0 	.word	0x080087b0
 8007644:	080087d0 	.word	0x080087d0

08007648 <fabs>:
 8007648:	ec51 0b10 	vmov	r0, r1, d0
 800764c:	4602      	mov	r2, r0
 800764e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007652:	ec43 2b10 	vmov	d0, r2, r3
 8007656:	4770      	bx	lr

08007658 <finite>:
 8007658:	b082      	sub	sp, #8
 800765a:	ed8d 0b00 	vstr	d0, [sp]
 800765e:	9801      	ldr	r0, [sp, #4]
 8007660:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8007664:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8007668:	0fc0      	lsrs	r0, r0, #31
 800766a:	b002      	add	sp, #8
 800766c:	4770      	bx	lr
	...

08007670 <__ieee754_atan2>:
 8007670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007674:	ec57 6b11 	vmov	r6, r7, d1
 8007678:	4273      	negs	r3, r6
 800767a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 80077f8 <__ieee754_atan2+0x188>
 800767e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8007682:	4333      	orrs	r3, r6
 8007684:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007688:	4543      	cmp	r3, r8
 800768a:	ec51 0b10 	vmov	r0, r1, d0
 800768e:	4635      	mov	r5, r6
 8007690:	d809      	bhi.n	80076a6 <__ieee754_atan2+0x36>
 8007692:	4244      	negs	r4, r0
 8007694:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007698:	4304      	orrs	r4, r0
 800769a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800769e:	4544      	cmp	r4, r8
 80076a0:	468e      	mov	lr, r1
 80076a2:	4681      	mov	r9, r0
 80076a4:	d907      	bls.n	80076b6 <__ieee754_atan2+0x46>
 80076a6:	4632      	mov	r2, r6
 80076a8:	463b      	mov	r3, r7
 80076aa:	f7f8 fe0f 	bl	80002cc <__adddf3>
 80076ae:	ec41 0b10 	vmov	d0, r0, r1
 80076b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076b6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 80076ba:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 80076be:	4334      	orrs	r4, r6
 80076c0:	d103      	bne.n	80076ca <__ieee754_atan2+0x5a>
 80076c2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076c6:	f7ff be27 	b.w	8007318 <atan>
 80076ca:	17bc      	asrs	r4, r7, #30
 80076cc:	f004 0402 	and.w	r4, r4, #2
 80076d0:	ea53 0909 	orrs.w	r9, r3, r9
 80076d4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80076d8:	d107      	bne.n	80076ea <__ieee754_atan2+0x7a>
 80076da:	2c02      	cmp	r4, #2
 80076dc:	d05f      	beq.n	800779e <__ieee754_atan2+0x12e>
 80076de:	2c03      	cmp	r4, #3
 80076e0:	d1e5      	bne.n	80076ae <__ieee754_atan2+0x3e>
 80076e2:	a141      	add	r1, pc, #260	@ (adr r1, 80077e8 <__ieee754_atan2+0x178>)
 80076e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076e8:	e7e1      	b.n	80076ae <__ieee754_atan2+0x3e>
 80076ea:	4315      	orrs	r5, r2
 80076ec:	d106      	bne.n	80076fc <__ieee754_atan2+0x8c>
 80076ee:	f1be 0f00 	cmp.w	lr, #0
 80076f2:	da5f      	bge.n	80077b4 <__ieee754_atan2+0x144>
 80076f4:	a13e      	add	r1, pc, #248	@ (adr r1, 80077f0 <__ieee754_atan2+0x180>)
 80076f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076fa:	e7d8      	b.n	80076ae <__ieee754_atan2+0x3e>
 80076fc:	4542      	cmp	r2, r8
 80076fe:	d10f      	bne.n	8007720 <__ieee754_atan2+0xb0>
 8007700:	4293      	cmp	r3, r2
 8007702:	f104 34ff 	add.w	r4, r4, #4294967295
 8007706:	d107      	bne.n	8007718 <__ieee754_atan2+0xa8>
 8007708:	2c02      	cmp	r4, #2
 800770a:	d84c      	bhi.n	80077a6 <__ieee754_atan2+0x136>
 800770c:	4b34      	ldr	r3, [pc, #208]	@ (80077e0 <__ieee754_atan2+0x170>)
 800770e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007712:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007716:	e7ca      	b.n	80076ae <__ieee754_atan2+0x3e>
 8007718:	2c02      	cmp	r4, #2
 800771a:	d848      	bhi.n	80077ae <__ieee754_atan2+0x13e>
 800771c:	4b31      	ldr	r3, [pc, #196]	@ (80077e4 <__ieee754_atan2+0x174>)
 800771e:	e7f6      	b.n	800770e <__ieee754_atan2+0x9e>
 8007720:	4543      	cmp	r3, r8
 8007722:	d0e4      	beq.n	80076ee <__ieee754_atan2+0x7e>
 8007724:	1a9b      	subs	r3, r3, r2
 8007726:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800772a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800772e:	da1e      	bge.n	800776e <__ieee754_atan2+0xfe>
 8007730:	2f00      	cmp	r7, #0
 8007732:	da01      	bge.n	8007738 <__ieee754_atan2+0xc8>
 8007734:	323c      	adds	r2, #60	@ 0x3c
 8007736:	db1e      	blt.n	8007776 <__ieee754_atan2+0x106>
 8007738:	4632      	mov	r2, r6
 800773a:	463b      	mov	r3, r7
 800773c:	f7f9 f8a6 	bl	800088c <__aeabi_ddiv>
 8007740:	ec41 0b10 	vmov	d0, r0, r1
 8007744:	f7ff ff80 	bl	8007648 <fabs>
 8007748:	f7ff fde6 	bl	8007318 <atan>
 800774c:	ec51 0b10 	vmov	r0, r1, d0
 8007750:	2c01      	cmp	r4, #1
 8007752:	d013      	beq.n	800777c <__ieee754_atan2+0x10c>
 8007754:	2c02      	cmp	r4, #2
 8007756:	d015      	beq.n	8007784 <__ieee754_atan2+0x114>
 8007758:	2c00      	cmp	r4, #0
 800775a:	d0a8      	beq.n	80076ae <__ieee754_atan2+0x3e>
 800775c:	a318      	add	r3, pc, #96	@ (adr r3, 80077c0 <__ieee754_atan2+0x150>)
 800775e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007762:	f7f8 fdb1 	bl	80002c8 <__aeabi_dsub>
 8007766:	a318      	add	r3, pc, #96	@ (adr r3, 80077c8 <__ieee754_atan2+0x158>)
 8007768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800776c:	e014      	b.n	8007798 <__ieee754_atan2+0x128>
 800776e:	a118      	add	r1, pc, #96	@ (adr r1, 80077d0 <__ieee754_atan2+0x160>)
 8007770:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007774:	e7ec      	b.n	8007750 <__ieee754_atan2+0xe0>
 8007776:	2000      	movs	r0, #0
 8007778:	2100      	movs	r1, #0
 800777a:	e7e9      	b.n	8007750 <__ieee754_atan2+0xe0>
 800777c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007780:	4619      	mov	r1, r3
 8007782:	e794      	b.n	80076ae <__ieee754_atan2+0x3e>
 8007784:	a30e      	add	r3, pc, #56	@ (adr r3, 80077c0 <__ieee754_atan2+0x150>)
 8007786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778a:	f7f8 fd9d 	bl	80002c8 <__aeabi_dsub>
 800778e:	4602      	mov	r2, r0
 8007790:	460b      	mov	r3, r1
 8007792:	a10d      	add	r1, pc, #52	@ (adr r1, 80077c8 <__ieee754_atan2+0x158>)
 8007794:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007798:	f7f8 fd96 	bl	80002c8 <__aeabi_dsub>
 800779c:	e787      	b.n	80076ae <__ieee754_atan2+0x3e>
 800779e:	a10a      	add	r1, pc, #40	@ (adr r1, 80077c8 <__ieee754_atan2+0x158>)
 80077a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077a4:	e783      	b.n	80076ae <__ieee754_atan2+0x3e>
 80077a6:	a10c      	add	r1, pc, #48	@ (adr r1, 80077d8 <__ieee754_atan2+0x168>)
 80077a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077ac:	e77f      	b.n	80076ae <__ieee754_atan2+0x3e>
 80077ae:	2000      	movs	r0, #0
 80077b0:	2100      	movs	r1, #0
 80077b2:	e77c      	b.n	80076ae <__ieee754_atan2+0x3e>
 80077b4:	a106      	add	r1, pc, #24	@ (adr r1, 80077d0 <__ieee754_atan2+0x160>)
 80077b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077ba:	e778      	b.n	80076ae <__ieee754_atan2+0x3e>
 80077bc:	f3af 8000 	nop.w
 80077c0:	33145c07 	.word	0x33145c07
 80077c4:	3ca1a626 	.word	0x3ca1a626
 80077c8:	54442d18 	.word	0x54442d18
 80077cc:	400921fb 	.word	0x400921fb
 80077d0:	54442d18 	.word	0x54442d18
 80077d4:	3ff921fb 	.word	0x3ff921fb
 80077d8:	54442d18 	.word	0x54442d18
 80077dc:	3fe921fb 	.word	0x3fe921fb
 80077e0:	08008808 	.word	0x08008808
 80077e4:	080087f0 	.word	0x080087f0
 80077e8:	54442d18 	.word	0x54442d18
 80077ec:	c00921fb 	.word	0xc00921fb
 80077f0:	54442d18 	.word	0x54442d18
 80077f4:	bff921fb 	.word	0xbff921fb
 80077f8:	7ff00000 	.word	0x7ff00000
 80077fc:	00000000 	.word	0x00000000

08007800 <__ieee754_pow>:
 8007800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007804:	b091      	sub	sp, #68	@ 0x44
 8007806:	ed8d 1b00 	vstr	d1, [sp]
 800780a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800780e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8007812:	ea5a 0001 	orrs.w	r0, sl, r1
 8007816:	ec57 6b10 	vmov	r6, r7, d0
 800781a:	d113      	bne.n	8007844 <__ieee754_pow+0x44>
 800781c:	19b3      	adds	r3, r6, r6
 800781e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8007822:	4152      	adcs	r2, r2
 8007824:	4298      	cmp	r0, r3
 8007826:	4b98      	ldr	r3, [pc, #608]	@ (8007a88 <__ieee754_pow+0x288>)
 8007828:	4193      	sbcs	r3, r2
 800782a:	f080 84ea 	bcs.w	8008202 <__ieee754_pow+0xa02>
 800782e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007832:	4630      	mov	r0, r6
 8007834:	4639      	mov	r1, r7
 8007836:	f7f8 fd49 	bl	80002cc <__adddf3>
 800783a:	ec41 0b10 	vmov	d0, r0, r1
 800783e:	b011      	add	sp, #68	@ 0x44
 8007840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007844:	4a91      	ldr	r2, [pc, #580]	@ (8007a8c <__ieee754_pow+0x28c>)
 8007846:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800784a:	4590      	cmp	r8, r2
 800784c:	463d      	mov	r5, r7
 800784e:	4633      	mov	r3, r6
 8007850:	d806      	bhi.n	8007860 <__ieee754_pow+0x60>
 8007852:	d101      	bne.n	8007858 <__ieee754_pow+0x58>
 8007854:	2e00      	cmp	r6, #0
 8007856:	d1ea      	bne.n	800782e <__ieee754_pow+0x2e>
 8007858:	4592      	cmp	sl, r2
 800785a:	d801      	bhi.n	8007860 <__ieee754_pow+0x60>
 800785c:	d10e      	bne.n	800787c <__ieee754_pow+0x7c>
 800785e:	b169      	cbz	r1, 800787c <__ieee754_pow+0x7c>
 8007860:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8007864:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8007868:	431d      	orrs	r5, r3
 800786a:	d1e0      	bne.n	800782e <__ieee754_pow+0x2e>
 800786c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007870:	18db      	adds	r3, r3, r3
 8007872:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8007876:	4152      	adcs	r2, r2
 8007878:	429d      	cmp	r5, r3
 800787a:	e7d4      	b.n	8007826 <__ieee754_pow+0x26>
 800787c:	2d00      	cmp	r5, #0
 800787e:	46c3      	mov	fp, r8
 8007880:	da3a      	bge.n	80078f8 <__ieee754_pow+0xf8>
 8007882:	4a83      	ldr	r2, [pc, #524]	@ (8007a90 <__ieee754_pow+0x290>)
 8007884:	4592      	cmp	sl, r2
 8007886:	d84d      	bhi.n	8007924 <__ieee754_pow+0x124>
 8007888:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800788c:	4592      	cmp	sl, r2
 800788e:	f240 84c7 	bls.w	8008220 <__ieee754_pow+0xa20>
 8007892:	ea4f 522a 	mov.w	r2, sl, asr #20
 8007896:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800789a:	2a14      	cmp	r2, #20
 800789c:	dd0f      	ble.n	80078be <__ieee754_pow+0xbe>
 800789e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80078a2:	fa21 f402 	lsr.w	r4, r1, r2
 80078a6:	fa04 f202 	lsl.w	r2, r4, r2
 80078aa:	428a      	cmp	r2, r1
 80078ac:	f040 84b8 	bne.w	8008220 <__ieee754_pow+0xa20>
 80078b0:	f004 0401 	and.w	r4, r4, #1
 80078b4:	f1c4 0402 	rsb	r4, r4, #2
 80078b8:	2900      	cmp	r1, #0
 80078ba:	d158      	bne.n	800796e <__ieee754_pow+0x16e>
 80078bc:	e00e      	b.n	80078dc <__ieee754_pow+0xdc>
 80078be:	2900      	cmp	r1, #0
 80078c0:	d154      	bne.n	800796c <__ieee754_pow+0x16c>
 80078c2:	f1c2 0214 	rsb	r2, r2, #20
 80078c6:	fa4a f402 	asr.w	r4, sl, r2
 80078ca:	fa04 f202 	lsl.w	r2, r4, r2
 80078ce:	4552      	cmp	r2, sl
 80078d0:	f040 84a3 	bne.w	800821a <__ieee754_pow+0xa1a>
 80078d4:	f004 0401 	and.w	r4, r4, #1
 80078d8:	f1c4 0402 	rsb	r4, r4, #2
 80078dc:	4a6d      	ldr	r2, [pc, #436]	@ (8007a94 <__ieee754_pow+0x294>)
 80078de:	4592      	cmp	sl, r2
 80078e0:	d12e      	bne.n	8007940 <__ieee754_pow+0x140>
 80078e2:	f1b9 0f00 	cmp.w	r9, #0
 80078e6:	f280 8494 	bge.w	8008212 <__ieee754_pow+0xa12>
 80078ea:	496a      	ldr	r1, [pc, #424]	@ (8007a94 <__ieee754_pow+0x294>)
 80078ec:	4632      	mov	r2, r6
 80078ee:	463b      	mov	r3, r7
 80078f0:	2000      	movs	r0, #0
 80078f2:	f7f8 ffcb 	bl	800088c <__aeabi_ddiv>
 80078f6:	e7a0      	b.n	800783a <__ieee754_pow+0x3a>
 80078f8:	2400      	movs	r4, #0
 80078fa:	bbc1      	cbnz	r1, 800796e <__ieee754_pow+0x16e>
 80078fc:	4a63      	ldr	r2, [pc, #396]	@ (8007a8c <__ieee754_pow+0x28c>)
 80078fe:	4592      	cmp	sl, r2
 8007900:	d1ec      	bne.n	80078dc <__ieee754_pow+0xdc>
 8007902:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8007906:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800790a:	431a      	orrs	r2, r3
 800790c:	f000 8479 	beq.w	8008202 <__ieee754_pow+0xa02>
 8007910:	4b61      	ldr	r3, [pc, #388]	@ (8007a98 <__ieee754_pow+0x298>)
 8007912:	4598      	cmp	r8, r3
 8007914:	d908      	bls.n	8007928 <__ieee754_pow+0x128>
 8007916:	f1b9 0f00 	cmp.w	r9, #0
 800791a:	f2c0 8476 	blt.w	800820a <__ieee754_pow+0xa0a>
 800791e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007922:	e78a      	b.n	800783a <__ieee754_pow+0x3a>
 8007924:	2402      	movs	r4, #2
 8007926:	e7e8      	b.n	80078fa <__ieee754_pow+0xfa>
 8007928:	f1b9 0f00 	cmp.w	r9, #0
 800792c:	f04f 0000 	mov.w	r0, #0
 8007930:	f04f 0100 	mov.w	r1, #0
 8007934:	da81      	bge.n	800783a <__ieee754_pow+0x3a>
 8007936:	e9dd 0300 	ldrd	r0, r3, [sp]
 800793a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800793e:	e77c      	b.n	800783a <__ieee754_pow+0x3a>
 8007940:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8007944:	d106      	bne.n	8007954 <__ieee754_pow+0x154>
 8007946:	4632      	mov	r2, r6
 8007948:	463b      	mov	r3, r7
 800794a:	4630      	mov	r0, r6
 800794c:	4639      	mov	r1, r7
 800794e:	f7f8 fe73 	bl	8000638 <__aeabi_dmul>
 8007952:	e772      	b.n	800783a <__ieee754_pow+0x3a>
 8007954:	4a51      	ldr	r2, [pc, #324]	@ (8007a9c <__ieee754_pow+0x29c>)
 8007956:	4591      	cmp	r9, r2
 8007958:	d109      	bne.n	800796e <__ieee754_pow+0x16e>
 800795a:	2d00      	cmp	r5, #0
 800795c:	db07      	blt.n	800796e <__ieee754_pow+0x16e>
 800795e:	ec47 6b10 	vmov	d0, r6, r7
 8007962:	b011      	add	sp, #68	@ 0x44
 8007964:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007968:	f000 bd4a 	b.w	8008400 <__ieee754_sqrt>
 800796c:	2400      	movs	r4, #0
 800796e:	ec47 6b10 	vmov	d0, r6, r7
 8007972:	9302      	str	r3, [sp, #8]
 8007974:	f7ff fe68 	bl	8007648 <fabs>
 8007978:	9b02      	ldr	r3, [sp, #8]
 800797a:	ec51 0b10 	vmov	r0, r1, d0
 800797e:	bb53      	cbnz	r3, 80079d6 <__ieee754_pow+0x1d6>
 8007980:	4b44      	ldr	r3, [pc, #272]	@ (8007a94 <__ieee754_pow+0x294>)
 8007982:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8007986:	429a      	cmp	r2, r3
 8007988:	d002      	beq.n	8007990 <__ieee754_pow+0x190>
 800798a:	f1b8 0f00 	cmp.w	r8, #0
 800798e:	d122      	bne.n	80079d6 <__ieee754_pow+0x1d6>
 8007990:	f1b9 0f00 	cmp.w	r9, #0
 8007994:	da05      	bge.n	80079a2 <__ieee754_pow+0x1a2>
 8007996:	4602      	mov	r2, r0
 8007998:	460b      	mov	r3, r1
 800799a:	2000      	movs	r0, #0
 800799c:	493d      	ldr	r1, [pc, #244]	@ (8007a94 <__ieee754_pow+0x294>)
 800799e:	f7f8 ff75 	bl	800088c <__aeabi_ddiv>
 80079a2:	2d00      	cmp	r5, #0
 80079a4:	f6bf af49 	bge.w	800783a <__ieee754_pow+0x3a>
 80079a8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80079ac:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80079b0:	ea58 0804 	orrs.w	r8, r8, r4
 80079b4:	d108      	bne.n	80079c8 <__ieee754_pow+0x1c8>
 80079b6:	4602      	mov	r2, r0
 80079b8:	460b      	mov	r3, r1
 80079ba:	4610      	mov	r0, r2
 80079bc:	4619      	mov	r1, r3
 80079be:	f7f8 fc83 	bl	80002c8 <__aeabi_dsub>
 80079c2:	4602      	mov	r2, r0
 80079c4:	460b      	mov	r3, r1
 80079c6:	e794      	b.n	80078f2 <__ieee754_pow+0xf2>
 80079c8:	2c01      	cmp	r4, #1
 80079ca:	f47f af36 	bne.w	800783a <__ieee754_pow+0x3a>
 80079ce:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80079d2:	4619      	mov	r1, r3
 80079d4:	e731      	b.n	800783a <__ieee754_pow+0x3a>
 80079d6:	0feb      	lsrs	r3, r5, #31
 80079d8:	3b01      	subs	r3, #1
 80079da:	ea53 0204 	orrs.w	r2, r3, r4
 80079de:	d102      	bne.n	80079e6 <__ieee754_pow+0x1e6>
 80079e0:	4632      	mov	r2, r6
 80079e2:	463b      	mov	r3, r7
 80079e4:	e7e9      	b.n	80079ba <__ieee754_pow+0x1ba>
 80079e6:	3c01      	subs	r4, #1
 80079e8:	431c      	orrs	r4, r3
 80079ea:	d016      	beq.n	8007a1a <__ieee754_pow+0x21a>
 80079ec:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8007a78 <__ieee754_pow+0x278>
 80079f0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80079f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80079f8:	f240 8112 	bls.w	8007c20 <__ieee754_pow+0x420>
 80079fc:	4b28      	ldr	r3, [pc, #160]	@ (8007aa0 <__ieee754_pow+0x2a0>)
 80079fe:	459a      	cmp	sl, r3
 8007a00:	4b25      	ldr	r3, [pc, #148]	@ (8007a98 <__ieee754_pow+0x298>)
 8007a02:	d916      	bls.n	8007a32 <__ieee754_pow+0x232>
 8007a04:	4598      	cmp	r8, r3
 8007a06:	d80b      	bhi.n	8007a20 <__ieee754_pow+0x220>
 8007a08:	f1b9 0f00 	cmp.w	r9, #0
 8007a0c:	da0b      	bge.n	8007a26 <__ieee754_pow+0x226>
 8007a0e:	2000      	movs	r0, #0
 8007a10:	b011      	add	sp, #68	@ 0x44
 8007a12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a16:	f000 bceb 	b.w	80083f0 <__math_oflow>
 8007a1a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8007a80 <__ieee754_pow+0x280>
 8007a1e:	e7e7      	b.n	80079f0 <__ieee754_pow+0x1f0>
 8007a20:	f1b9 0f00 	cmp.w	r9, #0
 8007a24:	dcf3      	bgt.n	8007a0e <__ieee754_pow+0x20e>
 8007a26:	2000      	movs	r0, #0
 8007a28:	b011      	add	sp, #68	@ 0x44
 8007a2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a2e:	f000 bcd7 	b.w	80083e0 <__math_uflow>
 8007a32:	4598      	cmp	r8, r3
 8007a34:	d20c      	bcs.n	8007a50 <__ieee754_pow+0x250>
 8007a36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	f7f9 f86d 	bl	8000b1c <__aeabi_dcmplt>
 8007a42:	3800      	subs	r0, #0
 8007a44:	bf18      	it	ne
 8007a46:	2001      	movne	r0, #1
 8007a48:	f1b9 0f00 	cmp.w	r9, #0
 8007a4c:	daec      	bge.n	8007a28 <__ieee754_pow+0x228>
 8007a4e:	e7df      	b.n	8007a10 <__ieee754_pow+0x210>
 8007a50:	4b10      	ldr	r3, [pc, #64]	@ (8007a94 <__ieee754_pow+0x294>)
 8007a52:	4598      	cmp	r8, r3
 8007a54:	f04f 0200 	mov.w	r2, #0
 8007a58:	d924      	bls.n	8007aa4 <__ieee754_pow+0x2a4>
 8007a5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a5e:	2300      	movs	r3, #0
 8007a60:	f7f9 f85c 	bl	8000b1c <__aeabi_dcmplt>
 8007a64:	3800      	subs	r0, #0
 8007a66:	bf18      	it	ne
 8007a68:	2001      	movne	r0, #1
 8007a6a:	f1b9 0f00 	cmp.w	r9, #0
 8007a6e:	dccf      	bgt.n	8007a10 <__ieee754_pow+0x210>
 8007a70:	e7da      	b.n	8007a28 <__ieee754_pow+0x228>
 8007a72:	bf00      	nop
 8007a74:	f3af 8000 	nop.w
 8007a78:	00000000 	.word	0x00000000
 8007a7c:	3ff00000 	.word	0x3ff00000
 8007a80:	00000000 	.word	0x00000000
 8007a84:	bff00000 	.word	0xbff00000
 8007a88:	fff00000 	.word	0xfff00000
 8007a8c:	7ff00000 	.word	0x7ff00000
 8007a90:	433fffff 	.word	0x433fffff
 8007a94:	3ff00000 	.word	0x3ff00000
 8007a98:	3fefffff 	.word	0x3fefffff
 8007a9c:	3fe00000 	.word	0x3fe00000
 8007aa0:	43f00000 	.word	0x43f00000
 8007aa4:	4b5a      	ldr	r3, [pc, #360]	@ (8007c10 <__ieee754_pow+0x410>)
 8007aa6:	f7f8 fc0f 	bl	80002c8 <__aeabi_dsub>
 8007aaa:	a351      	add	r3, pc, #324	@ (adr r3, 8007bf0 <__ieee754_pow+0x3f0>)
 8007aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab0:	4604      	mov	r4, r0
 8007ab2:	460d      	mov	r5, r1
 8007ab4:	f7f8 fdc0 	bl	8000638 <__aeabi_dmul>
 8007ab8:	a34f      	add	r3, pc, #316	@ (adr r3, 8007bf8 <__ieee754_pow+0x3f8>)
 8007aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007abe:	4606      	mov	r6, r0
 8007ac0:	460f      	mov	r7, r1
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	4629      	mov	r1, r5
 8007ac6:	f7f8 fdb7 	bl	8000638 <__aeabi_dmul>
 8007aca:	4b52      	ldr	r3, [pc, #328]	@ (8007c14 <__ieee754_pow+0x414>)
 8007acc:	4682      	mov	sl, r0
 8007ace:	468b      	mov	fp, r1
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	4629      	mov	r1, r5
 8007ad6:	f7f8 fdaf 	bl	8000638 <__aeabi_dmul>
 8007ada:	4602      	mov	r2, r0
 8007adc:	460b      	mov	r3, r1
 8007ade:	a148      	add	r1, pc, #288	@ (adr r1, 8007c00 <__ieee754_pow+0x400>)
 8007ae0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ae4:	f7f8 fbf0 	bl	80002c8 <__aeabi_dsub>
 8007ae8:	4622      	mov	r2, r4
 8007aea:	462b      	mov	r3, r5
 8007aec:	f7f8 fda4 	bl	8000638 <__aeabi_dmul>
 8007af0:	4602      	mov	r2, r0
 8007af2:	460b      	mov	r3, r1
 8007af4:	2000      	movs	r0, #0
 8007af6:	4948      	ldr	r1, [pc, #288]	@ (8007c18 <__ieee754_pow+0x418>)
 8007af8:	f7f8 fbe6 	bl	80002c8 <__aeabi_dsub>
 8007afc:	4622      	mov	r2, r4
 8007afe:	4680      	mov	r8, r0
 8007b00:	4689      	mov	r9, r1
 8007b02:	462b      	mov	r3, r5
 8007b04:	4620      	mov	r0, r4
 8007b06:	4629      	mov	r1, r5
 8007b08:	f7f8 fd96 	bl	8000638 <__aeabi_dmul>
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	460b      	mov	r3, r1
 8007b10:	4640      	mov	r0, r8
 8007b12:	4649      	mov	r1, r9
 8007b14:	f7f8 fd90 	bl	8000638 <__aeabi_dmul>
 8007b18:	a33b      	add	r3, pc, #236	@ (adr r3, 8007c08 <__ieee754_pow+0x408>)
 8007b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1e:	f7f8 fd8b 	bl	8000638 <__aeabi_dmul>
 8007b22:	4602      	mov	r2, r0
 8007b24:	460b      	mov	r3, r1
 8007b26:	4650      	mov	r0, sl
 8007b28:	4659      	mov	r1, fp
 8007b2a:	f7f8 fbcd 	bl	80002c8 <__aeabi_dsub>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	460b      	mov	r3, r1
 8007b32:	4680      	mov	r8, r0
 8007b34:	4689      	mov	r9, r1
 8007b36:	4630      	mov	r0, r6
 8007b38:	4639      	mov	r1, r7
 8007b3a:	f7f8 fbc7 	bl	80002cc <__adddf3>
 8007b3e:	2400      	movs	r4, #0
 8007b40:	4632      	mov	r2, r6
 8007b42:	463b      	mov	r3, r7
 8007b44:	4620      	mov	r0, r4
 8007b46:	460d      	mov	r5, r1
 8007b48:	f7f8 fbbe 	bl	80002c8 <__aeabi_dsub>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	460b      	mov	r3, r1
 8007b50:	4640      	mov	r0, r8
 8007b52:	4649      	mov	r1, r9
 8007b54:	f7f8 fbb8 	bl	80002c8 <__aeabi_dsub>
 8007b58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b5c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007b60:	2300      	movs	r3, #0
 8007b62:	9304      	str	r3, [sp, #16]
 8007b64:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007b68:	4606      	mov	r6, r0
 8007b6a:	460f      	mov	r7, r1
 8007b6c:	4652      	mov	r2, sl
 8007b6e:	465b      	mov	r3, fp
 8007b70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b74:	f7f8 fba8 	bl	80002c8 <__aeabi_dsub>
 8007b78:	4622      	mov	r2, r4
 8007b7a:	462b      	mov	r3, r5
 8007b7c:	f7f8 fd5c 	bl	8000638 <__aeabi_dmul>
 8007b80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b84:	4680      	mov	r8, r0
 8007b86:	4689      	mov	r9, r1
 8007b88:	4630      	mov	r0, r6
 8007b8a:	4639      	mov	r1, r7
 8007b8c:	f7f8 fd54 	bl	8000638 <__aeabi_dmul>
 8007b90:	4602      	mov	r2, r0
 8007b92:	460b      	mov	r3, r1
 8007b94:	4640      	mov	r0, r8
 8007b96:	4649      	mov	r1, r9
 8007b98:	f7f8 fb98 	bl	80002cc <__adddf3>
 8007b9c:	4652      	mov	r2, sl
 8007b9e:	465b      	mov	r3, fp
 8007ba0:	4606      	mov	r6, r0
 8007ba2:	460f      	mov	r7, r1
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	4629      	mov	r1, r5
 8007ba8:	f7f8 fd46 	bl	8000638 <__aeabi_dmul>
 8007bac:	460b      	mov	r3, r1
 8007bae:	4602      	mov	r2, r0
 8007bb0:	4680      	mov	r8, r0
 8007bb2:	4689      	mov	r9, r1
 8007bb4:	4630      	mov	r0, r6
 8007bb6:	4639      	mov	r1, r7
 8007bb8:	f7f8 fb88 	bl	80002cc <__adddf3>
 8007bbc:	4b17      	ldr	r3, [pc, #92]	@ (8007c1c <__ieee754_pow+0x41c>)
 8007bbe:	4299      	cmp	r1, r3
 8007bc0:	4604      	mov	r4, r0
 8007bc2:	460d      	mov	r5, r1
 8007bc4:	468a      	mov	sl, r1
 8007bc6:	468b      	mov	fp, r1
 8007bc8:	f340 82ef 	ble.w	80081aa <__ieee754_pow+0x9aa>
 8007bcc:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8007bd0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8007bd4:	4303      	orrs	r3, r0
 8007bd6:	f000 81e8 	beq.w	8007faa <__ieee754_pow+0x7aa>
 8007bda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bde:	2200      	movs	r2, #0
 8007be0:	2300      	movs	r3, #0
 8007be2:	f7f8 ff9b 	bl	8000b1c <__aeabi_dcmplt>
 8007be6:	3800      	subs	r0, #0
 8007be8:	bf18      	it	ne
 8007bea:	2001      	movne	r0, #1
 8007bec:	e710      	b.n	8007a10 <__ieee754_pow+0x210>
 8007bee:	bf00      	nop
 8007bf0:	60000000 	.word	0x60000000
 8007bf4:	3ff71547 	.word	0x3ff71547
 8007bf8:	f85ddf44 	.word	0xf85ddf44
 8007bfc:	3e54ae0b 	.word	0x3e54ae0b
 8007c00:	55555555 	.word	0x55555555
 8007c04:	3fd55555 	.word	0x3fd55555
 8007c08:	652b82fe 	.word	0x652b82fe
 8007c0c:	3ff71547 	.word	0x3ff71547
 8007c10:	3ff00000 	.word	0x3ff00000
 8007c14:	3fd00000 	.word	0x3fd00000
 8007c18:	3fe00000 	.word	0x3fe00000
 8007c1c:	408fffff 	.word	0x408fffff
 8007c20:	4bd5      	ldr	r3, [pc, #852]	@ (8007f78 <__ieee754_pow+0x778>)
 8007c22:	402b      	ands	r3, r5
 8007c24:	2200      	movs	r2, #0
 8007c26:	b92b      	cbnz	r3, 8007c34 <__ieee754_pow+0x434>
 8007c28:	4bd4      	ldr	r3, [pc, #848]	@ (8007f7c <__ieee754_pow+0x77c>)
 8007c2a:	f7f8 fd05 	bl	8000638 <__aeabi_dmul>
 8007c2e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8007c32:	468b      	mov	fp, r1
 8007c34:	ea4f 532b 	mov.w	r3, fp, asr #20
 8007c38:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8007c3c:	4413      	add	r3, r2
 8007c3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c40:	4bcf      	ldr	r3, [pc, #828]	@ (8007f80 <__ieee754_pow+0x780>)
 8007c42:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8007c46:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8007c4a:	459b      	cmp	fp, r3
 8007c4c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007c50:	dd08      	ble.n	8007c64 <__ieee754_pow+0x464>
 8007c52:	4bcc      	ldr	r3, [pc, #816]	@ (8007f84 <__ieee754_pow+0x784>)
 8007c54:	459b      	cmp	fp, r3
 8007c56:	f340 81a5 	ble.w	8007fa4 <__ieee754_pow+0x7a4>
 8007c5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c60:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8007c64:	f04f 0a00 	mov.w	sl, #0
 8007c68:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8007c6c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c6e:	4bc6      	ldr	r3, [pc, #792]	@ (8007f88 <__ieee754_pow+0x788>)
 8007c70:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007c74:	ed93 7b00 	vldr	d7, [r3]
 8007c78:	4629      	mov	r1, r5
 8007c7a:	ec53 2b17 	vmov	r2, r3, d7
 8007c7e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007c82:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007c86:	f7f8 fb1f 	bl	80002c8 <__aeabi_dsub>
 8007c8a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007c8e:	4606      	mov	r6, r0
 8007c90:	460f      	mov	r7, r1
 8007c92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c96:	f7f8 fb19 	bl	80002cc <__adddf3>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	2000      	movs	r0, #0
 8007ca0:	49ba      	ldr	r1, [pc, #744]	@ (8007f8c <__ieee754_pow+0x78c>)
 8007ca2:	f7f8 fdf3 	bl	800088c <__aeabi_ddiv>
 8007ca6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8007caa:	4602      	mov	r2, r0
 8007cac:	460b      	mov	r3, r1
 8007cae:	4630      	mov	r0, r6
 8007cb0:	4639      	mov	r1, r7
 8007cb2:	f7f8 fcc1 	bl	8000638 <__aeabi_dmul>
 8007cb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007cba:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8007cbe:	106d      	asrs	r5, r5, #1
 8007cc0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8007cc4:	f04f 0b00 	mov.w	fp, #0
 8007cc8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8007ccc:	4661      	mov	r1, ip
 8007cce:	2200      	movs	r2, #0
 8007cd0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8007cd4:	4658      	mov	r0, fp
 8007cd6:	46e1      	mov	r9, ip
 8007cd8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8007cdc:	4614      	mov	r4, r2
 8007cde:	461d      	mov	r5, r3
 8007ce0:	f7f8 fcaa 	bl	8000638 <__aeabi_dmul>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	4630      	mov	r0, r6
 8007cea:	4639      	mov	r1, r7
 8007cec:	f7f8 faec 	bl	80002c8 <__aeabi_dsub>
 8007cf0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007cf4:	4606      	mov	r6, r0
 8007cf6:	460f      	mov	r7, r1
 8007cf8:	4620      	mov	r0, r4
 8007cfa:	4629      	mov	r1, r5
 8007cfc:	f7f8 fae4 	bl	80002c8 <__aeabi_dsub>
 8007d00:	4602      	mov	r2, r0
 8007d02:	460b      	mov	r3, r1
 8007d04:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007d08:	f7f8 fade 	bl	80002c8 <__aeabi_dsub>
 8007d0c:	465a      	mov	r2, fp
 8007d0e:	464b      	mov	r3, r9
 8007d10:	f7f8 fc92 	bl	8000638 <__aeabi_dmul>
 8007d14:	4602      	mov	r2, r0
 8007d16:	460b      	mov	r3, r1
 8007d18:	4630      	mov	r0, r6
 8007d1a:	4639      	mov	r1, r7
 8007d1c:	f7f8 fad4 	bl	80002c8 <__aeabi_dsub>
 8007d20:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007d24:	f7f8 fc88 	bl	8000638 <__aeabi_dmul>
 8007d28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d2c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007d30:	4610      	mov	r0, r2
 8007d32:	4619      	mov	r1, r3
 8007d34:	f7f8 fc80 	bl	8000638 <__aeabi_dmul>
 8007d38:	a37d      	add	r3, pc, #500	@ (adr r3, 8007f30 <__ieee754_pow+0x730>)
 8007d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3e:	4604      	mov	r4, r0
 8007d40:	460d      	mov	r5, r1
 8007d42:	f7f8 fc79 	bl	8000638 <__aeabi_dmul>
 8007d46:	a37c      	add	r3, pc, #496	@ (adr r3, 8007f38 <__ieee754_pow+0x738>)
 8007d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4c:	f7f8 fabe 	bl	80002cc <__adddf3>
 8007d50:	4622      	mov	r2, r4
 8007d52:	462b      	mov	r3, r5
 8007d54:	f7f8 fc70 	bl	8000638 <__aeabi_dmul>
 8007d58:	a379      	add	r3, pc, #484	@ (adr r3, 8007f40 <__ieee754_pow+0x740>)
 8007d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5e:	f7f8 fab5 	bl	80002cc <__adddf3>
 8007d62:	4622      	mov	r2, r4
 8007d64:	462b      	mov	r3, r5
 8007d66:	f7f8 fc67 	bl	8000638 <__aeabi_dmul>
 8007d6a:	a377      	add	r3, pc, #476	@ (adr r3, 8007f48 <__ieee754_pow+0x748>)
 8007d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d70:	f7f8 faac 	bl	80002cc <__adddf3>
 8007d74:	4622      	mov	r2, r4
 8007d76:	462b      	mov	r3, r5
 8007d78:	f7f8 fc5e 	bl	8000638 <__aeabi_dmul>
 8007d7c:	a374      	add	r3, pc, #464	@ (adr r3, 8007f50 <__ieee754_pow+0x750>)
 8007d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d82:	f7f8 faa3 	bl	80002cc <__adddf3>
 8007d86:	4622      	mov	r2, r4
 8007d88:	462b      	mov	r3, r5
 8007d8a:	f7f8 fc55 	bl	8000638 <__aeabi_dmul>
 8007d8e:	a372      	add	r3, pc, #456	@ (adr r3, 8007f58 <__ieee754_pow+0x758>)
 8007d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d94:	f7f8 fa9a 	bl	80002cc <__adddf3>
 8007d98:	4622      	mov	r2, r4
 8007d9a:	4606      	mov	r6, r0
 8007d9c:	460f      	mov	r7, r1
 8007d9e:	462b      	mov	r3, r5
 8007da0:	4620      	mov	r0, r4
 8007da2:	4629      	mov	r1, r5
 8007da4:	f7f8 fc48 	bl	8000638 <__aeabi_dmul>
 8007da8:	4602      	mov	r2, r0
 8007daa:	460b      	mov	r3, r1
 8007dac:	4630      	mov	r0, r6
 8007dae:	4639      	mov	r1, r7
 8007db0:	f7f8 fc42 	bl	8000638 <__aeabi_dmul>
 8007db4:	465a      	mov	r2, fp
 8007db6:	4604      	mov	r4, r0
 8007db8:	460d      	mov	r5, r1
 8007dba:	464b      	mov	r3, r9
 8007dbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dc0:	f7f8 fa84 	bl	80002cc <__adddf3>
 8007dc4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007dc8:	f7f8 fc36 	bl	8000638 <__aeabi_dmul>
 8007dcc:	4622      	mov	r2, r4
 8007dce:	462b      	mov	r3, r5
 8007dd0:	f7f8 fa7c 	bl	80002cc <__adddf3>
 8007dd4:	465a      	mov	r2, fp
 8007dd6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007dda:	464b      	mov	r3, r9
 8007ddc:	4658      	mov	r0, fp
 8007dde:	4649      	mov	r1, r9
 8007de0:	f7f8 fc2a 	bl	8000638 <__aeabi_dmul>
 8007de4:	4b6a      	ldr	r3, [pc, #424]	@ (8007f90 <__ieee754_pow+0x790>)
 8007de6:	2200      	movs	r2, #0
 8007de8:	4606      	mov	r6, r0
 8007dea:	460f      	mov	r7, r1
 8007dec:	f7f8 fa6e 	bl	80002cc <__adddf3>
 8007df0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007df4:	f7f8 fa6a 	bl	80002cc <__adddf3>
 8007df8:	46d8      	mov	r8, fp
 8007dfa:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8007dfe:	460d      	mov	r5, r1
 8007e00:	465a      	mov	r2, fp
 8007e02:	460b      	mov	r3, r1
 8007e04:	4640      	mov	r0, r8
 8007e06:	4649      	mov	r1, r9
 8007e08:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8007e0c:	f7f8 fc14 	bl	8000638 <__aeabi_dmul>
 8007e10:	465c      	mov	r4, fp
 8007e12:	4680      	mov	r8, r0
 8007e14:	4689      	mov	r9, r1
 8007e16:	4b5e      	ldr	r3, [pc, #376]	@ (8007f90 <__ieee754_pow+0x790>)
 8007e18:	2200      	movs	r2, #0
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	4629      	mov	r1, r5
 8007e1e:	f7f8 fa53 	bl	80002c8 <__aeabi_dsub>
 8007e22:	4632      	mov	r2, r6
 8007e24:	463b      	mov	r3, r7
 8007e26:	f7f8 fa4f 	bl	80002c8 <__aeabi_dsub>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007e32:	f7f8 fa49 	bl	80002c8 <__aeabi_dsub>
 8007e36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e3a:	f7f8 fbfd 	bl	8000638 <__aeabi_dmul>
 8007e3e:	4622      	mov	r2, r4
 8007e40:	4606      	mov	r6, r0
 8007e42:	460f      	mov	r7, r1
 8007e44:	462b      	mov	r3, r5
 8007e46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e4a:	f7f8 fbf5 	bl	8000638 <__aeabi_dmul>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	460b      	mov	r3, r1
 8007e52:	4630      	mov	r0, r6
 8007e54:	4639      	mov	r1, r7
 8007e56:	f7f8 fa39 	bl	80002cc <__adddf3>
 8007e5a:	4606      	mov	r6, r0
 8007e5c:	460f      	mov	r7, r1
 8007e5e:	4602      	mov	r2, r0
 8007e60:	460b      	mov	r3, r1
 8007e62:	4640      	mov	r0, r8
 8007e64:	4649      	mov	r1, r9
 8007e66:	f7f8 fa31 	bl	80002cc <__adddf3>
 8007e6a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8007e6e:	a33c      	add	r3, pc, #240	@ (adr r3, 8007f60 <__ieee754_pow+0x760>)
 8007e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e74:	4658      	mov	r0, fp
 8007e76:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8007e7a:	460d      	mov	r5, r1
 8007e7c:	f7f8 fbdc 	bl	8000638 <__aeabi_dmul>
 8007e80:	465c      	mov	r4, fp
 8007e82:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e86:	4642      	mov	r2, r8
 8007e88:	464b      	mov	r3, r9
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	4629      	mov	r1, r5
 8007e8e:	f7f8 fa1b 	bl	80002c8 <__aeabi_dsub>
 8007e92:	4602      	mov	r2, r0
 8007e94:	460b      	mov	r3, r1
 8007e96:	4630      	mov	r0, r6
 8007e98:	4639      	mov	r1, r7
 8007e9a:	f7f8 fa15 	bl	80002c8 <__aeabi_dsub>
 8007e9e:	a332      	add	r3, pc, #200	@ (adr r3, 8007f68 <__ieee754_pow+0x768>)
 8007ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea4:	f7f8 fbc8 	bl	8000638 <__aeabi_dmul>
 8007ea8:	a331      	add	r3, pc, #196	@ (adr r3, 8007f70 <__ieee754_pow+0x770>)
 8007eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eae:	4606      	mov	r6, r0
 8007eb0:	460f      	mov	r7, r1
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	4629      	mov	r1, r5
 8007eb6:	f7f8 fbbf 	bl	8000638 <__aeabi_dmul>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	4630      	mov	r0, r6
 8007ec0:	4639      	mov	r1, r7
 8007ec2:	f7f8 fa03 	bl	80002cc <__adddf3>
 8007ec6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007ec8:	4b32      	ldr	r3, [pc, #200]	@ (8007f94 <__ieee754_pow+0x794>)
 8007eca:	4413      	add	r3, r2
 8007ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed0:	f7f8 f9fc 	bl	80002cc <__adddf3>
 8007ed4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007ed8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007eda:	f7f8 fb43 	bl	8000564 <__aeabi_i2d>
 8007ede:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007ee0:	4b2d      	ldr	r3, [pc, #180]	@ (8007f98 <__ieee754_pow+0x798>)
 8007ee2:	4413      	add	r3, r2
 8007ee4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ee8:	4606      	mov	r6, r0
 8007eea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007eee:	460f      	mov	r7, r1
 8007ef0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ef4:	f7f8 f9ea 	bl	80002cc <__adddf3>
 8007ef8:	4642      	mov	r2, r8
 8007efa:	464b      	mov	r3, r9
 8007efc:	f7f8 f9e6 	bl	80002cc <__adddf3>
 8007f00:	4632      	mov	r2, r6
 8007f02:	463b      	mov	r3, r7
 8007f04:	f7f8 f9e2 	bl	80002cc <__adddf3>
 8007f08:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8007f0c:	4632      	mov	r2, r6
 8007f0e:	463b      	mov	r3, r7
 8007f10:	4658      	mov	r0, fp
 8007f12:	460d      	mov	r5, r1
 8007f14:	f7f8 f9d8 	bl	80002c8 <__aeabi_dsub>
 8007f18:	4642      	mov	r2, r8
 8007f1a:	464b      	mov	r3, r9
 8007f1c:	f7f8 f9d4 	bl	80002c8 <__aeabi_dsub>
 8007f20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f24:	f7f8 f9d0 	bl	80002c8 <__aeabi_dsub>
 8007f28:	465c      	mov	r4, fp
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	e036      	b.n	8007f9c <__ieee754_pow+0x79c>
 8007f2e:	bf00      	nop
 8007f30:	4a454eef 	.word	0x4a454eef
 8007f34:	3fca7e28 	.word	0x3fca7e28
 8007f38:	93c9db65 	.word	0x93c9db65
 8007f3c:	3fcd864a 	.word	0x3fcd864a
 8007f40:	a91d4101 	.word	0xa91d4101
 8007f44:	3fd17460 	.word	0x3fd17460
 8007f48:	518f264d 	.word	0x518f264d
 8007f4c:	3fd55555 	.word	0x3fd55555
 8007f50:	db6fabff 	.word	0xdb6fabff
 8007f54:	3fdb6db6 	.word	0x3fdb6db6
 8007f58:	33333303 	.word	0x33333303
 8007f5c:	3fe33333 	.word	0x3fe33333
 8007f60:	e0000000 	.word	0xe0000000
 8007f64:	3feec709 	.word	0x3feec709
 8007f68:	dc3a03fd 	.word	0xdc3a03fd
 8007f6c:	3feec709 	.word	0x3feec709
 8007f70:	145b01f5 	.word	0x145b01f5
 8007f74:	be3e2fe0 	.word	0xbe3e2fe0
 8007f78:	7ff00000 	.word	0x7ff00000
 8007f7c:	43400000 	.word	0x43400000
 8007f80:	0003988e 	.word	0x0003988e
 8007f84:	000bb679 	.word	0x000bb679
 8007f88:	08008840 	.word	0x08008840
 8007f8c:	3ff00000 	.word	0x3ff00000
 8007f90:	40080000 	.word	0x40080000
 8007f94:	08008820 	.word	0x08008820
 8007f98:	08008830 	.word	0x08008830
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007fa2:	e5d7      	b.n	8007b54 <__ieee754_pow+0x354>
 8007fa4:	f04f 0a01 	mov.w	sl, #1
 8007fa8:	e65e      	b.n	8007c68 <__ieee754_pow+0x468>
 8007faa:	a3b4      	add	r3, pc, #720	@ (adr r3, 800827c <__ieee754_pow+0xa7c>)
 8007fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb0:	4630      	mov	r0, r6
 8007fb2:	4639      	mov	r1, r7
 8007fb4:	f7f8 f98a 	bl	80002cc <__adddf3>
 8007fb8:	4642      	mov	r2, r8
 8007fba:	e9cd 0100 	strd	r0, r1, [sp]
 8007fbe:	464b      	mov	r3, r9
 8007fc0:	4620      	mov	r0, r4
 8007fc2:	4629      	mov	r1, r5
 8007fc4:	f7f8 f980 	bl	80002c8 <__aeabi_dsub>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	460b      	mov	r3, r1
 8007fcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007fd0:	f7f8 fdc2 	bl	8000b58 <__aeabi_dcmpgt>
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	f47f ae00 	bne.w	8007bda <__ieee754_pow+0x3da>
 8007fda:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8007fde:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007fe2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8007fe6:	fa43 fa0a 	asr.w	sl, r3, sl
 8007fea:	44da      	add	sl, fp
 8007fec:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8007ff0:	489d      	ldr	r0, [pc, #628]	@ (8008268 <__ieee754_pow+0xa68>)
 8007ff2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8007ff6:	4108      	asrs	r0, r1
 8007ff8:	ea00 030a 	and.w	r3, r0, sl
 8007ffc:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8008000:	f1c1 0114 	rsb	r1, r1, #20
 8008004:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8008008:	fa4a fa01 	asr.w	sl, sl, r1
 800800c:	f1bb 0f00 	cmp.w	fp, #0
 8008010:	4640      	mov	r0, r8
 8008012:	4649      	mov	r1, r9
 8008014:	f04f 0200 	mov.w	r2, #0
 8008018:	bfb8      	it	lt
 800801a:	f1ca 0a00 	rsblt	sl, sl, #0
 800801e:	f7f8 f953 	bl	80002c8 <__aeabi_dsub>
 8008022:	4680      	mov	r8, r0
 8008024:	4689      	mov	r9, r1
 8008026:	4632      	mov	r2, r6
 8008028:	463b      	mov	r3, r7
 800802a:	4640      	mov	r0, r8
 800802c:	4649      	mov	r1, r9
 800802e:	f7f8 f94d 	bl	80002cc <__adddf3>
 8008032:	2400      	movs	r4, #0
 8008034:	a37c      	add	r3, pc, #496	@ (adr r3, 8008228 <__ieee754_pow+0xa28>)
 8008036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803a:	4620      	mov	r0, r4
 800803c:	460d      	mov	r5, r1
 800803e:	f7f8 fafb 	bl	8000638 <__aeabi_dmul>
 8008042:	4642      	mov	r2, r8
 8008044:	e9cd 0100 	strd	r0, r1, [sp]
 8008048:	464b      	mov	r3, r9
 800804a:	4620      	mov	r0, r4
 800804c:	4629      	mov	r1, r5
 800804e:	f7f8 f93b 	bl	80002c8 <__aeabi_dsub>
 8008052:	4602      	mov	r2, r0
 8008054:	460b      	mov	r3, r1
 8008056:	4630      	mov	r0, r6
 8008058:	4639      	mov	r1, r7
 800805a:	f7f8 f935 	bl	80002c8 <__aeabi_dsub>
 800805e:	a374      	add	r3, pc, #464	@ (adr r3, 8008230 <__ieee754_pow+0xa30>)
 8008060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008064:	f7f8 fae8 	bl	8000638 <__aeabi_dmul>
 8008068:	a373      	add	r3, pc, #460	@ (adr r3, 8008238 <__ieee754_pow+0xa38>)
 800806a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806e:	4680      	mov	r8, r0
 8008070:	4689      	mov	r9, r1
 8008072:	4620      	mov	r0, r4
 8008074:	4629      	mov	r1, r5
 8008076:	f7f8 fadf 	bl	8000638 <__aeabi_dmul>
 800807a:	4602      	mov	r2, r0
 800807c:	460b      	mov	r3, r1
 800807e:	4640      	mov	r0, r8
 8008080:	4649      	mov	r1, r9
 8008082:	f7f8 f923 	bl	80002cc <__adddf3>
 8008086:	4604      	mov	r4, r0
 8008088:	460d      	mov	r5, r1
 800808a:	4602      	mov	r2, r0
 800808c:	460b      	mov	r3, r1
 800808e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008092:	f7f8 f91b 	bl	80002cc <__adddf3>
 8008096:	e9dd 2300 	ldrd	r2, r3, [sp]
 800809a:	4680      	mov	r8, r0
 800809c:	4689      	mov	r9, r1
 800809e:	f7f8 f913 	bl	80002c8 <__aeabi_dsub>
 80080a2:	4602      	mov	r2, r0
 80080a4:	460b      	mov	r3, r1
 80080a6:	4620      	mov	r0, r4
 80080a8:	4629      	mov	r1, r5
 80080aa:	f7f8 f90d 	bl	80002c8 <__aeabi_dsub>
 80080ae:	4642      	mov	r2, r8
 80080b0:	4606      	mov	r6, r0
 80080b2:	460f      	mov	r7, r1
 80080b4:	464b      	mov	r3, r9
 80080b6:	4640      	mov	r0, r8
 80080b8:	4649      	mov	r1, r9
 80080ba:	f7f8 fabd 	bl	8000638 <__aeabi_dmul>
 80080be:	a360      	add	r3, pc, #384	@ (adr r3, 8008240 <__ieee754_pow+0xa40>)
 80080c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c4:	4604      	mov	r4, r0
 80080c6:	460d      	mov	r5, r1
 80080c8:	f7f8 fab6 	bl	8000638 <__aeabi_dmul>
 80080cc:	a35e      	add	r3, pc, #376	@ (adr r3, 8008248 <__ieee754_pow+0xa48>)
 80080ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d2:	f7f8 f8f9 	bl	80002c8 <__aeabi_dsub>
 80080d6:	4622      	mov	r2, r4
 80080d8:	462b      	mov	r3, r5
 80080da:	f7f8 faad 	bl	8000638 <__aeabi_dmul>
 80080de:	a35c      	add	r3, pc, #368	@ (adr r3, 8008250 <__ieee754_pow+0xa50>)
 80080e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e4:	f7f8 f8f2 	bl	80002cc <__adddf3>
 80080e8:	4622      	mov	r2, r4
 80080ea:	462b      	mov	r3, r5
 80080ec:	f7f8 faa4 	bl	8000638 <__aeabi_dmul>
 80080f0:	a359      	add	r3, pc, #356	@ (adr r3, 8008258 <__ieee754_pow+0xa58>)
 80080f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f6:	f7f8 f8e7 	bl	80002c8 <__aeabi_dsub>
 80080fa:	4622      	mov	r2, r4
 80080fc:	462b      	mov	r3, r5
 80080fe:	f7f8 fa9b 	bl	8000638 <__aeabi_dmul>
 8008102:	a357      	add	r3, pc, #348	@ (adr r3, 8008260 <__ieee754_pow+0xa60>)
 8008104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008108:	f7f8 f8e0 	bl	80002cc <__adddf3>
 800810c:	4622      	mov	r2, r4
 800810e:	462b      	mov	r3, r5
 8008110:	f7f8 fa92 	bl	8000638 <__aeabi_dmul>
 8008114:	4602      	mov	r2, r0
 8008116:	460b      	mov	r3, r1
 8008118:	4640      	mov	r0, r8
 800811a:	4649      	mov	r1, r9
 800811c:	f7f8 f8d4 	bl	80002c8 <__aeabi_dsub>
 8008120:	4604      	mov	r4, r0
 8008122:	460d      	mov	r5, r1
 8008124:	4602      	mov	r2, r0
 8008126:	460b      	mov	r3, r1
 8008128:	4640      	mov	r0, r8
 800812a:	4649      	mov	r1, r9
 800812c:	f7f8 fa84 	bl	8000638 <__aeabi_dmul>
 8008130:	2200      	movs	r2, #0
 8008132:	e9cd 0100 	strd	r0, r1, [sp]
 8008136:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800813a:	4620      	mov	r0, r4
 800813c:	4629      	mov	r1, r5
 800813e:	f7f8 f8c3 	bl	80002c8 <__aeabi_dsub>
 8008142:	4602      	mov	r2, r0
 8008144:	460b      	mov	r3, r1
 8008146:	e9dd 0100 	ldrd	r0, r1, [sp]
 800814a:	f7f8 fb9f 	bl	800088c <__aeabi_ddiv>
 800814e:	4632      	mov	r2, r6
 8008150:	4604      	mov	r4, r0
 8008152:	460d      	mov	r5, r1
 8008154:	463b      	mov	r3, r7
 8008156:	4640      	mov	r0, r8
 8008158:	4649      	mov	r1, r9
 800815a:	f7f8 fa6d 	bl	8000638 <__aeabi_dmul>
 800815e:	4632      	mov	r2, r6
 8008160:	463b      	mov	r3, r7
 8008162:	f7f8 f8b3 	bl	80002cc <__adddf3>
 8008166:	4602      	mov	r2, r0
 8008168:	460b      	mov	r3, r1
 800816a:	4620      	mov	r0, r4
 800816c:	4629      	mov	r1, r5
 800816e:	f7f8 f8ab 	bl	80002c8 <__aeabi_dsub>
 8008172:	4642      	mov	r2, r8
 8008174:	464b      	mov	r3, r9
 8008176:	f7f8 f8a7 	bl	80002c8 <__aeabi_dsub>
 800817a:	460b      	mov	r3, r1
 800817c:	4602      	mov	r2, r0
 800817e:	493b      	ldr	r1, [pc, #236]	@ (800826c <__ieee754_pow+0xa6c>)
 8008180:	2000      	movs	r0, #0
 8008182:	f7f8 f8a1 	bl	80002c8 <__aeabi_dsub>
 8008186:	ec41 0b10 	vmov	d0, r0, r1
 800818a:	ee10 3a90 	vmov	r3, s1
 800818e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008192:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008196:	da30      	bge.n	80081fa <__ieee754_pow+0x9fa>
 8008198:	4650      	mov	r0, sl
 800819a:	f000 f875 	bl	8008288 <scalbn>
 800819e:	ec51 0b10 	vmov	r0, r1, d0
 80081a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081a6:	f7ff bbd2 	b.w	800794e <__ieee754_pow+0x14e>
 80081aa:	4c31      	ldr	r4, [pc, #196]	@ (8008270 <__ieee754_pow+0xa70>)
 80081ac:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80081b0:	42a3      	cmp	r3, r4
 80081b2:	d91a      	bls.n	80081ea <__ieee754_pow+0x9ea>
 80081b4:	4b2f      	ldr	r3, [pc, #188]	@ (8008274 <__ieee754_pow+0xa74>)
 80081b6:	440b      	add	r3, r1
 80081b8:	4303      	orrs	r3, r0
 80081ba:	d009      	beq.n	80081d0 <__ieee754_pow+0x9d0>
 80081bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081c0:	2200      	movs	r2, #0
 80081c2:	2300      	movs	r3, #0
 80081c4:	f7f8 fcaa 	bl	8000b1c <__aeabi_dcmplt>
 80081c8:	3800      	subs	r0, #0
 80081ca:	bf18      	it	ne
 80081cc:	2001      	movne	r0, #1
 80081ce:	e42b      	b.n	8007a28 <__ieee754_pow+0x228>
 80081d0:	4642      	mov	r2, r8
 80081d2:	464b      	mov	r3, r9
 80081d4:	f7f8 f878 	bl	80002c8 <__aeabi_dsub>
 80081d8:	4632      	mov	r2, r6
 80081da:	463b      	mov	r3, r7
 80081dc:	f7f8 fcb2 	bl	8000b44 <__aeabi_dcmpge>
 80081e0:	2800      	cmp	r0, #0
 80081e2:	d1eb      	bne.n	80081bc <__ieee754_pow+0x9bc>
 80081e4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8008284 <__ieee754_pow+0xa84>
 80081e8:	e6f7      	b.n	8007fda <__ieee754_pow+0x7da>
 80081ea:	469a      	mov	sl, r3
 80081ec:	4b22      	ldr	r3, [pc, #136]	@ (8008278 <__ieee754_pow+0xa78>)
 80081ee:	459a      	cmp	sl, r3
 80081f0:	f63f aef3 	bhi.w	8007fda <__ieee754_pow+0x7da>
 80081f4:	f8dd a010 	ldr.w	sl, [sp, #16]
 80081f8:	e715      	b.n	8008026 <__ieee754_pow+0x826>
 80081fa:	ec51 0b10 	vmov	r0, r1, d0
 80081fe:	4619      	mov	r1, r3
 8008200:	e7cf      	b.n	80081a2 <__ieee754_pow+0x9a2>
 8008202:	491a      	ldr	r1, [pc, #104]	@ (800826c <__ieee754_pow+0xa6c>)
 8008204:	2000      	movs	r0, #0
 8008206:	f7ff bb18 	b.w	800783a <__ieee754_pow+0x3a>
 800820a:	2000      	movs	r0, #0
 800820c:	2100      	movs	r1, #0
 800820e:	f7ff bb14 	b.w	800783a <__ieee754_pow+0x3a>
 8008212:	4630      	mov	r0, r6
 8008214:	4639      	mov	r1, r7
 8008216:	f7ff bb10 	b.w	800783a <__ieee754_pow+0x3a>
 800821a:	460c      	mov	r4, r1
 800821c:	f7ff bb5e 	b.w	80078dc <__ieee754_pow+0xdc>
 8008220:	2400      	movs	r4, #0
 8008222:	f7ff bb49 	b.w	80078b8 <__ieee754_pow+0xb8>
 8008226:	bf00      	nop
 8008228:	00000000 	.word	0x00000000
 800822c:	3fe62e43 	.word	0x3fe62e43
 8008230:	fefa39ef 	.word	0xfefa39ef
 8008234:	3fe62e42 	.word	0x3fe62e42
 8008238:	0ca86c39 	.word	0x0ca86c39
 800823c:	be205c61 	.word	0xbe205c61
 8008240:	72bea4d0 	.word	0x72bea4d0
 8008244:	3e663769 	.word	0x3e663769
 8008248:	c5d26bf1 	.word	0xc5d26bf1
 800824c:	3ebbbd41 	.word	0x3ebbbd41
 8008250:	af25de2c 	.word	0xaf25de2c
 8008254:	3f11566a 	.word	0x3f11566a
 8008258:	16bebd93 	.word	0x16bebd93
 800825c:	3f66c16c 	.word	0x3f66c16c
 8008260:	5555553e 	.word	0x5555553e
 8008264:	3fc55555 	.word	0x3fc55555
 8008268:	fff00000 	.word	0xfff00000
 800826c:	3ff00000 	.word	0x3ff00000
 8008270:	4090cbff 	.word	0x4090cbff
 8008274:	3f6f3400 	.word	0x3f6f3400
 8008278:	3fe00000 	.word	0x3fe00000
 800827c:	652b82fe 	.word	0x652b82fe
 8008280:	3c971547 	.word	0x3c971547
 8008284:	4090cc00 	.word	0x4090cc00

08008288 <scalbn>:
 8008288:	b570      	push	{r4, r5, r6, lr}
 800828a:	ec55 4b10 	vmov	r4, r5, d0
 800828e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008292:	4606      	mov	r6, r0
 8008294:	462b      	mov	r3, r5
 8008296:	b991      	cbnz	r1, 80082be <scalbn+0x36>
 8008298:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800829c:	4323      	orrs	r3, r4
 800829e:	d03d      	beq.n	800831c <scalbn+0x94>
 80082a0:	4b35      	ldr	r3, [pc, #212]	@ (8008378 <scalbn+0xf0>)
 80082a2:	4620      	mov	r0, r4
 80082a4:	4629      	mov	r1, r5
 80082a6:	2200      	movs	r2, #0
 80082a8:	f7f8 f9c6 	bl	8000638 <__aeabi_dmul>
 80082ac:	4b33      	ldr	r3, [pc, #204]	@ (800837c <scalbn+0xf4>)
 80082ae:	429e      	cmp	r6, r3
 80082b0:	4604      	mov	r4, r0
 80082b2:	460d      	mov	r5, r1
 80082b4:	da0f      	bge.n	80082d6 <scalbn+0x4e>
 80082b6:	a328      	add	r3, pc, #160	@ (adr r3, 8008358 <scalbn+0xd0>)
 80082b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082bc:	e01e      	b.n	80082fc <scalbn+0x74>
 80082be:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80082c2:	4291      	cmp	r1, r2
 80082c4:	d10b      	bne.n	80082de <scalbn+0x56>
 80082c6:	4622      	mov	r2, r4
 80082c8:	4620      	mov	r0, r4
 80082ca:	4629      	mov	r1, r5
 80082cc:	f7f7 fffe 	bl	80002cc <__adddf3>
 80082d0:	4604      	mov	r4, r0
 80082d2:	460d      	mov	r5, r1
 80082d4:	e022      	b.n	800831c <scalbn+0x94>
 80082d6:	460b      	mov	r3, r1
 80082d8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80082dc:	3936      	subs	r1, #54	@ 0x36
 80082de:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80082e2:	4296      	cmp	r6, r2
 80082e4:	dd0d      	ble.n	8008302 <scalbn+0x7a>
 80082e6:	2d00      	cmp	r5, #0
 80082e8:	a11d      	add	r1, pc, #116	@ (adr r1, 8008360 <scalbn+0xd8>)
 80082ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082ee:	da02      	bge.n	80082f6 <scalbn+0x6e>
 80082f0:	a11d      	add	r1, pc, #116	@ (adr r1, 8008368 <scalbn+0xe0>)
 80082f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082f6:	a31a      	add	r3, pc, #104	@ (adr r3, 8008360 <scalbn+0xd8>)
 80082f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fc:	f7f8 f99c 	bl	8000638 <__aeabi_dmul>
 8008300:	e7e6      	b.n	80082d0 <scalbn+0x48>
 8008302:	1872      	adds	r2, r6, r1
 8008304:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008308:	428a      	cmp	r2, r1
 800830a:	dcec      	bgt.n	80082e6 <scalbn+0x5e>
 800830c:	2a00      	cmp	r2, #0
 800830e:	dd08      	ble.n	8008322 <scalbn+0x9a>
 8008310:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008314:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008318:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800831c:	ec45 4b10 	vmov	d0, r4, r5
 8008320:	bd70      	pop	{r4, r5, r6, pc}
 8008322:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8008326:	da08      	bge.n	800833a <scalbn+0xb2>
 8008328:	2d00      	cmp	r5, #0
 800832a:	a10b      	add	r1, pc, #44	@ (adr r1, 8008358 <scalbn+0xd0>)
 800832c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008330:	dac1      	bge.n	80082b6 <scalbn+0x2e>
 8008332:	a10f      	add	r1, pc, #60	@ (adr r1, 8008370 <scalbn+0xe8>)
 8008334:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008338:	e7bd      	b.n	80082b6 <scalbn+0x2e>
 800833a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800833e:	3236      	adds	r2, #54	@ 0x36
 8008340:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008344:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008348:	4620      	mov	r0, r4
 800834a:	4b0d      	ldr	r3, [pc, #52]	@ (8008380 <scalbn+0xf8>)
 800834c:	4629      	mov	r1, r5
 800834e:	2200      	movs	r2, #0
 8008350:	e7d4      	b.n	80082fc <scalbn+0x74>
 8008352:	bf00      	nop
 8008354:	f3af 8000 	nop.w
 8008358:	c2f8f359 	.word	0xc2f8f359
 800835c:	01a56e1f 	.word	0x01a56e1f
 8008360:	8800759c 	.word	0x8800759c
 8008364:	7e37e43c 	.word	0x7e37e43c
 8008368:	8800759c 	.word	0x8800759c
 800836c:	fe37e43c 	.word	0xfe37e43c
 8008370:	c2f8f359 	.word	0xc2f8f359
 8008374:	81a56e1f 	.word	0x81a56e1f
 8008378:	43500000 	.word	0x43500000
 800837c:	ffff3cb0 	.word	0xffff3cb0
 8008380:	3c900000 	.word	0x3c900000

08008384 <with_errno>:
 8008384:	b510      	push	{r4, lr}
 8008386:	ed2d 8b02 	vpush	{d8}
 800838a:	eeb0 8a40 	vmov.f32	s16, s0
 800838e:	eef0 8a60 	vmov.f32	s17, s1
 8008392:	4604      	mov	r4, r0
 8008394:	f7fe fad4 	bl	8006940 <__errno>
 8008398:	eeb0 0a48 	vmov.f32	s0, s16
 800839c:	eef0 0a68 	vmov.f32	s1, s17
 80083a0:	ecbd 8b02 	vpop	{d8}
 80083a4:	6004      	str	r4, [r0, #0]
 80083a6:	bd10      	pop	{r4, pc}

080083a8 <xflow>:
 80083a8:	4603      	mov	r3, r0
 80083aa:	b507      	push	{r0, r1, r2, lr}
 80083ac:	ec51 0b10 	vmov	r0, r1, d0
 80083b0:	b183      	cbz	r3, 80083d4 <xflow+0x2c>
 80083b2:	4602      	mov	r2, r0
 80083b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80083b8:	e9cd 2300 	strd	r2, r3, [sp]
 80083bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083c0:	f7f8 f93a 	bl	8000638 <__aeabi_dmul>
 80083c4:	ec41 0b10 	vmov	d0, r0, r1
 80083c8:	2022      	movs	r0, #34	@ 0x22
 80083ca:	b003      	add	sp, #12
 80083cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80083d0:	f7ff bfd8 	b.w	8008384 <with_errno>
 80083d4:	4602      	mov	r2, r0
 80083d6:	460b      	mov	r3, r1
 80083d8:	e7ee      	b.n	80083b8 <xflow+0x10>
 80083da:	0000      	movs	r0, r0
 80083dc:	0000      	movs	r0, r0
	...

080083e0 <__math_uflow>:
 80083e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80083e8 <__math_uflow+0x8>
 80083e4:	f7ff bfe0 	b.w	80083a8 <xflow>
 80083e8:	00000000 	.word	0x00000000
 80083ec:	10000000 	.word	0x10000000

080083f0 <__math_oflow>:
 80083f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80083f8 <__math_oflow+0x8>
 80083f4:	f7ff bfd8 	b.w	80083a8 <xflow>
 80083f8:	00000000 	.word	0x00000000
 80083fc:	70000000 	.word	0x70000000

08008400 <__ieee754_sqrt>:
 8008400:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008404:	4a68      	ldr	r2, [pc, #416]	@ (80085a8 <__ieee754_sqrt+0x1a8>)
 8008406:	ec55 4b10 	vmov	r4, r5, d0
 800840a:	43aa      	bics	r2, r5
 800840c:	462b      	mov	r3, r5
 800840e:	4621      	mov	r1, r4
 8008410:	d110      	bne.n	8008434 <__ieee754_sqrt+0x34>
 8008412:	4622      	mov	r2, r4
 8008414:	4620      	mov	r0, r4
 8008416:	4629      	mov	r1, r5
 8008418:	f7f8 f90e 	bl	8000638 <__aeabi_dmul>
 800841c:	4602      	mov	r2, r0
 800841e:	460b      	mov	r3, r1
 8008420:	4620      	mov	r0, r4
 8008422:	4629      	mov	r1, r5
 8008424:	f7f7 ff52 	bl	80002cc <__adddf3>
 8008428:	4604      	mov	r4, r0
 800842a:	460d      	mov	r5, r1
 800842c:	ec45 4b10 	vmov	d0, r4, r5
 8008430:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008434:	2d00      	cmp	r5, #0
 8008436:	dc0e      	bgt.n	8008456 <__ieee754_sqrt+0x56>
 8008438:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800843c:	4322      	orrs	r2, r4
 800843e:	d0f5      	beq.n	800842c <__ieee754_sqrt+0x2c>
 8008440:	b19d      	cbz	r5, 800846a <__ieee754_sqrt+0x6a>
 8008442:	4622      	mov	r2, r4
 8008444:	4620      	mov	r0, r4
 8008446:	4629      	mov	r1, r5
 8008448:	f7f7 ff3e 	bl	80002c8 <__aeabi_dsub>
 800844c:	4602      	mov	r2, r0
 800844e:	460b      	mov	r3, r1
 8008450:	f7f8 fa1c 	bl	800088c <__aeabi_ddiv>
 8008454:	e7e8      	b.n	8008428 <__ieee754_sqrt+0x28>
 8008456:	152a      	asrs	r2, r5, #20
 8008458:	d115      	bne.n	8008486 <__ieee754_sqrt+0x86>
 800845a:	2000      	movs	r0, #0
 800845c:	e009      	b.n	8008472 <__ieee754_sqrt+0x72>
 800845e:	0acb      	lsrs	r3, r1, #11
 8008460:	3a15      	subs	r2, #21
 8008462:	0549      	lsls	r1, r1, #21
 8008464:	2b00      	cmp	r3, #0
 8008466:	d0fa      	beq.n	800845e <__ieee754_sqrt+0x5e>
 8008468:	e7f7      	b.n	800845a <__ieee754_sqrt+0x5a>
 800846a:	462a      	mov	r2, r5
 800846c:	e7fa      	b.n	8008464 <__ieee754_sqrt+0x64>
 800846e:	005b      	lsls	r3, r3, #1
 8008470:	3001      	adds	r0, #1
 8008472:	02dc      	lsls	r4, r3, #11
 8008474:	d5fb      	bpl.n	800846e <__ieee754_sqrt+0x6e>
 8008476:	1e44      	subs	r4, r0, #1
 8008478:	1b12      	subs	r2, r2, r4
 800847a:	f1c0 0420 	rsb	r4, r0, #32
 800847e:	fa21 f404 	lsr.w	r4, r1, r4
 8008482:	4323      	orrs	r3, r4
 8008484:	4081      	lsls	r1, r0
 8008486:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800848a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800848e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008492:	07d2      	lsls	r2, r2, #31
 8008494:	bf5c      	itt	pl
 8008496:	005b      	lslpl	r3, r3, #1
 8008498:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800849c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80084a0:	bf58      	it	pl
 80084a2:	0049      	lslpl	r1, r1, #1
 80084a4:	2600      	movs	r6, #0
 80084a6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80084aa:	106d      	asrs	r5, r5, #1
 80084ac:	0049      	lsls	r1, r1, #1
 80084ae:	2016      	movs	r0, #22
 80084b0:	4632      	mov	r2, r6
 80084b2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80084b6:	1917      	adds	r7, r2, r4
 80084b8:	429f      	cmp	r7, r3
 80084ba:	bfde      	ittt	le
 80084bc:	193a      	addle	r2, r7, r4
 80084be:	1bdb      	suble	r3, r3, r7
 80084c0:	1936      	addle	r6, r6, r4
 80084c2:	0fcf      	lsrs	r7, r1, #31
 80084c4:	3801      	subs	r0, #1
 80084c6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80084ca:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80084ce:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80084d2:	d1f0      	bne.n	80084b6 <__ieee754_sqrt+0xb6>
 80084d4:	4604      	mov	r4, r0
 80084d6:	2720      	movs	r7, #32
 80084d8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80084dc:	429a      	cmp	r2, r3
 80084de:	eb00 0e0c 	add.w	lr, r0, ip
 80084e2:	db02      	blt.n	80084ea <__ieee754_sqrt+0xea>
 80084e4:	d113      	bne.n	800850e <__ieee754_sqrt+0x10e>
 80084e6:	458e      	cmp	lr, r1
 80084e8:	d811      	bhi.n	800850e <__ieee754_sqrt+0x10e>
 80084ea:	f1be 0f00 	cmp.w	lr, #0
 80084ee:	eb0e 000c 	add.w	r0, lr, ip
 80084f2:	da42      	bge.n	800857a <__ieee754_sqrt+0x17a>
 80084f4:	2800      	cmp	r0, #0
 80084f6:	db40      	blt.n	800857a <__ieee754_sqrt+0x17a>
 80084f8:	f102 0801 	add.w	r8, r2, #1
 80084fc:	1a9b      	subs	r3, r3, r2
 80084fe:	458e      	cmp	lr, r1
 8008500:	bf88      	it	hi
 8008502:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008506:	eba1 010e 	sub.w	r1, r1, lr
 800850a:	4464      	add	r4, ip
 800850c:	4642      	mov	r2, r8
 800850e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8008512:	3f01      	subs	r7, #1
 8008514:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8008518:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800851c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008520:	d1dc      	bne.n	80084dc <__ieee754_sqrt+0xdc>
 8008522:	4319      	orrs	r1, r3
 8008524:	d01b      	beq.n	800855e <__ieee754_sqrt+0x15e>
 8008526:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80085ac <__ieee754_sqrt+0x1ac>
 800852a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80085b0 <__ieee754_sqrt+0x1b0>
 800852e:	e9da 0100 	ldrd	r0, r1, [sl]
 8008532:	e9db 2300 	ldrd	r2, r3, [fp]
 8008536:	f7f7 fec7 	bl	80002c8 <__aeabi_dsub>
 800853a:	e9da 8900 	ldrd	r8, r9, [sl]
 800853e:	4602      	mov	r2, r0
 8008540:	460b      	mov	r3, r1
 8008542:	4640      	mov	r0, r8
 8008544:	4649      	mov	r1, r9
 8008546:	f7f8 faf3 	bl	8000b30 <__aeabi_dcmple>
 800854a:	b140      	cbz	r0, 800855e <__ieee754_sqrt+0x15e>
 800854c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008550:	e9da 0100 	ldrd	r0, r1, [sl]
 8008554:	e9db 2300 	ldrd	r2, r3, [fp]
 8008558:	d111      	bne.n	800857e <__ieee754_sqrt+0x17e>
 800855a:	3601      	adds	r6, #1
 800855c:	463c      	mov	r4, r7
 800855e:	1072      	asrs	r2, r6, #1
 8008560:	0863      	lsrs	r3, r4, #1
 8008562:	07f1      	lsls	r1, r6, #31
 8008564:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8008568:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800856c:	bf48      	it	mi
 800856e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8008572:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8008576:	4618      	mov	r0, r3
 8008578:	e756      	b.n	8008428 <__ieee754_sqrt+0x28>
 800857a:	4690      	mov	r8, r2
 800857c:	e7be      	b.n	80084fc <__ieee754_sqrt+0xfc>
 800857e:	f7f7 fea5 	bl	80002cc <__adddf3>
 8008582:	e9da 8900 	ldrd	r8, r9, [sl]
 8008586:	4602      	mov	r2, r0
 8008588:	460b      	mov	r3, r1
 800858a:	4640      	mov	r0, r8
 800858c:	4649      	mov	r1, r9
 800858e:	f7f8 fac5 	bl	8000b1c <__aeabi_dcmplt>
 8008592:	b120      	cbz	r0, 800859e <__ieee754_sqrt+0x19e>
 8008594:	1ca0      	adds	r0, r4, #2
 8008596:	bf08      	it	eq
 8008598:	3601      	addeq	r6, #1
 800859a:	3402      	adds	r4, #2
 800859c:	e7df      	b.n	800855e <__ieee754_sqrt+0x15e>
 800859e:	1c63      	adds	r3, r4, #1
 80085a0:	f023 0401 	bic.w	r4, r3, #1
 80085a4:	e7db      	b.n	800855e <__ieee754_sqrt+0x15e>
 80085a6:	bf00      	nop
 80085a8:	7ff00000 	.word	0x7ff00000
 80085ac:	20000098 	.word	0x20000098
 80085b0:	20000090 	.word	0x20000090

080085b4 <_init>:
 80085b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085b6:	bf00      	nop
 80085b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ba:	bc08      	pop	{r3}
 80085bc:	469e      	mov	lr, r3
 80085be:	4770      	bx	lr

080085c0 <_fini>:
 80085c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085c2:	bf00      	nop
 80085c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085c6:	bc08      	pop	{r3}
 80085c8:	469e      	mov	lr, r3
 80085ca:	4770      	bx	lr
