
TrabalhoBarco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2ac  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  0800c480  0800c480  0000d480  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7e8  0800c7e8  0000e0a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7e8  0800c7e8  0000d7e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7f0  0800c7f0  0000e0a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7f0  0800c7f0  0000d7f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c7f4  0800c7f4  0000d7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a8  20000000  0800c7f8  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005388  200000a8  0800c8a0  0000e0a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005430  0800c8a0  0000e430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e0a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001da19  00000000  00000000  0000e0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004261  00000000  00000000  0002baf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001968  00000000  00000000  0002fd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013d8  00000000  00000000  000316c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024ddd  00000000  00000000  00032a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f28a  00000000  00000000  00057875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df4e9  00000000  00000000  00076aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00155fe8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007700  00000000  00000000  0015602c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0015d72c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a8 	.word	0x200000a8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c464 	.word	0x0800c464

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000ac 	.word	0x200000ac
 800020c:	0800c464 	.word	0x0800c464

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b96a 	b.w	8000f64 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	460c      	mov	r4, r1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d14e      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb4:	4694      	mov	ip, r2
 8000cb6:	458c      	cmp	ip, r1
 8000cb8:	4686      	mov	lr, r0
 8000cba:	fab2 f282 	clz	r2, r2
 8000cbe:	d962      	bls.n	8000d86 <__udivmoddi4+0xde>
 8000cc0:	b14a      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc2:	f1c2 0320 	rsb	r3, r2, #32
 8000cc6:	4091      	lsls	r1, r2
 8000cc8:	fa20 f303 	lsr.w	r3, r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	4319      	orrs	r1, r3
 8000cd2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cda:	fa1f f68c 	uxth.w	r6, ip
 8000cde:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ce2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb04 f106 	mul.w	r1, r4, r6
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cfe:	f080 8112 	bcs.w	8000f26 <__udivmoddi4+0x27e>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 810f 	bls.w	8000f26 <__udivmoddi4+0x27e>
 8000d08:	3c02      	subs	r4, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	fa1f f38e 	uxth.w	r3, lr
 8000d12:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d16:	fb07 1110 	mls	r1, r7, r0, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb00 f606 	mul.w	r6, r0, r6
 8000d22:	429e      	cmp	r6, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x94>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d2e:	f080 80fc 	bcs.w	8000f2a <__udivmoddi4+0x282>
 8000d32:	429e      	cmp	r6, r3
 8000d34:	f240 80f9 	bls.w	8000f2a <__udivmoddi4+0x282>
 8000d38:	4463      	add	r3, ip
 8000d3a:	3802      	subs	r0, #2
 8000d3c:	1b9b      	subs	r3, r3, r6
 8000d3e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d42:	2100      	movs	r1, #0
 8000d44:	b11d      	cbz	r5, 8000d4e <__udivmoddi4+0xa6>
 8000d46:	40d3      	lsrs	r3, r2
 8000d48:	2200      	movs	r2, #0
 8000d4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d905      	bls.n	8000d62 <__udivmoddi4+0xba>
 8000d56:	b10d      	cbz	r5, 8000d5c <__udivmoddi4+0xb4>
 8000d58:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e7f5      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000d62:	fab3 f183 	clz	r1, r3
 8000d66:	2900      	cmp	r1, #0
 8000d68:	d146      	bne.n	8000df8 <__udivmoddi4+0x150>
 8000d6a:	42a3      	cmp	r3, r4
 8000d6c:	d302      	bcc.n	8000d74 <__udivmoddi4+0xcc>
 8000d6e:	4290      	cmp	r0, r2
 8000d70:	f0c0 80f0 	bcc.w	8000f54 <__udivmoddi4+0x2ac>
 8000d74:	1a86      	subs	r6, r0, r2
 8000d76:	eb64 0303 	sbc.w	r3, r4, r3
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	2d00      	cmp	r5, #0
 8000d7e:	d0e6      	beq.n	8000d4e <__udivmoddi4+0xa6>
 8000d80:	e9c5 6300 	strd	r6, r3, [r5]
 8000d84:	e7e3      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	f040 8090 	bne.w	8000eac <__udivmoddi4+0x204>
 8000d8c:	eba1 040c 	sub.w	r4, r1, ip
 8000d90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d94:	fa1f f78c 	uxth.w	r7, ip
 8000d98:	2101      	movs	r1, #1
 8000d9a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb08 4416 	mls	r4, r8, r6, r4
 8000da6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000daa:	fb07 f006 	mul.w	r0, r7, r6
 8000dae:	4298      	cmp	r0, r3
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x11c>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x11a>
 8000dbc:	4298      	cmp	r0, r3
 8000dbe:	f200 80cd 	bhi.w	8000f5c <__udivmoddi4+0x2b4>
 8000dc2:	4626      	mov	r6, r4
 8000dc4:	1a1c      	subs	r4, r3, r0
 8000dc6:	fa1f f38e 	uxth.w	r3, lr
 8000dca:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dce:	fb08 4410 	mls	r4, r8, r0, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb00 f707 	mul.w	r7, r0, r7
 8000dda:	429f      	cmp	r7, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x148>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x146>
 8000de8:	429f      	cmp	r7, r3
 8000dea:	f200 80b0 	bhi.w	8000f4e <__udivmoddi4+0x2a6>
 8000dee:	4620      	mov	r0, r4
 8000df0:	1bdb      	subs	r3, r3, r7
 8000df2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df6:	e7a5      	b.n	8000d44 <__udivmoddi4+0x9c>
 8000df8:	f1c1 0620 	rsb	r6, r1, #32
 8000dfc:	408b      	lsls	r3, r1
 8000dfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000e02:	431f      	orrs	r7, r3
 8000e04:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e08:	fa04 f301 	lsl.w	r3, r4, r1
 8000e0c:	ea43 030c 	orr.w	r3, r3, ip
 8000e10:	40f4      	lsrs	r4, r6
 8000e12:	fa00 f801 	lsl.w	r8, r0, r1
 8000e16:	0c38      	lsrs	r0, r7, #16
 8000e18:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e1c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e20:	fa1f fc87 	uxth.w	ip, r7
 8000e24:	fb00 441e 	mls	r4, r0, lr, r4
 8000e28:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e2c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e30:	45a1      	cmp	r9, r4
 8000e32:	fa02 f201 	lsl.w	r2, r2, r1
 8000e36:	d90a      	bls.n	8000e4e <__udivmoddi4+0x1a6>
 8000e38:	193c      	adds	r4, r7, r4
 8000e3a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e3e:	f080 8084 	bcs.w	8000f4a <__udivmoddi4+0x2a2>
 8000e42:	45a1      	cmp	r9, r4
 8000e44:	f240 8081 	bls.w	8000f4a <__udivmoddi4+0x2a2>
 8000e48:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e4c:	443c      	add	r4, r7
 8000e4e:	eba4 0409 	sub.w	r4, r4, r9
 8000e52:	fa1f f983 	uxth.w	r9, r3
 8000e56:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e5a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e5e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e62:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e66:	45a4      	cmp	ip, r4
 8000e68:	d907      	bls.n	8000e7a <__udivmoddi4+0x1d2>
 8000e6a:	193c      	adds	r4, r7, r4
 8000e6c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e70:	d267      	bcs.n	8000f42 <__udivmoddi4+0x29a>
 8000e72:	45a4      	cmp	ip, r4
 8000e74:	d965      	bls.n	8000f42 <__udivmoddi4+0x29a>
 8000e76:	3b02      	subs	r3, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e7e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e82:	eba4 040c 	sub.w	r4, r4, ip
 8000e86:	429c      	cmp	r4, r3
 8000e88:	46ce      	mov	lr, r9
 8000e8a:	469c      	mov	ip, r3
 8000e8c:	d351      	bcc.n	8000f32 <__udivmoddi4+0x28a>
 8000e8e:	d04e      	beq.n	8000f2e <__udivmoddi4+0x286>
 8000e90:	b155      	cbz	r5, 8000ea8 <__udivmoddi4+0x200>
 8000e92:	ebb8 030e 	subs.w	r3, r8, lr
 8000e96:	eb64 040c 	sbc.w	r4, r4, ip
 8000e9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e9e:	40cb      	lsrs	r3, r1
 8000ea0:	431e      	orrs	r6, r3
 8000ea2:	40cc      	lsrs	r4, r1
 8000ea4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	e750      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000eac:	f1c2 0320 	rsb	r3, r2, #32
 8000eb0:	fa20 f103 	lsr.w	r1, r0, r3
 8000eb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eb8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ebc:	4094      	lsls	r4, r2
 8000ebe:	430c      	orrs	r4, r1
 8000ec0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ec4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ec8:	fa1f f78c 	uxth.w	r7, ip
 8000ecc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ed0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ed4:	0c23      	lsrs	r3, r4, #16
 8000ed6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eda:	fb00 f107 	mul.w	r1, r0, r7
 8000ede:	4299      	cmp	r1, r3
 8000ee0:	d908      	bls.n	8000ef4 <__udivmoddi4+0x24c>
 8000ee2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ee6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eea:	d22c      	bcs.n	8000f46 <__udivmoddi4+0x29e>
 8000eec:	4299      	cmp	r1, r3
 8000eee:	d92a      	bls.n	8000f46 <__udivmoddi4+0x29e>
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	4463      	add	r3, ip
 8000ef4:	1a5b      	subs	r3, r3, r1
 8000ef6:	b2a4      	uxth	r4, r4
 8000ef8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000efc:	fb08 3311 	mls	r3, r8, r1, r3
 8000f00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f04:	fb01 f307 	mul.w	r3, r1, r7
 8000f08:	42a3      	cmp	r3, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x276>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f14:	d213      	bcs.n	8000f3e <__udivmoddi4+0x296>
 8000f16:	42a3      	cmp	r3, r4
 8000f18:	d911      	bls.n	8000f3e <__udivmoddi4+0x296>
 8000f1a:	3902      	subs	r1, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	1ae4      	subs	r4, r4, r3
 8000f20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f24:	e739      	b.n	8000d9a <__udivmoddi4+0xf2>
 8000f26:	4604      	mov	r4, r0
 8000f28:	e6f0      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f2a:	4608      	mov	r0, r1
 8000f2c:	e706      	b.n	8000d3c <__udivmoddi4+0x94>
 8000f2e:	45c8      	cmp	r8, r9
 8000f30:	d2ae      	bcs.n	8000e90 <__udivmoddi4+0x1e8>
 8000f32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f3a:	3801      	subs	r0, #1
 8000f3c:	e7a8      	b.n	8000e90 <__udivmoddi4+0x1e8>
 8000f3e:	4631      	mov	r1, r6
 8000f40:	e7ed      	b.n	8000f1e <__udivmoddi4+0x276>
 8000f42:	4603      	mov	r3, r0
 8000f44:	e799      	b.n	8000e7a <__udivmoddi4+0x1d2>
 8000f46:	4630      	mov	r0, r6
 8000f48:	e7d4      	b.n	8000ef4 <__udivmoddi4+0x24c>
 8000f4a:	46d6      	mov	lr, sl
 8000f4c:	e77f      	b.n	8000e4e <__udivmoddi4+0x1a6>
 8000f4e:	4463      	add	r3, ip
 8000f50:	3802      	subs	r0, #2
 8000f52:	e74d      	b.n	8000df0 <__udivmoddi4+0x148>
 8000f54:	4606      	mov	r6, r0
 8000f56:	4623      	mov	r3, r4
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e70f      	b.n	8000d7c <__udivmoddi4+0xd4>
 8000f5c:	3e02      	subs	r6, #2
 8000f5e:	4463      	add	r3, ip
 8000f60:	e730      	b.n	8000dc4 <__udivmoddi4+0x11c>
 8000f62:	bf00      	nop

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <HMC5883L_Init>:
#define HMC5883L_4_NUCLEO_64_H_

#include "Drivers/HMC5883L_4_NUCLEO_64.h"
#include "main.h"

void HMC5883L_Init(I2C_HandleTypeDef huart){
 8000f68:	b084      	sub	sp, #16
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b086      	sub	sp, #24
 8000f6e:	af04      	add	r7, sp, #16
 8000f70:	f107 0c10 	add.w	ip, r7, #16
 8000f74:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	 uint8_t data = (COMPASS_SAMPLE8 | COMPASS_RATE15 | COMPASS_MEASURE_NORMAL);
 8000f78:	2370      	movs	r3, #112	@ 0x70
 8000f7a:	71fb      	strb	r3, [r7, #7]
	 uint8_t ScaleMode = COMPASS_SCALE_130;
 8000f7c:	2320      	movs	r3, #32
 8000f7e:	71bb      	strb	r3, [r7, #6]
	 uint8_t Measure = COMPASS_CONTINUOUS;
 8000f80:	2300      	movs	r3, #0
 8000f82:	717b      	strb	r3, [r7, #5]
	 HAL_I2C_Mem_Write(&huart, HMC5883L_ADDRESS, COMPASS_CONFIG_REGISTER_A, 1, &data , 1, 100);
 8000f84:	2364      	movs	r3, #100	@ 0x64
 8000f86:	9302      	str	r3, [sp, #8]
 8000f88:	2301      	movs	r3, #1
 8000f8a:	9301      	str	r3, [sp, #4]
 8000f8c:	1dfb      	adds	r3, r7, #7
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	2301      	movs	r3, #1
 8000f92:	2200      	movs	r2, #0
 8000f94:	213d      	movs	r1, #61	@ 0x3d
 8000f96:	f107 0010 	add.w	r0, r7, #16
 8000f9a:	f002 ffa9 	bl	8003ef0 <HAL_I2C_Mem_Write>
	 HAL_I2C_Mem_Write(&huart, HMC5883L_ADDRESS, COMPASS_CONFIG_REGISTER_B, 1, &ScaleMode , 1, 100);
 8000f9e:	2364      	movs	r3, #100	@ 0x64
 8000fa0:	9302      	str	r3, [sp, #8]
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	9301      	str	r3, [sp, #4]
 8000fa6:	1dbb      	adds	r3, r7, #6
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	2301      	movs	r3, #1
 8000fac:	2201      	movs	r2, #1
 8000fae:	213d      	movs	r1, #61	@ 0x3d
 8000fb0:	f107 0010 	add.w	r0, r7, #16
 8000fb4:	f002 ff9c 	bl	8003ef0 <HAL_I2C_Mem_Write>
	 HAL_I2C_Mem_Write(&huart, HMC5883L_ADDRESS, COMPASS_MODE_REGISTER, 1, &Measure , 1, 100);
 8000fb8:	2364      	movs	r3, #100	@ 0x64
 8000fba:	9302      	str	r3, [sp, #8]
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	9301      	str	r3, [sp, #4]
 8000fc0:	1d7b      	adds	r3, r7, #5
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	213d      	movs	r1, #61	@ 0x3d
 8000fca:	f107 0010 	add.w	r0, r7, #16
 8000fce:	f002 ff8f 	bl	8003ef0 <HAL_I2C_Mem_Write>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fdc:	b004      	add	sp, #16
 8000fde:	4770      	bx	lr

08000fe0 <meanData>:

int16_t meanData(int16_t* buffer) {
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	int16_t mean = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	81fb      	strh	r3, [r7, #14]
	for (int i=0;i<8;i++){
 8000fec:	2300      	movs	r3, #0
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	e00d      	b.n	800100e <meanData+0x2e>
		mean += buffer[i];
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	89fb      	ldrh	r3, [r7, #14]
 8001002:	4413      	add	r3, r2
 8001004:	b29b      	uxth	r3, r3
 8001006:	81fb      	strh	r3, [r7, #14]
	for (int i=0;i<8;i++){
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	3301      	adds	r3, #1
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	2b07      	cmp	r3, #7
 8001012:	ddee      	ble.n	8000ff2 <meanData+0x12>
	}
	return (mean / 8);
 8001014:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001018:	2b00      	cmp	r3, #0
 800101a:	da00      	bge.n	800101e <meanData+0x3e>
 800101c:	3307      	adds	r3, #7
 800101e:	10db      	asrs	r3, r3, #3
 8001020:	b21b      	sxth	r3, r3
}
 8001022:	4618      	mov	r0, r3
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <FilterData>:

int16_t FilterData(int16_t* buffer) {
 800102e:	b580      	push	{r7, lr}
 8001030:	b084      	sub	sp, #16
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
	uint8_t min = 200;
 8001036:	23c8      	movs	r3, #200	@ 0xc8
 8001038:	72fb      	strb	r3, [r7, #11]
	for (int i=1;i<8;i++){
 800103a:	2301      	movs	r3, #1
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	e028      	b.n	8001092 <FilterData+0x64>
		if((abs(buffer[i]-buffer[i-1])) > min ){
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	4413      	add	r3, r2
 8001048:	f9b3 3000 	ldrsh.w	r3, [r3]
 800104c:	4619      	mov	r1, r3
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8001054:	3b01      	subs	r3, #1
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	4413      	add	r3, r2
 800105c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001060:	1acb      	subs	r3, r1, r3
 8001062:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001066:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800106a:	7afb      	ldrb	r3, [r7, #11]
 800106c:	429a      	cmp	r2, r3
 800106e:	dd0d      	ble.n	800108c <FilterData+0x5e>
			buffer[i]=buffer[i-1];
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8001076:	3b01      	subs	r3, #1
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	441a      	add	r2, r3
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	440b      	add	r3, r1
 8001086:	f9b2 2000 	ldrsh.w	r2, [r2]
 800108a:	801a      	strh	r2, [r3, #0]
	for (int i=1;i<8;i++){
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	3301      	adds	r3, #1
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2b07      	cmp	r3, #7
 8001096:	ddd3      	ble.n	8001040 <FilterData+0x12>
		}
	}
	return meanData(buffer);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ffa1 	bl	8000fe0 <meanData>
 800109e:	4603      	mov	r3, r0
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <CompassReadAxis>:

void CompassReadAxis (I2C_HandleTypeDef huart, int16_t* buffer_t_x, int16_t* buffer_t_y){
 80010a8:	b084      	sub	sp, #16
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b088      	sub	sp, #32
 80010ae:	af04      	add	r7, sp, #16
 80010b0:	f107 0c18 	add.w	ip, r7, #24
 80010b4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t buffer[6];
	for (int i=0;i<8;i++){
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	e034      	b.n	8001128 <CompassReadAxis+0x80>
		HAL_I2C_Mem_Read(&huart, HMC5883L_ADDRESS, Data_Output_X_MSB, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&buffer, 6, 100);
 80010be:	2364      	movs	r3, #100	@ 0x64
 80010c0:	9302      	str	r3, [sp, #8]
 80010c2:	2306      	movs	r3, #6
 80010c4:	9301      	str	r3, [sp, #4]
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	2301      	movs	r3, #1
 80010cc:	2203      	movs	r2, #3
 80010ce:	213d      	movs	r1, #61	@ 0x3d
 80010d0:	f107 0018 	add.w	r0, r7, #24
 80010d4:	f003 f806 	bl	80040e4 <HAL_I2C_Mem_Read>
		buffer_t_x[i] = ((buffer[0] << 8) | buffer[1]);
 80010d8:	793b      	ldrb	r3, [r7, #4]
 80010da:	021b      	lsls	r3, r3, #8
 80010dc:	b219      	sxth	r1, r3
 80010de:	797b      	ldrb	r3, [r7, #5]
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80010e8:	4403      	add	r3, r0
 80010ea:	430a      	orrs	r2, r1
 80010ec:	b212      	sxth	r2, r2
 80010ee:	801a      	strh	r2, [r3, #0]
		HAL_I2C_Mem_Read(&huart, HMC5883L_ADDRESS, Data_Output_Y_MSB, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&buffer, 6, 100);
 80010f0:	2364      	movs	r3, #100	@ 0x64
 80010f2:	9302      	str	r3, [sp, #8]
 80010f4:	2306      	movs	r3, #6
 80010f6:	9301      	str	r3, [sp, #4]
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2301      	movs	r3, #1
 80010fe:	2207      	movs	r2, #7
 8001100:	213d      	movs	r1, #61	@ 0x3d
 8001102:	f107 0018 	add.w	r0, r7, #24
 8001106:	f002 ffed 	bl	80040e4 <HAL_I2C_Mem_Read>
		buffer_t_y[i] = ((buffer[0] << 8) | buffer[1]);
 800110a:	793b      	ldrb	r3, [r7, #4]
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	b219      	sxth	r1, r3
 8001110:	797b      	ldrb	r3, [r7, #5]
 8001112:	b21a      	sxth	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800111a:	4403      	add	r3, r0
 800111c:	430a      	orrs	r2, r1
 800111e:	b212      	sxth	r2, r2
 8001120:	801a      	strh	r2, [r3, #0]
	for (int i=0;i<8;i++){
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	3301      	adds	r3, #1
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2b07      	cmp	r3, #7
 800112c:	ddc7      	ble.n	80010be <CompassReadAxis+0x16>
	}
}
 800112e:	bf00      	nop
 8001130:	bf00      	nop
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800113a:	b004      	add	sp, #16
 800113c:	4770      	bx	lr
	...

08001140 <VectorToAngle>:

float VectorToAngle (int16_t* PosX, int16_t* PosY){
 8001140:	b5b0      	push	{r4, r5, r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
	return (float)atan2(*PosY, *PosX)*180/3.14;
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fa07 	bl	8000564 <__aeabi_i2d>
 8001156:	4604      	mov	r4, r0
 8001158:	460d      	mov	r5, r1
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff f9ff 	bl	8000564 <__aeabi_i2d>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	ec43 2b11 	vmov	d1, r2, r3
 800116e:	ec45 4b10 	vmov	d0, r4, r5
 8001172:	f009 ffb5 	bl	800b0e0 <atan2>
 8001176:	ec53 2b10 	vmov	r2, r3, d0
 800117a:	4610      	mov	r0, r2
 800117c:	4619      	mov	r1, r3
 800117e:	f7ff fd2b 	bl	8000bd8 <__aeabi_d2f>
 8001182:	ee07 0a10 	vmov	s14, r0
 8001186:	eddf 7a10 	vldr	s15, [pc, #64]	@ 80011c8 <VectorToAngle+0x88>
 800118a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800118e:	ee17 0a90 	vmov	r0, s15
 8001192:	f7ff f9f9 	bl	8000588 <__aeabi_f2d>
 8001196:	a30a      	add	r3, pc, #40	@ (adr r3, 80011c0 <VectorToAngle+0x80>)
 8001198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119c:	f7ff fb76 	bl	800088c <__aeabi_ddiv>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	4610      	mov	r0, r2
 80011a6:	4619      	mov	r1, r3
 80011a8:	f7ff fd16 	bl	8000bd8 <__aeabi_d2f>
 80011ac:	4603      	mov	r3, r0
 80011ae:	ee07 3a90 	vmov	s15, r3
}
 80011b2:	eeb0 0a67 	vmov.f32	s0, s15
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bdb0      	pop	{r4, r5, r7, pc}
 80011bc:	f3af 8000 	nop.w
 80011c0:	51eb851f 	.word	0x51eb851f
 80011c4:	40091eb8 	.word	0x40091eb8
 80011c8:	43340000 	.word	0x43340000

080011cc <getDirectionBoat>:

void getDirectionBoat (I2C_HandleTypeDef huart, int16_t* PosX, int16_t* PosY, float* AngleXY){
 80011cc:	b084      	sub	sp, #16
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b09c      	sub	sp, #112	@ 0x70
 80011d2:	af14      	add	r7, sp, #80	@ 0x50
 80011d4:	f107 0c28 	add.w	ip, r7, #40	@ 0x28
 80011d8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int16_t buffer_x[8]; int16_t buffer_y[8];
	CompassReadAxis(huart,buffer_x,buffer_y);
 80011dc:	463b      	mov	r3, r7
 80011de:	9312      	str	r3, [sp, #72]	@ 0x48
 80011e0:	f107 0310 	add.w	r3, r7, #16
 80011e4:	9311      	str	r3, [sp, #68]	@ 0x44
 80011e6:	4668      	mov	r0, sp
 80011e8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011ec:	2244      	movs	r2, #68	@ 0x44
 80011ee:	4619      	mov	r1, r3
 80011f0:	f009 fb2a 	bl	800a848 <memcpy>
 80011f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011fa:	f7ff ff55 	bl	80010a8 <CompassReadAxis>
	*PosX = FilterData(buffer_x);
 80011fe:	f107 0310 	add.w	r3, r7, #16
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ff13 	bl	800102e <FilterData>
 8001208:	4603      	mov	r3, r0
 800120a:	461a      	mov	r2, r3
 800120c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800120e:	801a      	strh	r2, [r3, #0]
	*PosY = FilterData(buffer_y);
 8001210:	463b      	mov	r3, r7
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff ff0b 	bl	800102e <FilterData>
 8001218:	4603      	mov	r3, r0
 800121a:	461a      	mov	r2, r3
 800121c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001220:	801a      	strh	r2, [r3, #0]
    *AngleXY = VectorToAngle(PosY, PosX);
 8001222:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001224:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8001228:	f7ff ff8a 	bl	8001140 <VectorToAngle>
 800122c:	eef0 7a40 	vmov.f32	s15, s0
 8001230:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001234:	edc3 7a00 	vstr	s15, [r3]
}
 8001238:	bf00      	nop
 800123a:	3720      	adds	r7, #32
 800123c:	46bd      	mov	sp, r7
 800123e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001242:	b004      	add	sp, #16
 8001244:	4770      	bx	lr
	...

08001248 <JDY18Driver_Init>:
uint8_t uartBuffer[MAX_SIZE_UART_BUFFER];

scan_t gScan;

void JDY18Driver_Init(JDY18_HandleTypeDef *handler)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	JDY18Driver_SetPerm(handler->huart);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f000 f877 	bl	8001348 <JDY18Driver_SetPerm>
	JDY18Driver_SetName(handler->huart, handler->name);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	4619      	mov	r1, r3
 8001264:	4610      	mov	r0, r2
 8001266:	f000 f893 	bl	8001390 <JDY18Driver_SetName>
	JDY18Driver_SetRole(handler->huart, handler->role);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	7a5b      	ldrb	r3, [r3, #9]
 8001272:	4619      	mov	r1, r3
 8001274:	4610      	mov	r0, r2
 8001276:	f000 f8d5 	bl	8001424 <JDY18Driver_SetRole>
	JDY18Driver_SetBaudRate(handler->huart, handler->baudRate);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	7a1b      	ldrb	r3, [r3, #8]
 8001282:	4619      	mov	r1, r3
 8001284:	4610      	mov	r0, r2
 8001286:	f000 f8a7 	bl	80013d8 <JDY18Driver_SetBaudRate>
	JDY18Driver_SetParity(handler->huart, handler->parity);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	7a9b      	ldrb	r3, [r3, #10]
 8001292:	4619      	mov	r1, r3
 8001294:	4610      	mov	r0, r2
 8001296:	f000 f8eb 	bl	8001470 <JDY18Driver_SetParity>
	JDY18Driver_SetStopBit(handler->huart, handler->stopBit);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	7adb      	ldrb	r3, [r3, #11]
 80012a2:	4619      	mov	r1, r3
 80012a4:	4610      	mov	r0, r2
 80012a6:	f000 f909 	bl	80014bc <JDY18Driver_SetStopBit>

	HAL_Delay(200);
 80012aa:	20c8      	movs	r0, #200	@ 0xc8
 80012ac:	f001 fe48 	bl	8002f40 <HAL_Delay>

	gScan.size = 0;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	@ (80012f0 <JDY18Driver_Init+0xa8>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
	memset(uartBuffer, 0, sizeof(uartBuffer));
 80012b8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012bc:	2100      	movs	r1, #0
 80012be:	480d      	ldr	r0, [pc, #52]	@ (80012f4 <JDY18Driver_Init+0xac>)
 80012c0:	f009 fa6a 	bl	800a798 <memset>

	__HAL_UART_ENABLE_IT(handler->huart, UART_IT_IDLE);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	68da      	ldr	r2, [r3, #12]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f042 0210 	orr.w	r2, r2, #16
 80012d6:	60da      	str	r2, [r3, #12]
	HAL_UART_Receive_DMA(handler->huart, uartBuffer, sizeof(uartBuffer));
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012e0:	4904      	ldr	r1, [pc, #16]	@ (80012f4 <JDY18Driver_Init+0xac>)
 80012e2:	4618      	mov	r0, r3
 80012e4:	f005 fa91 	bl	800680a <HAL_UART_Receive_DMA>
}
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	200004ac 	.word	0x200004ac
 80012f4:	200000c4 	.word	0x200000c4

080012f8 <JDY18Driver_SendData>:

void JDY18Driver_SendData(UART_HandleTypeDef *huart, char *data)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08c      	sub	sp, #48	@ 0x30
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
	char package[MAX_SIZE_DATA + 4];
	memset(package, 0, MAX_SIZE_DATA + 4);
 8001302:	f107 030c 	add.w	r3, r7, #12
 8001306:	2222      	movs	r2, #34	@ 0x22
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f009 fa44 	bl	800a798 <memset>
	sprintf(package, "%s\r\n", data);
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	683a      	ldr	r2, [r7, #0]
 8001316:	490b      	ldr	r1, [pc, #44]	@ (8001344 <JDY18Driver_SendData+0x4c>)
 8001318:	4618      	mov	r0, r3
 800131a:	f009 fa1d 	bl	800a758 <siprintf>
	HAL_UART_Transmit(huart, (uint8_t *)package, strlen(package), HAL_MAX_DELAY);
 800131e:	f107 030c 	add.w	r3, r7, #12
 8001322:	4618      	mov	r0, r3
 8001324:	f7fe ff74 	bl	8000210 <strlen>
 8001328:	4603      	mov	r3, r0
 800132a:	b29a      	uxth	r2, r3
 800132c:	f107 010c 	add.w	r1, r7, #12
 8001330:	f04f 33ff 	mov.w	r3, #4294967295
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f005 f9dd 	bl	80066f4 <HAL_UART_Transmit>
}
 800133a:	bf00      	nop
 800133c:	3730      	adds	r7, #48	@ 0x30
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	0800c4b4 	.word	0x0800c4b4

08001348 <JDY18Driver_SetPerm>:

void JDY18Driver_SetPerm(UART_HandleTypeDef *huart)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08c      	sub	sp, #48	@ 0x30
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	char *instruction = "AT+PERM";
 8001350:	4b0c      	ldr	r3, [pc, #48]	@ (8001384 <JDY18Driver_SetPerm+0x3c>)
 8001352:	62fb      	str	r3, [r7, #44]	@ 0x2c
	char data[MAX_SIZE_DATA];
	memset(data, 0, MAX_SIZE_DATA);
 8001354:	f107 030c 	add.w	r3, r7, #12
 8001358:	221e      	movs	r2, #30
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f009 fa1b 	bl	800a798 <memset>
	sprintf(data, "%s%s", instruction, "11111");
 8001362:	f107 000c 	add.w	r0, r7, #12
 8001366:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <JDY18Driver_SetPerm+0x40>)
 8001368:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800136a:	4908      	ldr	r1, [pc, #32]	@ (800138c <JDY18Driver_SetPerm+0x44>)
 800136c:	f009 f9f4 	bl	800a758 <siprintf>
	JDY18Driver_SendData(huart, data);
 8001370:	f107 030c 	add.w	r3, r7, #12
 8001374:	4619      	mov	r1, r3
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff ffbe 	bl	80012f8 <JDY18Driver_SendData>
}
 800137c:	bf00      	nop
 800137e:	3730      	adds	r7, #48	@ 0x30
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	0800c4bc 	.word	0x0800c4bc
 8001388:	0800c4c4 	.word	0x0800c4c4
 800138c:	0800c4cc 	.word	0x0800c4cc

08001390 <JDY18Driver_SetName>:

void JDY18Driver_SetName(UART_HandleTypeDef *huart, char *name)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08c      	sub	sp, #48	@ 0x30
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
	char *instruction = atInstructions[SET_NAME];
 800139a:	4b0d      	ldr	r3, [pc, #52]	@ (80013d0 <JDY18Driver_SetName+0x40>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	char data[MAX_SIZE_DATA];
	memset(data, 0, MAX_SIZE_DATA);
 80013a0:	f107 030c 	add.w	r3, r7, #12
 80013a4:	221e      	movs	r2, #30
 80013a6:	2100      	movs	r1, #0
 80013a8:	4618      	mov	r0, r3
 80013aa:	f009 f9f5 	bl	800a798 <memset>
	sprintf(data, "%s%s", instruction, name);
 80013ae:	f107 000c 	add.w	r0, r7, #12
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013b6:	4907      	ldr	r1, [pc, #28]	@ (80013d4 <JDY18Driver_SetName+0x44>)
 80013b8:	f009 f9ce 	bl	800a758 <siprintf>
	JDY18Driver_SendData(huart, data);
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	4619      	mov	r1, r3
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff ff98 	bl	80012f8 <JDY18Driver_SendData>
}
 80013c8:	bf00      	nop
 80013ca:	3730      	adds	r7, #48	@ 0x30
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000000 	.word	0x20000000
 80013d4:	0800c4cc 	.word	0x0800c4cc

080013d8 <JDY18Driver_SetBaudRate>:

void JDY18Driver_SetBaudRate(UART_HandleTypeDef *huart, BaudRate_t baudRate)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08c      	sub	sp, #48	@ 0x30
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	70fb      	strb	r3, [r7, #3]
	char *instruction = atInstructions[SET_BAUD_RATE];
 80013e4:	4b0d      	ldr	r3, [pc, #52]	@ (800141c <JDY18Driver_SetBaudRate+0x44>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	char data[MAX_SIZE_DATA];
	memset(data, 0, MAX_SIZE_DATA);
 80013ea:	f107 030c 	add.w	r3, r7, #12
 80013ee:	221e      	movs	r2, #30
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f009 f9d0 	bl	800a798 <memset>
	sprintf(data, "%s%d", instruction, baudRate);
 80013f8:	78fb      	ldrb	r3, [r7, #3]
 80013fa:	f107 000c 	add.w	r0, r7, #12
 80013fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001400:	4907      	ldr	r1, [pc, #28]	@ (8001420 <JDY18Driver_SetBaudRate+0x48>)
 8001402:	f009 f9a9 	bl	800a758 <siprintf>
	JDY18Driver_SendData(huart, data);
 8001406:	f107 030c 	add.w	r3, r7, #12
 800140a:	4619      	mov	r1, r3
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff ff73 	bl	80012f8 <JDY18Driver_SendData>
}
 8001412:	bf00      	nop
 8001414:	3730      	adds	r7, #48	@ 0x30
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000000 	.word	0x20000000
 8001420:	0800c4d4 	.word	0x0800c4d4

08001424 <JDY18Driver_SetRole>:

void JDY18Driver_SetRole(UART_HandleTypeDef *huart, RoleParam_t role)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08c      	sub	sp, #48	@ 0x30
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	70fb      	strb	r3, [r7, #3]
	char *instruction = atInstructions[SET_ROLE];
 8001430:	4b0d      	ldr	r3, [pc, #52]	@ (8001468 <JDY18Driver_SetRole+0x44>)
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	62fb      	str	r3, [r7, #44]	@ 0x2c
	char data[MAX_SIZE_DATA];
	memset(data, 0, MAX_SIZE_DATA);
 8001436:	f107 030c 	add.w	r3, r7, #12
 800143a:	221e      	movs	r2, #30
 800143c:	2100      	movs	r1, #0
 800143e:	4618      	mov	r0, r3
 8001440:	f009 f9aa 	bl	800a798 <memset>
	sprintf(data, "%s%d", instruction, role);
 8001444:	78fb      	ldrb	r3, [r7, #3]
 8001446:	f107 000c 	add.w	r0, r7, #12
 800144a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800144c:	4907      	ldr	r1, [pc, #28]	@ (800146c <JDY18Driver_SetRole+0x48>)
 800144e:	f009 f983 	bl	800a758 <siprintf>
	JDY18Driver_SendData(huart, data);
 8001452:	f107 030c 	add.w	r3, r7, #12
 8001456:	4619      	mov	r1, r3
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff ff4d 	bl	80012f8 <JDY18Driver_SendData>
}
 800145e:	bf00      	nop
 8001460:	3730      	adds	r7, #48	@ 0x30
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000000 	.word	0x20000000
 800146c:	0800c4d4 	.word	0x0800c4d4

08001470 <JDY18Driver_SetParity>:

void JDY18Driver_SetParity(UART_HandleTypeDef *huart, ParityParam_t parity)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08c      	sub	sp, #48	@ 0x30
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	70fb      	strb	r3, [r7, #3]
	char *instruction = atInstructions[SET_PARITY];
 800147c:	4b0d      	ldr	r3, [pc, #52]	@ (80014b4 <JDY18Driver_SetParity+0x44>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	62fb      	str	r3, [r7, #44]	@ 0x2c
	char data[MAX_SIZE_DATA];
	memset(data, 0, MAX_SIZE_DATA);
 8001482:	f107 030c 	add.w	r3, r7, #12
 8001486:	221e      	movs	r2, #30
 8001488:	2100      	movs	r1, #0
 800148a:	4618      	mov	r0, r3
 800148c:	f009 f984 	bl	800a798 <memset>
	sprintf(data, "%s%d", instruction, parity);
 8001490:	78fb      	ldrb	r3, [r7, #3]
 8001492:	f107 000c 	add.w	r0, r7, #12
 8001496:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001498:	4907      	ldr	r1, [pc, #28]	@ (80014b8 <JDY18Driver_SetParity+0x48>)
 800149a:	f009 f95d 	bl	800a758 <siprintf>
	JDY18Driver_SendData(huart, data);
 800149e:	f107 030c 	add.w	r3, r7, #12
 80014a2:	4619      	mov	r1, r3
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff ff27 	bl	80012f8 <JDY18Driver_SendData>
}
 80014aa:	bf00      	nop
 80014ac:	3730      	adds	r7, #48	@ 0x30
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000000 	.word	0x20000000
 80014b8:	0800c4d4 	.word	0x0800c4d4

080014bc <JDY18Driver_SetStopBit>:

void JDY18Driver_SetStopBit(UART_HandleTypeDef *huart, uint8_t stopBit)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08c      	sub	sp, #48	@ 0x30
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	70fb      	strb	r3, [r7, #3]
	char *instruction = atInstructions[SET_STOP_BIT];
 80014c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001500 <JDY18Driver_SetStopBit+0x44>)
 80014ca:	691b      	ldr	r3, [r3, #16]
 80014cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	char data[MAX_SIZE_DATA];
	memset(data, 0, MAX_SIZE_DATA);
 80014ce:	f107 030c 	add.w	r3, r7, #12
 80014d2:	221e      	movs	r2, #30
 80014d4:	2100      	movs	r1, #0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f009 f95e 	bl	800a798 <memset>
	sprintf(data, "%s%d", instruction, stopBit);
 80014dc:	78fb      	ldrb	r3, [r7, #3]
 80014de:	f107 000c 	add.w	r0, r7, #12
 80014e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80014e4:	4907      	ldr	r1, [pc, #28]	@ (8001504 <JDY18Driver_SetStopBit+0x48>)
 80014e6:	f009 f937 	bl	800a758 <siprintf>
	JDY18Driver_SendData(huart, data);
 80014ea:	f107 030c 	add.w	r3, r7, #12
 80014ee:	4619      	mov	r1, r3
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff ff01 	bl	80012f8 <JDY18Driver_SendData>
}
 80014f6:	bf00      	nop
 80014f8:	3730      	adds	r7, #48	@ 0x30
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000000 	.word	0x20000000
 8001504:	0800c4d4 	.word	0x0800c4d4

08001508 <JDY18Driver_InquireDevices>:
//
void JDY18Driver_InquireDevices(UART_HandleTypeDef *huart)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08c      	sub	sp, #48	@ 0x30
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	char *instruction = atInstructions[MASTER_SCAN_SLAVE];
 8001510:	4b0d      	ldr	r3, [pc, #52]	@ (8001548 <JDY18Driver_InquireDevices+0x40>)
 8001512:	695b      	ldr	r3, [r3, #20]
 8001514:	62fb      	str	r3, [r7, #44]	@ 0x2c
	char data[MAX_SIZE_DATA];
	memset(data, 0, MAX_SIZE_DATA);
 8001516:	f107 030c 	add.w	r3, r7, #12
 800151a:	221e      	movs	r2, #30
 800151c:	2100      	movs	r1, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f009 f93a 	bl	800a798 <memset>
	sprintf(data, "%s", instruction);
 8001524:	f107 030c 	add.w	r3, r7, #12
 8001528:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800152a:	4908      	ldr	r1, [pc, #32]	@ (800154c <JDY18Driver_InquireDevices+0x44>)
 800152c:	4618      	mov	r0, r3
 800152e:	f009 f913 	bl	800a758 <siprintf>
	JDY18Driver_SendData(huart, data);
 8001532:	f107 030c 	add.w	r3, r7, #12
 8001536:	4619      	mov	r1, r3
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff fedd 	bl	80012f8 <JDY18Driver_SendData>
}
 800153e:	bf00      	nop
 8001540:	3730      	adds	r7, #48	@ 0x30
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000000 	.word	0x20000000
 800154c:	0800c4dc 	.word	0x0800c4dc

08001550 <JDY18Driver_GetScannedDevices>:

void JDY18Driver_GetScannedDevices(scan_t *scan)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
	*scan = gScan;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a06      	ldr	r2, [pc, #24]	@ (8001574 <JDY18Driver_GetScannedDevices+0x24>)
 800155c:	4618      	mov	r0, r3
 800155e:	4611      	mov	r1, r2
 8001560:	f44f 73f2 	mov.w	r3, #484	@ 0x1e4
 8001564:	461a      	mov	r2, r3
 8001566:	f009 f96f 	bl	800a848 <memcpy>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200004ac 	.word	0x200004ac

08001578 <JDY18Driver_LoadDeviceInfo>:

void JDY18Driver_LoadDeviceInfo(char *start, char *end, device_t *device)
{
 8001578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800157c:	b091      	sub	sp, #68	@ 0x44
 800157e:	af00      	add	r7, sp, #0
 8001580:	6178      	str	r0, [r7, #20]
 8001582:	6139      	str	r1, [r7, #16]
 8001584:	60fa      	str	r2, [r7, #12]
 8001586:	466b      	mov	r3, sp
 8001588:	461e      	mov	r6, r3
	size_t size = end - start;
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	63fb      	str	r3, [r7, #60]	@ 0x3c
	char temp[size];
 8001592:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001594:	460b      	mov	r3, r1
 8001596:	3b01      	subs	r3, #1
 8001598:	63bb      	str	r3, [r7, #56]	@ 0x38
 800159a:	2300      	movs	r3, #0
 800159c:	6039      	str	r1, [r7, #0]
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	f04f 0200 	mov.w	r2, #0
 80015a4:	f04f 0300 	mov.w	r3, #0
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	00c3      	lsls	r3, r0, #3
 80015ac:	6838      	ldr	r0, [r7, #0]
 80015ae:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80015b2:	6838      	ldr	r0, [r7, #0]
 80015b4:	00c2      	lsls	r2, r0, #3
 80015b6:	2300      	movs	r3, #0
 80015b8:	468a      	mov	sl, r1
 80015ba:	469b      	mov	fp, r3
 80015bc:	f04f 0200 	mov.w	r2, #0
 80015c0:	f04f 0300 	mov.w	r3, #0
 80015c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80015c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80015cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80015d0:	1dcb      	adds	r3, r1, #7
 80015d2:	08db      	lsrs	r3, r3, #3
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	ebad 0d03 	sub.w	sp, sp, r3
 80015da:	466b      	mov	r3, sp
 80015dc:	3300      	adds	r3, #0
 80015de:	637b      	str	r3, [r7, #52]	@ 0x34
	memcpy(temp, start, size);
 80015e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80015e2:	6979      	ldr	r1, [r7, #20]
 80015e4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80015e6:	f009 f92f 	bl	800a848 <memcpy>

	char *macAddressPointer = temp + 7;
 80015ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015ec:	3307      	adds	r3, #7
 80015ee:	633b      	str	r3, [r7, #48]	@ 0x30
	char *rssiPointer = macAddressPointer + MAC_ADDRESS_SIZE + 1;
 80015f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015f2:	330d      	adds	r3, #13
 80015f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	char *namePointer = strstr(rssiPointer, ",") + 1;
 80015f6:	212c      	movs	r1, #44	@ 0x2c
 80015f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80015fa:	f009 f8d5 	bl	800a7a8 <strchr>
 80015fe:	4603      	mov	r3, r0
 8001600:	3301      	adds	r3, #1
 8001602:	62bb      	str	r3, [r7, #40]	@ 0x28

	size_t rssiSize = namePointer - rssiPointer - 1;
 8001604:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	3b01      	subs	r3, #1
 800160c:	627b      	str	r3, [r7, #36]	@ 0x24
	char rssiStr[rssiSize];
 800160e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001610:	460b      	mov	r3, r1
 8001612:	3b01      	subs	r3, #1
 8001614:	623b      	str	r3, [r7, #32]
 8001616:	2300      	movs	r3, #0
 8001618:	4688      	mov	r8, r1
 800161a:	4699      	mov	r9, r3
 800161c:	f04f 0200 	mov.w	r2, #0
 8001620:	f04f 0300 	mov.w	r3, #0
 8001624:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001628:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800162c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001630:	2300      	movs	r3, #0
 8001632:	460c      	mov	r4, r1
 8001634:	461d      	mov	r5, r3
 8001636:	f04f 0200 	mov.w	r2, #0
 800163a:	f04f 0300 	mov.w	r3, #0
 800163e:	00eb      	lsls	r3, r5, #3
 8001640:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001644:	00e2      	lsls	r2, r4, #3
 8001646:	1dcb      	adds	r3, r1, #7
 8001648:	08db      	lsrs	r3, r3, #3
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	ebad 0d03 	sub.w	sp, sp, r3
 8001650:	466b      	mov	r3, sp
 8001652:	3300      	adds	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
	memcpy(rssiStr, rssiPointer, rssiSize);
 8001656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001658:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800165a:	69f8      	ldr	r0, [r7, #28]
 800165c:	f009 f8f4 	bl	800a848 <memcpy>

	memcpy(device->mac, macAddressPointer, MAC_ADDRESS_SIZE);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	331e      	adds	r3, #30
 8001664:	220c      	movs	r2, #12
 8001666:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001668:	4618      	mov	r0, r3
 800166a:	f009 f8ed 	bl	800a848 <memcpy>
	memcpy(device->name, namePointer, MAX_DEVICE_NAME_SIZE);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	221e      	movs	r2, #30
 8001672:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001674:	4618      	mov	r0, r3
 8001676:	f009 f8e7 	bl	800a848 <memcpy>
	device->rssi = atoi(rssiStr);
 800167a:	69f8      	ldr	r0, [r7, #28]
 800167c:	f008 ffe4 	bl	800a648 <atoi>
 8001680:	4602      	mov	r2, r0
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001686:	46b5      	mov	sp, r6
}
 8001688:	bf00      	nop
 800168a:	3744      	adds	r7, #68	@ 0x44
 800168c:	46bd      	mov	sp, r7
 800168e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001694 <JDY18Driver_ParseScanResponse>:

void JDY18Driver_ParseScanResponse(char *scanResponse, scan_t *scan)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
	char *start, *end;
	scan->size = 0;
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0

	if ((start = strstr(scanResponse, INIT_MODULE_RESPONSE_SCAN)))
 80016a6:	4926      	ldr	r1, [pc, #152]	@ (8001740 <JDY18Driver_ParseScanResponse+0xac>)
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f009 f88a 	bl	800a7c2 <strstr>
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d040      	beq.n	8001738 <JDY18Driver_ParseScanResponse+0xa4>
	{
		while ((end = strstr(start + 1, INIT_MODULE_RESPONSE_SCAN)))
 80016b6:	e016      	b.n	80016e6 <JDY18Driver_ParseScanResponse+0x52>
		{
			JDY18Driver_LoadDeviceInfo(start, end, &scan->devices[scan->size]);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	f8d3 21e0 	ldr.w	r2, [r3, #480]	@ 0x1e0
 80016be:	4613      	mov	r3, r2
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4413      	add	r3, r2
 80016c4:	011b      	lsls	r3, r3, #4
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	4413      	add	r3, r2
 80016ca:	461a      	mov	r2, r3
 80016cc:	68b9      	ldr	r1, [r7, #8]
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f7ff ff52 	bl	8001578 <JDY18Driver_LoadDeviceInfo>
			start = end;
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	60fb      	str	r3, [r7, #12]
			scan->size++;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 80016de:	1c5a      	adds	r2, r3, #1
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
		while ((end = strstr(start + 1, INIT_MODULE_RESPONSE_SCAN)))
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	3301      	adds	r3, #1
 80016ea:	4915      	ldr	r1, [pc, #84]	@ (8001740 <JDY18Driver_ParseScanResponse+0xac>)
 80016ec:	4618      	mov	r0, r3
 80016ee:	f009 f868 	bl	800a7c2 <strstr>
 80016f2:	60b8      	str	r0, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1de      	bne.n	80016b8 <JDY18Driver_ParseScanResponse+0x24>
		}
		if ((end = strstr(start + 1, END_RESPONSE_SCAN)))
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	3301      	adds	r3, #1
 80016fe:	4911      	ldr	r1, [pc, #68]	@ (8001744 <JDY18Driver_ParseScanResponse+0xb0>)
 8001700:	4618      	mov	r0, r3
 8001702:	f009 f85e 	bl	800a7c2 <strstr>
 8001706:	60b8      	str	r0, [r7, #8]
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d014      	beq.n	8001738 <JDY18Driver_ParseScanResponse+0xa4>
		{
			JDY18Driver_LoadDeviceInfo(start, end, &scan->devices[scan->size]);
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	f8d3 21e0 	ldr.w	r2, [r3, #480]	@ 0x1e0
 8001714:	4613      	mov	r3, r2
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	4413      	add	r3, r2
 800171a:	011b      	lsls	r3, r3, #4
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	4413      	add	r3, r2
 8001720:	461a      	mov	r2, r3
 8001722:	68b9      	ldr	r1, [r7, #8]
 8001724:	68f8      	ldr	r0, [r7, #12]
 8001726:	f7ff ff27 	bl	8001578 <JDY18Driver_LoadDeviceInfo>
			scan->size++;
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 8001730:	1c5a      	adds	r2, r3, #1
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
		}
	}
}
 8001738:	bf00      	nop
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	0800c4e0 	.word	0x0800c4e0
 8001744:	0800c4e8 	.word	0x0800c4e8

08001748 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0310 	and.w	r3, r3, #16
 800175a:	2b10      	cmp	r3, #16
 800175c:	d124      	bne.n	80017a8 <HAL_UART_RxCpltCallback+0x60>
	{
		__HAL_UART_CLEAR_IDLEFLAG(huart);
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	68fb      	ldr	r3, [r7, #12]

		if (strstr((char *)uartBuffer, END_RESPONSE_SCAN))
 8001774:	490e      	ldr	r1, [pc, #56]	@ (80017b0 <HAL_UART_RxCpltCallback+0x68>)
 8001776:	480f      	ldr	r0, [pc, #60]	@ (80017b4 <HAL_UART_RxCpltCallback+0x6c>)
 8001778:	f009 f823 	bl	800a7c2 <strstr>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d012      	beq.n	80017a8 <HAL_UART_RxCpltCallback+0x60>
		{
			HAL_UART_DMAStop(huart);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f005 f866 	bl	8006854 <HAL_UART_DMAStop>

			JDY18Driver_ParseScanResponse((char *)uartBuffer, &gScan);
 8001788:	490b      	ldr	r1, [pc, #44]	@ (80017b8 <HAL_UART_RxCpltCallback+0x70>)
 800178a:	480a      	ldr	r0, [pc, #40]	@ (80017b4 <HAL_UART_RxCpltCallback+0x6c>)
 800178c:	f7ff ff82 	bl	8001694 <JDY18Driver_ParseScanResponse>

			memset(uartBuffer, 0, sizeof(uartBuffer));
 8001790:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001794:	2100      	movs	r1, #0
 8001796:	4807      	ldr	r0, [pc, #28]	@ (80017b4 <HAL_UART_RxCpltCallback+0x6c>)
 8001798:	f008 fffe 	bl	800a798 <memset>
			HAL_UART_Receive_DMA(huart, uartBuffer, sizeof(uartBuffer));
 800179c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80017a0:	4904      	ldr	r1, [pc, #16]	@ (80017b4 <HAL_UART_RxCpltCallback+0x6c>)
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f005 f831 	bl	800680a <HAL_UART_Receive_DMA>
		}
	}
}
 80017a8:	bf00      	nop
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	0800c4e8 	.word	0x0800c4e8
 80017b4:	200000c4 	.word	0x200000c4
 80017b8:	200004ac 	.word	0x200004ac
 80017bc:	00000000 	.word	0x00000000

080017c0 <SG90_handlePulse>:

/*
 * É preciso tratar o pulso que é dado. O motor tem funcionamento de 0° a 180°.
 * Limitar o seu pulso no intervalo da largura de pulso de 0.7ms a 2.3ms.
 */
uint16_t SG90_handlePulse(uint16_t period, uint16_t pulse){
 80017c0:	b5b0      	push	{r4, r5, r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	460a      	mov	r2, r1
 80017ca:	80fb      	strh	r3, [r7, #6]
 80017cc:	4613      	mov	r3, r2
 80017ce:	80bb      	strh	r3, [r7, #4]
	/*
	 * Retorna o menor pulso se for inferior ao menor possível.
	 * Retorna o maior pulso se for superior ao maior possível.
	 * Retorna o pulso se estiver na faixa aceitável
	 */
	if(pulse < period*DUTY_CYCLE_MIN) pulse = period*DUTY_CYCLE_MIN;
 80017d0:	88bb      	ldrh	r3, [r7, #4]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7fe fec6 	bl	8000564 <__aeabi_i2d>
 80017d8:	4604      	mov	r4, r0
 80017da:	460d      	mov	r5, r1
 80017dc:	88fb      	ldrh	r3, [r7, #6]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7fe fec0 	bl	8000564 <__aeabi_i2d>
 80017e4:	a326      	add	r3, pc, #152	@ (adr r3, 8001880 <SG90_handlePulse+0xc0>)
 80017e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ea:	f7fe ff25 	bl	8000638 <__aeabi_dmul>
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	4620      	mov	r0, r4
 80017f4:	4629      	mov	r1, r5
 80017f6:	f7ff f991 	bl	8000b1c <__aeabi_dcmplt>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d011      	beq.n	8001824 <SG90_handlePulse+0x64>
 8001800:	88fb      	ldrh	r3, [r7, #6]
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe feae 	bl	8000564 <__aeabi_i2d>
 8001808:	a31d      	add	r3, pc, #116	@ (adr r3, 8001880 <SG90_handlePulse+0xc0>)
 800180a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180e:	f7fe ff13 	bl	8000638 <__aeabi_dmul>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4610      	mov	r0, r2
 8001818:	4619      	mov	r1, r3
 800181a:	f7ff f9bd 	bl	8000b98 <__aeabi_d2uiz>
 800181e:	4603      	mov	r3, r0
 8001820:	80bb      	strh	r3, [r7, #4]
 8001822:	e028      	b.n	8001876 <SG90_handlePulse+0xb6>
	else if(pulse > period*DUTY_CYCLE_MAX) pulse = period*DUTY_CYCLE_MAX;
 8001824:	88bb      	ldrh	r3, [r7, #4]
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe fe9c 	bl	8000564 <__aeabi_i2d>
 800182c:	4604      	mov	r4, r0
 800182e:	460d      	mov	r5, r1
 8001830:	88fb      	ldrh	r3, [r7, #6]
 8001832:	4618      	mov	r0, r3
 8001834:	f7fe fe96 	bl	8000564 <__aeabi_i2d>
 8001838:	a313      	add	r3, pc, #76	@ (adr r3, 8001888 <SG90_handlePulse+0xc8>)
 800183a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183e:	f7fe fefb 	bl	8000638 <__aeabi_dmul>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4620      	mov	r0, r4
 8001848:	4629      	mov	r1, r5
 800184a:	f7ff f985 	bl	8000b58 <__aeabi_dcmpgt>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d010      	beq.n	8001876 <SG90_handlePulse+0xb6>
 8001854:	88fb      	ldrh	r3, [r7, #6]
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe fe84 	bl	8000564 <__aeabi_i2d>
 800185c:	a30a      	add	r3, pc, #40	@ (adr r3, 8001888 <SG90_handlePulse+0xc8>)
 800185e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001862:	f7fe fee9 	bl	8000638 <__aeabi_dmul>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4610      	mov	r0, r2
 800186c:	4619      	mov	r1, r3
 800186e:	f7ff f993 	bl	8000b98 <__aeabi_d2uiz>
 8001872:	4603      	mov	r3, r0
 8001874:	80bb      	strh	r3, [r7, #4]
	return pulse;
 8001876:	88bb      	ldrh	r3, [r7, #4]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bdb0      	pop	{r4, r5, r7, pc}
 8001880:	1eb851ec 	.word	0x1eb851ec
 8001884:	3fa1eb85 	.word	0x3fa1eb85
 8001888:	d70a3d71 	.word	0xd70a3d71
 800188c:	3fbd70a3 	.word	0x3fbd70a3

08001890 <SG90_SetPWM>:

void SG90_SetPWM(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period, uint16_t pulse){
 8001890:	b084      	sub	sp, #16
 8001892:	b580      	push	{r7, lr}
 8001894:	b088      	sub	sp, #32
 8001896:	af00      	add	r7, sp, #0
 8001898:	f107 0c28 	add.w	ip, r7, #40	@ 0x28
 800189c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// Obtém pulso após tratamento de limites.
	pulse = SG90_handlePulse(period, pulse);
 80018a0:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 80018a4:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80018a8:	4611      	mov	r1, r2
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff ff88 	bl	80017c0 <SG90_handlePulse>
 80018b0:	4603      	mov	r3, r0
 80018b2:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
	// Configura registradores para uso do PWM
	HAL_TIM_PWM_Stop(&timer, channel);
 80018b6:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80018b8:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80018bc:	f004 f96e 	bl	8005b9c <HAL_TIM_PWM_Stop>
	TIM_OC_InitTypeDef sConfigOC;
	timer.Init.Period = period;
 80018c0:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80018c4:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_TIM_PWM_Init(&timer);
 80018c6:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80018ca:	f004 f84f 	bl	800596c <HAL_TIM_PWM_Init>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018ce:	2360      	movs	r3, #96	@ 0x60
 80018d0:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = pulse;
 80018d2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 80018d6:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018d8:	2300      	movs	r3, #0
 80018da:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
	HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 80018e0:	1d3b      	adds	r3, r7, #4
 80018e2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80018e4:	4619      	mov	r1, r3
 80018e6:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80018ea:	f004 fab7 	bl	8005e5c <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&timer, channel);
 80018ee:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80018f0:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80018f4:	f004 f88a 	bl	8005a0c <HAL_TIM_PWM_Start>
}
 80018f8:	bf00      	nop
 80018fa:	3720      	adds	r7, #32
 80018fc:	46bd      	mov	sp, r7
 80018fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001902:	b004      	add	sp, #16
 8001904:	4770      	bx	lr
	...

08001908 <SG90_handleAngle>:
/*
Função que irá tratar o ângulo recebibo para as faixas de 0 a 360°.
*/
uint16_t SG90_handleAngle(float angle)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	ed87 0a01 	vstr	s0, [r7, #4]
	// Converter ângulo de -180 a 180 para 0 a 360.
	angle += 180;
 8001912:	edd7 7a01 	vldr	s15, [r7, #4]
 8001916:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001968 <SG90_handleAngle+0x60>
 800191a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800191e:	edc7 7a01 	vstr	s15, [r7, #4]
	if (angle > 360)
 8001922:	edd7 7a01 	vldr	s15, [r7, #4]
 8001926:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800196c <SG90_handleAngle+0x64>
 800192a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800192e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001932:	dd01      	ble.n	8001938 <SG90_handleAngle+0x30>
		angle = 360;
 8001934:	4b0e      	ldr	r3, [pc, #56]	@ (8001970 <SG90_handleAngle+0x68>)
 8001936:	607b      	str	r3, [r7, #4]
	if (angle < 0)
 8001938:	edd7 7a01 	vldr	s15, [r7, #4]
 800193c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001944:	d502      	bpl.n	800194c <SG90_handleAngle+0x44>
		angle = 0;
 8001946:	f04f 0300 	mov.w	r3, #0
 800194a:	607b      	str	r3, [r7, #4]
	return angle;
 800194c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001950:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001954:	ee17 3a90 	vmov	r3, s15
 8001958:	b29b      	uxth	r3, r3
}
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	43340000 	.word	0x43340000
 800196c:	43b40000 	.word	0x43b40000
 8001970:	43b40000 	.word	0x43b40000
 8001974:	00000000 	.word	0x00000000

08001978 <SG90_angle2Pulse>:
/*
Função que receberá um ângulo e retornará o valor de pulso que o leme deve se movimentar para atender o ângulo.
*/
uint16_t SG90_angle2Pulse(float angle, uint16_t period)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001982:	4603      	mov	r3, r0
 8001984:	807b      	strh	r3, [r7, #2]
	float aux_angle;
	aux_angle = SG90_handleAngle(angle);
 8001986:	ed97 0a01 	vldr	s0, [r7, #4]
 800198a:	f7ff ffbd 	bl	8001908 <SG90_handleAngle>
 800198e:	4603      	mov	r3, r0
 8001990:	ee07 3a90 	vmov	s15, r3
 8001994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001998:	edc7 7a03 	vstr	s15, [r7, #12]
	return (44 + aux_angle/3.6);
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f7fe fdf3 	bl	8000588 <__aeabi_f2d>
 80019a2:	a30e      	add	r3, pc, #56	@ (adr r3, 80019dc <SG90_angle2Pulse+0x64>)
 80019a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a8:	f7fe ff70 	bl	800088c <__aeabi_ddiv>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4610      	mov	r0, r2
 80019b2:	4619      	mov	r1, r3
 80019b4:	f04f 0200 	mov.w	r2, #0
 80019b8:	4b07      	ldr	r3, [pc, #28]	@ (80019d8 <SG90_angle2Pulse+0x60>)
 80019ba:	f7fe fc87 	bl	80002cc <__adddf3>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	4610      	mov	r0, r2
 80019c4:	4619      	mov	r1, r3
 80019c6:	f7ff f8e7 	bl	8000b98 <__aeabi_d2uiz>
 80019ca:	4603      	mov	r3, r0
 80019cc:	b29b      	uxth	r3, r3
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40460000 	.word	0x40460000
 80019dc:	cccccccd 	.word	0xcccccccd
 80019e0:	400ccccc 	.word	0x400ccccc

080019e4 <SG90_Update>:

void SG90_Update(TIM_HandleTypeDef timer, uint32_t channel, float* ActualAngle, float* DesireAngle){
 80019e4:	b084      	sub	sp, #16
 80019e6:	b5b0      	push	{r4, r5, r7, lr}
 80019e8:	b094      	sub	sp, #80	@ 0x50
 80019ea:	af12      	add	r7, sp, #72	@ 0x48
 80019ec:	f107 0418 	add.w	r4, r7, #24
 80019f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int pulse;
	float DiffAngle = ActualAngle - DesireAngle;
 80019f4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80019f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	109b      	asrs	r3, r3, #2
 80019fc:	ee07 3a90 	vmov	s15, r3
 8001a00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a04:	edc7 7a01 	vstr	s15, [r7, #4]
	pulse = SG90_angle2Pulse(DiffAngle, 1250);
 8001a08:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8001a0c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001a10:	f7ff ffb2 	bl	8001978 <SG90_angle2Pulse>
 8001a14:	4603      	mov	r3, r0
 8001a16:	603b      	str	r3, [r7, #0]
	SG90_SetPWM(timer, channel, 1250, pulse);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	9310      	str	r3, [sp, #64]	@ 0x40
 8001a1e:	f240 43e2 	movw	r3, #1250	@ 0x4e2
 8001a22:	930f      	str	r3, [sp, #60]	@ 0x3c
 8001a24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001a26:	930e      	str	r3, [sp, #56]	@ 0x38
 8001a28:	466d      	mov	r5, sp
 8001a2a:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8001a2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a3e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a42:	f107 0318 	add.w	r3, r7, #24
 8001a46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a48:	f7ff ff22 	bl	8001890 <SG90_SetPWM>
}
 8001a4c:	bf00      	nop
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001a56:	b004      	add	sp, #16
 8001a58:	4770      	bx	lr
 8001a5a:	0000      	movs	r0, r0
 8001a5c:	0000      	movs	r0, r0
	...

08001a60 <LocationService_Init>:

float trilaterationCalcCPartial = 0;
float trilaterationCalcFPartial = 0;

void LocationService_Init(UART_HandleTypeDef *huart)
{
 8001a60:	b5b0      	push	{r4, r5, r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	bleHandler.huart = huart;
 8001a68:	4a6f      	ldr	r2, [pc, #444]	@ (8001c28 <LocationService_Init+0x1c8>)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6013      	str	r3, [r2, #0]
	bleHandler.name = MASTER_BLE_NAME;
 8001a6e:	4b6e      	ldr	r3, [pc, #440]	@ (8001c28 <LocationService_Init+0x1c8>)
 8001a70:	4a6e      	ldr	r2, [pc, #440]	@ (8001c2c <LocationService_Init+0x1cc>)
 8001a72:	605a      	str	r2, [r3, #4]
	bleHandler.baudRate = BAUD_230400;
 8001a74:	4b6c      	ldr	r3, [pc, #432]	@ (8001c28 <LocationService_Init+0x1c8>)
 8001a76:	2209      	movs	r2, #9
 8001a78:	721a      	strb	r2, [r3, #8]
	bleHandler.role = MASTER;
 8001a7a:	4b6b      	ldr	r3, [pc, #428]	@ (8001c28 <LocationService_Init+0x1c8>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	725a      	strb	r2, [r3, #9]
	bleHandler.parity = NO_PARITY;
 8001a80:	4b69      	ldr	r3, [pc, #420]	@ (8001c28 <LocationService_Init+0x1c8>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	729a      	strb	r2, [r3, #10]
	bleHandler.stopBit = 0;
 8001a86:	4b68      	ldr	r3, [pc, #416]	@ (8001c28 <LocationService_Init+0x1c8>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	72da      	strb	r2, [r3, #11]
	JDY18Driver_Init(&bleHandler);
 8001a8c:	4866      	ldr	r0, [pc, #408]	@ (8001c28 <LocationService_Init+0x1c8>)
 8001a8e:	f7ff fbdb 	bl	8001248 <JDY18Driver_Init>

	DataFilterService_InitBuffer(&b1Buffer);
 8001a92:	4867      	ldr	r0, [pc, #412]	@ (8001c30 <LocationService_Init+0x1d0>)
 8001a94:	f000 fb40 	bl	8002118 <DataFilterService_InitBuffer>
	DataFilterService_InitBuffer(&b2Buffer);
 8001a98:	4866      	ldr	r0, [pc, #408]	@ (8001c34 <LocationService_Init+0x1d4>)
 8001a9a:	f000 fb3d 	bl	8002118 <DataFilterService_InitBuffer>
	DataFilterService_InitBuffer(&b3Buffer);
 8001a9e:	4866      	ldr	r0, [pc, #408]	@ (8001c38 <LocationService_Init+0x1d8>)
 8001aa0:	f000 fb3a 	bl	8002118 <DataFilterService_InitBuffer>

	trilaterationCalcCPartial = - pow(slaveBeaconLocationB1.longitude, 2) + pow(slaveBeaconLocationB2.longitude, 2) - pow(slaveBeaconLocationB1.latitude, 2) + pow(slaveBeaconLocationB2.latitude, 2);
 8001aa4:	4b65      	ldr	r3, [pc, #404]	@ (8001c3c <LocationService_Init+0x1dc>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fd6d 	bl	8000588 <__aeabi_f2d>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	ed9f 1b5b 	vldr	d1, [pc, #364]	@ 8001c20 <LocationService_Init+0x1c0>
 8001ab6:	ec43 2b10 	vmov	d0, r2, r3
 8001aba:	f009 fb13 	bl	800b0e4 <pow>
 8001abe:	ec55 4b10 	vmov	r4, r5, d0
 8001ac2:	4b5f      	ldr	r3, [pc, #380]	@ (8001c40 <LocationService_Init+0x1e0>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7fe fd5e 	bl	8000588 <__aeabi_f2d>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	ed9f 1b53 	vldr	d1, [pc, #332]	@ 8001c20 <LocationService_Init+0x1c0>
 8001ad4:	ec43 2b10 	vmov	d0, r2, r3
 8001ad8:	f009 fb04 	bl	800b0e4 <pow>
 8001adc:	ec53 2b10 	vmov	r2, r3, d0
 8001ae0:	4620      	mov	r0, r4
 8001ae2:	4629      	mov	r1, r5
 8001ae4:	f7fe fbf0 	bl	80002c8 <__aeabi_dsub>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4614      	mov	r4, r2
 8001aee:	461d      	mov	r5, r3
 8001af0:	4b53      	ldr	r3, [pc, #332]	@ (8001c40 <LocationService_Init+0x1e0>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7fe fd47 	bl	8000588 <__aeabi_f2d>
 8001afa:	4602      	mov	r2, r0
 8001afc:	460b      	mov	r3, r1
 8001afe:	ed9f 1b48 	vldr	d1, [pc, #288]	@ 8001c20 <LocationService_Init+0x1c0>
 8001b02:	ec43 2b10 	vmov	d0, r2, r3
 8001b06:	f009 faed 	bl	800b0e4 <pow>
 8001b0a:	ec53 2b10 	vmov	r2, r3, d0
 8001b0e:	4620      	mov	r0, r4
 8001b10:	4629      	mov	r1, r5
 8001b12:	f7fe fbd9 	bl	80002c8 <__aeabi_dsub>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4614      	mov	r4, r2
 8001b1c:	461d      	mov	r5, r3
 8001b1e:	4b47      	ldr	r3, [pc, #284]	@ (8001c3c <LocationService_Init+0x1dc>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe fd30 	bl	8000588 <__aeabi_f2d>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	ed9f 1b3c 	vldr	d1, [pc, #240]	@ 8001c20 <LocationService_Init+0x1c0>
 8001b30:	ec43 2b10 	vmov	d0, r2, r3
 8001b34:	f009 fad6 	bl	800b0e4 <pow>
 8001b38:	ec53 2b10 	vmov	r2, r3, d0
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	4629      	mov	r1, r5
 8001b40:	f7fe fbc4 	bl	80002cc <__adddf3>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4610      	mov	r0, r2
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	f7ff f844 	bl	8000bd8 <__aeabi_d2f>
 8001b50:	4603      	mov	r3, r0
 8001b52:	4a3c      	ldr	r2, [pc, #240]	@ (8001c44 <LocationService_Init+0x1e4>)
 8001b54:	6013      	str	r3, [r2, #0]
	trilaterationCalcFPartial = - pow(slaveBeaconLocationB2.longitude, 2) + pow(slaveBeaconLocationB3.longitude, 2) - pow(slaveBeaconLocationB2.latitude, 2) + pow(slaveBeaconLocationB3.latitude, 2);
 8001b56:	4b3c      	ldr	r3, [pc, #240]	@ (8001c48 <LocationService_Init+0x1e8>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7fe fd14 	bl	8000588 <__aeabi_f2d>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	ed9f 1b2e 	vldr	d1, [pc, #184]	@ 8001c20 <LocationService_Init+0x1c0>
 8001b68:	ec43 2b10 	vmov	d0, r2, r3
 8001b6c:	f009 faba 	bl	800b0e4 <pow>
 8001b70:	ec55 4b10 	vmov	r4, r5, d0
 8001b74:	4b31      	ldr	r3, [pc, #196]	@ (8001c3c <LocationService_Init+0x1dc>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe fd05 	bl	8000588 <__aeabi_f2d>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	ed9f 1b27 	vldr	d1, [pc, #156]	@ 8001c20 <LocationService_Init+0x1c0>
 8001b86:	ec43 2b10 	vmov	d0, r2, r3
 8001b8a:	f009 faab 	bl	800b0e4 <pow>
 8001b8e:	ec53 2b10 	vmov	r2, r3, d0
 8001b92:	4620      	mov	r0, r4
 8001b94:	4629      	mov	r1, r5
 8001b96:	f7fe fb97 	bl	80002c8 <__aeabi_dsub>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	4614      	mov	r4, r2
 8001ba0:	461d      	mov	r5, r3
 8001ba2:	4b26      	ldr	r3, [pc, #152]	@ (8001c3c <LocationService_Init+0x1dc>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7fe fcee 	bl	8000588 <__aeabi_f2d>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	ed9f 1b1b 	vldr	d1, [pc, #108]	@ 8001c20 <LocationService_Init+0x1c0>
 8001bb4:	ec43 2b10 	vmov	d0, r2, r3
 8001bb8:	f009 fa94 	bl	800b0e4 <pow>
 8001bbc:	ec53 2b10 	vmov	r2, r3, d0
 8001bc0:	4620      	mov	r0, r4
 8001bc2:	4629      	mov	r1, r5
 8001bc4:	f7fe fb80 	bl	80002c8 <__aeabi_dsub>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4614      	mov	r4, r2
 8001bce:	461d      	mov	r5, r3
 8001bd0:	4b1d      	ldr	r3, [pc, #116]	@ (8001c48 <LocationService_Init+0x1e8>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe fcd7 	bl	8000588 <__aeabi_f2d>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	ed9f 1b10 	vldr	d1, [pc, #64]	@ 8001c20 <LocationService_Init+0x1c0>
 8001be2:	ec43 2b10 	vmov	d0, r2, r3
 8001be6:	f009 fa7d 	bl	800b0e4 <pow>
 8001bea:	ec53 2b10 	vmov	r2, r3, d0
 8001bee:	4620      	mov	r0, r4
 8001bf0:	4629      	mov	r1, r5
 8001bf2:	f7fe fb6b 	bl	80002cc <__adddf3>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f7fe ffeb 	bl	8000bd8 <__aeabi_d2f>
 8001c02:	4603      	mov	r3, r0
 8001c04:	4a11      	ldr	r2, [pc, #68]	@ (8001c4c <LocationService_Init+0x1ec>)
 8001c06:	6013      	str	r3, [r2, #0]

	JDY18Driver_InquireDevices(bleHandler.huart);
 8001c08:	4b07      	ldr	r3, [pc, #28]	@ (8001c28 <LocationService_Init+0x1c8>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff fc7b 	bl	8001508 <JDY18Driver_InquireDevices>
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bdb0      	pop	{r4, r5, r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	f3af 8000 	nop.w
 8001c20:	00000000 	.word	0x00000000
 8001c24:	40000000 	.word	0x40000000
 8001c28:	20000690 	.word	0x20000690
 8001c2c:	0800c4f4 	.word	0x0800c4f4
 8001c30:	2000069c 	.word	0x2000069c
 8001c34:	200006d0 	.word	0x200006d0
 8001c38:	20000704 	.word	0x20000704
 8001c3c:	20000020 	.word	0x20000020
 8001c40:	20000018 	.word	0x20000018
 8001c44:	20000740 	.word	0x20000740
 8001c48:	20000028 	.word	0x20000028
 8001c4c:	20000744 	.word	0x20000744

08001c50 <LocationService_CalculateDistance>:

float LocationService_CalculateDistance(int rssi)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
	return pow(10, ((MEASURED_POWER - rssi) / 20));
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	f06f 0351 	mvn.w	r3, #81	@ 0x51
 8001c5e:	1a9b      	subs	r3, r3, r2
 8001c60:	4a11      	ldr	r2, [pc, #68]	@ (8001ca8 <LocationService_CalculateDistance+0x58>)
 8001c62:	fb82 1203 	smull	r1, r2, r2, r3
 8001c66:	10d2      	asrs	r2, r2, #3
 8001c68:	17db      	asrs	r3, r3, #31
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7fe fc79 	bl	8000564 <__aeabi_i2d>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	ec43 2b11 	vmov	d1, r2, r3
 8001c7a:	ed9f 0b09 	vldr	d0, [pc, #36]	@ 8001ca0 <LocationService_CalculateDistance+0x50>
 8001c7e:	f009 fa31 	bl	800b0e4 <pow>
 8001c82:	ec53 2b10 	vmov	r2, r3, d0
 8001c86:	4610      	mov	r0, r2
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f7fe ffa5 	bl	8000bd8 <__aeabi_d2f>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	ee07 3a90 	vmov	s15, r3
}
 8001c94:	eeb0 0a67 	vmov.f32	s0, s15
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	00000000 	.word	0x00000000
 8001ca4:	40240000 	.word	0x40240000
 8001ca8:	66666667 	.word	0x66666667
 8001cac:	00000000 	.word	0x00000000

08001cb0 <LocationService_UpdateLocation>:

void LocationService_UpdateLocation()
{
 8001cb0:	b5b0      	push	{r4, r5, r7, lr}
 8001cb2:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8001cb6:	af00      	add	r7, sp, #0
	scan_t scannedDevices;
	float b1Distance = -1, b2Distance = -1, b3Distance = -1;
 8001cb8:	4bcb      	ldr	r3, [pc, #812]	@ (8001fe8 <LocationService_UpdateLocation+0x338>)
 8001cba:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8001cbe:	4bca      	ldr	r3, [pc, #808]	@ (8001fe8 <LocationService_UpdateLocation+0x338>)
 8001cc0:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8001cc4:	4bc8      	ldr	r3, [pc, #800]	@ (8001fe8 <LocationService_UpdateLocation+0x338>)
 8001cc6:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c

	JDY18Driver_GetScannedDevices(&scannedDevices);
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff fc3f 	bl	8001550 <JDY18Driver_GetScannedDevices>

	for(size_t i = 0; i < scannedDevices.size; i++) {
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 8001cd8:	e05e      	b.n	8001d98 <LocationService_UpdateLocation+0xe8>
		char* deviceName = scannedDevices.devices[i].name;
 8001cda:	1d39      	adds	r1, r7, #4
 8001cdc:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	4413      	add	r3, r2
 8001ce6:	011b      	lsls	r3, r3, #4
 8001ce8:	440b      	add	r3, r1
 8001cea:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
		int rssi = scannedDevices.devices[i].rssi;
 8001cee:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001cf2:	f5a3 7105 	sub.w	r1, r3, #532	@ 0x214
 8001cf6:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	4413      	add	r3, r2
 8001d00:	011b      	lsls	r3, r3, #4
 8001d02:	440b      	add	r3, r1
 8001d04:	332c      	adds	r3, #44	@ 0x2c
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8

		if(strstr(deviceName, SLAVE_BEACON_NAME_B1) != NULL) {
 8001d0c:	49b7      	ldr	r1, [pc, #732]	@ (8001fec <LocationService_UpdateLocation+0x33c>)
 8001d0e:	f8d7 01ec 	ldr.w	r0, [r7, #492]	@ 0x1ec
 8001d12:	f008 fd56 	bl	800a7c2 <strstr>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d00d      	beq.n	8001d38 <LocationService_UpdateLocation+0x88>
			b1Distance = DataFilterService_MovingAverage(&b1Buffer, LocationService_CalculateDistance(rssi));
 8001d1c:	f8d7 01e8 	ldr.w	r0, [r7, #488]	@ 0x1e8
 8001d20:	f7ff ff96 	bl	8001c50 <LocationService_CalculateDistance>
 8001d24:	eef0 7a40 	vmov.f32	s15, s0
 8001d28:	eeb0 0a67 	vmov.f32	s0, s15
 8001d2c:	48b0      	ldr	r0, [pc, #704]	@ (8001ff0 <LocationService_UpdateLocation+0x340>)
 8001d2e:	f000 fa07 	bl	8002140 <DataFilterService_MovingAverage>
 8001d32:	ed87 0a85 	vstr	s0, [r7, #532]	@ 0x214
 8001d36:	e02a      	b.n	8001d8e <LocationService_UpdateLocation+0xde>
		} else if(strstr(deviceName, SLAVE_BEACON_NAME_B2) != NULL) {
 8001d38:	49ae      	ldr	r1, [pc, #696]	@ (8001ff4 <LocationService_UpdateLocation+0x344>)
 8001d3a:	f8d7 01ec 	ldr.w	r0, [r7, #492]	@ 0x1ec
 8001d3e:	f008 fd40 	bl	800a7c2 <strstr>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d00d      	beq.n	8001d64 <LocationService_UpdateLocation+0xb4>
			b2Distance = DataFilterService_MovingAverage(&b2Buffer, LocationService_CalculateDistance(rssi));
 8001d48:	f8d7 01e8 	ldr.w	r0, [r7, #488]	@ 0x1e8
 8001d4c:	f7ff ff80 	bl	8001c50 <LocationService_CalculateDistance>
 8001d50:	eef0 7a40 	vmov.f32	s15, s0
 8001d54:	eeb0 0a67 	vmov.f32	s0, s15
 8001d58:	48a7      	ldr	r0, [pc, #668]	@ (8001ff8 <LocationService_UpdateLocation+0x348>)
 8001d5a:	f000 f9f1 	bl	8002140 <DataFilterService_MovingAverage>
 8001d5e:	ed87 0a84 	vstr	s0, [r7, #528]	@ 0x210
 8001d62:	e014      	b.n	8001d8e <LocationService_UpdateLocation+0xde>
		} else if(strstr(deviceName, SLAVE_BEACON_NAME_B3) != NULL) {
 8001d64:	49a5      	ldr	r1, [pc, #660]	@ (8001ffc <LocationService_UpdateLocation+0x34c>)
 8001d66:	f8d7 01ec 	ldr.w	r0, [r7, #492]	@ 0x1ec
 8001d6a:	f008 fd2a 	bl	800a7c2 <strstr>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00c      	beq.n	8001d8e <LocationService_UpdateLocation+0xde>
			b3Distance = DataFilterService_MovingAverage(&b3Buffer, LocationService_CalculateDistance(rssi));
 8001d74:	f8d7 01e8 	ldr.w	r0, [r7, #488]	@ 0x1e8
 8001d78:	f7ff ff6a 	bl	8001c50 <LocationService_CalculateDistance>
 8001d7c:	eef0 7a40 	vmov.f32	s15, s0
 8001d80:	eeb0 0a67 	vmov.f32	s0, s15
 8001d84:	489e      	ldr	r0, [pc, #632]	@ (8002000 <LocationService_UpdateLocation+0x350>)
 8001d86:	f000 f9db 	bl	8002140 <DataFilterService_MovingAverage>
 8001d8a:	ed87 0a83 	vstr	s0, [r7, #524]	@ 0x20c
	for(size_t i = 0; i < scannedDevices.size; i++) {
 8001d8e:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8001d92:	3301      	adds	r3, #1
 8001d94:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 8001d98:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001d9c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001da0:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 8001da4:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d396      	bcc.n	8001cda <LocationService_UpdateLocation+0x2a>
		}
	}

	if (b1Distance != -1 && b2Distance != -1 && b3Distance != -1) {
 8001dac:	edd7 7a85 	vldr	s15, [r7, #532]	@ 0x214
 8001db0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001db4:	eef4 7a47 	vcmp.f32	s15, s14
 8001db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dbc:	f000 8106 	beq.w	8001fcc <LocationService_UpdateLocation+0x31c>
 8001dc0:	edd7 7a84 	vldr	s15, [r7, #528]	@ 0x210
 8001dc4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001dc8:	eef4 7a47 	vcmp.f32	s15, s14
 8001dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd0:	f000 80fc 	beq.w	8001fcc <LocationService_UpdateLocation+0x31c>
 8001dd4:	edd7 7a83 	vldr	s15, [r7, #524]	@ 0x20c
 8001dd8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001ddc:	eef4 7a47 	vcmp.f32	s15, s14
 8001de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de4:	f000 80f2 	beq.w	8001fcc <LocationService_UpdateLocation+0x31c>
		float trilaterationCalcA = -2*slaveBeaconLocationB1.longitude + 2*slaveBeaconLocationB2.longitude;
 8001de8:	4b86      	ldr	r3, [pc, #536]	@ (8002004 <LocationService_UpdateLocation+0x354>)
 8001dea:	edd3 7a01 	vldr	s15, [r3, #4]
 8001dee:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001df2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001df6:	4b84      	ldr	r3, [pc, #528]	@ (8002008 <LocationService_UpdateLocation+0x358>)
 8001df8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001dfc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e04:	edc7 7a81 	vstr	s15, [r7, #516]	@ 0x204
		float trilaterationCalcB = -2*slaveBeaconLocationB1.latitude + 2*slaveBeaconLocationB2.latitude;
 8001e08:	4b7e      	ldr	r3, [pc, #504]	@ (8002004 <LocationService_UpdateLocation+0x354>)
 8001e0a:	edd3 7a00 	vldr	s15, [r3]
 8001e0e:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001e12:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e16:	4b7c      	ldr	r3, [pc, #496]	@ (8002008 <LocationService_UpdateLocation+0x358>)
 8001e18:	edd3 7a00 	vldr	s15, [r3]
 8001e1c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e24:	edc7 7a80 	vstr	s15, [r7, #512]	@ 0x200
		float trilaterationCalcC = pow(b1Distance, 2) - pow(b2Distance, 2) + trilaterationCalcCPartial;
 8001e28:	f8d7 0214 	ldr.w	r0, [r7, #532]	@ 0x214
 8001e2c:	f7fe fbac 	bl	8000588 <__aeabi_f2d>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	ed9f 1b6a 	vldr	d1, [pc, #424]	@ 8001fe0 <LocationService_UpdateLocation+0x330>
 8001e38:	ec43 2b10 	vmov	d0, r2, r3
 8001e3c:	f009 f952 	bl	800b0e4 <pow>
 8001e40:	ec55 4b10 	vmov	r4, r5, d0
 8001e44:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8001e48:	f7fe fb9e 	bl	8000588 <__aeabi_f2d>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	ed9f 1b63 	vldr	d1, [pc, #396]	@ 8001fe0 <LocationService_UpdateLocation+0x330>
 8001e54:	ec43 2b10 	vmov	d0, r2, r3
 8001e58:	f009 f944 	bl	800b0e4 <pow>
 8001e5c:	ec53 2b10 	vmov	r2, r3, d0
 8001e60:	4620      	mov	r0, r4
 8001e62:	4629      	mov	r1, r5
 8001e64:	f7fe fa30 	bl	80002c8 <__aeabi_dsub>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4614      	mov	r4, r2
 8001e6e:	461d      	mov	r5, r3
 8001e70:	4b66      	ldr	r3, [pc, #408]	@ (800200c <LocationService_UpdateLocation+0x35c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7fe fb87 	bl	8000588 <__aeabi_f2d>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	4620      	mov	r0, r4
 8001e80:	4629      	mov	r1, r5
 8001e82:	f7fe fa23 	bl	80002cc <__adddf3>
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	4610      	mov	r0, r2
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	f7fe fea3 	bl	8000bd8 <__aeabi_d2f>
 8001e92:	4603      	mov	r3, r0
 8001e94:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
		float trilaterationCalcD = -2*slaveBeaconLocationB2.longitude + 2*slaveBeaconLocationB3.longitude;
 8001e98:	4b5b      	ldr	r3, [pc, #364]	@ (8002008 <LocationService_UpdateLocation+0x358>)
 8001e9a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e9e:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001ea2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ea6:	4b5a      	ldr	r3, [pc, #360]	@ (8002010 <LocationService_UpdateLocation+0x360>)
 8001ea8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001eac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001eb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eb4:	edc7 7a7e 	vstr	s15, [r7, #504]	@ 0x1f8
		float trilaterationCalcE = -2*slaveBeaconLocationB2.latitude + 2*slaveBeaconLocationB3.latitude;
 8001eb8:	4b53      	ldr	r3, [pc, #332]	@ (8002008 <LocationService_UpdateLocation+0x358>)
 8001eba:	edd3 7a00 	vldr	s15, [r3]
 8001ebe:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001ec2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ec6:	4b52      	ldr	r3, [pc, #328]	@ (8002010 <LocationService_UpdateLocation+0x360>)
 8001ec8:	edd3 7a00 	vldr	s15, [r3]
 8001ecc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ed0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ed4:	edc7 7a7d 	vstr	s15, [r7, #500]	@ 0x1f4
		float trilaterationCalcF = pow(b2Distance, 2) - pow(b3Distance, 2) + trilaterationCalcFPartial;
 8001ed8:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8001edc:	f7fe fb54 	bl	8000588 <__aeabi_f2d>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	ed9f 1b3e 	vldr	d1, [pc, #248]	@ 8001fe0 <LocationService_UpdateLocation+0x330>
 8001ee8:	ec43 2b10 	vmov	d0, r2, r3
 8001eec:	f009 f8fa 	bl	800b0e4 <pow>
 8001ef0:	ec55 4b10 	vmov	r4, r5, d0
 8001ef4:	f8d7 020c 	ldr.w	r0, [r7, #524]	@ 0x20c
 8001ef8:	f7fe fb46 	bl	8000588 <__aeabi_f2d>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	ed9f 1b37 	vldr	d1, [pc, #220]	@ 8001fe0 <LocationService_UpdateLocation+0x330>
 8001f04:	ec43 2b10 	vmov	d0, r2, r3
 8001f08:	f009 f8ec 	bl	800b0e4 <pow>
 8001f0c:	ec53 2b10 	vmov	r2, r3, d0
 8001f10:	4620      	mov	r0, r4
 8001f12:	4629      	mov	r1, r5
 8001f14:	f7fe f9d8 	bl	80002c8 <__aeabi_dsub>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	4614      	mov	r4, r2
 8001f1e:	461d      	mov	r5, r3
 8001f20:	4b3c      	ldr	r3, [pc, #240]	@ (8002014 <LocationService_UpdateLocation+0x364>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7fe fb2f 	bl	8000588 <__aeabi_f2d>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	4620      	mov	r0, r4
 8001f30:	4629      	mov	r1, r5
 8001f32:	f7fe f9cb 	bl	80002cc <__adddf3>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4610      	mov	r0, r2
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	f7fe fe4b 	bl	8000bd8 <__aeabi_d2f>
 8001f42:	4603      	mov	r3, r0
 8001f44:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0

		masterLocation.longitude = (trilaterationCalcC*trilaterationCalcE - trilaterationCalcF*trilaterationCalcB)/(trilaterationCalcE*trilaterationCalcA - trilaterationCalcB*trilaterationCalcD);
 8001f48:	ed97 7a7f 	vldr	s14, [r7, #508]	@ 0x1fc
 8001f4c:	edd7 7a7d 	vldr	s15, [r7, #500]	@ 0x1f4
 8001f50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f54:	edd7 6a7c 	vldr	s13, [r7, #496]	@ 0x1f0
 8001f58:	edd7 7a80 	vldr	s15, [r7, #512]	@ 0x200
 8001f5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f60:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f64:	ed97 7a7d 	vldr	s14, [r7, #500]	@ 0x1f4
 8001f68:	edd7 7a81 	vldr	s15, [r7, #516]	@ 0x204
 8001f6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f70:	ed97 6a80 	vldr	s12, [r7, #512]	@ 0x200
 8001f74:	edd7 7a7e 	vldr	s15, [r7, #504]	@ 0x1f8
 8001f78:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f84:	4b24      	ldr	r3, [pc, #144]	@ (8002018 <LocationService_UpdateLocation+0x368>)
 8001f86:	edc3 7a01 	vstr	s15, [r3, #4]
		masterLocation.latitude= (trilaterationCalcC*trilaterationCalcD - trilaterationCalcA*trilaterationCalcF)/(trilaterationCalcB*trilaterationCalcD - trilaterationCalcA*trilaterationCalcE);
 8001f8a:	ed97 7a7f 	vldr	s14, [r7, #508]	@ 0x1fc
 8001f8e:	edd7 7a7e 	vldr	s15, [r7, #504]	@ 0x1f8
 8001f92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f96:	edd7 6a81 	vldr	s13, [r7, #516]	@ 0x204
 8001f9a:	edd7 7a7c 	vldr	s15, [r7, #496]	@ 0x1f0
 8001f9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fa2:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001fa6:	ed97 7a80 	vldr	s14, [r7, #512]	@ 0x200
 8001faa:	edd7 7a7e 	vldr	s15, [r7, #504]	@ 0x1f8
 8001fae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fb2:	ed97 6a81 	vldr	s12, [r7, #516]	@ 0x204
 8001fb6:	edd7 7a7d 	vldr	s15, [r7, #500]	@ 0x1f4
 8001fba:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001fbe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fc6:	4b14      	ldr	r3, [pc, #80]	@ (8002018 <LocationService_UpdateLocation+0x368>)
 8001fc8:	edc3 7a00 	vstr	s15, [r3]
	}

	JDY18Driver_InquireDevices(bleHandler.huart);
 8001fcc:	4b13      	ldr	r3, [pc, #76]	@ (800201c <LocationService_UpdateLocation+0x36c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff fa99 	bl	8001508 <JDY18Driver_InquireDevices>
}
 8001fd6:	bf00      	nop
 8001fd8:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bdb0      	pop	{r4, r5, r7, pc}
 8001fe0:	00000000 	.word	0x00000000
 8001fe4:	40000000 	.word	0x40000000
 8001fe8:	bf800000 	.word	0xbf800000
 8001fec:	0800c500 	.word	0x0800c500
 8001ff0:	2000069c 	.word	0x2000069c
 8001ff4:	0800c50c 	.word	0x0800c50c
 8001ff8:	200006d0 	.word	0x200006d0
 8001ffc:	0800c518 	.word	0x0800c518
 8002000:	20000704 	.word	0x20000704
 8002004:	20000018 	.word	0x20000018
 8002008:	20000020 	.word	0x20000020
 800200c:	20000740 	.word	0x20000740
 8002010:	20000028 	.word	0x20000028
 8002014:	20000744 	.word	0x20000744
 8002018:	20000738 	.word	0x20000738
 800201c:	20000690 	.word	0x20000690

08002020 <LocationService_GetArrivalAngle>:
{
	return masterLocation;
}

float LocationService_GetArrivalAngle()
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
	return atan((masterLocation.longitude - slaveBeaconLocationB2.longitude) / (masterLocation.latitude - slaveBeaconLocationB2.latitude)) * 180 / 3.14159265359 + 180;
 8002024:	4b22      	ldr	r3, [pc, #136]	@ (80020b0 <LocationService_GetArrivalAngle+0x90>)
 8002026:	ed93 7a01 	vldr	s14, [r3, #4]
 800202a:	4b22      	ldr	r3, [pc, #136]	@ (80020b4 <LocationService_GetArrivalAngle+0x94>)
 800202c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002030:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002034:	4b1e      	ldr	r3, [pc, #120]	@ (80020b0 <LocationService_GetArrivalAngle+0x90>)
 8002036:	edd3 6a00 	vldr	s13, [r3]
 800203a:	4b1e      	ldr	r3, [pc, #120]	@ (80020b4 <LocationService_GetArrivalAngle+0x94>)
 800203c:	edd3 7a00 	vldr	s15, [r3]
 8002040:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002044:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002048:	ee16 0a90 	vmov	r0, s13
 800204c:	f7fe fa9c 	bl	8000588 <__aeabi_f2d>
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	ec43 2b10 	vmov	d0, r2, r3
 8002058:	f009 f8b6 	bl	800b1c8 <atan>
 800205c:	ec51 0b10 	vmov	r0, r1, d0
 8002060:	f04f 0200 	mov.w	r2, #0
 8002064:	4b14      	ldr	r3, [pc, #80]	@ (80020b8 <LocationService_GetArrivalAngle+0x98>)
 8002066:	f7fe fae7 	bl	8000638 <__aeabi_dmul>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	4610      	mov	r0, r2
 8002070:	4619      	mov	r1, r3
 8002072:	a30d      	add	r3, pc, #52	@ (adr r3, 80020a8 <LocationService_GetArrivalAngle+0x88>)
 8002074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002078:	f7fe fc08 	bl	800088c <__aeabi_ddiv>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4610      	mov	r0, r2
 8002082:	4619      	mov	r1, r3
 8002084:	f04f 0200 	mov.w	r2, #0
 8002088:	4b0b      	ldr	r3, [pc, #44]	@ (80020b8 <LocationService_GetArrivalAngle+0x98>)
 800208a:	f7fe f91f 	bl	80002cc <__adddf3>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	4610      	mov	r0, r2
 8002094:	4619      	mov	r1, r3
 8002096:	f7fe fd9f 	bl	8000bd8 <__aeabi_d2f>
 800209a:	4603      	mov	r3, r0
 800209c:	ee07 3a90 	vmov	s15, r3
}
 80020a0:	eeb0 0a67 	vmov.f32	s0, s15
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	54442eea 	.word	0x54442eea
 80020ac:	400921fb 	.word	0x400921fb
 80020b0:	20000738 	.word	0x20000738
 80020b4:	20000020 	.word	0x20000020
 80020b8:	40668000 	.word	0x40668000

080020bc <LocationService_IsInDestiny>:

uint8_t LocationService_IsInDestiny()
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
	return ((masterLocation.longitude - slaveBeaconLocationB2.longitude) < PRECISION_BLE_METERS) && ((masterLocation.latitude - slaveBeaconLocationB2.latitude) < PRECISION_BLE_METERS) ? 1 : 0;
 80020c0:	4b13      	ldr	r3, [pc, #76]	@ (8002110 <LocationService_IsInDestiny+0x54>)
 80020c2:	ed93 7a01 	vldr	s14, [r3, #4]
 80020c6:	4b13      	ldr	r3, [pc, #76]	@ (8002114 <LocationService_IsInDestiny+0x58>)
 80020c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80020cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020d0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80020d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020dc:	d510      	bpl.n	8002100 <LocationService_IsInDestiny+0x44>
 80020de:	4b0c      	ldr	r3, [pc, #48]	@ (8002110 <LocationService_IsInDestiny+0x54>)
 80020e0:	ed93 7a00 	vldr	s14, [r3]
 80020e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002114 <LocationService_IsInDestiny+0x58>)
 80020e6:	edd3 7a00 	vldr	s15, [r3]
 80020ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020ee:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80020f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020fa:	d501      	bpl.n	8002100 <LocationService_IsInDestiny+0x44>
 80020fc:	2301      	movs	r3, #1
 80020fe:	e000      	b.n	8002102 <LocationService_IsInDestiny+0x46>
 8002100:	2300      	movs	r3, #0
 8002102:	b2db      	uxtb	r3, r3
}
 8002104:	4618      	mov	r0, r3
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	20000738 	.word	0x20000738
 8002114:	20000020 	.word	0x20000020

08002118 <DataFilterService_InitBuffer>:
 */

#include <Utils/Position_filter.h>

void DataFilterService_InitBuffer(buffer_t* buffer)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
	buffer->size = 0;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	62da      	str	r2, [r3, #44]	@ 0x2c
	buffer->sum = 0;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	629a      	str	r2, [r3, #40]	@ 0x28
	buffer->position = 0;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <DataFilterService_MovingAverage>:

float DataFilterService_MovingAverage(buffer_t* buffer, float newValue) {
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	ed87 0a00 	vstr	s0, [r7]
	if (buffer->size <= MAX_BUFFER_SIZE) buffer->size++;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002150:	2b0a      	cmp	r3, #10
 8002152:	d804      	bhi.n	800215e <DataFilterService_MovingAverage+0x1e>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002158:	1c5a      	adds	r2, r3, #1
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	62da      	str	r2, [r3, #44]	@ 0x2c
  buffer->sum += newValue - buffer->data[buffer->position];
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4413      	add	r3, r2
 800216e:	edd3 7a00 	vldr	s15, [r3]
 8002172:	edd7 6a00 	vldr	s13, [r7]
 8002176:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800217a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
  buffer->data[buffer->position] = newValue;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	601a      	str	r2, [r3, #0]
  buffer->position = (buffer->position + 1) % MAX_BUFFER_SIZE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002196:	1c59      	adds	r1, r3, #1
 8002198:	4b0f      	ldr	r3, [pc, #60]	@ (80021d8 <DataFilterService_MovingAverage+0x98>)
 800219a:	fba3 2301 	umull	r2, r3, r3, r1
 800219e:	08da      	lsrs	r2, r3, #3
 80021a0:	4613      	mov	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	1aca      	subs	r2, r1, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	631a      	str	r2, [r3, #48]	@ 0x30
  return (float)buffer->sum / buffer->size;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b8:	ee07 3a90 	vmov	s15, r3
 80021bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021c0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80021c4:	eef0 7a66 	vmov.f32	s15, s13
}
 80021c8:	eeb0 0a67 	vmov.f32	s0, s15
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	cccccccd 	.word	0xcccccccd

080021dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021dc:	b590      	push	{r4, r7, lr}
 80021de:	b093      	sub	sp, #76	@ 0x4c
 80021e0:	af12      	add	r7, sp, #72	@ 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021e2:	f000 fe6b 	bl	8002ebc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021e6:	f000 f85d 	bl	80022a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021ea:	f000 fa11 	bl	8002610 <MX_GPIO_Init>
  MX_DMA_Init();
 80021ee:	f000 f9ef 	bl	80025d0 <MX_DMA_Init>
  MX_I2C1_Init();
 80021f2:	f000 f8b7 	bl	8002364 <MX_I2C1_Init>
  MX_TIM4_Init();
 80021f6:	f000 f93d 	bl	8002474 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80021fa:	f000 f995 	bl	8002528 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80021fe:	f000 f9bd 	bl	800257c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8002202:	f000 f8dd 	bl	80023c0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HMC5883L_Init(hi2c1);
 8002206:	4c1a      	ldr	r4, [pc, #104]	@ (8002270 <main+0x94>)
 8002208:	4668      	mov	r0, sp
 800220a:	f104 0310 	add.w	r3, r4, #16
 800220e:	2244      	movs	r2, #68	@ 0x44
 8002210:	4619      	mov	r1, r3
 8002212:	f008 fb19 	bl	800a848 <memcpy>
 8002216:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800221a:	f7fe fea5 	bl	8000f68 <HMC5883L_Init>
  LocationService_Init(&huart3);
 800221e:	4815      	ldr	r0, [pc, #84]	@ (8002274 <main+0x98>)
 8002220:	f7ff fc1e 	bl	8001a60 <LocationService_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002224:	f005 f8ea 	bl	80073fc <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of positionMutex */
  positionMutexHandle = osSemaphoreNew(1, 1, &positionMutex_attributes);
 8002228:	4a13      	ldr	r2, [pc, #76]	@ (8002278 <main+0x9c>)
 800222a:	2101      	movs	r1, #1
 800222c:	2001      	movs	r0, #1
 800222e:	f005 f9dc 	bl	80075ea <osSemaphoreNew>
 8002232:	4603      	mov	r3, r0
 8002234:	4a11      	ldr	r2, [pc, #68]	@ (800227c <main+0xa0>)
 8002236:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002238:	4a11      	ldr	r2, [pc, #68]	@ (8002280 <main+0xa4>)
 800223a:	2100      	movs	r1, #0
 800223c:	4811      	ldr	r0, [pc, #68]	@ (8002284 <main+0xa8>)
 800223e:	f005 f927 	bl	8007490 <osThreadNew>
 8002242:	4603      	mov	r3, r0
 8002244:	4a10      	ldr	r2, [pc, #64]	@ (8002288 <main+0xac>)
 8002246:	6013      	str	r3, [r2, #0]

  /* creation of controlTask */
  controlTaskHandle = osThreadNew(executeControl, NULL, &controlTask_attributes);
 8002248:	4a10      	ldr	r2, [pc, #64]	@ (800228c <main+0xb0>)
 800224a:	2100      	movs	r1, #0
 800224c:	4810      	ldr	r0, [pc, #64]	@ (8002290 <main+0xb4>)
 800224e:	f005 f91f 	bl	8007490 <osThreadNew>
 8002252:	4603      	mov	r3, r0
 8002254:	4a0f      	ldr	r2, [pc, #60]	@ (8002294 <main+0xb8>)
 8002256:	6013      	str	r3, [r2, #0]

  /* creation of positionTask */
  positionTaskHandle = osThreadNew(calculatePosition, NULL, &positionTask_attributes);
 8002258:	4a0f      	ldr	r2, [pc, #60]	@ (8002298 <main+0xbc>)
 800225a:	2100      	movs	r1, #0
 800225c:	480f      	ldr	r0, [pc, #60]	@ (800229c <main+0xc0>)
 800225e:	f005 f917 	bl	8007490 <osThreadNew>
 8002262:	4603      	mov	r3, r0
 8002264:	4a0e      	ldr	r2, [pc, #56]	@ (80022a0 <main+0xc4>)
 8002266:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002268:	f005 f8ec 	bl	8007444 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800226c:	bf00      	nop
 800226e:	e7fd      	b.n	800226c <main+0x90>
 8002270:	20000748 	.word	0x20000748
 8002274:	20000874 	.word	0x20000874
 8002278:	0800c5e0 	.word	0x0800c5e0
 800227c:	20000928 	.word	0x20000928
 8002280:	0800c574 	.word	0x0800c574
 8002284:	080026e1 	.word	0x080026e1
 8002288:	2000091c 	.word	0x2000091c
 800228c:	0800c598 	.word	0x0800c598
 8002290:	080026f1 	.word	0x080026f1
 8002294:	20000920 	.word	0x20000920
 8002298:	0800c5bc 	.word	0x0800c5bc
 800229c:	08002809 	.word	0x08002809
 80022a0:	20000924 	.word	0x20000924

080022a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b094      	sub	sp, #80	@ 0x50
 80022a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022aa:	f107 031c 	add.w	r3, r7, #28
 80022ae:	2234      	movs	r2, #52	@ 0x34
 80022b0:	2100      	movs	r1, #0
 80022b2:	4618      	mov	r0, r3
 80022b4:	f008 fa70 	bl	800a798 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022b8:	f107 0308 	add.w	r3, r7, #8
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
 80022c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022c8:	2300      	movs	r3, #0
 80022ca:	607b      	str	r3, [r7, #4]
 80022cc:	4b23      	ldr	r3, [pc, #140]	@ (800235c <SystemClock_Config+0xb8>)
 80022ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d0:	4a22      	ldr	r2, [pc, #136]	@ (800235c <SystemClock_Config+0xb8>)
 80022d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80022d8:	4b20      	ldr	r3, [pc, #128]	@ (800235c <SystemClock_Config+0xb8>)
 80022da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022e0:	607b      	str	r3, [r7, #4]
 80022e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80022e4:	2300      	movs	r3, #0
 80022e6:	603b      	str	r3, [r7, #0]
 80022e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002360 <SystemClock_Config+0xbc>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80022f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002360 <SystemClock_Config+0xbc>)
 80022f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022f6:	6013      	str	r3, [r2, #0]
 80022f8:	4b19      	ldr	r3, [pc, #100]	@ (8002360 <SystemClock_Config+0xbc>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002300:	603b      	str	r3, [r7, #0]
 8002302:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002304:	2302      	movs	r3, #2
 8002306:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002308:	2301      	movs	r3, #1
 800230a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800230c:	2310      	movs	r3, #16
 800230e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002310:	2300      	movs	r3, #0
 8002312:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002314:	f107 031c 	add.w	r3, r7, #28
 8002318:	4618      	mov	r0, r3
 800231a:	f002 ffbf 	bl	800529c <HAL_RCC_OscConfig>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002324:	f000 fac7 	bl	80028b6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002328:	230f      	movs	r3, #15
 800232a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800232c:	2300      	movs	r3, #0
 800232e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002330:	2300      	movs	r3, #0
 8002332:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8002334:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002338:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800233a:	2300      	movs	r3, #0
 800233c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800233e:	f107 0308 	add.w	r3, r7, #8
 8002342:	2100      	movs	r1, #0
 8002344:	4618      	mov	r0, r3
 8002346:	f002 fcb3 	bl	8004cb0 <HAL_RCC_ClockConfig>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002350:	f000 fab1 	bl	80028b6 <Error_Handler>
  }
}
 8002354:	bf00      	nop
 8002356:	3750      	adds	r7, #80	@ 0x50
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40023800 	.word	0x40023800
 8002360:	40007000 	.word	0x40007000

08002364 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002368:	4b12      	ldr	r3, [pc, #72]	@ (80023b4 <MX_I2C1_Init+0x50>)
 800236a:	4a13      	ldr	r2, [pc, #76]	@ (80023b8 <MX_I2C1_Init+0x54>)
 800236c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800236e:	4b11      	ldr	r3, [pc, #68]	@ (80023b4 <MX_I2C1_Init+0x50>)
 8002370:	4a12      	ldr	r2, [pc, #72]	@ (80023bc <MX_I2C1_Init+0x58>)
 8002372:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002374:	4b0f      	ldr	r3, [pc, #60]	@ (80023b4 <MX_I2C1_Init+0x50>)
 8002376:	2200      	movs	r2, #0
 8002378:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800237a:	4b0e      	ldr	r3, [pc, #56]	@ (80023b4 <MX_I2C1_Init+0x50>)
 800237c:	2200      	movs	r2, #0
 800237e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002380:	4b0c      	ldr	r3, [pc, #48]	@ (80023b4 <MX_I2C1_Init+0x50>)
 8002382:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002386:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002388:	4b0a      	ldr	r3, [pc, #40]	@ (80023b4 <MX_I2C1_Init+0x50>)
 800238a:	2200      	movs	r2, #0
 800238c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800238e:	4b09      	ldr	r3, [pc, #36]	@ (80023b4 <MX_I2C1_Init+0x50>)
 8002390:	2200      	movs	r2, #0
 8002392:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002394:	4b07      	ldr	r3, [pc, #28]	@ (80023b4 <MX_I2C1_Init+0x50>)
 8002396:	2200      	movs	r2, #0
 8002398:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800239a:	4b06      	ldr	r3, [pc, #24]	@ (80023b4 <MX_I2C1_Init+0x50>)
 800239c:	2200      	movs	r2, #0
 800239e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023a0:	4804      	ldr	r0, [pc, #16]	@ (80023b4 <MX_I2C1_Init+0x50>)
 80023a2:	f001 fc61 	bl	8003c68 <HAL_I2C_Init>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80023ac:	f000 fa83 	bl	80028b6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80023b0:	bf00      	nop
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	20000748 	.word	0x20000748
 80023b8:	40005400 	.word	0x40005400
 80023bc:	000186a0 	.word	0x000186a0

080023c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08a      	sub	sp, #40	@ 0x28
 80023c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023c6:	f107 0320 	add.w	r3, r7, #32
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023d0:	1d3b      	adds	r3, r7, #4
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	605a      	str	r2, [r3, #4]
 80023d8:	609a      	str	r2, [r3, #8]
 80023da:	60da      	str	r2, [r3, #12]
 80023dc:	611a      	str	r2, [r3, #16]
 80023de:	615a      	str	r2, [r3, #20]
 80023e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023e2:	4b22      	ldr	r3, [pc, #136]	@ (800246c <MX_TIM3_Init+0xac>)
 80023e4:	4a22      	ldr	r2, [pc, #136]	@ (8002470 <MX_TIM3_Init+0xb0>)
 80023e6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 80023e8:	4b20      	ldr	r3, [pc, #128]	@ (800246c <MX_TIM3_Init+0xac>)
 80023ea:	223f      	movs	r2, #63	@ 0x3f
 80023ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ee:	4b1f      	ldr	r3, [pc, #124]	@ (800246c <MX_TIM3_Init+0xac>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1250;
 80023f4:	4b1d      	ldr	r3, [pc, #116]	@ (800246c <MX_TIM3_Init+0xac>)
 80023f6:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 80023fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023fc:	4b1b      	ldr	r3, [pc, #108]	@ (800246c <MX_TIM3_Init+0xac>)
 80023fe:	2200      	movs	r2, #0
 8002400:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002402:	4b1a      	ldr	r3, [pc, #104]	@ (800246c <MX_TIM3_Init+0xac>)
 8002404:	2200      	movs	r2, #0
 8002406:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002408:	4818      	ldr	r0, [pc, #96]	@ (800246c <MX_TIM3_Init+0xac>)
 800240a:	f003 faaf 	bl	800596c <HAL_TIM_PWM_Init>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002414:	f000 fa4f 	bl	80028b6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002418:	2300      	movs	r3, #0
 800241a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800241c:	2300      	movs	r3, #0
 800241e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002420:	f107 0320 	add.w	r3, r7, #32
 8002424:	4619      	mov	r1, r3
 8002426:	4811      	ldr	r0, [pc, #68]	@ (800246c <MX_TIM3_Init+0xac>)
 8002428:	f004 f884 	bl	8006534 <HAL_TIMEx_MasterConfigSynchronization>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002432:	f000 fa40 	bl	80028b6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002436:	2360      	movs	r3, #96	@ 0x60
 8002438:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002446:	1d3b      	adds	r3, r7, #4
 8002448:	2204      	movs	r2, #4
 800244a:	4619      	mov	r1, r3
 800244c:	4807      	ldr	r0, [pc, #28]	@ (800246c <MX_TIM3_Init+0xac>)
 800244e:	f003 fd05 	bl	8005e5c <HAL_TIM_PWM_ConfigChannel>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002458:	f000 fa2d 	bl	80028b6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800245c:	4803      	ldr	r0, [pc, #12]	@ (800246c <MX_TIM3_Init+0xac>)
 800245e:	f000 fadd 	bl	8002a1c <HAL_TIM_MspPostInit>

}
 8002462:	bf00      	nop
 8002464:	3728      	adds	r7, #40	@ 0x28
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	2000079c 	.word	0x2000079c
 8002470:	40000400 	.word	0x40000400

08002474 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b08a      	sub	sp, #40	@ 0x28
 8002478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800247a:	f107 0320 	add.w	r3, r7, #32
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002484:	1d3b      	adds	r3, r7, #4
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	605a      	str	r2, [r3, #4]
 800248c:	609a      	str	r2, [r3, #8]
 800248e:	60da      	str	r2, [r3, #12]
 8002490:	611a      	str	r2, [r3, #16]
 8002492:	615a      	str	r2, [r3, #20]
 8002494:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002496:	4b22      	ldr	r3, [pc, #136]	@ (8002520 <MX_TIM4_Init+0xac>)
 8002498:	4a22      	ldr	r2, [pc, #136]	@ (8002524 <MX_TIM4_Init+0xb0>)
 800249a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64-1;
 800249c:	4b20      	ldr	r3, [pc, #128]	@ (8002520 <MX_TIM4_Init+0xac>)
 800249e:	223f      	movs	r2, #63	@ 0x3f
 80024a0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002520 <MX_TIM4_Init+0xac>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1250;
 80024a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002520 <MX_TIM4_Init+0xac>)
 80024aa:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 80024ae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002520 <MX_TIM4_Init+0xac>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002520 <MX_TIM4_Init+0xac>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80024bc:	4818      	ldr	r0, [pc, #96]	@ (8002520 <MX_TIM4_Init+0xac>)
 80024be:	f003 fa55 	bl	800596c <HAL_TIM_PWM_Init>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80024c8:	f000 f9f5 	bl	80028b6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024cc:	2300      	movs	r3, #0
 80024ce:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024d0:	2300      	movs	r3, #0
 80024d2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80024d4:	f107 0320 	add.w	r3, r7, #32
 80024d8:	4619      	mov	r1, r3
 80024da:	4811      	ldr	r0, [pc, #68]	@ (8002520 <MX_TIM4_Init+0xac>)
 80024dc:	f004 f82a 	bl	8006534 <HAL_TIMEx_MasterConfigSynchronization>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80024e6:	f000 f9e6 	bl	80028b6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024ea:	2360      	movs	r3, #96	@ 0x60
 80024ec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024f2:	2300      	movs	r3, #0
 80024f4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024fa:	1d3b      	adds	r3, r7, #4
 80024fc:	2200      	movs	r2, #0
 80024fe:	4619      	mov	r1, r3
 8002500:	4807      	ldr	r0, [pc, #28]	@ (8002520 <MX_TIM4_Init+0xac>)
 8002502:	f003 fcab 	bl	8005e5c <HAL_TIM_PWM_ConfigChannel>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800250c:	f000 f9d3 	bl	80028b6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002510:	4803      	ldr	r0, [pc, #12]	@ (8002520 <MX_TIM4_Init+0xac>)
 8002512:	f000 fa83 	bl	8002a1c <HAL_TIM_MspPostInit>

}
 8002516:	bf00      	nop
 8002518:	3728      	adds	r7, #40	@ 0x28
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	200007e4 	.word	0x200007e4
 8002524:	40000800 	.word	0x40000800

08002528 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800252c:	4b11      	ldr	r3, [pc, #68]	@ (8002574 <MX_USART2_UART_Init+0x4c>)
 800252e:	4a12      	ldr	r2, [pc, #72]	@ (8002578 <MX_USART2_UART_Init+0x50>)
 8002530:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002532:	4b10      	ldr	r3, [pc, #64]	@ (8002574 <MX_USART2_UART_Init+0x4c>)
 8002534:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002538:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800253a:	4b0e      	ldr	r3, [pc, #56]	@ (8002574 <MX_USART2_UART_Init+0x4c>)
 800253c:	2200      	movs	r2, #0
 800253e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002540:	4b0c      	ldr	r3, [pc, #48]	@ (8002574 <MX_USART2_UART_Init+0x4c>)
 8002542:	2200      	movs	r2, #0
 8002544:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002546:	4b0b      	ldr	r3, [pc, #44]	@ (8002574 <MX_USART2_UART_Init+0x4c>)
 8002548:	2200      	movs	r2, #0
 800254a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800254c:	4b09      	ldr	r3, [pc, #36]	@ (8002574 <MX_USART2_UART_Init+0x4c>)
 800254e:	220c      	movs	r2, #12
 8002550:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002552:	4b08      	ldr	r3, [pc, #32]	@ (8002574 <MX_USART2_UART_Init+0x4c>)
 8002554:	2200      	movs	r2, #0
 8002556:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002558:	4b06      	ldr	r3, [pc, #24]	@ (8002574 <MX_USART2_UART_Init+0x4c>)
 800255a:	2200      	movs	r2, #0
 800255c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800255e:	4805      	ldr	r0, [pc, #20]	@ (8002574 <MX_USART2_UART_Init+0x4c>)
 8002560:	f004 f878 	bl	8006654 <HAL_UART_Init>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800256a:	f000 f9a4 	bl	80028b6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	2000082c 	.word	0x2000082c
 8002578:	40004400 	.word	0x40004400

0800257c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002580:	4b11      	ldr	r3, [pc, #68]	@ (80025c8 <MX_USART3_UART_Init+0x4c>)
 8002582:	4a12      	ldr	r2, [pc, #72]	@ (80025cc <MX_USART3_UART_Init+0x50>)
 8002584:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002586:	4b10      	ldr	r3, [pc, #64]	@ (80025c8 <MX_USART3_UART_Init+0x4c>)
 8002588:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800258c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800258e:	4b0e      	ldr	r3, [pc, #56]	@ (80025c8 <MX_USART3_UART_Init+0x4c>)
 8002590:	2200      	movs	r2, #0
 8002592:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002594:	4b0c      	ldr	r3, [pc, #48]	@ (80025c8 <MX_USART3_UART_Init+0x4c>)
 8002596:	2200      	movs	r2, #0
 8002598:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800259a:	4b0b      	ldr	r3, [pc, #44]	@ (80025c8 <MX_USART3_UART_Init+0x4c>)
 800259c:	2200      	movs	r2, #0
 800259e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80025a0:	4b09      	ldr	r3, [pc, #36]	@ (80025c8 <MX_USART3_UART_Init+0x4c>)
 80025a2:	220c      	movs	r2, #12
 80025a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025a6:	4b08      	ldr	r3, [pc, #32]	@ (80025c8 <MX_USART3_UART_Init+0x4c>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80025ac:	4b06      	ldr	r3, [pc, #24]	@ (80025c8 <MX_USART3_UART_Init+0x4c>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80025b2:	4805      	ldr	r0, [pc, #20]	@ (80025c8 <MX_USART3_UART_Init+0x4c>)
 80025b4:	f004 f84e 	bl	8006654 <HAL_UART_Init>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80025be:	f000 f97a 	bl	80028b6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	20000874 	.word	0x20000874
 80025cc:	40004800 	.word	0x40004800

080025d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025d6:	2300      	movs	r3, #0
 80025d8:	607b      	str	r3, [r7, #4]
 80025da:	4b0c      	ldr	r3, [pc, #48]	@ (800260c <MX_DMA_Init+0x3c>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025de:	4a0b      	ldr	r2, [pc, #44]	@ (800260c <MX_DMA_Init+0x3c>)
 80025e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80025e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025e6:	4b09      	ldr	r3, [pc, #36]	@ (800260c <MX_DMA_Init+0x3c>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025ee:	607b      	str	r3, [r7, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80025f2:	2200      	movs	r2, #0
 80025f4:	2105      	movs	r1, #5
 80025f6:	200c      	movs	r0, #12
 80025f8:	f000 fd7e 	bl	80030f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80025fc:	200c      	movs	r0, #12
 80025fe:	f000 fd97 	bl	8003130 <HAL_NVIC_EnableIRQ>

}
 8002602:	bf00      	nop
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40023800 	.word	0x40023800

08002610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b088      	sub	sp, #32
 8002614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002616:	f107 030c 	add.w	r3, r7, #12
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	605a      	str	r2, [r3, #4]
 8002620:	609a      	str	r2, [r3, #8]
 8002622:	60da      	str	r2, [r3, #12]
 8002624:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	60bb      	str	r3, [r7, #8]
 800262a:	4b2a      	ldr	r3, [pc, #168]	@ (80026d4 <MX_GPIO_Init+0xc4>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262e:	4a29      	ldr	r2, [pc, #164]	@ (80026d4 <MX_GPIO_Init+0xc4>)
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	6313      	str	r3, [r2, #48]	@ 0x30
 8002636:	4b27      	ldr	r3, [pc, #156]	@ (80026d4 <MX_GPIO_Init+0xc4>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	60bb      	str	r3, [r7, #8]
 8002640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	607b      	str	r3, [r7, #4]
 8002646:	4b23      	ldr	r3, [pc, #140]	@ (80026d4 <MX_GPIO_Init+0xc4>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264a:	4a22      	ldr	r2, [pc, #136]	@ (80026d4 <MX_GPIO_Init+0xc4>)
 800264c:	f043 0304 	orr.w	r3, r3, #4
 8002650:	6313      	str	r3, [r2, #48]	@ 0x30
 8002652:	4b20      	ldr	r3, [pc, #128]	@ (80026d4 <MX_GPIO_Init+0xc4>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002656:	f003 0304 	and.w	r3, r3, #4
 800265a:	607b      	str	r3, [r7, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	603b      	str	r3, [r7, #0]
 8002662:	4b1c      	ldr	r3, [pc, #112]	@ (80026d4 <MX_GPIO_Init+0xc4>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002666:	4a1b      	ldr	r2, [pc, #108]	@ (80026d4 <MX_GPIO_Init+0xc4>)
 8002668:	f043 0302 	orr.w	r3, r3, #2
 800266c:	6313      	str	r3, [r2, #48]	@ 0x30
 800266e:	4b19      	ldr	r3, [pc, #100]	@ (80026d4 <MX_GPIO_Init+0xc4>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	603b      	str	r3, [r7, #0]
 8002678:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, L293D_LATCH_Pin|L293D_EN_Pin|L293D_SER_Pin, GPIO_PIN_RESET);
 800267a:	2200      	movs	r2, #0
 800267c:	f44f 7150 	mov.w	r1, #832	@ 0x340
 8002680:	4815      	ldr	r0, [pc, #84]	@ (80026d8 <MX_GPIO_Init+0xc8>)
 8002682:	f001 fad7 	bl	8003c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L293D_CLK_GPIO_Port, L293D_CLK_Pin, GPIO_PIN_RESET);
 8002686:	2200      	movs	r2, #0
 8002688:	2120      	movs	r1, #32
 800268a:	4814      	ldr	r0, [pc, #80]	@ (80026dc <MX_GPIO_Init+0xcc>)
 800268c:	f001 fad2 	bl	8003c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : L293D_LATCH_Pin L293D_EN_Pin L293D_SER_Pin */
  GPIO_InitStruct.Pin = L293D_LATCH_Pin|L293D_EN_Pin|L293D_SER_Pin;
 8002690:	f44f 7350 	mov.w	r3, #832	@ 0x340
 8002694:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002696:	2301      	movs	r3, #1
 8002698:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269a:	2300      	movs	r3, #0
 800269c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269e:	2300      	movs	r3, #0
 80026a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a2:	f107 030c 	add.w	r3, r7, #12
 80026a6:	4619      	mov	r1, r3
 80026a8:	480b      	ldr	r0, [pc, #44]	@ (80026d8 <MX_GPIO_Init+0xc8>)
 80026aa:	f001 f92f 	bl	800390c <HAL_GPIO_Init>

  /*Configure GPIO pin : L293D_CLK_Pin */
  GPIO_InitStruct.Pin = L293D_CLK_Pin;
 80026ae:	2320      	movs	r3, #32
 80026b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026b2:	2301      	movs	r3, #1
 80026b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ba:	2300      	movs	r3, #0
 80026bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(L293D_CLK_GPIO_Port, &GPIO_InitStruct);
 80026be:	f107 030c 	add.w	r3, r7, #12
 80026c2:	4619      	mov	r1, r3
 80026c4:	4805      	ldr	r0, [pc, #20]	@ (80026dc <MX_GPIO_Init+0xcc>)
 80026c6:	f001 f921 	bl	800390c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80026ca:	bf00      	nop
 80026cc:	3720      	adds	r7, #32
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40023800 	.word	0x40023800
 80026d8:	40020000 	.word	0x40020000
 80026dc:	40020400 	.word	0x40020400

080026e0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80026e8:	2001      	movs	r0, #1
 80026ea:	f004 ff63 	bl	80075b4 <osDelay>
 80026ee:	e7fb      	b.n	80026e8 <StartDefaultTask+0x8>

080026f0 <executeControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_executeControl */
void executeControl(void *argument)
{
 80026f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026f2:	b095      	sub	sp, #84	@ 0x54
 80026f4:	af12      	add	r7, sp, #72	@ 0x48
 80026f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN executeControl */
  /* Infinite loop */
  for(;;)
  {
	  xSemaphoreTake(positionMutexHandle, portMAX_DELAY);
 80026f8:	4b38      	ldr	r3, [pc, #224]	@ (80027dc <executeControl+0xec>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002700:	4618      	mov	r0, r3
 8002702:	f005 fd19 	bl	8008138 <xQueueSemaphoreTake>
	  if(executarControle == 1){
 8002706:	4b36      	ldr	r3, [pc, #216]	@ (80027e0 <executeControl+0xf0>)
 8002708:	f993 3000 	ldrsb.w	r3, [r3]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d159      	bne.n	80027c4 <executeControl+0xd4>
		  erro = PosBoat.angle - DesirePos.angle;
 8002710:	4b34      	ldr	r3, [pc, #208]	@ (80027e4 <executeControl+0xf4>)
 8002712:	ed93 7a01 	vldr	s14, [r3, #4]
 8002716:	4b34      	ldr	r3, [pc, #208]	@ (80027e8 <executeControl+0xf8>)
 8002718:	edd3 7a01 	vldr	s15, [r3, #4]
 800271c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002720:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002724:	ee17 3a90 	vmov	r3, s15
 8002728:	b21a      	sxth	r2, r3
 800272a:	4b30      	ldr	r3, [pc, #192]	@ (80027ec <executeControl+0xfc>)
 800272c:	801a      	strh	r2, [r3, #0]
		  integrador += erro;
 800272e:	4b2f      	ldr	r3, [pc, #188]	@ (80027ec <executeControl+0xfc>)
 8002730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002734:	ee07 3a90 	vmov	s15, r3
 8002738:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800273c:	4b2c      	ldr	r3, [pc, #176]	@ (80027f0 <executeControl+0x100>)
 800273e:	edd3 7a00 	vldr	s15, [r3]
 8002742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002746:	4b2a      	ldr	r3, [pc, #168]	@ (80027f0 <executeControl+0x100>)
 8002748:	edc3 7a00 	vstr	s15, [r3]
		  PosBoat.angle -= (Kp*erro + Ki*integrador);
 800274c:	4b25      	ldr	r3, [pc, #148]	@ (80027e4 <executeControl+0xf4>)
 800274e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002752:	4b28      	ldr	r3, [pc, #160]	@ (80027f4 <executeControl+0x104>)
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	461a      	mov	r2, r3
 8002758:	4b24      	ldr	r3, [pc, #144]	@ (80027ec <executeControl+0xfc>)
 800275a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800275e:	fb02 f303 	mul.w	r3, r2, r3
 8002762:	ee07 3a90 	vmov	s15, r3
 8002766:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800276a:	4b23      	ldr	r3, [pc, #140]	@ (80027f8 <executeControl+0x108>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	ee07 3a90 	vmov	s15, r3
 8002772:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8002776:	4b1e      	ldr	r3, [pc, #120]	@ (80027f0 <executeControl+0x100>)
 8002778:	edd3 7a00 	vldr	s15, [r3]
 800277c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002780:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002784:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002788:	4b16      	ldr	r3, [pc, #88]	@ (80027e4 <executeControl+0xf4>)
 800278a:	edc3 7a01 	vstr	s15, [r3, #4]
		  SG90_Update(htim4, TIM_CHANNEL_1, &PosBoat.angle,&DesirePos.angle);
 800278e:	4e1b      	ldr	r6, [pc, #108]	@ (80027fc <executeControl+0x10c>)
 8002790:	4b1b      	ldr	r3, [pc, #108]	@ (8002800 <executeControl+0x110>)
 8002792:	9310      	str	r3, [sp, #64]	@ 0x40
 8002794:	4b1b      	ldr	r3, [pc, #108]	@ (8002804 <executeControl+0x114>)
 8002796:	930f      	str	r3, [sp, #60]	@ 0x3c
 8002798:	2300      	movs	r3, #0
 800279a:	930e      	str	r3, [sp, #56]	@ 0x38
 800279c:	466d      	mov	r5, sp
 800279e:	f106 0410 	add.w	r4, r6, #16
 80027a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80027b6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80027ba:	f7ff f913 	bl	80019e4 <SG90_Update>
		  executarControle = 0;
 80027be:	4b08      	ldr	r3, [pc, #32]	@ (80027e0 <executeControl+0xf0>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	701a      	strb	r2, [r3, #0]
	  }
	  xSemaphoreGive(positionMutexHandle);
 80027c4:	4b05      	ldr	r3, [pc, #20]	@ (80027dc <executeControl+0xec>)
 80027c6:	6818      	ldr	r0, [r3, #0]
 80027c8:	2300      	movs	r3, #0
 80027ca:	2200      	movs	r2, #0
 80027cc:	2100      	movs	r1, #0
 80027ce:	f005 fa31 	bl	8007c34 <xQueueGenericSend>
	  osDelay(100);
 80027d2:	2064      	movs	r0, #100	@ 0x64
 80027d4:	f004 feee 	bl	80075b4 <osDelay>
	  xSemaphoreTake(positionMutexHandle, portMAX_DELAY);
 80027d8:	e78e      	b.n	80026f8 <executeControl+0x8>
 80027da:	bf00      	nop
 80027dc:	20000928 	.word	0x20000928
 80027e0:	20000944 	.word	0x20000944
 80027e4:	2000092c 	.word	0x2000092c
 80027e8:	20000934 	.word	0x20000934
 80027ec:	2000093c 	.word	0x2000093c
 80027f0:	20000940 	.word	0x20000940
 80027f4:	20000030 	.word	0x20000030
 80027f8:	20000031 	.word	0x20000031
 80027fc:	200007e4 	.word	0x200007e4
 8002800:	20000938 	.word	0x20000938
 8002804:	20000930 	.word	0x20000930

08002808 <calculatePosition>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_calculatePosition */
void calculatePosition(void *argument)
{
 8002808:	b590      	push	{r4, r7, lr}
 800280a:	b097      	sub	sp, #92	@ 0x5c
 800280c:	af14      	add	r7, sp, #80	@ 0x50
 800280e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN calculatePosition */
  /* Infinite loop */
  for(;;)
  {

	  xSemaphoreTake(positionMutexHandle, portMAX_DELAY);
 8002810:	4b1a      	ldr	r3, [pc, #104]	@ (800287c <calculatePosition+0x74>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f04f 31ff 	mov.w	r1, #4294967295
 8002818:	4618      	mov	r0, r3
 800281a:	f005 fc8d 	bl	8008138 <xQueueSemaphoreTake>
	  // Enquanto o barco não chegar no destino é preciso atuar controle sobre ele
	  if(LocationService_IsInDestiny() != 1){
 800281e:	f7ff fc4d 	bl	80020bc <LocationService_IsInDestiny>
 8002822:	4603      	mov	r3, r0
 8002824:	2b01      	cmp	r3, #1
 8002826:	d01d      	beq.n	8002864 <calculatePosition+0x5c>
		  executarControle = 1;
 8002828:	4b15      	ldr	r3, [pc, #84]	@ (8002880 <calculatePosition+0x78>)
 800282a:	2201      	movs	r2, #1
 800282c:	701a      	strb	r2, [r3, #0]
		  // Atualiza magnetômetro
		  getDirectionBoat (hi2c1, &PosBoat.x,&PosBoat.y,&PosBoat.angle);
 800282e:	4c15      	ldr	r4, [pc, #84]	@ (8002884 <calculatePosition+0x7c>)
 8002830:	4b15      	ldr	r3, [pc, #84]	@ (8002888 <calculatePosition+0x80>)
 8002832:	9313      	str	r3, [sp, #76]	@ 0x4c
 8002834:	4b15      	ldr	r3, [pc, #84]	@ (800288c <calculatePosition+0x84>)
 8002836:	9312      	str	r3, [sp, #72]	@ 0x48
 8002838:	4b15      	ldr	r3, [pc, #84]	@ (8002890 <calculatePosition+0x88>)
 800283a:	9311      	str	r3, [sp, #68]	@ 0x44
 800283c:	4668      	mov	r0, sp
 800283e:	f104 0310 	add.w	r3, r4, #16
 8002842:	2244      	movs	r2, #68	@ 0x44
 8002844:	4619      	mov	r1, r3
 8002846:	f007 ffff 	bl	800a848 <memcpy>
 800284a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800284e:	f7fe fcbd 	bl	80011cc <getDirectionBoat>
		  // Atualiza beacon
		  LocationService_UpdateLocation();
 8002852:	f7ff fa2d 	bl	8001cb0 <LocationService_UpdateLocation>
		  DesirePos.angle = LocationService_GetArrivalAngle();
 8002856:	f7ff fbe3 	bl	8002020 <LocationService_GetArrivalAngle>
 800285a:	eef0 7a40 	vmov.f32	s15, s0
 800285e:	4b0d      	ldr	r3, [pc, #52]	@ (8002894 <calculatePosition+0x8c>)
 8002860:	edc3 7a01 	vstr	s15, [r3, #4]
	  }
	  xSemaphoreGive(positionMutexHandle);
 8002864:	4b05      	ldr	r3, [pc, #20]	@ (800287c <calculatePosition+0x74>)
 8002866:	6818      	ldr	r0, [r3, #0]
 8002868:	2300      	movs	r3, #0
 800286a:	2200      	movs	r2, #0
 800286c:	2100      	movs	r1, #0
 800286e:	f005 f9e1 	bl	8007c34 <xQueueGenericSend>
	  osDelay(100);
 8002872:	2064      	movs	r0, #100	@ 0x64
 8002874:	f004 fe9e 	bl	80075b4 <osDelay>
	  xSemaphoreTake(positionMutexHandle, portMAX_DELAY);
 8002878:	e7ca      	b.n	8002810 <calculatePosition+0x8>
 800287a:	bf00      	nop
 800287c:	20000928 	.word	0x20000928
 8002880:	20000944 	.word	0x20000944
 8002884:	20000748 	.word	0x20000748
 8002888:	20000930 	.word	0x20000930
 800288c:	2000092e 	.word	0x2000092e
 8002890:	2000092c 	.word	0x2000092c
 8002894:	20000934 	.word	0x20000934

08002898 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028a8:	d101      	bne.n	80028ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80028aa:	f000 fb29 	bl	8002f00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80028ae:	bf00      	nop
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028b6:	b480      	push	{r7}
 80028b8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028ba:	b672      	cpsid	i
}
 80028bc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028be:	bf00      	nop
 80028c0:	e7fd      	b.n	80028be <Error_Handler+0x8>
	...

080028c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	607b      	str	r3, [r7, #4]
 80028ce:	4b12      	ldr	r3, [pc, #72]	@ (8002918 <HAL_MspInit+0x54>)
 80028d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d2:	4a11      	ldr	r2, [pc, #68]	@ (8002918 <HAL_MspInit+0x54>)
 80028d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80028da:	4b0f      	ldr	r3, [pc, #60]	@ (8002918 <HAL_MspInit+0x54>)
 80028dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028e2:	607b      	str	r3, [r7, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	603b      	str	r3, [r7, #0]
 80028ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002918 <HAL_MspInit+0x54>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002918 <HAL_MspInit+0x54>)
 80028f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80028f6:	4b08      	ldr	r3, [pc, #32]	@ (8002918 <HAL_MspInit+0x54>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028fe:	603b      	str	r3, [r7, #0]
 8002900:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002902:	2200      	movs	r2, #0
 8002904:	210f      	movs	r1, #15
 8002906:	f06f 0001 	mvn.w	r0, #1
 800290a:	f000 fbf5 	bl	80030f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800290e:	bf00      	nop
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40023800 	.word	0x40023800

0800291c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08a      	sub	sp, #40	@ 0x28
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002924:	f107 0314 	add.w	r3, r7, #20
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	60da      	str	r2, [r3, #12]
 8002932:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a19      	ldr	r2, [pc, #100]	@ (80029a0 <HAL_I2C_MspInit+0x84>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d12c      	bne.n	8002998 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	613b      	str	r3, [r7, #16]
 8002942:	4b18      	ldr	r3, [pc, #96]	@ (80029a4 <HAL_I2C_MspInit+0x88>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002946:	4a17      	ldr	r2, [pc, #92]	@ (80029a4 <HAL_I2C_MspInit+0x88>)
 8002948:	f043 0302 	orr.w	r3, r3, #2
 800294c:	6313      	str	r3, [r2, #48]	@ 0x30
 800294e:	4b15      	ldr	r3, [pc, #84]	@ (80029a4 <HAL_I2C_MspInit+0x88>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	613b      	str	r3, [r7, #16]
 8002958:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = MAG_SDA_Pin|MAG_SCL_Pin;
 800295a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800295e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002960:	2312      	movs	r3, #18
 8002962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002964:	2300      	movs	r3, #0
 8002966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002968:	2303      	movs	r3, #3
 800296a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800296c:	2304      	movs	r3, #4
 800296e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002970:	f107 0314 	add.w	r3, r7, #20
 8002974:	4619      	mov	r1, r3
 8002976:	480c      	ldr	r0, [pc, #48]	@ (80029a8 <HAL_I2C_MspInit+0x8c>)
 8002978:	f000 ffc8 	bl	800390c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800297c:	2300      	movs	r3, #0
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	4b08      	ldr	r3, [pc, #32]	@ (80029a4 <HAL_I2C_MspInit+0x88>)
 8002982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002984:	4a07      	ldr	r2, [pc, #28]	@ (80029a4 <HAL_I2C_MspInit+0x88>)
 8002986:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800298a:	6413      	str	r3, [r2, #64]	@ 0x40
 800298c:	4b05      	ldr	r3, [pc, #20]	@ (80029a4 <HAL_I2C_MspInit+0x88>)
 800298e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002990:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002998:	bf00      	nop
 800299a:	3728      	adds	r7, #40	@ 0x28
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40005400 	.word	0x40005400
 80029a4:	40023800 	.word	0x40023800
 80029a8:	40020400 	.word	0x40020400

080029ac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a15      	ldr	r2, [pc, #84]	@ (8002a10 <HAL_TIM_PWM_MspInit+0x64>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d10e      	bne.n	80029dc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	4b14      	ldr	r3, [pc, #80]	@ (8002a14 <HAL_TIM_PWM_MspInit+0x68>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c6:	4a13      	ldr	r2, [pc, #76]	@ (8002a14 <HAL_TIM_PWM_MspInit+0x68>)
 80029c8:	f043 0302 	orr.w	r3, r3, #2
 80029cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ce:	4b11      	ldr	r3, [pc, #68]	@ (8002a14 <HAL_TIM_PWM_MspInit+0x68>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80029da:	e012      	b.n	8002a02 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002a18 <HAL_TIM_PWM_MspInit+0x6c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d10d      	bne.n	8002a02 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	60bb      	str	r3, [r7, #8]
 80029ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002a14 <HAL_TIM_PWM_MspInit+0x68>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ee:	4a09      	ldr	r2, [pc, #36]	@ (8002a14 <HAL_TIM_PWM_MspInit+0x68>)
 80029f0:	f043 0304 	orr.w	r3, r3, #4
 80029f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029f6:	4b07      	ldr	r3, [pc, #28]	@ (8002a14 <HAL_TIM_PWM_MspInit+0x68>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fa:	f003 0304 	and.w	r3, r3, #4
 80029fe:	60bb      	str	r3, [r7, #8]
 8002a00:	68bb      	ldr	r3, [r7, #8]
}
 8002a02:	bf00      	nop
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40000400 	.word	0x40000400
 8002a14:	40023800 	.word	0x40023800
 8002a18:	40000800 	.word	0x40000800

08002a1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b08a      	sub	sp, #40	@ 0x28
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a24:	f107 0314 	add.w	r3, r7, #20
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	605a      	str	r2, [r3, #4]
 8002a2e:	609a      	str	r2, [r3, #8]
 8002a30:	60da      	str	r2, [r3, #12]
 8002a32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a24      	ldr	r2, [pc, #144]	@ (8002acc <HAL_TIM_MspPostInit+0xb0>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d11e      	bne.n	8002a7c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	613b      	str	r3, [r7, #16]
 8002a42:	4b23      	ldr	r3, [pc, #140]	@ (8002ad0 <HAL_TIM_MspPostInit+0xb4>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a46:	4a22      	ldr	r2, [pc, #136]	@ (8002ad0 <HAL_TIM_MspPostInit+0xb4>)
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a4e:	4b20      	ldr	r3, [pc, #128]	@ (8002ad0 <HAL_TIM_MspPostInit+0xb4>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	613b      	str	r3, [r7, #16]
 8002a58:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = L293D_PWM_Pin;
 8002a5a:	2380      	movs	r3, #128	@ 0x80
 8002a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a66:	2300      	movs	r3, #0
 8002a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(L293D_PWM_GPIO_Port, &GPIO_InitStruct);
 8002a6e:	f107 0314 	add.w	r3, r7, #20
 8002a72:	4619      	mov	r1, r3
 8002a74:	4817      	ldr	r0, [pc, #92]	@ (8002ad4 <HAL_TIM_MspPostInit+0xb8>)
 8002a76:	f000 ff49 	bl	800390c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002a7a:	e022      	b.n	8002ac2 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a15      	ldr	r2, [pc, #84]	@ (8002ad8 <HAL_TIM_MspPostInit+0xbc>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d11d      	bne.n	8002ac2 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	4b11      	ldr	r3, [pc, #68]	@ (8002ad0 <HAL_TIM_MspPostInit+0xb4>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8e:	4a10      	ldr	r2, [pc, #64]	@ (8002ad0 <HAL_TIM_MspPostInit+0xb4>)
 8002a90:	f043 0302 	orr.w	r3, r3, #2
 8002a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a96:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad0 <HAL_TIM_MspPostInit+0xb4>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SG90_PWM_Pin;
 8002aa2:	2340      	movs	r3, #64	@ 0x40
 8002aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SG90_PWM_GPIO_Port, &GPIO_InitStruct);
 8002ab6:	f107 0314 	add.w	r3, r7, #20
 8002aba:	4619      	mov	r1, r3
 8002abc:	4807      	ldr	r0, [pc, #28]	@ (8002adc <HAL_TIM_MspPostInit+0xc0>)
 8002abe:	f000 ff25 	bl	800390c <HAL_GPIO_Init>
}
 8002ac2:	bf00      	nop
 8002ac4:	3728      	adds	r7, #40	@ 0x28
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40000400 	.word	0x40000400
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	40020000 	.word	0x40020000
 8002ad8:	40000800 	.word	0x40000800
 8002adc:	40020400 	.word	0x40020400

08002ae0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b08c      	sub	sp, #48	@ 0x30
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae8:	f107 031c 	add.w	r3, r7, #28
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	605a      	str	r2, [r3, #4]
 8002af2:	609a      	str	r2, [r3, #8]
 8002af4:	60da      	str	r2, [r3, #12]
 8002af6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a58      	ldr	r2, [pc, #352]	@ (8002c60 <HAL_UART_MspInit+0x180>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d12c      	bne.n	8002b5c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	61bb      	str	r3, [r7, #24]
 8002b06:	4b57      	ldr	r3, [pc, #348]	@ (8002c64 <HAL_UART_MspInit+0x184>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0a:	4a56      	ldr	r2, [pc, #344]	@ (8002c64 <HAL_UART_MspInit+0x184>)
 8002b0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b10:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b12:	4b54      	ldr	r3, [pc, #336]	@ (8002c64 <HAL_UART_MspInit+0x184>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b1a:	61bb      	str	r3, [r7, #24]
 8002b1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]
 8002b22:	4b50      	ldr	r3, [pc, #320]	@ (8002c64 <HAL_UART_MspInit+0x184>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b26:	4a4f      	ldr	r2, [pc, #316]	@ (8002c64 <HAL_UART_MspInit+0x184>)
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b2e:	4b4d      	ldr	r3, [pc, #308]	@ (8002c64 <HAL_UART_MspInit+0x184>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	617b      	str	r3, [r7, #20]
 8002b38:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8002b3a:	230c      	movs	r3, #12
 8002b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b46:	2303      	movs	r3, #3
 8002b48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b4a:	2307      	movs	r3, #7
 8002b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b4e:	f107 031c 	add.w	r3, r7, #28
 8002b52:	4619      	mov	r1, r3
 8002b54:	4844      	ldr	r0, [pc, #272]	@ (8002c68 <HAL_UART_MspInit+0x188>)
 8002b56:	f000 fed9 	bl	800390c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002b5a:	e07d      	b.n	8002c58 <HAL_UART_MspInit+0x178>
  else if(huart->Instance==USART3)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a42      	ldr	r2, [pc, #264]	@ (8002c6c <HAL_UART_MspInit+0x18c>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d178      	bne.n	8002c58 <HAL_UART_MspInit+0x178>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	613b      	str	r3, [r7, #16]
 8002b6a:	4b3e      	ldr	r3, [pc, #248]	@ (8002c64 <HAL_UART_MspInit+0x184>)
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6e:	4a3d      	ldr	r2, [pc, #244]	@ (8002c64 <HAL_UART_MspInit+0x184>)
 8002b70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b74:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b76:	4b3b      	ldr	r3, [pc, #236]	@ (8002c64 <HAL_UART_MspInit+0x184>)
 8002b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b7e:	613b      	str	r3, [r7, #16]
 8002b80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b82:	2300      	movs	r3, #0
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	4b37      	ldr	r3, [pc, #220]	@ (8002c64 <HAL_UART_MspInit+0x184>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8a:	4a36      	ldr	r2, [pc, #216]	@ (8002c64 <HAL_UART_MspInit+0x184>)
 8002b8c:	f043 0304 	orr.w	r3, r3, #4
 8002b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b92:	4b34      	ldr	r3, [pc, #208]	@ (8002c64 <HAL_UART_MspInit+0x184>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b96:	f003 0304 	and.w	r3, r3, #4
 8002b9a:	60fb      	str	r3, [r7, #12]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60bb      	str	r3, [r7, #8]
 8002ba2:	4b30      	ldr	r3, [pc, #192]	@ (8002c64 <HAL_UART_MspInit+0x184>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba6:	4a2f      	ldr	r2, [pc, #188]	@ (8002c64 <HAL_UART_MspInit+0x184>)
 8002ba8:	f043 0302 	orr.w	r3, r3, #2
 8002bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bae:	4b2d      	ldr	r3, [pc, #180]	@ (8002c64 <HAL_UART_MspInit+0x184>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	60bb      	str	r3, [r7, #8]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BLE_RX_Pin;
 8002bba:	2320      	movs	r3, #32
 8002bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002bca:	2307      	movs	r3, #7
 8002bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BLE_RX_GPIO_Port, &GPIO_InitStruct);
 8002bce:	f107 031c 	add.w	r3, r7, #28
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	4826      	ldr	r0, [pc, #152]	@ (8002c70 <HAL_UART_MspInit+0x190>)
 8002bd6:	f000 fe99 	bl	800390c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BLE_TX_Pin;
 8002bda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be0:	2302      	movs	r3, #2
 8002be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be4:	2300      	movs	r3, #0
 8002be6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be8:	2303      	movs	r3, #3
 8002bea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002bec:	2307      	movs	r3, #7
 8002bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BLE_TX_GPIO_Port, &GPIO_InitStruct);
 8002bf0:	f107 031c 	add.w	r3, r7, #28
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	481f      	ldr	r0, [pc, #124]	@ (8002c74 <HAL_UART_MspInit+0x194>)
 8002bf8:	f000 fe88 	bl	800390c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002bfc:	4b1e      	ldr	r3, [pc, #120]	@ (8002c78 <HAL_UART_MspInit+0x198>)
 8002bfe:	4a1f      	ldr	r2, [pc, #124]	@ (8002c7c <HAL_UART_MspInit+0x19c>)
 8002c00:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002c02:	4b1d      	ldr	r3, [pc, #116]	@ (8002c78 <HAL_UART_MspInit+0x198>)
 8002c04:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002c08:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8002c78 <HAL_UART_MspInit+0x198>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c10:	4b19      	ldr	r3, [pc, #100]	@ (8002c78 <HAL_UART_MspInit+0x198>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c16:	4b18      	ldr	r3, [pc, #96]	@ (8002c78 <HAL_UART_MspInit+0x198>)
 8002c18:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c1c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c1e:	4b16      	ldr	r3, [pc, #88]	@ (8002c78 <HAL_UART_MspInit+0x198>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c24:	4b14      	ldr	r3, [pc, #80]	@ (8002c78 <HAL_UART_MspInit+0x198>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002c2a:	4b13      	ldr	r3, [pc, #76]	@ (8002c78 <HAL_UART_MspInit+0x198>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c30:	4b11      	ldr	r3, [pc, #68]	@ (8002c78 <HAL_UART_MspInit+0x198>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c36:	4b10      	ldr	r3, [pc, #64]	@ (8002c78 <HAL_UART_MspInit+0x198>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002c3c:	480e      	ldr	r0, [pc, #56]	@ (8002c78 <HAL_UART_MspInit+0x198>)
 8002c3e:	f000 fa85 	bl	800314c <HAL_DMA_Init>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <HAL_UART_MspInit+0x16c>
      Error_Handler();
 8002c48:	f7ff fe35 	bl	80028b6 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c78 <HAL_UART_MspInit+0x198>)
 8002c50:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002c52:	4a09      	ldr	r2, [pc, #36]	@ (8002c78 <HAL_UART_MspInit+0x198>)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002c58:	bf00      	nop
 8002c5a:	3730      	adds	r7, #48	@ 0x30
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40004400 	.word	0x40004400
 8002c64:	40023800 	.word	0x40023800
 8002c68:	40020000 	.word	0x40020000
 8002c6c:	40004800 	.word	0x40004800
 8002c70:	40020800 	.word	0x40020800
 8002c74:	40020400 	.word	0x40020400
 8002c78:	200008bc 	.word	0x200008bc
 8002c7c:	40026028 	.word	0x40026028

08002c80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b08e      	sub	sp, #56	@ 0x38
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002c90:	2300      	movs	r3, #0
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	4b34      	ldr	r3, [pc, #208]	@ (8002d68 <HAL_InitTick+0xe8>)
 8002c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c98:	4a33      	ldr	r2, [pc, #204]	@ (8002d68 <HAL_InitTick+0xe8>)
 8002c9a:	f043 0301 	orr.w	r3, r3, #1
 8002c9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ca0:	4b31      	ldr	r3, [pc, #196]	@ (8002d68 <HAL_InitTick+0xe8>)
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002cac:	f107 0210 	add.w	r2, r7, #16
 8002cb0:	f107 0314 	add.w	r3, r7, #20
 8002cb4:	4611      	mov	r1, r2
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f002 f914 	bl	8004ee4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d103      	bne.n	8002cce <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002cc6:	f002 f8e5 	bl	8004e94 <HAL_RCC_GetPCLK1Freq>
 8002cca:	6378      	str	r0, [r7, #52]	@ 0x34
 8002ccc:	e004      	b.n	8002cd8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002cce:	f002 f8e1 	bl	8004e94 <HAL_RCC_GetPCLK1Freq>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cda:	4a24      	ldr	r2, [pc, #144]	@ (8002d6c <HAL_InitTick+0xec>)
 8002cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce0:	0c9b      	lsrs	r3, r3, #18
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002ce6:	4b22      	ldr	r3, [pc, #136]	@ (8002d70 <HAL_InitTick+0xf0>)
 8002ce8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002cec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002cee:	4b20      	ldr	r3, [pc, #128]	@ (8002d70 <HAL_InitTick+0xf0>)
 8002cf0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002cf4:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8002cf6:	4a1e      	ldr	r2, [pc, #120]	@ (8002d70 <HAL_InitTick+0xf0>)
 8002cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cfa:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002cfc:	4b1c      	ldr	r3, [pc, #112]	@ (8002d70 <HAL_InitTick+0xf0>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d02:	4b1b      	ldr	r3, [pc, #108]	@ (8002d70 <HAL_InitTick+0xf0>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d08:	4b19      	ldr	r3, [pc, #100]	@ (8002d70 <HAL_InitTick+0xf0>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8002d0e:	4818      	ldr	r0, [pc, #96]	@ (8002d70 <HAL_InitTick+0xf0>)
 8002d10:	f002 fd62 	bl	80057d8 <HAL_TIM_Base_Init>
 8002d14:	4603      	mov	r3, r0
 8002d16:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002d1a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d11b      	bne.n	8002d5a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8002d22:	4813      	ldr	r0, [pc, #76]	@ (8002d70 <HAL_InitTick+0xf0>)
 8002d24:	f002 fdb2 	bl	800588c <HAL_TIM_Base_Start_IT>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002d2e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d111      	bne.n	8002d5a <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d36:	201c      	movs	r0, #28
 8002d38:	f000 f9fa 	bl	8003130 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b0f      	cmp	r3, #15
 8002d40:	d808      	bhi.n	8002d54 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8002d42:	2200      	movs	r2, #0
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	201c      	movs	r0, #28
 8002d48:	f000 f9d6 	bl	80030f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d4c:	4a09      	ldr	r2, [pc, #36]	@ (8002d74 <HAL_InitTick+0xf4>)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	e002      	b.n	8002d5a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002d5a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3738      	adds	r7, #56	@ 0x38
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	431bde83 	.word	0x431bde83
 8002d70:	20000948 	.word	0x20000948
 8002d74:	20000038 	.word	0x20000038

08002d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d7c:	bf00      	nop
 8002d7e:	e7fd      	b.n	8002d7c <NMI_Handler+0x4>

08002d80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d84:	bf00      	nop
 8002d86:	e7fd      	b.n	8002d84 <HardFault_Handler+0x4>

08002d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d8c:	bf00      	nop
 8002d8e:	e7fd      	b.n	8002d8c <MemManage_Handler+0x4>

08002d90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d94:	bf00      	nop
 8002d96:	e7fd      	b.n	8002d94 <BusFault_Handler+0x4>

08002d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d9c:	bf00      	nop
 8002d9e:	e7fd      	b.n	8002d9c <UsageFault_Handler+0x4>

08002da0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002da4:	bf00      	nop
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
	...

08002db0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002db4:	4802      	ldr	r0, [pc, #8]	@ (8002dc0 <DMA1_Stream1_IRQHandler+0x10>)
 8002db6:	f000 fb3f 	bl	8003438 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002dba:	bf00      	nop
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	200008bc 	.word	0x200008bc

08002dc4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002dc8:	4802      	ldr	r0, [pc, #8]	@ (8002dd4 <TIM2_IRQHandler+0x10>)
 8002dca:	f002 ff57 	bl	8005c7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	20000948 	.word	0x20000948

08002dd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002de0:	4a14      	ldr	r2, [pc, #80]	@ (8002e34 <_sbrk+0x5c>)
 8002de2:	4b15      	ldr	r3, [pc, #84]	@ (8002e38 <_sbrk+0x60>)
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dec:	4b13      	ldr	r3, [pc, #76]	@ (8002e3c <_sbrk+0x64>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d102      	bne.n	8002dfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002df4:	4b11      	ldr	r3, [pc, #68]	@ (8002e3c <_sbrk+0x64>)
 8002df6:	4a12      	ldr	r2, [pc, #72]	@ (8002e40 <_sbrk+0x68>)
 8002df8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dfa:	4b10      	ldr	r3, [pc, #64]	@ (8002e3c <_sbrk+0x64>)
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4413      	add	r3, r2
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d207      	bcs.n	8002e18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e08:	f007 fcf2 	bl	800a7f0 <__errno>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	220c      	movs	r2, #12
 8002e10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e12:	f04f 33ff 	mov.w	r3, #4294967295
 8002e16:	e009      	b.n	8002e2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e18:	4b08      	ldr	r3, [pc, #32]	@ (8002e3c <_sbrk+0x64>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e1e:	4b07      	ldr	r3, [pc, #28]	@ (8002e3c <_sbrk+0x64>)
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4413      	add	r3, r2
 8002e26:	4a05      	ldr	r2, [pc, #20]	@ (8002e3c <_sbrk+0x64>)
 8002e28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	20020000 	.word	0x20020000
 8002e38:	00000400 	.word	0x00000400
 8002e3c:	20000990 	.word	0x20000990
 8002e40:	20005430 	.word	0x20005430

08002e44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e48:	4b06      	ldr	r3, [pc, #24]	@ (8002e64 <SystemInit+0x20>)
 8002e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e4e:	4a05      	ldr	r2, [pc, #20]	@ (8002e64 <SystemInit+0x20>)
 8002e50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e58:	bf00      	nop
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	e000ed00 	.word	0xe000ed00

08002e68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ea0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002e6c:	f7ff ffea 	bl	8002e44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e70:	480c      	ldr	r0, [pc, #48]	@ (8002ea4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e72:	490d      	ldr	r1, [pc, #52]	@ (8002ea8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e74:	4a0d      	ldr	r2, [pc, #52]	@ (8002eac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e78:	e002      	b.n	8002e80 <LoopCopyDataInit>

08002e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e7e:	3304      	adds	r3, #4

08002e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e84:	d3f9      	bcc.n	8002e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e86:	4a0a      	ldr	r2, [pc, #40]	@ (8002eb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e88:	4c0a      	ldr	r4, [pc, #40]	@ (8002eb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e8c:	e001      	b.n	8002e92 <LoopFillZerobss>

08002e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e90:	3204      	adds	r2, #4

08002e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e94:	d3fb      	bcc.n	8002e8e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002e96:	f007 fcb1 	bl	800a7fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e9a:	f7ff f99f 	bl	80021dc <main>
  bx  lr    
 8002e9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ea0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ea4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ea8:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8002eac:	0800c7f8 	.word	0x0800c7f8
  ldr r2, =_sbss
 8002eb0:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8002eb4:	20005430 	.word	0x20005430

08002eb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002eb8:	e7fe      	b.n	8002eb8 <ADC_IRQHandler>
	...

08002ebc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8002efc <HAL_Init+0x40>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8002efc <HAL_Init+0x40>)
 8002ec6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002eca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8002efc <HAL_Init+0x40>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a0a      	ldr	r2, [pc, #40]	@ (8002efc <HAL_Init+0x40>)
 8002ed2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ed6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ed8:	4b08      	ldr	r3, [pc, #32]	@ (8002efc <HAL_Init+0x40>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a07      	ldr	r2, [pc, #28]	@ (8002efc <HAL_Init+0x40>)
 8002ede:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ee2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ee4:	2003      	movs	r0, #3
 8002ee6:	f000 f8fc 	bl	80030e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002eea:	200f      	movs	r0, #15
 8002eec:	f7ff fec8 	bl	8002c80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ef0:	f7ff fce8 	bl	80028c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40023c00 	.word	0x40023c00

08002f00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f04:	4b06      	ldr	r3, [pc, #24]	@ (8002f20 <HAL_IncTick+0x20>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	4b06      	ldr	r3, [pc, #24]	@ (8002f24 <HAL_IncTick+0x24>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4413      	add	r3, r2
 8002f10:	4a04      	ldr	r2, [pc, #16]	@ (8002f24 <HAL_IncTick+0x24>)
 8002f12:	6013      	str	r3, [r2, #0]
}
 8002f14:	bf00      	nop
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	2000003c 	.word	0x2000003c
 8002f24:	20000994 	.word	0x20000994

08002f28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f2c:	4b03      	ldr	r3, [pc, #12]	@ (8002f3c <HAL_GetTick+0x14>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	20000994 	.word	0x20000994

08002f40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f48:	f7ff ffee 	bl	8002f28 <HAL_GetTick>
 8002f4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f58:	d005      	beq.n	8002f66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f84 <HAL_Delay+0x44>)
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4413      	add	r3, r2
 8002f64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f66:	bf00      	nop
 8002f68:	f7ff ffde 	bl	8002f28 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d8f7      	bhi.n	8002f68 <HAL_Delay+0x28>
  {
  }
}
 8002f78:	bf00      	nop
 8002f7a:	bf00      	nop
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	2000003c 	.word	0x2000003c

08002f88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f98:	4b0c      	ldr	r3, [pc, #48]	@ (8002fcc <__NVIC_SetPriorityGrouping+0x44>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002fb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fba:	4a04      	ldr	r2, [pc, #16]	@ (8002fcc <__NVIC_SetPriorityGrouping+0x44>)
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	60d3      	str	r3, [r2, #12]
}
 8002fc0:	bf00      	nop
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	e000ed00 	.word	0xe000ed00

08002fd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fd4:	4b04      	ldr	r3, [pc, #16]	@ (8002fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	0a1b      	lsrs	r3, r3, #8
 8002fda:	f003 0307 	and.w	r3, r3, #7
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	e000ed00 	.word	0xe000ed00

08002fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	db0b      	blt.n	8003016 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ffe:	79fb      	ldrb	r3, [r7, #7]
 8003000:	f003 021f 	and.w	r2, r3, #31
 8003004:	4907      	ldr	r1, [pc, #28]	@ (8003024 <__NVIC_EnableIRQ+0x38>)
 8003006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300a:	095b      	lsrs	r3, r3, #5
 800300c:	2001      	movs	r0, #1
 800300e:	fa00 f202 	lsl.w	r2, r0, r2
 8003012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	e000e100 	.word	0xe000e100

08003028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	6039      	str	r1, [r7, #0]
 8003032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003038:	2b00      	cmp	r3, #0
 800303a:	db0a      	blt.n	8003052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	b2da      	uxtb	r2, r3
 8003040:	490c      	ldr	r1, [pc, #48]	@ (8003074 <__NVIC_SetPriority+0x4c>)
 8003042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003046:	0112      	lsls	r2, r2, #4
 8003048:	b2d2      	uxtb	r2, r2
 800304a:	440b      	add	r3, r1
 800304c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003050:	e00a      	b.n	8003068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	b2da      	uxtb	r2, r3
 8003056:	4908      	ldr	r1, [pc, #32]	@ (8003078 <__NVIC_SetPriority+0x50>)
 8003058:	79fb      	ldrb	r3, [r7, #7]
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	3b04      	subs	r3, #4
 8003060:	0112      	lsls	r2, r2, #4
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	440b      	add	r3, r1
 8003066:	761a      	strb	r2, [r3, #24]
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	e000e100 	.word	0xe000e100
 8003078:	e000ed00 	.word	0xe000ed00

0800307c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800307c:	b480      	push	{r7}
 800307e:	b089      	sub	sp, #36	@ 0x24
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	f1c3 0307 	rsb	r3, r3, #7
 8003096:	2b04      	cmp	r3, #4
 8003098:	bf28      	it	cs
 800309a:	2304      	movcs	r3, #4
 800309c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	3304      	adds	r3, #4
 80030a2:	2b06      	cmp	r3, #6
 80030a4:	d902      	bls.n	80030ac <NVIC_EncodePriority+0x30>
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	3b03      	subs	r3, #3
 80030aa:	e000      	b.n	80030ae <NVIC_EncodePriority+0x32>
 80030ac:	2300      	movs	r3, #0
 80030ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b0:	f04f 32ff 	mov.w	r2, #4294967295
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43da      	mvns	r2, r3
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	401a      	ands	r2, r3
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030c4:	f04f 31ff 	mov.w	r1, #4294967295
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	fa01 f303 	lsl.w	r3, r1, r3
 80030ce:	43d9      	mvns	r1, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d4:	4313      	orrs	r3, r2
         );
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3724      	adds	r7, #36	@ 0x24
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b082      	sub	sp, #8
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7ff ff4c 	bl	8002f88 <__NVIC_SetPriorityGrouping>
}
 80030f0:	bf00      	nop
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4603      	mov	r3, r0
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
 8003104:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003106:	2300      	movs	r3, #0
 8003108:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800310a:	f7ff ff61 	bl	8002fd0 <__NVIC_GetPriorityGrouping>
 800310e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	68b9      	ldr	r1, [r7, #8]
 8003114:	6978      	ldr	r0, [r7, #20]
 8003116:	f7ff ffb1 	bl	800307c <NVIC_EncodePriority>
 800311a:	4602      	mov	r2, r0
 800311c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003120:	4611      	mov	r1, r2
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff ff80 	bl	8003028 <__NVIC_SetPriority>
}
 8003128:	bf00      	nop
 800312a:	3718      	adds	r7, #24
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	4603      	mov	r3, r0
 8003138:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800313a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313e:	4618      	mov	r0, r3
 8003140:	f7ff ff54 	bl	8002fec <__NVIC_EnableIRQ>
}
 8003144:	bf00      	nop
 8003146:	3708      	adds	r7, #8
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003154:	2300      	movs	r3, #0
 8003156:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003158:	f7ff fee6 	bl	8002f28 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e099      	b.n	800329c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 0201 	bic.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003188:	e00f      	b.n	80031aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800318a:	f7ff fecd 	bl	8002f28 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b05      	cmp	r3, #5
 8003196:	d908      	bls.n	80031aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2220      	movs	r2, #32
 800319c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2203      	movs	r2, #3
 80031a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e078      	b.n	800329c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1e8      	bne.n	800318a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	4b38      	ldr	r3, [pc, #224]	@ (80032a4 <HAL_DMA_Init+0x158>)
 80031c4:	4013      	ands	r3, r2
 80031c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003200:	2b04      	cmp	r3, #4
 8003202:	d107      	bne.n	8003214 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320c:	4313      	orrs	r3, r2
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	4313      	orrs	r3, r2
 8003212:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f023 0307 	bic.w	r3, r3, #7
 800322a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	4313      	orrs	r3, r2
 8003234:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323a:	2b04      	cmp	r3, #4
 800323c:	d117      	bne.n	800326e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	4313      	orrs	r3, r2
 8003246:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00e      	beq.n	800326e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 fadf 	bl	8003814 <DMA_CheckFifoParam>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d008      	beq.n	800326e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2240      	movs	r2, #64	@ 0x40
 8003260:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800326a:	2301      	movs	r3, #1
 800326c:	e016      	b.n	800329c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 fa96 	bl	80037a8 <DMA_CalcBaseAndBitshift>
 800327c:	4603      	mov	r3, r0
 800327e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003284:	223f      	movs	r2, #63	@ 0x3f
 8003286:	409a      	lsls	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3718      	adds	r7, #24
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	f010803f 	.word	0xf010803f

080032a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
 80032b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d101      	bne.n	80032ce <HAL_DMA_Start_IT+0x26>
 80032ca:	2302      	movs	r3, #2
 80032cc:	e040      	b.n	8003350 <HAL_DMA_Start_IT+0xa8>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d12f      	bne.n	8003342 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2202      	movs	r2, #2
 80032e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	68b9      	ldr	r1, [r7, #8]
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 fa28 	bl	800374c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003300:	223f      	movs	r2, #63	@ 0x3f
 8003302:	409a      	lsls	r2, r3
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0216 	orr.w	r2, r2, #22
 8003316:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331c:	2b00      	cmp	r3, #0
 800331e:	d007      	beq.n	8003330 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f042 0208 	orr.w	r2, r2, #8
 800332e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0201 	orr.w	r2, r2, #1
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	e005      	b.n	800334e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800334a:	2302      	movs	r3, #2
 800334c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800334e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003350:	4618      	mov	r0, r3
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003364:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003366:	f7ff fddf 	bl	8002f28 <HAL_GetTick>
 800336a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d008      	beq.n	800338a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2280      	movs	r2, #128	@ 0x80
 800337c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e052      	b.n	8003430 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0216 	bic.w	r2, r2, #22
 8003398:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	695a      	ldr	r2, [r3, #20]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80033a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d103      	bne.n	80033ba <HAL_DMA_Abort+0x62>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d007      	beq.n	80033ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0208 	bic.w	r2, r2, #8
 80033c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 0201 	bic.w	r2, r2, #1
 80033d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033da:	e013      	b.n	8003404 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033dc:	f7ff fda4 	bl	8002f28 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b05      	cmp	r3, #5
 80033e8:	d90c      	bls.n	8003404 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2220      	movs	r2, #32
 80033ee:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2203      	movs	r2, #3
 80033f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e015      	b.n	8003430 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1e4      	bne.n	80033dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003416:	223f      	movs	r2, #63	@ 0x3f
 8003418:	409a      	lsls	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003444:	4b8e      	ldr	r3, [pc, #568]	@ (8003680 <HAL_DMA_IRQHandler+0x248>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a8e      	ldr	r2, [pc, #568]	@ (8003684 <HAL_DMA_IRQHandler+0x24c>)
 800344a:	fba2 2303 	umull	r2, r3, r2, r3
 800344e:	0a9b      	lsrs	r3, r3, #10
 8003450:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003456:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003462:	2208      	movs	r2, #8
 8003464:	409a      	lsls	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	4013      	ands	r3, r2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d01a      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b00      	cmp	r3, #0
 800347a:	d013      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0204 	bic.w	r2, r2, #4
 800348a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003490:	2208      	movs	r2, #8
 8003492:	409a      	lsls	r2, r3
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800349c:	f043 0201 	orr.w	r2, r3, #1
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a8:	2201      	movs	r2, #1
 80034aa:	409a      	lsls	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4013      	ands	r3, r2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d012      	beq.n	80034da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00b      	beq.n	80034da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034c6:	2201      	movs	r2, #1
 80034c8:	409a      	lsls	r2, r3
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034d2:	f043 0202 	orr.w	r2, r3, #2
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034de:	2204      	movs	r2, #4
 80034e0:	409a      	lsls	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	4013      	ands	r3, r2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d012      	beq.n	8003510 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00b      	beq.n	8003510 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034fc:	2204      	movs	r2, #4
 80034fe:	409a      	lsls	r2, r3
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003508:	f043 0204 	orr.w	r2, r3, #4
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003514:	2210      	movs	r2, #16
 8003516:	409a      	lsls	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4013      	ands	r3, r2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d043      	beq.n	80035a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b00      	cmp	r3, #0
 800352c:	d03c      	beq.n	80035a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003532:	2210      	movs	r2, #16
 8003534:	409a      	lsls	r2, r3
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d018      	beq.n	800357a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d108      	bne.n	8003568 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355a:	2b00      	cmp	r3, #0
 800355c:	d024      	beq.n	80035a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	4798      	blx	r3
 8003566:	e01f      	b.n	80035a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800356c:	2b00      	cmp	r3, #0
 800356e:	d01b      	beq.n	80035a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	4798      	blx	r3
 8003578:	e016      	b.n	80035a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003584:	2b00      	cmp	r3, #0
 8003586:	d107      	bne.n	8003598 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0208 	bic.w	r2, r2, #8
 8003596:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ac:	2220      	movs	r2, #32
 80035ae:	409a      	lsls	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4013      	ands	r3, r2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 808f 	beq.w	80036d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0310 	and.w	r3, r3, #16
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 8087 	beq.w	80036d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ce:	2220      	movs	r2, #32
 80035d0:	409a      	lsls	r2, r3
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b05      	cmp	r3, #5
 80035e0:	d136      	bne.n	8003650 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 0216 	bic.w	r2, r2, #22
 80035f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	695a      	ldr	r2, [r3, #20]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003600:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003606:	2b00      	cmp	r3, #0
 8003608:	d103      	bne.n	8003612 <HAL_DMA_IRQHandler+0x1da>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800360e:	2b00      	cmp	r3, #0
 8003610:	d007      	beq.n	8003622 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0208 	bic.w	r2, r2, #8
 8003620:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003626:	223f      	movs	r2, #63	@ 0x3f
 8003628:	409a      	lsls	r2, r3
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003642:	2b00      	cmp	r3, #0
 8003644:	d07e      	beq.n	8003744 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	4798      	blx	r3
        }
        return;
 800364e:	e079      	b.n	8003744 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d01d      	beq.n	800369a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10d      	bne.n	8003688 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003670:	2b00      	cmp	r3, #0
 8003672:	d031      	beq.n	80036d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	4798      	blx	r3
 800367c:	e02c      	b.n	80036d8 <HAL_DMA_IRQHandler+0x2a0>
 800367e:	bf00      	nop
 8003680:	20000034 	.word	0x20000034
 8003684:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800368c:	2b00      	cmp	r3, #0
 800368e:	d023      	beq.n	80036d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	4798      	blx	r3
 8003698:	e01e      	b.n	80036d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10f      	bne.n	80036c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0210 	bic.w	r2, r2, #16
 80036b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d032      	beq.n	8003746 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d022      	beq.n	8003732 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2205      	movs	r2, #5
 80036f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0201 	bic.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	3301      	adds	r3, #1
 8003708:	60bb      	str	r3, [r7, #8]
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	429a      	cmp	r2, r3
 800370e:	d307      	bcc.n	8003720 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1f2      	bne.n	8003704 <HAL_DMA_IRQHandler+0x2cc>
 800371e:	e000      	b.n	8003722 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003720:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003736:	2b00      	cmp	r3, #0
 8003738:	d005      	beq.n	8003746 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	4798      	blx	r3
 8003742:	e000      	b.n	8003746 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003744:	bf00      	nop
    }
  }
}
 8003746:	3718      	adds	r7, #24
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
 8003758:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003768:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	2b40      	cmp	r3, #64	@ 0x40
 8003778:	d108      	bne.n	800378c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68ba      	ldr	r2, [r7, #8]
 8003788:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800378a:	e007      	b.n	800379c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	60da      	str	r2, [r3, #12]
}
 800379c:	bf00      	nop
 800379e:	3714      	adds	r7, #20
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	3b10      	subs	r3, #16
 80037b8:	4a14      	ldr	r2, [pc, #80]	@ (800380c <DMA_CalcBaseAndBitshift+0x64>)
 80037ba:	fba2 2303 	umull	r2, r3, r2, r3
 80037be:	091b      	lsrs	r3, r3, #4
 80037c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037c2:	4a13      	ldr	r2, [pc, #76]	@ (8003810 <DMA_CalcBaseAndBitshift+0x68>)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4413      	add	r3, r2
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	461a      	mov	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2b03      	cmp	r3, #3
 80037d4:	d909      	bls.n	80037ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80037de:	f023 0303 	bic.w	r3, r3, #3
 80037e2:	1d1a      	adds	r2, r3, #4
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	659a      	str	r2, [r3, #88]	@ 0x58
 80037e8:	e007      	b.n	80037fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80037f2:	f023 0303 	bic.w	r3, r3, #3
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	aaaaaaab 	.word	0xaaaaaaab
 8003810:	0800c608 	.word	0x0800c608

08003814 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800381c:	2300      	movs	r3, #0
 800381e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003824:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d11f      	bne.n	800386e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	2b03      	cmp	r3, #3
 8003832:	d856      	bhi.n	80038e2 <DMA_CheckFifoParam+0xce>
 8003834:	a201      	add	r2, pc, #4	@ (adr r2, 800383c <DMA_CheckFifoParam+0x28>)
 8003836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800383a:	bf00      	nop
 800383c:	0800384d 	.word	0x0800384d
 8003840:	0800385f 	.word	0x0800385f
 8003844:	0800384d 	.word	0x0800384d
 8003848:	080038e3 	.word	0x080038e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003850:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d046      	beq.n	80038e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800385c:	e043      	b.n	80038e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003862:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003866:	d140      	bne.n	80038ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800386c:	e03d      	b.n	80038ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003876:	d121      	bne.n	80038bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	2b03      	cmp	r3, #3
 800387c:	d837      	bhi.n	80038ee <DMA_CheckFifoParam+0xda>
 800387e:	a201      	add	r2, pc, #4	@ (adr r2, 8003884 <DMA_CheckFifoParam+0x70>)
 8003880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003884:	08003895 	.word	0x08003895
 8003888:	0800389b 	.word	0x0800389b
 800388c:	08003895 	.word	0x08003895
 8003890:	080038ad 	.word	0x080038ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	73fb      	strb	r3, [r7, #15]
      break;
 8003898:	e030      	b.n	80038fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800389e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d025      	beq.n	80038f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038aa:	e022      	b.n	80038f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80038b4:	d11f      	bne.n	80038f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80038ba:	e01c      	b.n	80038f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d903      	bls.n	80038ca <DMA_CheckFifoParam+0xb6>
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	2b03      	cmp	r3, #3
 80038c6:	d003      	beq.n	80038d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80038c8:	e018      	b.n	80038fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	73fb      	strb	r3, [r7, #15]
      break;
 80038ce:	e015      	b.n	80038fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00e      	beq.n	80038fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	73fb      	strb	r3, [r7, #15]
      break;
 80038e0:	e00b      	b.n	80038fa <DMA_CheckFifoParam+0xe6>
      break;
 80038e2:	bf00      	nop
 80038e4:	e00a      	b.n	80038fc <DMA_CheckFifoParam+0xe8>
      break;
 80038e6:	bf00      	nop
 80038e8:	e008      	b.n	80038fc <DMA_CheckFifoParam+0xe8>
      break;
 80038ea:	bf00      	nop
 80038ec:	e006      	b.n	80038fc <DMA_CheckFifoParam+0xe8>
      break;
 80038ee:	bf00      	nop
 80038f0:	e004      	b.n	80038fc <DMA_CheckFifoParam+0xe8>
      break;
 80038f2:	bf00      	nop
 80038f4:	e002      	b.n	80038fc <DMA_CheckFifoParam+0xe8>
      break;   
 80038f6:	bf00      	nop
 80038f8:	e000      	b.n	80038fc <DMA_CheckFifoParam+0xe8>
      break;
 80038fa:	bf00      	nop
    }
  } 
  
  return status; 
 80038fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3714      	adds	r7, #20
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop

0800390c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800390c:	b480      	push	{r7}
 800390e:	b089      	sub	sp, #36	@ 0x24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003916:	2300      	movs	r3, #0
 8003918:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800391a:	2300      	movs	r3, #0
 800391c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800391e:	2300      	movs	r3, #0
 8003920:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003922:	2300      	movs	r3, #0
 8003924:	61fb      	str	r3, [r7, #28]
 8003926:	e165      	b.n	8003bf4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003928:	2201      	movs	r2, #1
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	4013      	ands	r3, r2
 800393a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	429a      	cmp	r2, r3
 8003942:	f040 8154 	bne.w	8003bee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f003 0303 	and.w	r3, r3, #3
 800394e:	2b01      	cmp	r3, #1
 8003950:	d005      	beq.n	800395e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800395a:	2b02      	cmp	r3, #2
 800395c:	d130      	bne.n	80039c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	2203      	movs	r2, #3
 800396a:	fa02 f303 	lsl.w	r3, r2, r3
 800396e:	43db      	mvns	r3, r3
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	4013      	ands	r3, r2
 8003974:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	68da      	ldr	r2, [r3, #12]
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	fa02 f303 	lsl.w	r3, r2, r3
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	4313      	orrs	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003994:	2201      	movs	r2, #1
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	43db      	mvns	r3, r3
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	4013      	ands	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	091b      	lsrs	r3, r3, #4
 80039aa:	f003 0201 	and.w	r2, r3, #1
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f003 0303 	and.w	r3, r3, #3
 80039c8:	2b03      	cmp	r3, #3
 80039ca:	d017      	beq.n	80039fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	2203      	movs	r2, #3
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	43db      	mvns	r3, r3
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	4013      	ands	r3, r2
 80039e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f003 0303 	and.w	r3, r3, #3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d123      	bne.n	8003a50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	08da      	lsrs	r2, r3, #3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3208      	adds	r2, #8
 8003a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	220f      	movs	r2, #15
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	43db      	mvns	r3, r3
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	691a      	ldr	r2, [r3, #16]
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	f003 0307 	and.w	r3, r3, #7
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	08da      	lsrs	r2, r3, #3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	3208      	adds	r2, #8
 8003a4a:	69b9      	ldr	r1, [r7, #24]
 8003a4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	2203      	movs	r2, #3
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	43db      	mvns	r3, r3
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	4013      	ands	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f003 0203 	and.w	r2, r3, #3
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	005b      	lsls	r3, r3, #1
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f000 80ae 	beq.w	8003bee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a92:	2300      	movs	r3, #0
 8003a94:	60fb      	str	r3, [r7, #12]
 8003a96:	4b5d      	ldr	r3, [pc, #372]	@ (8003c0c <HAL_GPIO_Init+0x300>)
 8003a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a9a:	4a5c      	ldr	r2, [pc, #368]	@ (8003c0c <HAL_GPIO_Init+0x300>)
 8003a9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003aa0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003aa2:	4b5a      	ldr	r3, [pc, #360]	@ (8003c0c <HAL_GPIO_Init+0x300>)
 8003aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003aae:	4a58      	ldr	r2, [pc, #352]	@ (8003c10 <HAL_GPIO_Init+0x304>)
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	089b      	lsrs	r3, r3, #2
 8003ab4:	3302      	adds	r3, #2
 8003ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	220f      	movs	r2, #15
 8003ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aca:	43db      	mvns	r3, r3
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a4f      	ldr	r2, [pc, #316]	@ (8003c14 <HAL_GPIO_Init+0x308>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d025      	beq.n	8003b26 <HAL_GPIO_Init+0x21a>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a4e      	ldr	r2, [pc, #312]	@ (8003c18 <HAL_GPIO_Init+0x30c>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d01f      	beq.n	8003b22 <HAL_GPIO_Init+0x216>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a4d      	ldr	r2, [pc, #308]	@ (8003c1c <HAL_GPIO_Init+0x310>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d019      	beq.n	8003b1e <HAL_GPIO_Init+0x212>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a4c      	ldr	r2, [pc, #304]	@ (8003c20 <HAL_GPIO_Init+0x314>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d013      	beq.n	8003b1a <HAL_GPIO_Init+0x20e>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a4b      	ldr	r2, [pc, #300]	@ (8003c24 <HAL_GPIO_Init+0x318>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d00d      	beq.n	8003b16 <HAL_GPIO_Init+0x20a>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a4a      	ldr	r2, [pc, #296]	@ (8003c28 <HAL_GPIO_Init+0x31c>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d007      	beq.n	8003b12 <HAL_GPIO_Init+0x206>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a49      	ldr	r2, [pc, #292]	@ (8003c2c <HAL_GPIO_Init+0x320>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d101      	bne.n	8003b0e <HAL_GPIO_Init+0x202>
 8003b0a:	2306      	movs	r3, #6
 8003b0c:	e00c      	b.n	8003b28 <HAL_GPIO_Init+0x21c>
 8003b0e:	2307      	movs	r3, #7
 8003b10:	e00a      	b.n	8003b28 <HAL_GPIO_Init+0x21c>
 8003b12:	2305      	movs	r3, #5
 8003b14:	e008      	b.n	8003b28 <HAL_GPIO_Init+0x21c>
 8003b16:	2304      	movs	r3, #4
 8003b18:	e006      	b.n	8003b28 <HAL_GPIO_Init+0x21c>
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e004      	b.n	8003b28 <HAL_GPIO_Init+0x21c>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	e002      	b.n	8003b28 <HAL_GPIO_Init+0x21c>
 8003b22:	2301      	movs	r3, #1
 8003b24:	e000      	b.n	8003b28 <HAL_GPIO_Init+0x21c>
 8003b26:	2300      	movs	r3, #0
 8003b28:	69fa      	ldr	r2, [r7, #28]
 8003b2a:	f002 0203 	and.w	r2, r2, #3
 8003b2e:	0092      	lsls	r2, r2, #2
 8003b30:	4093      	lsls	r3, r2
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b38:	4935      	ldr	r1, [pc, #212]	@ (8003c10 <HAL_GPIO_Init+0x304>)
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	089b      	lsrs	r3, r3, #2
 8003b3e:	3302      	adds	r3, #2
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b46:	4b3a      	ldr	r3, [pc, #232]	@ (8003c30 <HAL_GPIO_Init+0x324>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	43db      	mvns	r3, r3
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	4013      	ands	r3, r2
 8003b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d003      	beq.n	8003b6a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b6a:	4a31      	ldr	r2, [pc, #196]	@ (8003c30 <HAL_GPIO_Init+0x324>)
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b70:	4b2f      	ldr	r3, [pc, #188]	@ (8003c30 <HAL_GPIO_Init+0x324>)
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	43db      	mvns	r3, r3
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d003      	beq.n	8003b94 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b94:	4a26      	ldr	r2, [pc, #152]	@ (8003c30 <HAL_GPIO_Init+0x324>)
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b9a:	4b25      	ldr	r3, [pc, #148]	@ (8003c30 <HAL_GPIO_Init+0x324>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	43db      	mvns	r3, r3
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bbe:	4a1c      	ldr	r2, [pc, #112]	@ (8003c30 <HAL_GPIO_Init+0x324>)
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8003c30 <HAL_GPIO_Init+0x324>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003be8:	4a11      	ldr	r2, [pc, #68]	@ (8003c30 <HAL_GPIO_Init+0x324>)
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	61fb      	str	r3, [r7, #28]
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	2b0f      	cmp	r3, #15
 8003bf8:	f67f ae96 	bls.w	8003928 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003bfc:	bf00      	nop
 8003bfe:	bf00      	nop
 8003c00:	3724      	adds	r7, #36	@ 0x24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	40013800 	.word	0x40013800
 8003c14:	40020000 	.word	0x40020000
 8003c18:	40020400 	.word	0x40020400
 8003c1c:	40020800 	.word	0x40020800
 8003c20:	40020c00 	.word	0x40020c00
 8003c24:	40021000 	.word	0x40021000
 8003c28:	40021400 	.word	0x40021400
 8003c2c:	40021800 	.word	0x40021800
 8003c30:	40013c00 	.word	0x40013c00

08003c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	807b      	strh	r3, [r7, #2]
 8003c40:	4613      	mov	r3, r2
 8003c42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c44:	787b      	ldrb	r3, [r7, #1]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c4a:	887a      	ldrh	r2, [r7, #2]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c50:	e003      	b.n	8003c5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c52:	887b      	ldrh	r3, [r7, #2]
 8003c54:	041a      	lsls	r2, r3, #16
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	619a      	str	r2, [r3, #24]
}
 8003c5a:	bf00      	nop
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
	...

08003c68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e12b      	b.n	8003ed2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d106      	bne.n	8003c94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7fe fe44 	bl	800291c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2224      	movs	r2, #36	@ 0x24
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 0201 	bic.w	r2, r2, #1
 8003caa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003cca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ccc:	f001 f8e2 	bl	8004e94 <HAL_RCC_GetPCLK1Freq>
 8003cd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	4a81      	ldr	r2, [pc, #516]	@ (8003edc <HAL_I2C_Init+0x274>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d807      	bhi.n	8003cec <HAL_I2C_Init+0x84>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4a80      	ldr	r2, [pc, #512]	@ (8003ee0 <HAL_I2C_Init+0x278>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	bf94      	ite	ls
 8003ce4:	2301      	movls	r3, #1
 8003ce6:	2300      	movhi	r3, #0
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	e006      	b.n	8003cfa <HAL_I2C_Init+0x92>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	4a7d      	ldr	r2, [pc, #500]	@ (8003ee4 <HAL_I2C_Init+0x27c>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	bf94      	ite	ls
 8003cf4:	2301      	movls	r3, #1
 8003cf6:	2300      	movhi	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e0e7      	b.n	8003ed2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	4a78      	ldr	r2, [pc, #480]	@ (8003ee8 <HAL_I2C_Init+0x280>)
 8003d06:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0a:	0c9b      	lsrs	r3, r3, #18
 8003d0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	4a6a      	ldr	r2, [pc, #424]	@ (8003edc <HAL_I2C_Init+0x274>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d802      	bhi.n	8003d3c <HAL_I2C_Init+0xd4>
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	e009      	b.n	8003d50 <HAL_I2C_Init+0xe8>
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003d42:	fb02 f303 	mul.w	r3, r2, r3
 8003d46:	4a69      	ldr	r2, [pc, #420]	@ (8003eec <HAL_I2C_Init+0x284>)
 8003d48:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4c:	099b      	lsrs	r3, r3, #6
 8003d4e:	3301      	adds	r3, #1
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	6812      	ldr	r2, [r2, #0]
 8003d54:	430b      	orrs	r3, r1
 8003d56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003d62:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	495c      	ldr	r1, [pc, #368]	@ (8003edc <HAL_I2C_Init+0x274>)
 8003d6c:	428b      	cmp	r3, r1
 8003d6e:	d819      	bhi.n	8003da4 <HAL_I2C_Init+0x13c>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	1e59      	subs	r1, r3, #1
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d7e:	1c59      	adds	r1, r3, #1
 8003d80:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003d84:	400b      	ands	r3, r1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00a      	beq.n	8003da0 <HAL_I2C_Init+0x138>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	1e59      	subs	r1, r3, #1
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d98:	3301      	adds	r3, #1
 8003d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d9e:	e051      	b.n	8003e44 <HAL_I2C_Init+0x1dc>
 8003da0:	2304      	movs	r3, #4
 8003da2:	e04f      	b.n	8003e44 <HAL_I2C_Init+0x1dc>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d111      	bne.n	8003dd0 <HAL_I2C_Init+0x168>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	1e58      	subs	r0, r3, #1
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6859      	ldr	r1, [r3, #4]
 8003db4:	460b      	mov	r3, r1
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	440b      	add	r3, r1
 8003dba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	bf0c      	ite	eq
 8003dc8:	2301      	moveq	r3, #1
 8003dca:	2300      	movne	r3, #0
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	e012      	b.n	8003df6 <HAL_I2C_Init+0x18e>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	1e58      	subs	r0, r3, #1
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6859      	ldr	r1, [r3, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	440b      	add	r3, r1
 8003dde:	0099      	lsls	r1, r3, #2
 8003de0:	440b      	add	r3, r1
 8003de2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003de6:	3301      	adds	r3, #1
 8003de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	bf0c      	ite	eq
 8003df0:	2301      	moveq	r3, #1
 8003df2:	2300      	movne	r3, #0
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <HAL_I2C_Init+0x196>
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e022      	b.n	8003e44 <HAL_I2C_Init+0x1dc>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10e      	bne.n	8003e24 <HAL_I2C_Init+0x1bc>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	1e58      	subs	r0, r3, #1
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6859      	ldr	r1, [r3, #4]
 8003e0e:	460b      	mov	r3, r1
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	440b      	add	r3, r1
 8003e14:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e18:	3301      	adds	r3, #1
 8003e1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e22:	e00f      	b.n	8003e44 <HAL_I2C_Init+0x1dc>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	1e58      	subs	r0, r3, #1
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6859      	ldr	r1, [r3, #4]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	0099      	lsls	r1, r3, #2
 8003e34:	440b      	add	r3, r1
 8003e36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e40:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e44:	6879      	ldr	r1, [r7, #4]
 8003e46:	6809      	ldr	r1, [r1, #0]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	69da      	ldr	r2, [r3, #28]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003e72:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6911      	ldr	r1, [r2, #16]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	68d2      	ldr	r2, [r2, #12]
 8003e7e:	4311      	orrs	r1, r2
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6812      	ldr	r2, [r2, #0]
 8003e84:	430b      	orrs	r3, r1
 8003e86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	695a      	ldr	r2, [r3, #20]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 0201 	orr.w	r2, r2, #1
 8003eb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	000186a0 	.word	0x000186a0
 8003ee0:	001e847f 	.word	0x001e847f
 8003ee4:	003d08ff 	.word	0x003d08ff
 8003ee8:	431bde83 	.word	0x431bde83
 8003eec:	10624dd3 	.word	0x10624dd3

08003ef0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b088      	sub	sp, #32
 8003ef4:	af02      	add	r7, sp, #8
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	4608      	mov	r0, r1
 8003efa:	4611      	mov	r1, r2
 8003efc:	461a      	mov	r2, r3
 8003efe:	4603      	mov	r3, r0
 8003f00:	817b      	strh	r3, [r7, #10]
 8003f02:	460b      	mov	r3, r1
 8003f04:	813b      	strh	r3, [r7, #8]
 8003f06:	4613      	mov	r3, r2
 8003f08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f0a:	f7ff f80d 	bl	8002f28 <HAL_GetTick>
 8003f0e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b20      	cmp	r3, #32
 8003f1a:	f040 80d9 	bne.w	80040d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	2319      	movs	r3, #25
 8003f24:	2201      	movs	r2, #1
 8003f26:	496d      	ldr	r1, [pc, #436]	@ (80040dc <HAL_I2C_Mem_Write+0x1ec>)
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f000 fc8b 	bl	8004844 <I2C_WaitOnFlagUntilTimeout>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d001      	beq.n	8003f38 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003f34:	2302      	movs	r3, #2
 8003f36:	e0cc      	b.n	80040d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d101      	bne.n	8003f46 <HAL_I2C_Mem_Write+0x56>
 8003f42:	2302      	movs	r3, #2
 8003f44:	e0c5      	b.n	80040d2 <HAL_I2C_Mem_Write+0x1e2>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d007      	beq.n	8003f6c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f042 0201 	orr.w	r2, r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2221      	movs	r2, #33	@ 0x21
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2240      	movs	r2, #64	@ 0x40
 8003f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6a3a      	ldr	r2, [r7, #32]
 8003f96:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003f9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	4a4d      	ldr	r2, [pc, #308]	@ (80040e0 <HAL_I2C_Mem_Write+0x1f0>)
 8003fac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fae:	88f8      	ldrh	r0, [r7, #6]
 8003fb0:	893a      	ldrh	r2, [r7, #8]
 8003fb2:	8979      	ldrh	r1, [r7, #10]
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	9301      	str	r3, [sp, #4]
 8003fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 fac2 	bl	8004548 <I2C_RequestMemoryWrite>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d052      	beq.n	8004070 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e081      	b.n	80040d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f000 fd50 	bl	8004a78 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00d      	beq.n	8003ffa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	d107      	bne.n	8003ff6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ff4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e06b      	b.n	80040d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffe:	781a      	ldrb	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400a:	1c5a      	adds	r2, r3, #1
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004014:	3b01      	subs	r3, #1
 8004016:	b29a      	uxth	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004020:	b29b      	uxth	r3, r3
 8004022:	3b01      	subs	r3, #1
 8004024:	b29a      	uxth	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b04      	cmp	r3, #4
 8004036:	d11b      	bne.n	8004070 <HAL_I2C_Mem_Write+0x180>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800403c:	2b00      	cmp	r3, #0
 800403e:	d017      	beq.n	8004070 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004044:	781a      	ldrb	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004050:	1c5a      	adds	r2, r3, #1
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800405a:	3b01      	subs	r3, #1
 800405c:	b29a      	uxth	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004066:	b29b      	uxth	r3, r3
 8004068:	3b01      	subs	r3, #1
 800406a:	b29a      	uxth	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1aa      	bne.n	8003fce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f000 fd43 	bl	8004b08 <I2C_WaitOnBTFFlagUntilTimeout>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00d      	beq.n	80040a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408c:	2b04      	cmp	r3, #4
 800408e:	d107      	bne.n	80040a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800409e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e016      	b.n	80040d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2220      	movs	r2, #32
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80040cc:	2300      	movs	r3, #0
 80040ce:	e000      	b.n	80040d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80040d0:	2302      	movs	r3, #2
  }
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3718      	adds	r7, #24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	00100002 	.word	0x00100002
 80040e0:	ffff0000 	.word	0xffff0000

080040e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b08c      	sub	sp, #48	@ 0x30
 80040e8:	af02      	add	r7, sp, #8
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	4608      	mov	r0, r1
 80040ee:	4611      	mov	r1, r2
 80040f0:	461a      	mov	r2, r3
 80040f2:	4603      	mov	r3, r0
 80040f4:	817b      	strh	r3, [r7, #10]
 80040f6:	460b      	mov	r3, r1
 80040f8:	813b      	strh	r3, [r7, #8]
 80040fa:	4613      	mov	r3, r2
 80040fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040fe:	f7fe ff13 	bl	8002f28 <HAL_GetTick>
 8004102:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800410a:	b2db      	uxtb	r3, r3
 800410c:	2b20      	cmp	r3, #32
 800410e:	f040 8214 	bne.w	800453a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	2319      	movs	r3, #25
 8004118:	2201      	movs	r2, #1
 800411a:	497b      	ldr	r1, [pc, #492]	@ (8004308 <HAL_I2C_Mem_Read+0x224>)
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f000 fb91 	bl	8004844 <I2C_WaitOnFlagUntilTimeout>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004128:	2302      	movs	r3, #2
 800412a:	e207      	b.n	800453c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004132:	2b01      	cmp	r3, #1
 8004134:	d101      	bne.n	800413a <HAL_I2C_Mem_Read+0x56>
 8004136:	2302      	movs	r3, #2
 8004138:	e200      	b.n	800453c <HAL_I2C_Mem_Read+0x458>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	2b01      	cmp	r3, #1
 800414e:	d007      	beq.n	8004160 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0201 	orr.w	r2, r2, #1
 800415e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800416e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2222      	movs	r2, #34	@ 0x22
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2240      	movs	r2, #64	@ 0x40
 800417c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800418a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004190:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004196:	b29a      	uxth	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	4a5b      	ldr	r2, [pc, #364]	@ (800430c <HAL_I2C_Mem_Read+0x228>)
 80041a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041a2:	88f8      	ldrh	r0, [r7, #6]
 80041a4:	893a      	ldrh	r2, [r7, #8]
 80041a6:	8979      	ldrh	r1, [r7, #10]
 80041a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041aa:	9301      	str	r3, [sp, #4]
 80041ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	4603      	mov	r3, r0
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f000 fa5e 	bl	8004674 <I2C_RequestMemoryRead>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e1bc      	b.n	800453c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d113      	bne.n	80041f2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ca:	2300      	movs	r3, #0
 80041cc:	623b      	str	r3, [r7, #32]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	623b      	str	r3, [r7, #32]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	623b      	str	r3, [r7, #32]
 80041de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041ee:	601a      	str	r2, [r3, #0]
 80041f0:	e190      	b.n	8004514 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d11b      	bne.n	8004232 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004208:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800420a:	2300      	movs	r3, #0
 800420c:	61fb      	str	r3, [r7, #28]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	61fb      	str	r3, [r7, #28]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	61fb      	str	r3, [r7, #28]
 800421e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800422e:	601a      	str	r2, [r3, #0]
 8004230:	e170      	b.n	8004514 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004236:	2b02      	cmp	r3, #2
 8004238:	d11b      	bne.n	8004272 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004248:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004258:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800425a:	2300      	movs	r3, #0
 800425c:	61bb      	str	r3, [r7, #24]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	61bb      	str	r3, [r7, #24]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	61bb      	str	r3, [r7, #24]
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	e150      	b.n	8004514 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004272:	2300      	movs	r3, #0
 8004274:	617b      	str	r3, [r7, #20]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	617b      	str	r3, [r7, #20]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	617b      	str	r3, [r7, #20]
 8004286:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004288:	e144      	b.n	8004514 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800428e:	2b03      	cmp	r3, #3
 8004290:	f200 80f1 	bhi.w	8004476 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004298:	2b01      	cmp	r3, #1
 800429a:	d123      	bne.n	80042e4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800429c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800429e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f000 fc79 	bl	8004b98 <I2C_WaitOnRXNEFlagUntilTimeout>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e145      	b.n	800453c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	691a      	ldr	r2, [r3, #16]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ba:	b2d2      	uxtb	r2, r2
 80042bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042cc:	3b01      	subs	r3, #1
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d8:	b29b      	uxth	r3, r3
 80042da:	3b01      	subs	r3, #1
 80042dc:	b29a      	uxth	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042e2:	e117      	b.n	8004514 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d14e      	bne.n	800438a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042f2:	2200      	movs	r2, #0
 80042f4:	4906      	ldr	r1, [pc, #24]	@ (8004310 <HAL_I2C_Mem_Read+0x22c>)
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 faa4 	bl	8004844 <I2C_WaitOnFlagUntilTimeout>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d008      	beq.n	8004314 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e11a      	b.n	800453c <HAL_I2C_Mem_Read+0x458>
 8004306:	bf00      	nop
 8004308:	00100002 	.word	0x00100002
 800430c:	ffff0000 	.word	0xffff0000
 8004310:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004322:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	691a      	ldr	r2, [r3, #16]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432e:	b2d2      	uxtb	r2, r2
 8004330:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004336:	1c5a      	adds	r2, r3, #1
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004340:	3b01      	subs	r3, #1
 8004342:	b29a      	uxth	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800434c:	b29b      	uxth	r3, r3
 800434e:	3b01      	subs	r3, #1
 8004350:	b29a      	uxth	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	691a      	ldr	r2, [r3, #16]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004360:	b2d2      	uxtb	r2, r2
 8004362:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004368:	1c5a      	adds	r2, r3, #1
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004372:	3b01      	subs	r3, #1
 8004374:	b29a      	uxth	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800437e:	b29b      	uxth	r3, r3
 8004380:	3b01      	subs	r3, #1
 8004382:	b29a      	uxth	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004388:	e0c4      	b.n	8004514 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800438a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004390:	2200      	movs	r2, #0
 8004392:	496c      	ldr	r1, [pc, #432]	@ (8004544 <HAL_I2C_Mem_Read+0x460>)
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f000 fa55 	bl	8004844 <I2C_WaitOnFlagUntilTimeout>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e0cb      	b.n	800453c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	691a      	ldr	r2, [r3, #16]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043be:	b2d2      	uxtb	r2, r2
 80043c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c6:	1c5a      	adds	r2, r3, #1
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043d0:	3b01      	subs	r3, #1
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043dc:	b29b      	uxth	r3, r3
 80043de:	3b01      	subs	r3, #1
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ec:	2200      	movs	r2, #0
 80043ee:	4955      	ldr	r1, [pc, #340]	@ (8004544 <HAL_I2C_Mem_Read+0x460>)
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f000 fa27 	bl	8004844 <I2C_WaitOnFlagUntilTimeout>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e09d      	b.n	800453c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800440e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	691a      	ldr	r2, [r3, #16]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800441a:	b2d2      	uxtb	r2, r2
 800441c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004422:	1c5a      	adds	r2, r3, #1
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800442c:	3b01      	subs	r3, #1
 800442e:	b29a      	uxth	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004438:	b29b      	uxth	r3, r3
 800443a:	3b01      	subs	r3, #1
 800443c:	b29a      	uxth	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	691a      	ldr	r2, [r3, #16]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444c:	b2d2      	uxtb	r2, r2
 800444e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004454:	1c5a      	adds	r2, r3, #1
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800445e:	3b01      	subs	r3, #1
 8004460:	b29a      	uxth	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800446a:	b29b      	uxth	r3, r3
 800446c:	3b01      	subs	r3, #1
 800446e:	b29a      	uxth	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004474:	e04e      	b.n	8004514 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004476:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004478:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f000 fb8c 	bl	8004b98 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e058      	b.n	800453c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	691a      	ldr	r2, [r3, #16]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004494:	b2d2      	uxtb	r2, r2
 8004496:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449c:	1c5a      	adds	r2, r3, #1
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044a6:	3b01      	subs	r3, #1
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	f003 0304 	and.w	r3, r3, #4
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	d124      	bne.n	8004514 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044ce:	2b03      	cmp	r3, #3
 80044d0:	d107      	bne.n	80044e2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044e0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	691a      	ldr	r2, [r3, #16]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ec:	b2d2      	uxtb	r2, r2
 80044ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f4:	1c5a      	adds	r2, r3, #1
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044fe:	3b01      	subs	r3, #1
 8004500:	b29a      	uxth	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800450a:	b29b      	uxth	r3, r3
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004518:	2b00      	cmp	r3, #0
 800451a:	f47f aeb6 	bne.w	800428a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2220      	movs	r2, #32
 8004522:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004536:	2300      	movs	r3, #0
 8004538:	e000      	b.n	800453c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800453a:	2302      	movs	r3, #2
  }
}
 800453c:	4618      	mov	r0, r3
 800453e:	3728      	adds	r7, #40	@ 0x28
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	00010004 	.word	0x00010004

08004548 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b088      	sub	sp, #32
 800454c:	af02      	add	r7, sp, #8
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	4608      	mov	r0, r1
 8004552:	4611      	mov	r1, r2
 8004554:	461a      	mov	r2, r3
 8004556:	4603      	mov	r3, r0
 8004558:	817b      	strh	r3, [r7, #10]
 800455a:	460b      	mov	r3, r1
 800455c:	813b      	strh	r3, [r7, #8]
 800455e:	4613      	mov	r3, r2
 8004560:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004570:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	6a3b      	ldr	r3, [r7, #32]
 8004578:	2200      	movs	r2, #0
 800457a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f000 f960 	bl	8004844 <I2C_WaitOnFlagUntilTimeout>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00d      	beq.n	80045a6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004594:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004598:	d103      	bne.n	80045a2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045a0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e05f      	b.n	8004666 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045a6:	897b      	ldrh	r3, [r7, #10]
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	461a      	mov	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80045b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b8:	6a3a      	ldr	r2, [r7, #32]
 80045ba:	492d      	ldr	r1, [pc, #180]	@ (8004670 <I2C_RequestMemoryWrite+0x128>)
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 f9bb 	bl	8004938 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e04c      	b.n	8004666 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045cc:	2300      	movs	r3, #0
 80045ce:	617b      	str	r3, [r7, #20]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	617b      	str	r3, [r7, #20]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	617b      	str	r3, [r7, #20]
 80045e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045e4:	6a39      	ldr	r1, [r7, #32]
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 fa46 	bl	8004a78 <I2C_WaitOnTXEFlagUntilTimeout>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00d      	beq.n	800460e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f6:	2b04      	cmp	r3, #4
 80045f8:	d107      	bne.n	800460a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004608:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e02b      	b.n	8004666 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800460e:	88fb      	ldrh	r3, [r7, #6]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d105      	bne.n	8004620 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004614:	893b      	ldrh	r3, [r7, #8]
 8004616:	b2da      	uxtb	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	611a      	str	r2, [r3, #16]
 800461e:	e021      	b.n	8004664 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004620:	893b      	ldrh	r3, [r7, #8]
 8004622:	0a1b      	lsrs	r3, r3, #8
 8004624:	b29b      	uxth	r3, r3
 8004626:	b2da      	uxtb	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800462e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004630:	6a39      	ldr	r1, [r7, #32]
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f000 fa20 	bl	8004a78 <I2C_WaitOnTXEFlagUntilTimeout>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00d      	beq.n	800465a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004642:	2b04      	cmp	r3, #4
 8004644:	d107      	bne.n	8004656 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004654:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e005      	b.n	8004666 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800465a:	893b      	ldrh	r3, [r7, #8]
 800465c:	b2da      	uxtb	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	00010002 	.word	0x00010002

08004674 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b088      	sub	sp, #32
 8004678:	af02      	add	r7, sp, #8
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	4608      	mov	r0, r1
 800467e:	4611      	mov	r1, r2
 8004680:	461a      	mov	r2, r3
 8004682:	4603      	mov	r3, r0
 8004684:	817b      	strh	r3, [r7, #10]
 8004686:	460b      	mov	r3, r1
 8004688:	813b      	strh	r3, [r7, #8]
 800468a:	4613      	mov	r3, r2
 800468c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800469c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	6a3b      	ldr	r3, [r7, #32]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f000 f8c2 	bl	8004844 <I2C_WaitOnFlagUntilTimeout>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00d      	beq.n	80046e2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046d4:	d103      	bne.n	80046de <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e0aa      	b.n	8004838 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046e2:	897b      	ldrh	r3, [r7, #10]
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	461a      	mov	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80046f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f4:	6a3a      	ldr	r2, [r7, #32]
 80046f6:	4952      	ldr	r1, [pc, #328]	@ (8004840 <I2C_RequestMemoryRead+0x1cc>)
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f000 f91d 	bl	8004938 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e097      	b.n	8004838 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004708:	2300      	movs	r3, #0
 800470a:	617b      	str	r3, [r7, #20]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	617b      	str	r3, [r7, #20]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	617b      	str	r3, [r7, #20]
 800471c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800471e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004720:	6a39      	ldr	r1, [r7, #32]
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f000 f9a8 	bl	8004a78 <I2C_WaitOnTXEFlagUntilTimeout>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00d      	beq.n	800474a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004732:	2b04      	cmp	r3, #4
 8004734:	d107      	bne.n	8004746 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004744:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e076      	b.n	8004838 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800474a:	88fb      	ldrh	r3, [r7, #6]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d105      	bne.n	800475c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004750:	893b      	ldrh	r3, [r7, #8]
 8004752:	b2da      	uxtb	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	611a      	str	r2, [r3, #16]
 800475a:	e021      	b.n	80047a0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800475c:	893b      	ldrh	r3, [r7, #8]
 800475e:	0a1b      	lsrs	r3, r3, #8
 8004760:	b29b      	uxth	r3, r3
 8004762:	b2da      	uxtb	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800476a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800476c:	6a39      	ldr	r1, [r7, #32]
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f000 f982 	bl	8004a78 <I2C_WaitOnTXEFlagUntilTimeout>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00d      	beq.n	8004796 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800477e:	2b04      	cmp	r3, #4
 8004780:	d107      	bne.n	8004792 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004790:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e050      	b.n	8004838 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004796:	893b      	ldrh	r3, [r7, #8]
 8004798:	b2da      	uxtb	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047a2:	6a39      	ldr	r1, [r7, #32]
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f000 f967 	bl	8004a78 <I2C_WaitOnTXEFlagUntilTimeout>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00d      	beq.n	80047cc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b4:	2b04      	cmp	r3, #4
 80047b6:	d107      	bne.n	80047c8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047c6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e035      	b.n	8004838 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047da:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047de:	9300      	str	r3, [sp, #0]
 80047e0:	6a3b      	ldr	r3, [r7, #32]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 f82b 	bl	8004844 <I2C_WaitOnFlagUntilTimeout>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00d      	beq.n	8004810 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004802:	d103      	bne.n	800480c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800480a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e013      	b.n	8004838 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004810:	897b      	ldrh	r3, [r7, #10]
 8004812:	b2db      	uxtb	r3, r3
 8004814:	f043 0301 	orr.w	r3, r3, #1
 8004818:	b2da      	uxtb	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004822:	6a3a      	ldr	r2, [r7, #32]
 8004824:	4906      	ldr	r1, [pc, #24]	@ (8004840 <I2C_RequestMemoryRead+0x1cc>)
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f000 f886 	bl	8004938 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e000      	b.n	8004838 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3718      	adds	r7, #24
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	00010002 	.word	0x00010002

08004844 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	603b      	str	r3, [r7, #0]
 8004850:	4613      	mov	r3, r2
 8004852:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004854:	e048      	b.n	80048e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800485c:	d044      	beq.n	80048e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800485e:	f7fe fb63 	bl	8002f28 <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	683a      	ldr	r2, [r7, #0]
 800486a:	429a      	cmp	r2, r3
 800486c:	d302      	bcc.n	8004874 <I2C_WaitOnFlagUntilTimeout+0x30>
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d139      	bne.n	80048e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	0c1b      	lsrs	r3, r3, #16
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b01      	cmp	r3, #1
 800487c:	d10d      	bne.n	800489a <I2C_WaitOnFlagUntilTimeout+0x56>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	43da      	mvns	r2, r3
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	4013      	ands	r3, r2
 800488a:	b29b      	uxth	r3, r3
 800488c:	2b00      	cmp	r3, #0
 800488e:	bf0c      	ite	eq
 8004890:	2301      	moveq	r3, #1
 8004892:	2300      	movne	r3, #0
 8004894:	b2db      	uxtb	r3, r3
 8004896:	461a      	mov	r2, r3
 8004898:	e00c      	b.n	80048b4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	43da      	mvns	r2, r3
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	4013      	ands	r3, r2
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	bf0c      	ite	eq
 80048ac:	2301      	moveq	r3, #1
 80048ae:	2300      	movne	r3, #0
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	461a      	mov	r2, r3
 80048b4:	79fb      	ldrb	r3, [r7, #7]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d116      	bne.n	80048e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2220      	movs	r2, #32
 80048c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d4:	f043 0220 	orr.w	r2, r3, #32
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e023      	b.n	8004930 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	0c1b      	lsrs	r3, r3, #16
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d10d      	bne.n	800490e <I2C_WaitOnFlagUntilTimeout+0xca>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	695b      	ldr	r3, [r3, #20]
 80048f8:	43da      	mvns	r2, r3
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	4013      	ands	r3, r2
 80048fe:	b29b      	uxth	r3, r3
 8004900:	2b00      	cmp	r3, #0
 8004902:	bf0c      	ite	eq
 8004904:	2301      	moveq	r3, #1
 8004906:	2300      	movne	r3, #0
 8004908:	b2db      	uxtb	r3, r3
 800490a:	461a      	mov	r2, r3
 800490c:	e00c      	b.n	8004928 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	43da      	mvns	r2, r3
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	4013      	ands	r3, r2
 800491a:	b29b      	uxth	r3, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	bf0c      	ite	eq
 8004920:	2301      	moveq	r3, #1
 8004922:	2300      	movne	r3, #0
 8004924:	b2db      	uxtb	r3, r3
 8004926:	461a      	mov	r2, r3
 8004928:	79fb      	ldrb	r3, [r7, #7]
 800492a:	429a      	cmp	r2, r3
 800492c:	d093      	beq.n	8004856 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
 8004944:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004946:	e071      	b.n	8004a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004952:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004956:	d123      	bne.n	80049a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004966:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004970:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2220      	movs	r2, #32
 800497c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800498c:	f043 0204 	orr.w	r2, r3, #4
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e067      	b.n	8004a70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a6:	d041      	beq.n	8004a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049a8:	f7fe fabe 	bl	8002f28 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d302      	bcc.n	80049be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d136      	bne.n	8004a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	0c1b      	lsrs	r3, r3, #16
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d10c      	bne.n	80049e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	43da      	mvns	r2, r3
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	4013      	ands	r3, r2
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	bf14      	ite	ne
 80049da:	2301      	movne	r3, #1
 80049dc:	2300      	moveq	r3, #0
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	e00b      	b.n	80049fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	43da      	mvns	r2, r3
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	4013      	ands	r3, r2
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	bf14      	ite	ne
 80049f4:	2301      	movne	r3, #1
 80049f6:	2300      	moveq	r3, #0
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d016      	beq.n	8004a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2220      	movs	r2, #32
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a18:	f043 0220 	orr.w	r2, r3, #32
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e021      	b.n	8004a70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	0c1b      	lsrs	r3, r3, #16
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d10c      	bne.n	8004a50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	43da      	mvns	r2, r3
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	4013      	ands	r3, r2
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	bf14      	ite	ne
 8004a48:	2301      	movne	r3, #1
 8004a4a:	2300      	moveq	r3, #0
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	e00b      	b.n	8004a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	43da      	mvns	r2, r3
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	bf14      	ite	ne
 8004a62:	2301      	movne	r3, #1
 8004a64:	2300      	moveq	r3, #0
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f47f af6d 	bne.w	8004948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a84:	e034      	b.n	8004af0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f000 f8e3 	bl	8004c52 <I2C_IsAcknowledgeFailed>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e034      	b.n	8004b00 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a9c:	d028      	beq.n	8004af0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a9e:	f7fe fa43 	bl	8002f28 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d302      	bcc.n	8004ab4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d11d      	bne.n	8004af0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004abe:	2b80      	cmp	r3, #128	@ 0x80
 8004ac0:	d016      	beq.n	8004af0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2220      	movs	r2, #32
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004adc:	f043 0220 	orr.w	r2, r3, #32
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e007      	b.n	8004b00 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004afa:	2b80      	cmp	r3, #128	@ 0x80
 8004afc:	d1c3      	bne.n	8004a86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3710      	adds	r7, #16
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b14:	e034      	b.n	8004b80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f000 f89b 	bl	8004c52 <I2C_IsAcknowledgeFailed>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e034      	b.n	8004b90 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b2c:	d028      	beq.n	8004b80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b2e:	f7fe f9fb 	bl	8002f28 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d302      	bcc.n	8004b44 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d11d      	bne.n	8004b80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	f003 0304 	and.w	r3, r3, #4
 8004b4e:	2b04      	cmp	r3, #4
 8004b50:	d016      	beq.n	8004b80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b6c:	f043 0220 	orr.w	r2, r3, #32
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e007      	b.n	8004b90 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	f003 0304 	and.w	r3, r3, #4
 8004b8a:	2b04      	cmp	r3, #4
 8004b8c:	d1c3      	bne.n	8004b16 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ba4:	e049      	b.n	8004c3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	f003 0310 	and.w	r3, r3, #16
 8004bb0:	2b10      	cmp	r3, #16
 8004bb2:	d119      	bne.n	8004be8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f06f 0210 	mvn.w	r2, #16
 8004bbc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e030      	b.n	8004c4a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004be8:	f7fe f99e 	bl	8002f28 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d302      	bcc.n	8004bfe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d11d      	bne.n	8004c3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	695b      	ldr	r3, [r3, #20]
 8004c04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c08:	2b40      	cmp	r3, #64	@ 0x40
 8004c0a:	d016      	beq.n	8004c3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2220      	movs	r2, #32
 8004c16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c26:	f043 0220 	orr.w	r2, r3, #32
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e007      	b.n	8004c4a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c44:	2b40      	cmp	r3, #64	@ 0x40
 8004c46:	d1ae      	bne.n	8004ba6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b083      	sub	sp, #12
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	695b      	ldr	r3, [r3, #20]
 8004c60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c68:	d11b      	bne.n	8004ca2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c72:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2220      	movs	r2, #32
 8004c7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8e:	f043 0204 	orr.w	r2, r3, #4
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e000      	b.n	8004ca4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e0cc      	b.n	8004e5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cc4:	4b68      	ldr	r3, [pc, #416]	@ (8004e68 <HAL_RCC_ClockConfig+0x1b8>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 030f 	and.w	r3, r3, #15
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d90c      	bls.n	8004cec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cd2:	4b65      	ldr	r3, [pc, #404]	@ (8004e68 <HAL_RCC_ClockConfig+0x1b8>)
 8004cd4:	683a      	ldr	r2, [r7, #0]
 8004cd6:	b2d2      	uxtb	r2, r2
 8004cd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cda:	4b63      	ldr	r3, [pc, #396]	@ (8004e68 <HAL_RCC_ClockConfig+0x1b8>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 030f 	and.w	r3, r3, #15
 8004ce2:	683a      	ldr	r2, [r7, #0]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d001      	beq.n	8004cec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e0b8      	b.n	8004e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d020      	beq.n	8004d3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0304 	and.w	r3, r3, #4
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d005      	beq.n	8004d10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d04:	4b59      	ldr	r3, [pc, #356]	@ (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	4a58      	ldr	r2, [pc, #352]	@ (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d0a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004d0e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0308 	and.w	r3, r3, #8
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d005      	beq.n	8004d28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d1c:	4b53      	ldr	r3, [pc, #332]	@ (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	4a52      	ldr	r2, [pc, #328]	@ (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d22:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004d26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d28:	4b50      	ldr	r3, [pc, #320]	@ (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	494d      	ldr	r1, [pc, #308]	@ (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d044      	beq.n	8004dd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d107      	bne.n	8004d5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d4e:	4b47      	ldr	r3, [pc, #284]	@ (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d119      	bne.n	8004d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e07f      	b.n	8004e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d003      	beq.n	8004d6e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d6a:	2b03      	cmp	r3, #3
 8004d6c:	d107      	bne.n	8004d7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d6e:	4b3f      	ldr	r3, [pc, #252]	@ (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d109      	bne.n	8004d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e06f      	b.n	8004e5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d7e:	4b3b      	ldr	r3, [pc, #236]	@ (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e067      	b.n	8004e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d8e:	4b37      	ldr	r3, [pc, #220]	@ (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f023 0203 	bic.w	r2, r3, #3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	4934      	ldr	r1, [pc, #208]	@ (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004da0:	f7fe f8c2 	bl	8002f28 <HAL_GetTick>
 8004da4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004da6:	e00a      	b.n	8004dbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004da8:	f7fe f8be 	bl	8002f28 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e04f      	b.n	8004e5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dbe:	4b2b      	ldr	r3, [pc, #172]	@ (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f003 020c 	and.w	r2, r3, #12
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d1eb      	bne.n	8004da8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004dd0:	4b25      	ldr	r3, [pc, #148]	@ (8004e68 <HAL_RCC_ClockConfig+0x1b8>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 030f 	and.w	r3, r3, #15
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d20c      	bcs.n	8004df8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dde:	4b22      	ldr	r3, [pc, #136]	@ (8004e68 <HAL_RCC_ClockConfig+0x1b8>)
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	b2d2      	uxtb	r2, r2
 8004de4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004de6:	4b20      	ldr	r3, [pc, #128]	@ (8004e68 <HAL_RCC_ClockConfig+0x1b8>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 030f 	and.w	r3, r3, #15
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d001      	beq.n	8004df8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e032      	b.n	8004e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d008      	beq.n	8004e16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e04:	4b19      	ldr	r3, [pc, #100]	@ (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	4916      	ldr	r1, [pc, #88]	@ (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0308 	and.w	r3, r3, #8
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d009      	beq.n	8004e36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e22:	4b12      	ldr	r3, [pc, #72]	@ (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	00db      	lsls	r3, r3, #3
 8004e30:	490e      	ldr	r1, [pc, #56]	@ (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e36:	f000 f887 	bl	8004f48 <HAL_RCC_GetSysClockFreq>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	091b      	lsrs	r3, r3, #4
 8004e42:	f003 030f 	and.w	r3, r3, #15
 8004e46:	490a      	ldr	r1, [pc, #40]	@ (8004e70 <HAL_RCC_ClockConfig+0x1c0>)
 8004e48:	5ccb      	ldrb	r3, [r1, r3]
 8004e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e4e:	4a09      	ldr	r2, [pc, #36]	@ (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004e52:	4b09      	ldr	r3, [pc, #36]	@ (8004e78 <HAL_RCC_ClockConfig+0x1c8>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7fd ff12 	bl	8002c80 <HAL_InitTick>

  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	40023c00 	.word	0x40023c00
 8004e6c:	40023800 	.word	0x40023800
 8004e70:	0800c5f0 	.word	0x0800c5f0
 8004e74:	20000034 	.word	0x20000034
 8004e78:	20000038 	.word	0x20000038

08004e7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e80:	4b03      	ldr	r3, [pc, #12]	@ (8004e90 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e82:	681b      	ldr	r3, [r3, #0]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	20000034 	.word	0x20000034

08004e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e98:	f7ff fff0 	bl	8004e7c <HAL_RCC_GetHCLKFreq>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	4b05      	ldr	r3, [pc, #20]	@ (8004eb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	0a9b      	lsrs	r3, r3, #10
 8004ea4:	f003 0307 	and.w	r3, r3, #7
 8004ea8:	4903      	ldr	r1, [pc, #12]	@ (8004eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eaa:	5ccb      	ldrb	r3, [r1, r3]
 8004eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	40023800 	.word	0x40023800
 8004eb8:	0800c600 	.word	0x0800c600

08004ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ec0:	f7ff ffdc 	bl	8004e7c <HAL_RCC_GetHCLKFreq>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	4b05      	ldr	r3, [pc, #20]	@ (8004edc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	0b5b      	lsrs	r3, r3, #13
 8004ecc:	f003 0307 	and.w	r3, r3, #7
 8004ed0:	4903      	ldr	r1, [pc, #12]	@ (8004ee0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ed2:	5ccb      	ldrb	r3, [r1, r3]
 8004ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	40023800 	.word	0x40023800
 8004ee0:	0800c600 	.word	0x0800c600

08004ee4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	220f      	movs	r2, #15
 8004ef2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ef4:	4b12      	ldr	r3, [pc, #72]	@ (8004f40 <HAL_RCC_GetClockConfig+0x5c>)
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f003 0203 	and.w	r2, r3, #3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004f00:	4b0f      	ldr	r3, [pc, #60]	@ (8004f40 <HAL_RCC_GetClockConfig+0x5c>)
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8004f40 <HAL_RCC_GetClockConfig+0x5c>)
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004f18:	4b09      	ldr	r3, [pc, #36]	@ (8004f40 <HAL_RCC_GetClockConfig+0x5c>)
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	08db      	lsrs	r3, r3, #3
 8004f1e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004f26:	4b07      	ldr	r3, [pc, #28]	@ (8004f44 <HAL_RCC_GetClockConfig+0x60>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 020f 	and.w	r2, r3, #15
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	601a      	str	r2, [r3, #0]
}
 8004f32:	bf00      	nop
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	40023800 	.word	0x40023800
 8004f44:	40023c00 	.word	0x40023c00

08004f48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f4c:	b0a6      	sub	sp, #152	@ 0x98
 8004f4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8004f56:	2300      	movs	r3, #0
 8004f58:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f6e:	4bc8      	ldr	r3, [pc, #800]	@ (8005290 <HAL_RCC_GetSysClockFreq+0x348>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f003 030c 	and.w	r3, r3, #12
 8004f76:	2b0c      	cmp	r3, #12
 8004f78:	f200 817e 	bhi.w	8005278 <HAL_RCC_GetSysClockFreq+0x330>
 8004f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8004f84 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f82:	bf00      	nop
 8004f84:	08004fb9 	.word	0x08004fb9
 8004f88:	08005279 	.word	0x08005279
 8004f8c:	08005279 	.word	0x08005279
 8004f90:	08005279 	.word	0x08005279
 8004f94:	08004fc1 	.word	0x08004fc1
 8004f98:	08005279 	.word	0x08005279
 8004f9c:	08005279 	.word	0x08005279
 8004fa0:	08005279 	.word	0x08005279
 8004fa4:	08004fc9 	.word	0x08004fc9
 8004fa8:	08005279 	.word	0x08005279
 8004fac:	08005279 	.word	0x08005279
 8004fb0:	08005279 	.word	0x08005279
 8004fb4:	08005133 	.word	0x08005133
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fb8:	4bb6      	ldr	r3, [pc, #728]	@ (8005294 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004fba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004fbe:	e15f      	b.n	8005280 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fc0:	4bb5      	ldr	r3, [pc, #724]	@ (8005298 <HAL_RCC_GetSysClockFreq+0x350>)
 8004fc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004fc6:	e15b      	b.n	8005280 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fc8:	4bb1      	ldr	r3, [pc, #708]	@ (8005290 <HAL_RCC_GetSysClockFreq+0x348>)
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004fd0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fd4:	4bae      	ldr	r3, [pc, #696]	@ (8005290 <HAL_RCC_GetSysClockFreq+0x348>)
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d031      	beq.n	8005044 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fe0:	4bab      	ldr	r3, [pc, #684]	@ (8005290 <HAL_RCC_GetSysClockFreq+0x348>)
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	099b      	lsrs	r3, r3, #6
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004fea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004fec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ff2:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	667b      	str	r3, [r7, #100]	@ 0x64
 8004ff8:	4ba7      	ldr	r3, [pc, #668]	@ (8005298 <HAL_RCC_GetSysClockFreq+0x350>)
 8004ffa:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004ffe:	462a      	mov	r2, r5
 8005000:	fb03 f202 	mul.w	r2, r3, r2
 8005004:	2300      	movs	r3, #0
 8005006:	4621      	mov	r1, r4
 8005008:	fb01 f303 	mul.w	r3, r1, r3
 800500c:	4413      	add	r3, r2
 800500e:	4aa2      	ldr	r2, [pc, #648]	@ (8005298 <HAL_RCC_GetSysClockFreq+0x350>)
 8005010:	4621      	mov	r1, r4
 8005012:	fba1 1202 	umull	r1, r2, r1, r2
 8005016:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005018:	460a      	mov	r2, r1
 800501a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800501c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800501e:	4413      	add	r3, r2
 8005020:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005022:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005026:	2200      	movs	r2, #0
 8005028:	65bb      	str	r3, [r7, #88]	@ 0x58
 800502a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800502c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005030:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8005034:	f7fb fe20 	bl	8000c78 <__aeabi_uldivmod>
 8005038:	4602      	mov	r2, r0
 800503a:	460b      	mov	r3, r1
 800503c:	4613      	mov	r3, r2
 800503e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005042:	e064      	b.n	800510e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005044:	4b92      	ldr	r3, [pc, #584]	@ (8005290 <HAL_RCC_GetSysClockFreq+0x348>)
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	099b      	lsrs	r3, r3, #6
 800504a:	2200      	movs	r2, #0
 800504c:	653b      	str	r3, [r7, #80]	@ 0x50
 800504e:	657a      	str	r2, [r7, #84]	@ 0x54
 8005050:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005056:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005058:	2300      	movs	r3, #0
 800505a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800505c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8005060:	4622      	mov	r2, r4
 8005062:	462b      	mov	r3, r5
 8005064:	f04f 0000 	mov.w	r0, #0
 8005068:	f04f 0100 	mov.w	r1, #0
 800506c:	0159      	lsls	r1, r3, #5
 800506e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005072:	0150      	lsls	r0, r2, #5
 8005074:	4602      	mov	r2, r0
 8005076:	460b      	mov	r3, r1
 8005078:	4621      	mov	r1, r4
 800507a:	1a51      	subs	r1, r2, r1
 800507c:	6139      	str	r1, [r7, #16]
 800507e:	4629      	mov	r1, r5
 8005080:	eb63 0301 	sbc.w	r3, r3, r1
 8005084:	617b      	str	r3, [r7, #20]
 8005086:	f04f 0200 	mov.w	r2, #0
 800508a:	f04f 0300 	mov.w	r3, #0
 800508e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005092:	4659      	mov	r1, fp
 8005094:	018b      	lsls	r3, r1, #6
 8005096:	4651      	mov	r1, sl
 8005098:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800509c:	4651      	mov	r1, sl
 800509e:	018a      	lsls	r2, r1, #6
 80050a0:	4651      	mov	r1, sl
 80050a2:	ebb2 0801 	subs.w	r8, r2, r1
 80050a6:	4659      	mov	r1, fp
 80050a8:	eb63 0901 	sbc.w	r9, r3, r1
 80050ac:	f04f 0200 	mov.w	r2, #0
 80050b0:	f04f 0300 	mov.w	r3, #0
 80050b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050c0:	4690      	mov	r8, r2
 80050c2:	4699      	mov	r9, r3
 80050c4:	4623      	mov	r3, r4
 80050c6:	eb18 0303 	adds.w	r3, r8, r3
 80050ca:	60bb      	str	r3, [r7, #8]
 80050cc:	462b      	mov	r3, r5
 80050ce:	eb49 0303 	adc.w	r3, r9, r3
 80050d2:	60fb      	str	r3, [r7, #12]
 80050d4:	f04f 0200 	mov.w	r2, #0
 80050d8:	f04f 0300 	mov.w	r3, #0
 80050dc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80050e0:	4629      	mov	r1, r5
 80050e2:	028b      	lsls	r3, r1, #10
 80050e4:	4621      	mov	r1, r4
 80050e6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80050ea:	4621      	mov	r1, r4
 80050ec:	028a      	lsls	r2, r1, #10
 80050ee:	4610      	mov	r0, r2
 80050f0:	4619      	mov	r1, r3
 80050f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050f6:	2200      	movs	r2, #0
 80050f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80050fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80050fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005100:	f7fb fdba 	bl	8000c78 <__aeabi_uldivmod>
 8005104:	4602      	mov	r2, r0
 8005106:	460b      	mov	r3, r1
 8005108:	4613      	mov	r3, r2
 800510a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800510e:	4b60      	ldr	r3, [pc, #384]	@ (8005290 <HAL_RCC_GetSysClockFreq+0x348>)
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	0c1b      	lsrs	r3, r3, #16
 8005114:	f003 0303 	and.w	r3, r3, #3
 8005118:	3301      	adds	r3, #1
 800511a:	005b      	lsls	r3, r3, #1
 800511c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8005120:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005124:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005128:	fbb2 f3f3 	udiv	r3, r2, r3
 800512c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005130:	e0a6      	b.n	8005280 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005132:	4b57      	ldr	r3, [pc, #348]	@ (8005290 <HAL_RCC_GetSysClockFreq+0x348>)
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800513a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800513e:	4b54      	ldr	r3, [pc, #336]	@ (8005290 <HAL_RCC_GetSysClockFreq+0x348>)
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d02a      	beq.n	80051a0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800514a:	4b51      	ldr	r3, [pc, #324]	@ (8005290 <HAL_RCC_GetSysClockFreq+0x348>)
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	099b      	lsrs	r3, r3, #6
 8005150:	2200      	movs	r2, #0
 8005152:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005154:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005158:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800515c:	2100      	movs	r1, #0
 800515e:	4b4e      	ldr	r3, [pc, #312]	@ (8005298 <HAL_RCC_GetSysClockFreq+0x350>)
 8005160:	fb03 f201 	mul.w	r2, r3, r1
 8005164:	2300      	movs	r3, #0
 8005166:	fb00 f303 	mul.w	r3, r0, r3
 800516a:	4413      	add	r3, r2
 800516c:	4a4a      	ldr	r2, [pc, #296]	@ (8005298 <HAL_RCC_GetSysClockFreq+0x350>)
 800516e:	fba0 1202 	umull	r1, r2, r0, r2
 8005172:	677a      	str	r2, [r7, #116]	@ 0x74
 8005174:	460a      	mov	r2, r1
 8005176:	673a      	str	r2, [r7, #112]	@ 0x70
 8005178:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800517a:	4413      	add	r3, r2
 800517c:	677b      	str	r3, [r7, #116]	@ 0x74
 800517e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005182:	2200      	movs	r2, #0
 8005184:	633b      	str	r3, [r7, #48]	@ 0x30
 8005186:	637a      	str	r2, [r7, #52]	@ 0x34
 8005188:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800518c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8005190:	f7fb fd72 	bl	8000c78 <__aeabi_uldivmod>
 8005194:	4602      	mov	r2, r0
 8005196:	460b      	mov	r3, r1
 8005198:	4613      	mov	r3, r2
 800519a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800519e:	e05b      	b.n	8005258 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051a0:	4b3b      	ldr	r3, [pc, #236]	@ (8005290 <HAL_RCC_GetSysClockFreq+0x348>)
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	099b      	lsrs	r3, r3, #6
 80051a6:	2200      	movs	r2, #0
 80051a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051b2:	623b      	str	r3, [r7, #32]
 80051b4:	2300      	movs	r3, #0
 80051b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80051b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80051bc:	4642      	mov	r2, r8
 80051be:	464b      	mov	r3, r9
 80051c0:	f04f 0000 	mov.w	r0, #0
 80051c4:	f04f 0100 	mov.w	r1, #0
 80051c8:	0159      	lsls	r1, r3, #5
 80051ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051ce:	0150      	lsls	r0, r2, #5
 80051d0:	4602      	mov	r2, r0
 80051d2:	460b      	mov	r3, r1
 80051d4:	4641      	mov	r1, r8
 80051d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80051da:	4649      	mov	r1, r9
 80051dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80051e0:	f04f 0200 	mov.w	r2, #0
 80051e4:	f04f 0300 	mov.w	r3, #0
 80051e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80051ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80051f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80051f4:	ebb2 040a 	subs.w	r4, r2, sl
 80051f8:	eb63 050b 	sbc.w	r5, r3, fp
 80051fc:	f04f 0200 	mov.w	r2, #0
 8005200:	f04f 0300 	mov.w	r3, #0
 8005204:	00eb      	lsls	r3, r5, #3
 8005206:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800520a:	00e2      	lsls	r2, r4, #3
 800520c:	4614      	mov	r4, r2
 800520e:	461d      	mov	r5, r3
 8005210:	4643      	mov	r3, r8
 8005212:	18e3      	adds	r3, r4, r3
 8005214:	603b      	str	r3, [r7, #0]
 8005216:	464b      	mov	r3, r9
 8005218:	eb45 0303 	adc.w	r3, r5, r3
 800521c:	607b      	str	r3, [r7, #4]
 800521e:	f04f 0200 	mov.w	r2, #0
 8005222:	f04f 0300 	mov.w	r3, #0
 8005226:	e9d7 4500 	ldrd	r4, r5, [r7]
 800522a:	4629      	mov	r1, r5
 800522c:	028b      	lsls	r3, r1, #10
 800522e:	4621      	mov	r1, r4
 8005230:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005234:	4621      	mov	r1, r4
 8005236:	028a      	lsls	r2, r1, #10
 8005238:	4610      	mov	r0, r2
 800523a:	4619      	mov	r1, r3
 800523c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005240:	2200      	movs	r2, #0
 8005242:	61bb      	str	r3, [r7, #24]
 8005244:	61fa      	str	r2, [r7, #28]
 8005246:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800524a:	f7fb fd15 	bl	8000c78 <__aeabi_uldivmod>
 800524e:	4602      	mov	r2, r0
 8005250:	460b      	mov	r3, r1
 8005252:	4613      	mov	r3, r2
 8005254:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005258:	4b0d      	ldr	r3, [pc, #52]	@ (8005290 <HAL_RCC_GetSysClockFreq+0x348>)
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	0f1b      	lsrs	r3, r3, #28
 800525e:	f003 0307 	and.w	r3, r3, #7
 8005262:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8005266:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800526a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800526e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005272:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005276:	e003      	b.n	8005280 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005278:	4b06      	ldr	r3, [pc, #24]	@ (8005294 <HAL_RCC_GetSysClockFreq+0x34c>)
 800527a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800527e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005280:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8005284:	4618      	mov	r0, r3
 8005286:	3798      	adds	r7, #152	@ 0x98
 8005288:	46bd      	mov	sp, r7
 800528a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800528e:	bf00      	nop
 8005290:	40023800 	.word	0x40023800
 8005294:	00f42400 	.word	0x00f42400
 8005298:	017d7840 	.word	0x017d7840

0800529c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d101      	bne.n	80052ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e28d      	b.n	80057ca <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f000 8083 	beq.w	80053c2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80052bc:	4b94      	ldr	r3, [pc, #592]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f003 030c 	and.w	r3, r3, #12
 80052c4:	2b04      	cmp	r3, #4
 80052c6:	d019      	beq.n	80052fc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80052c8:	4b91      	ldr	r3, [pc, #580]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f003 030c 	and.w	r3, r3, #12
        || \
 80052d0:	2b08      	cmp	r3, #8
 80052d2:	d106      	bne.n	80052e2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80052d4:	4b8e      	ldr	r3, [pc, #568]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052e0:	d00c      	beq.n	80052fc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052e2:	4b8b      	ldr	r3, [pc, #556]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80052ea:	2b0c      	cmp	r3, #12
 80052ec:	d112      	bne.n	8005314 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052ee:	4b88      	ldr	r3, [pc, #544]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052fa:	d10b      	bne.n	8005314 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052fc:	4b84      	ldr	r3, [pc, #528]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d05b      	beq.n	80053c0 <HAL_RCC_OscConfig+0x124>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d157      	bne.n	80053c0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e25a      	b.n	80057ca <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800531c:	d106      	bne.n	800532c <HAL_RCC_OscConfig+0x90>
 800531e:	4b7c      	ldr	r3, [pc, #496]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a7b      	ldr	r2, [pc, #492]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 8005324:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005328:	6013      	str	r3, [r2, #0]
 800532a:	e01d      	b.n	8005368 <HAL_RCC_OscConfig+0xcc>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005334:	d10c      	bne.n	8005350 <HAL_RCC_OscConfig+0xb4>
 8005336:	4b76      	ldr	r3, [pc, #472]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a75      	ldr	r2, [pc, #468]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 800533c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005340:	6013      	str	r3, [r2, #0]
 8005342:	4b73      	ldr	r3, [pc, #460]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a72      	ldr	r2, [pc, #456]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 8005348:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800534c:	6013      	str	r3, [r2, #0]
 800534e:	e00b      	b.n	8005368 <HAL_RCC_OscConfig+0xcc>
 8005350:	4b6f      	ldr	r3, [pc, #444]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a6e      	ldr	r2, [pc, #440]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 8005356:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800535a:	6013      	str	r3, [r2, #0]
 800535c:	4b6c      	ldr	r3, [pc, #432]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a6b      	ldr	r2, [pc, #428]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 8005362:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005366:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d013      	beq.n	8005398 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005370:	f7fd fdda 	bl	8002f28 <HAL_GetTick>
 8005374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005376:	e008      	b.n	800538a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005378:	f7fd fdd6 	bl	8002f28 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	2b64      	cmp	r3, #100	@ 0x64
 8005384:	d901      	bls.n	800538a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e21f      	b.n	80057ca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800538a:	4b61      	ldr	r3, [pc, #388]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d0f0      	beq.n	8005378 <HAL_RCC_OscConfig+0xdc>
 8005396:	e014      	b.n	80053c2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005398:	f7fd fdc6 	bl	8002f28 <HAL_GetTick>
 800539c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800539e:	e008      	b.n	80053b2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053a0:	f7fd fdc2 	bl	8002f28 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	2b64      	cmp	r3, #100	@ 0x64
 80053ac:	d901      	bls.n	80053b2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e20b      	b.n	80057ca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053b2:	4b57      	ldr	r3, [pc, #348]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1f0      	bne.n	80053a0 <HAL_RCC_OscConfig+0x104>
 80053be:	e000      	b.n	80053c2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d06f      	beq.n	80054ae <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80053ce:	4b50      	ldr	r3, [pc, #320]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f003 030c 	and.w	r3, r3, #12
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d017      	beq.n	800540a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80053da:	4b4d      	ldr	r3, [pc, #308]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f003 030c 	and.w	r3, r3, #12
        || \
 80053e2:	2b08      	cmp	r3, #8
 80053e4:	d105      	bne.n	80053f2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80053e6:	4b4a      	ldr	r3, [pc, #296]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00b      	beq.n	800540a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053f2:	4b47      	ldr	r3, [pc, #284]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80053fa:	2b0c      	cmp	r3, #12
 80053fc:	d11c      	bne.n	8005438 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053fe:	4b44      	ldr	r3, [pc, #272]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d116      	bne.n	8005438 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800540a:	4b41      	ldr	r3, [pc, #260]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d005      	beq.n	8005422 <HAL_RCC_OscConfig+0x186>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d001      	beq.n	8005422 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e1d3      	b.n	80057ca <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005422:	4b3b      	ldr	r3, [pc, #236]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	00db      	lsls	r3, r3, #3
 8005430:	4937      	ldr	r1, [pc, #220]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 8005432:	4313      	orrs	r3, r2
 8005434:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005436:	e03a      	b.n	80054ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d020      	beq.n	8005482 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005440:	4b34      	ldr	r3, [pc, #208]	@ (8005514 <HAL_RCC_OscConfig+0x278>)
 8005442:	2201      	movs	r2, #1
 8005444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005446:	f7fd fd6f 	bl	8002f28 <HAL_GetTick>
 800544a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800544c:	e008      	b.n	8005460 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800544e:	f7fd fd6b 	bl	8002f28 <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	2b02      	cmp	r3, #2
 800545a:	d901      	bls.n	8005460 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e1b4      	b.n	80057ca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005460:	4b2b      	ldr	r3, [pc, #172]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0302 	and.w	r3, r3, #2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d0f0      	beq.n	800544e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800546c:	4b28      	ldr	r3, [pc, #160]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	00db      	lsls	r3, r3, #3
 800547a:	4925      	ldr	r1, [pc, #148]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 800547c:	4313      	orrs	r3, r2
 800547e:	600b      	str	r3, [r1, #0]
 8005480:	e015      	b.n	80054ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005482:	4b24      	ldr	r3, [pc, #144]	@ (8005514 <HAL_RCC_OscConfig+0x278>)
 8005484:	2200      	movs	r2, #0
 8005486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005488:	f7fd fd4e 	bl	8002f28 <HAL_GetTick>
 800548c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800548e:	e008      	b.n	80054a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005490:	f7fd fd4a 	bl	8002f28 <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	2b02      	cmp	r3, #2
 800549c:	d901      	bls.n	80054a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e193      	b.n	80057ca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054a2:	4b1b      	ldr	r3, [pc, #108]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1f0      	bne.n	8005490 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0308 	and.w	r3, r3, #8
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d036      	beq.n	8005528 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d016      	beq.n	80054f0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054c2:	4b15      	ldr	r3, [pc, #84]	@ (8005518 <HAL_RCC_OscConfig+0x27c>)
 80054c4:	2201      	movs	r2, #1
 80054c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054c8:	f7fd fd2e 	bl	8002f28 <HAL_GetTick>
 80054cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054ce:	e008      	b.n	80054e2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054d0:	f7fd fd2a 	bl	8002f28 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e173      	b.n	80057ca <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 80054e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d0f0      	beq.n	80054d0 <HAL_RCC_OscConfig+0x234>
 80054ee:	e01b      	b.n	8005528 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054f0:	4b09      	ldr	r3, [pc, #36]	@ (8005518 <HAL_RCC_OscConfig+0x27c>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054f6:	f7fd fd17 	bl	8002f28 <HAL_GetTick>
 80054fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054fc:	e00e      	b.n	800551c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054fe:	f7fd fd13 	bl	8002f28 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	2b02      	cmp	r3, #2
 800550a:	d907      	bls.n	800551c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e15c      	b.n	80057ca <HAL_RCC_OscConfig+0x52e>
 8005510:	40023800 	.word	0x40023800
 8005514:	42470000 	.word	0x42470000
 8005518:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800551c:	4b8a      	ldr	r3, [pc, #552]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 800551e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005520:	f003 0302 	and.w	r3, r3, #2
 8005524:	2b00      	cmp	r3, #0
 8005526:	d1ea      	bne.n	80054fe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0304 	and.w	r3, r3, #4
 8005530:	2b00      	cmp	r3, #0
 8005532:	f000 8097 	beq.w	8005664 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005536:	2300      	movs	r3, #0
 8005538:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800553a:	4b83      	ldr	r3, [pc, #524]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 800553c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10f      	bne.n	8005566 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005546:	2300      	movs	r3, #0
 8005548:	60bb      	str	r3, [r7, #8]
 800554a:	4b7f      	ldr	r3, [pc, #508]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 800554c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800554e:	4a7e      	ldr	r2, [pc, #504]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 8005550:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005554:	6413      	str	r3, [r2, #64]	@ 0x40
 8005556:	4b7c      	ldr	r3, [pc, #496]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 8005558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800555a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800555e:	60bb      	str	r3, [r7, #8]
 8005560:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005562:	2301      	movs	r3, #1
 8005564:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005566:	4b79      	ldr	r3, [pc, #484]	@ (800574c <HAL_RCC_OscConfig+0x4b0>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800556e:	2b00      	cmp	r3, #0
 8005570:	d118      	bne.n	80055a4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005572:	4b76      	ldr	r3, [pc, #472]	@ (800574c <HAL_RCC_OscConfig+0x4b0>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a75      	ldr	r2, [pc, #468]	@ (800574c <HAL_RCC_OscConfig+0x4b0>)
 8005578:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800557c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800557e:	f7fd fcd3 	bl	8002f28 <HAL_GetTick>
 8005582:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005584:	e008      	b.n	8005598 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005586:	f7fd fccf 	bl	8002f28 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	2b02      	cmp	r3, #2
 8005592:	d901      	bls.n	8005598 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e118      	b.n	80057ca <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005598:	4b6c      	ldr	r3, [pc, #432]	@ (800574c <HAL_RCC_OscConfig+0x4b0>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d0f0      	beq.n	8005586 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d106      	bne.n	80055ba <HAL_RCC_OscConfig+0x31e>
 80055ac:	4b66      	ldr	r3, [pc, #408]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 80055ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055b0:	4a65      	ldr	r2, [pc, #404]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 80055b2:	f043 0301 	orr.w	r3, r3, #1
 80055b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80055b8:	e01c      	b.n	80055f4 <HAL_RCC_OscConfig+0x358>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	2b05      	cmp	r3, #5
 80055c0:	d10c      	bne.n	80055dc <HAL_RCC_OscConfig+0x340>
 80055c2:	4b61      	ldr	r3, [pc, #388]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 80055c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055c6:	4a60      	ldr	r2, [pc, #384]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 80055c8:	f043 0304 	orr.w	r3, r3, #4
 80055cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80055ce:	4b5e      	ldr	r3, [pc, #376]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 80055d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055d2:	4a5d      	ldr	r2, [pc, #372]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 80055d4:	f043 0301 	orr.w	r3, r3, #1
 80055d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80055da:	e00b      	b.n	80055f4 <HAL_RCC_OscConfig+0x358>
 80055dc:	4b5a      	ldr	r3, [pc, #360]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 80055de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055e0:	4a59      	ldr	r2, [pc, #356]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 80055e2:	f023 0301 	bic.w	r3, r3, #1
 80055e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80055e8:	4b57      	ldr	r3, [pc, #348]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 80055ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ec:	4a56      	ldr	r2, [pc, #344]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 80055ee:	f023 0304 	bic.w	r3, r3, #4
 80055f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d015      	beq.n	8005628 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055fc:	f7fd fc94 	bl	8002f28 <HAL_GetTick>
 8005600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005602:	e00a      	b.n	800561a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005604:	f7fd fc90 	bl	8002f28 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005612:	4293      	cmp	r3, r2
 8005614:	d901      	bls.n	800561a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e0d7      	b.n	80057ca <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800561a:	4b4b      	ldr	r3, [pc, #300]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 800561c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800561e:	f003 0302 	and.w	r3, r3, #2
 8005622:	2b00      	cmp	r3, #0
 8005624:	d0ee      	beq.n	8005604 <HAL_RCC_OscConfig+0x368>
 8005626:	e014      	b.n	8005652 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005628:	f7fd fc7e 	bl	8002f28 <HAL_GetTick>
 800562c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800562e:	e00a      	b.n	8005646 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005630:	f7fd fc7a 	bl	8002f28 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800563e:	4293      	cmp	r3, r2
 8005640:	d901      	bls.n	8005646 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e0c1      	b.n	80057ca <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005646:	4b40      	ldr	r3, [pc, #256]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 8005648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1ee      	bne.n	8005630 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005652:	7dfb      	ldrb	r3, [r7, #23]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d105      	bne.n	8005664 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005658:	4b3b      	ldr	r3, [pc, #236]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 800565a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800565c:	4a3a      	ldr	r2, [pc, #232]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 800565e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005662:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	2b00      	cmp	r3, #0
 800566a:	f000 80ad 	beq.w	80057c8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800566e:	4b36      	ldr	r3, [pc, #216]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f003 030c 	and.w	r3, r3, #12
 8005676:	2b08      	cmp	r3, #8
 8005678:	d060      	beq.n	800573c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	2b02      	cmp	r3, #2
 8005680:	d145      	bne.n	800570e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005682:	4b33      	ldr	r3, [pc, #204]	@ (8005750 <HAL_RCC_OscConfig+0x4b4>)
 8005684:	2200      	movs	r2, #0
 8005686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005688:	f7fd fc4e 	bl	8002f28 <HAL_GetTick>
 800568c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800568e:	e008      	b.n	80056a2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005690:	f7fd fc4a 	bl	8002f28 <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	2b02      	cmp	r3, #2
 800569c:	d901      	bls.n	80056a2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e093      	b.n	80057ca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056a2:	4b29      	ldr	r3, [pc, #164]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1f0      	bne.n	8005690 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	69da      	ldr	r2, [r3, #28]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	431a      	orrs	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056bc:	019b      	lsls	r3, r3, #6
 80056be:	431a      	orrs	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c4:	085b      	lsrs	r3, r3, #1
 80056c6:	3b01      	subs	r3, #1
 80056c8:	041b      	lsls	r3, r3, #16
 80056ca:	431a      	orrs	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d0:	061b      	lsls	r3, r3, #24
 80056d2:	431a      	orrs	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056d8:	071b      	lsls	r3, r3, #28
 80056da:	491b      	ldr	r1, [pc, #108]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 80056dc:	4313      	orrs	r3, r2
 80056de:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056e0:	4b1b      	ldr	r3, [pc, #108]	@ (8005750 <HAL_RCC_OscConfig+0x4b4>)
 80056e2:	2201      	movs	r2, #1
 80056e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e6:	f7fd fc1f 	bl	8002f28 <HAL_GetTick>
 80056ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056ec:	e008      	b.n	8005700 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056ee:	f7fd fc1b 	bl	8002f28 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d901      	bls.n	8005700 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e064      	b.n	80057ca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005700:	4b11      	ldr	r3, [pc, #68]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d0f0      	beq.n	80056ee <HAL_RCC_OscConfig+0x452>
 800570c:	e05c      	b.n	80057c8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800570e:	4b10      	ldr	r3, [pc, #64]	@ (8005750 <HAL_RCC_OscConfig+0x4b4>)
 8005710:	2200      	movs	r2, #0
 8005712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005714:	f7fd fc08 	bl	8002f28 <HAL_GetTick>
 8005718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800571a:	e008      	b.n	800572e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800571c:	f7fd fc04 	bl	8002f28 <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	2b02      	cmp	r3, #2
 8005728:	d901      	bls.n	800572e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e04d      	b.n	80057ca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800572e:	4b06      	ldr	r3, [pc, #24]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1f0      	bne.n	800571c <HAL_RCC_OscConfig+0x480>
 800573a:	e045      	b.n	80057c8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d107      	bne.n	8005754 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e040      	b.n	80057ca <HAL_RCC_OscConfig+0x52e>
 8005748:	40023800 	.word	0x40023800
 800574c:	40007000 	.word	0x40007000
 8005750:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005754:	4b1f      	ldr	r3, [pc, #124]	@ (80057d4 <HAL_RCC_OscConfig+0x538>)
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d030      	beq.n	80057c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800576c:	429a      	cmp	r2, r3
 800576e:	d129      	bne.n	80057c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800577a:	429a      	cmp	r2, r3
 800577c:	d122      	bne.n	80057c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005784:	4013      	ands	r3, r2
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800578a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800578c:	4293      	cmp	r3, r2
 800578e:	d119      	bne.n	80057c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800579a:	085b      	lsrs	r3, r3, #1
 800579c:	3b01      	subs	r3, #1
 800579e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d10f      	bne.n	80057c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d107      	bne.n	80057c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057be:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d001      	beq.n	80057c8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e000      	b.n	80057ca <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3718      	adds	r7, #24
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	40023800 	.word	0x40023800

080057d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e041      	b.n	800586e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d106      	bne.n	8005804 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f839 	bl	8005876 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2202      	movs	r2, #2
 8005808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	3304      	adds	r3, #4
 8005814:	4619      	mov	r1, r3
 8005816:	4610      	mov	r0, r2
 8005818:	f000 fc0a 	bl	8006030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3708      	adds	r7, #8
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005876:	b480      	push	{r7}
 8005878:	b083      	sub	sp, #12
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800587e:	bf00      	nop
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
	...

0800588c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800589a:	b2db      	uxtb	r3, r3
 800589c:	2b01      	cmp	r3, #1
 800589e:	d001      	beq.n	80058a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e04e      	b.n	8005942 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2202      	movs	r2, #2
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68da      	ldr	r2, [r3, #12]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 0201 	orr.w	r2, r2, #1
 80058ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a23      	ldr	r2, [pc, #140]	@ (8005950 <HAL_TIM_Base_Start_IT+0xc4>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d022      	beq.n	800590c <HAL_TIM_Base_Start_IT+0x80>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058ce:	d01d      	beq.n	800590c <HAL_TIM_Base_Start_IT+0x80>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a1f      	ldr	r2, [pc, #124]	@ (8005954 <HAL_TIM_Base_Start_IT+0xc8>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d018      	beq.n	800590c <HAL_TIM_Base_Start_IT+0x80>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a1e      	ldr	r2, [pc, #120]	@ (8005958 <HAL_TIM_Base_Start_IT+0xcc>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d013      	beq.n	800590c <HAL_TIM_Base_Start_IT+0x80>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a1c      	ldr	r2, [pc, #112]	@ (800595c <HAL_TIM_Base_Start_IT+0xd0>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d00e      	beq.n	800590c <HAL_TIM_Base_Start_IT+0x80>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a1b      	ldr	r2, [pc, #108]	@ (8005960 <HAL_TIM_Base_Start_IT+0xd4>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d009      	beq.n	800590c <HAL_TIM_Base_Start_IT+0x80>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a19      	ldr	r2, [pc, #100]	@ (8005964 <HAL_TIM_Base_Start_IT+0xd8>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d004      	beq.n	800590c <HAL_TIM_Base_Start_IT+0x80>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a18      	ldr	r2, [pc, #96]	@ (8005968 <HAL_TIM_Base_Start_IT+0xdc>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d111      	bne.n	8005930 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f003 0307 	and.w	r3, r3, #7
 8005916:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2b06      	cmp	r3, #6
 800591c:	d010      	beq.n	8005940 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f042 0201 	orr.w	r2, r2, #1
 800592c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800592e:	e007      	b.n	8005940 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f042 0201 	orr.w	r2, r2, #1
 800593e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3714      	adds	r7, #20
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	40010000 	.word	0x40010000
 8005954:	40000400 	.word	0x40000400
 8005958:	40000800 	.word	0x40000800
 800595c:	40000c00 	.word	0x40000c00
 8005960:	40010400 	.word	0x40010400
 8005964:	40014000 	.word	0x40014000
 8005968:	40001800 	.word	0x40001800

0800596c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d101      	bne.n	800597e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e041      	b.n	8005a02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d106      	bne.n	8005998 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f7fd f80a 	bl	80029ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2202      	movs	r2, #2
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	3304      	adds	r3, #4
 80059a8:	4619      	mov	r1, r3
 80059aa:	4610      	mov	r0, r2
 80059ac:	f000 fb40 	bl	8006030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3708      	adds	r7, #8
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
	...

08005a0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d109      	bne.n	8005a30 <HAL_TIM_PWM_Start+0x24>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	bf14      	ite	ne
 8005a28:	2301      	movne	r3, #1
 8005a2a:	2300      	moveq	r3, #0
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	e022      	b.n	8005a76 <HAL_TIM_PWM_Start+0x6a>
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	2b04      	cmp	r3, #4
 8005a34:	d109      	bne.n	8005a4a <HAL_TIM_PWM_Start+0x3e>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	bf14      	ite	ne
 8005a42:	2301      	movne	r3, #1
 8005a44:	2300      	moveq	r3, #0
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	e015      	b.n	8005a76 <HAL_TIM_PWM_Start+0x6a>
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	2b08      	cmp	r3, #8
 8005a4e:	d109      	bne.n	8005a64 <HAL_TIM_PWM_Start+0x58>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	bf14      	ite	ne
 8005a5c:	2301      	movne	r3, #1
 8005a5e:	2300      	moveq	r3, #0
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	e008      	b.n	8005a76 <HAL_TIM_PWM_Start+0x6a>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	bf14      	ite	ne
 8005a70:	2301      	movne	r3, #1
 8005a72:	2300      	moveq	r3, #0
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e07c      	b.n	8005b78 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d104      	bne.n	8005a8e <HAL_TIM_PWM_Start+0x82>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2202      	movs	r2, #2
 8005a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a8c:	e013      	b.n	8005ab6 <HAL_TIM_PWM_Start+0xaa>
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	2b04      	cmp	r3, #4
 8005a92:	d104      	bne.n	8005a9e <HAL_TIM_PWM_Start+0x92>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2202      	movs	r2, #2
 8005a98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a9c:	e00b      	b.n	8005ab6 <HAL_TIM_PWM_Start+0xaa>
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	2b08      	cmp	r3, #8
 8005aa2:	d104      	bne.n	8005aae <HAL_TIM_PWM_Start+0xa2>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005aac:	e003      	b.n	8005ab6 <HAL_TIM_PWM_Start+0xaa>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2202      	movs	r2, #2
 8005ab2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2201      	movs	r2, #1
 8005abc:	6839      	ldr	r1, [r7, #0]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 fd12 	bl	80064e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a2d      	ldr	r2, [pc, #180]	@ (8005b80 <HAL_TIM_PWM_Start+0x174>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d004      	beq.n	8005ad8 <HAL_TIM_PWM_Start+0xcc>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a2c      	ldr	r2, [pc, #176]	@ (8005b84 <HAL_TIM_PWM_Start+0x178>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d101      	bne.n	8005adc <HAL_TIM_PWM_Start+0xd0>
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e000      	b.n	8005ade <HAL_TIM_PWM_Start+0xd2>
 8005adc:	2300      	movs	r3, #0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d007      	beq.n	8005af2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005af0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a22      	ldr	r2, [pc, #136]	@ (8005b80 <HAL_TIM_PWM_Start+0x174>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d022      	beq.n	8005b42 <HAL_TIM_PWM_Start+0x136>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b04:	d01d      	beq.n	8005b42 <HAL_TIM_PWM_Start+0x136>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a1f      	ldr	r2, [pc, #124]	@ (8005b88 <HAL_TIM_PWM_Start+0x17c>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d018      	beq.n	8005b42 <HAL_TIM_PWM_Start+0x136>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a1d      	ldr	r2, [pc, #116]	@ (8005b8c <HAL_TIM_PWM_Start+0x180>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d013      	beq.n	8005b42 <HAL_TIM_PWM_Start+0x136>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a1c      	ldr	r2, [pc, #112]	@ (8005b90 <HAL_TIM_PWM_Start+0x184>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d00e      	beq.n	8005b42 <HAL_TIM_PWM_Start+0x136>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a16      	ldr	r2, [pc, #88]	@ (8005b84 <HAL_TIM_PWM_Start+0x178>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d009      	beq.n	8005b42 <HAL_TIM_PWM_Start+0x136>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a18      	ldr	r2, [pc, #96]	@ (8005b94 <HAL_TIM_PWM_Start+0x188>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d004      	beq.n	8005b42 <HAL_TIM_PWM_Start+0x136>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a16      	ldr	r2, [pc, #88]	@ (8005b98 <HAL_TIM_PWM_Start+0x18c>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d111      	bne.n	8005b66 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	f003 0307 	and.w	r3, r3, #7
 8005b4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2b06      	cmp	r3, #6
 8005b52:	d010      	beq.n	8005b76 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f042 0201 	orr.w	r2, r2, #1
 8005b62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b64:	e007      	b.n	8005b76 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f042 0201 	orr.w	r2, r2, #1
 8005b74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	40010000 	.word	0x40010000
 8005b84:	40010400 	.word	0x40010400
 8005b88:	40000400 	.word	0x40000400
 8005b8c:	40000800 	.word	0x40000800
 8005b90:	40000c00 	.word	0x40000c00
 8005b94:	40014000 	.word	0x40014000
 8005b98:	40001800 	.word	0x40001800

08005b9c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2200      	movs	r2, #0
 8005bac:	6839      	ldr	r1, [r7, #0]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 fc9a 	bl	80064e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a2e      	ldr	r2, [pc, #184]	@ (8005c74 <HAL_TIM_PWM_Stop+0xd8>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d004      	beq.n	8005bc8 <HAL_TIM_PWM_Stop+0x2c>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a2d      	ldr	r2, [pc, #180]	@ (8005c78 <HAL_TIM_PWM_Stop+0xdc>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d101      	bne.n	8005bcc <HAL_TIM_PWM_Stop+0x30>
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e000      	b.n	8005bce <HAL_TIM_PWM_Stop+0x32>
 8005bcc:	2300      	movs	r3, #0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d017      	beq.n	8005c02 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	6a1a      	ldr	r2, [r3, #32]
 8005bd8:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005bdc:	4013      	ands	r3, r2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10f      	bne.n	8005c02 <HAL_TIM_PWM_Stop+0x66>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	6a1a      	ldr	r2, [r3, #32]
 8005be8:	f240 4344 	movw	r3, #1092	@ 0x444
 8005bec:	4013      	ands	r3, r2
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d107      	bne.n	8005c02 <HAL_TIM_PWM_Stop+0x66>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c00:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	6a1a      	ldr	r2, [r3, #32]
 8005c08:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10f      	bne.n	8005c32 <HAL_TIM_PWM_Stop+0x96>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	6a1a      	ldr	r2, [r3, #32]
 8005c18:	f240 4344 	movw	r3, #1092	@ 0x444
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d107      	bne.n	8005c32 <HAL_TIM_PWM_Stop+0x96>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f022 0201 	bic.w	r2, r2, #1
 8005c30:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d104      	bne.n	8005c42 <HAL_TIM_PWM_Stop+0xa6>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c40:	e013      	b.n	8005c6a <HAL_TIM_PWM_Stop+0xce>
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	2b04      	cmp	r3, #4
 8005c46:	d104      	bne.n	8005c52 <HAL_TIM_PWM_Stop+0xb6>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c50:	e00b      	b.n	8005c6a <HAL_TIM_PWM_Stop+0xce>
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	2b08      	cmp	r3, #8
 8005c56:	d104      	bne.n	8005c62 <HAL_TIM_PWM_Stop+0xc6>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c60:	e003      	b.n	8005c6a <HAL_TIM_PWM_Stop+0xce>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3708      	adds	r7, #8
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	40010000 	.word	0x40010000
 8005c78:	40010400 	.word	0x40010400

08005c7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	f003 0302 	and.w	r3, r3, #2
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d020      	beq.n	8005ce0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f003 0302 	and.w	r3, r3, #2
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d01b      	beq.n	8005ce0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f06f 0202 	mvn.w	r2, #2
 8005cb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	f003 0303 	and.w	r3, r3, #3
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d003      	beq.n	8005cce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f994 	bl	8005ff4 <HAL_TIM_IC_CaptureCallback>
 8005ccc:	e005      	b.n	8005cda <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 f986 	bl	8005fe0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 f997 	bl	8006008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	f003 0304 	and.w	r3, r3, #4
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d020      	beq.n	8005d2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f003 0304 	and.w	r3, r3, #4
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d01b      	beq.n	8005d2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f06f 0204 	mvn.w	r2, #4
 8005cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2202      	movs	r2, #2
 8005d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d003      	beq.n	8005d1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f96e 	bl	8005ff4 <HAL_TIM_IC_CaptureCallback>
 8005d18:	e005      	b.n	8005d26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 f960 	bl	8005fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 f971 	bl	8006008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	f003 0308 	and.w	r3, r3, #8
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d020      	beq.n	8005d78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f003 0308 	and.w	r3, r3, #8
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d01b      	beq.n	8005d78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f06f 0208 	mvn.w	r2, #8
 8005d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2204      	movs	r2, #4
 8005d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	f003 0303 	and.w	r3, r3, #3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d003      	beq.n	8005d66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 f948 	bl	8005ff4 <HAL_TIM_IC_CaptureCallback>
 8005d64:	e005      	b.n	8005d72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 f93a 	bl	8005fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 f94b 	bl	8006008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f003 0310 	and.w	r3, r3, #16
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d020      	beq.n	8005dc4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f003 0310 	and.w	r3, r3, #16
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d01b      	beq.n	8005dc4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f06f 0210 	mvn.w	r2, #16
 8005d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2208      	movs	r2, #8
 8005d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	69db      	ldr	r3, [r3, #28]
 8005da2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d003      	beq.n	8005db2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f922 	bl	8005ff4 <HAL_TIM_IC_CaptureCallback>
 8005db0:	e005      	b.n	8005dbe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 f914 	bl	8005fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 f925 	bl	8006008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00c      	beq.n	8005de8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f003 0301 	and.w	r3, r3, #1
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d007      	beq.n	8005de8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f06f 0201 	mvn.w	r2, #1
 8005de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f7fc fd58 	bl	8002898 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00c      	beq.n	8005e0c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d007      	beq.n	8005e0c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 fc1a 	bl	8006640 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00c      	beq.n	8005e30 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d007      	beq.n	8005e30 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 f8f6 	bl	800601c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	f003 0320 	and.w	r3, r3, #32
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00c      	beq.n	8005e54 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f003 0320 	and.w	r3, r3, #32
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d007      	beq.n	8005e54 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f06f 0220 	mvn.w	r2, #32
 8005e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 fbec 	bl	800662c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e54:	bf00      	nop
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b086      	sub	sp, #24
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d101      	bne.n	8005e7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e76:	2302      	movs	r3, #2
 8005e78:	e0ae      	b.n	8005fd8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2b0c      	cmp	r3, #12
 8005e86:	f200 809f 	bhi.w	8005fc8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005e8a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e90:	08005ec5 	.word	0x08005ec5
 8005e94:	08005fc9 	.word	0x08005fc9
 8005e98:	08005fc9 	.word	0x08005fc9
 8005e9c:	08005fc9 	.word	0x08005fc9
 8005ea0:	08005f05 	.word	0x08005f05
 8005ea4:	08005fc9 	.word	0x08005fc9
 8005ea8:	08005fc9 	.word	0x08005fc9
 8005eac:	08005fc9 	.word	0x08005fc9
 8005eb0:	08005f47 	.word	0x08005f47
 8005eb4:	08005fc9 	.word	0x08005fc9
 8005eb8:	08005fc9 	.word	0x08005fc9
 8005ebc:	08005fc9 	.word	0x08005fc9
 8005ec0:	08005f87 	.word	0x08005f87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68b9      	ldr	r1, [r7, #8]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f000 f95c 	bl	8006188 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	699a      	ldr	r2, [r3, #24]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f042 0208 	orr.w	r2, r2, #8
 8005ede:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	699a      	ldr	r2, [r3, #24]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f022 0204 	bic.w	r2, r2, #4
 8005eee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	6999      	ldr	r1, [r3, #24]
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	691a      	ldr	r2, [r3, #16]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	430a      	orrs	r2, r1
 8005f00:	619a      	str	r2, [r3, #24]
      break;
 8005f02:	e064      	b.n	8005fce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68b9      	ldr	r1, [r7, #8]
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f000 f9ac 	bl	8006268 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	699a      	ldr	r2, [r3, #24]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	699a      	ldr	r2, [r3, #24]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6999      	ldr	r1, [r3, #24]
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	021a      	lsls	r2, r3, #8
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	430a      	orrs	r2, r1
 8005f42:	619a      	str	r2, [r3, #24]
      break;
 8005f44:	e043      	b.n	8005fce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68b9      	ldr	r1, [r7, #8]
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f000 fa01 	bl	8006354 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	69da      	ldr	r2, [r3, #28]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f042 0208 	orr.w	r2, r2, #8
 8005f60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	69da      	ldr	r2, [r3, #28]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f022 0204 	bic.w	r2, r2, #4
 8005f70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	69d9      	ldr	r1, [r3, #28]
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	691a      	ldr	r2, [r3, #16]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	430a      	orrs	r2, r1
 8005f82:	61da      	str	r2, [r3, #28]
      break;
 8005f84:	e023      	b.n	8005fce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68b9      	ldr	r1, [r7, #8]
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f000 fa55 	bl	800643c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	69da      	ldr	r2, [r3, #28]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	69da      	ldr	r2, [r3, #28]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	69d9      	ldr	r1, [r3, #28]
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	021a      	lsls	r2, r3, #8
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	61da      	str	r2, [r3, #28]
      break;
 8005fc6:	e002      	b.n	8005fce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	75fb      	strb	r3, [r7, #23]
      break;
 8005fcc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3718      	adds	r7, #24
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ffc:	bf00      	nop
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a46      	ldr	r2, [pc, #280]	@ (800615c <TIM_Base_SetConfig+0x12c>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d013      	beq.n	8006070 <TIM_Base_SetConfig+0x40>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800604e:	d00f      	beq.n	8006070 <TIM_Base_SetConfig+0x40>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a43      	ldr	r2, [pc, #268]	@ (8006160 <TIM_Base_SetConfig+0x130>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d00b      	beq.n	8006070 <TIM_Base_SetConfig+0x40>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a42      	ldr	r2, [pc, #264]	@ (8006164 <TIM_Base_SetConfig+0x134>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d007      	beq.n	8006070 <TIM_Base_SetConfig+0x40>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a41      	ldr	r2, [pc, #260]	@ (8006168 <TIM_Base_SetConfig+0x138>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d003      	beq.n	8006070 <TIM_Base_SetConfig+0x40>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a40      	ldr	r2, [pc, #256]	@ (800616c <TIM_Base_SetConfig+0x13c>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d108      	bne.n	8006082 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006076:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	4313      	orrs	r3, r2
 8006080:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a35      	ldr	r2, [pc, #212]	@ (800615c <TIM_Base_SetConfig+0x12c>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d02b      	beq.n	80060e2 <TIM_Base_SetConfig+0xb2>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006090:	d027      	beq.n	80060e2 <TIM_Base_SetConfig+0xb2>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a32      	ldr	r2, [pc, #200]	@ (8006160 <TIM_Base_SetConfig+0x130>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d023      	beq.n	80060e2 <TIM_Base_SetConfig+0xb2>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a31      	ldr	r2, [pc, #196]	@ (8006164 <TIM_Base_SetConfig+0x134>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d01f      	beq.n	80060e2 <TIM_Base_SetConfig+0xb2>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a30      	ldr	r2, [pc, #192]	@ (8006168 <TIM_Base_SetConfig+0x138>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d01b      	beq.n	80060e2 <TIM_Base_SetConfig+0xb2>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a2f      	ldr	r2, [pc, #188]	@ (800616c <TIM_Base_SetConfig+0x13c>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d017      	beq.n	80060e2 <TIM_Base_SetConfig+0xb2>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a2e      	ldr	r2, [pc, #184]	@ (8006170 <TIM_Base_SetConfig+0x140>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d013      	beq.n	80060e2 <TIM_Base_SetConfig+0xb2>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a2d      	ldr	r2, [pc, #180]	@ (8006174 <TIM_Base_SetConfig+0x144>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d00f      	beq.n	80060e2 <TIM_Base_SetConfig+0xb2>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a2c      	ldr	r2, [pc, #176]	@ (8006178 <TIM_Base_SetConfig+0x148>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d00b      	beq.n	80060e2 <TIM_Base_SetConfig+0xb2>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a2b      	ldr	r2, [pc, #172]	@ (800617c <TIM_Base_SetConfig+0x14c>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d007      	beq.n	80060e2 <TIM_Base_SetConfig+0xb2>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a2a      	ldr	r2, [pc, #168]	@ (8006180 <TIM_Base_SetConfig+0x150>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d003      	beq.n	80060e2 <TIM_Base_SetConfig+0xb2>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a29      	ldr	r2, [pc, #164]	@ (8006184 <TIM_Base_SetConfig+0x154>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d108      	bne.n	80060f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	4313      	orrs	r3, r2
 8006100:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	689a      	ldr	r2, [r3, #8]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a10      	ldr	r2, [pc, #64]	@ (800615c <TIM_Base_SetConfig+0x12c>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d003      	beq.n	8006128 <TIM_Base_SetConfig+0xf8>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a12      	ldr	r2, [pc, #72]	@ (800616c <TIM_Base_SetConfig+0x13c>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d103      	bne.n	8006130 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	691a      	ldr	r2, [r3, #16]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	2b01      	cmp	r3, #1
 8006140:	d105      	bne.n	800614e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	f023 0201 	bic.w	r2, r3, #1
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	611a      	str	r2, [r3, #16]
  }
}
 800614e:	bf00      	nop
 8006150:	3714      	adds	r7, #20
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	40010000 	.word	0x40010000
 8006160:	40000400 	.word	0x40000400
 8006164:	40000800 	.word	0x40000800
 8006168:	40000c00 	.word	0x40000c00
 800616c:	40010400 	.word	0x40010400
 8006170:	40014000 	.word	0x40014000
 8006174:	40014400 	.word	0x40014400
 8006178:	40014800 	.word	0x40014800
 800617c:	40001800 	.word	0x40001800
 8006180:	40001c00 	.word	0x40001c00
 8006184:	40002000 	.word	0x40002000

08006188 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006188:	b480      	push	{r7}
 800618a:	b087      	sub	sp, #28
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a1b      	ldr	r3, [r3, #32]
 8006196:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a1b      	ldr	r3, [r3, #32]
 800619c:	f023 0201 	bic.w	r2, r3, #1
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f023 0303 	bic.w	r3, r3, #3
 80061be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f023 0302 	bic.w	r3, r3, #2
 80061d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	4313      	orrs	r3, r2
 80061da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a20      	ldr	r2, [pc, #128]	@ (8006260 <TIM_OC1_SetConfig+0xd8>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d003      	beq.n	80061ec <TIM_OC1_SetConfig+0x64>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a1f      	ldr	r2, [pc, #124]	@ (8006264 <TIM_OC1_SetConfig+0xdc>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d10c      	bne.n	8006206 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	f023 0308 	bic.w	r3, r3, #8
 80061f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f023 0304 	bic.w	r3, r3, #4
 8006204:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a15      	ldr	r2, [pc, #84]	@ (8006260 <TIM_OC1_SetConfig+0xd8>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d003      	beq.n	8006216 <TIM_OC1_SetConfig+0x8e>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a14      	ldr	r2, [pc, #80]	@ (8006264 <TIM_OC1_SetConfig+0xdc>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d111      	bne.n	800623a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800621c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006224:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	693a      	ldr	r2, [r7, #16]
 800622c:	4313      	orrs	r3, r2
 800622e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	4313      	orrs	r3, r2
 8006238:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	693a      	ldr	r2, [r7, #16]
 800623e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	685a      	ldr	r2, [r3, #4]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	621a      	str	r2, [r3, #32]
}
 8006254:	bf00      	nop
 8006256:	371c      	adds	r7, #28
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr
 8006260:	40010000 	.word	0x40010000
 8006264:	40010400 	.word	0x40010400

08006268 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006268:	b480      	push	{r7}
 800626a:	b087      	sub	sp, #28
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a1b      	ldr	r3, [r3, #32]
 800627c:	f023 0210 	bic.w	r2, r3, #16
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800629e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	021b      	lsls	r3, r3, #8
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	f023 0320 	bic.w	r3, r3, #32
 80062b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	011b      	lsls	r3, r3, #4
 80062ba:	697a      	ldr	r2, [r7, #20]
 80062bc:	4313      	orrs	r3, r2
 80062be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a22      	ldr	r2, [pc, #136]	@ (800634c <TIM_OC2_SetConfig+0xe4>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d003      	beq.n	80062d0 <TIM_OC2_SetConfig+0x68>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a21      	ldr	r2, [pc, #132]	@ (8006350 <TIM_OC2_SetConfig+0xe8>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d10d      	bne.n	80062ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	011b      	lsls	r3, r3, #4
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a17      	ldr	r2, [pc, #92]	@ (800634c <TIM_OC2_SetConfig+0xe4>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d003      	beq.n	80062fc <TIM_OC2_SetConfig+0x94>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a16      	ldr	r2, [pc, #88]	@ (8006350 <TIM_OC2_SetConfig+0xe8>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d113      	bne.n	8006324 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006302:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800630a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	695b      	ldr	r3, [r3, #20]
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	4313      	orrs	r3, r2
 8006316:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	4313      	orrs	r3, r2
 8006322:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	685a      	ldr	r2, [r3, #4]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	697a      	ldr	r2, [r7, #20]
 800633c:	621a      	str	r2, [r3, #32]
}
 800633e:	bf00      	nop
 8006340:	371c      	adds	r7, #28
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	40010000 	.word	0x40010000
 8006350:	40010400 	.word	0x40010400

08006354 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006354:	b480      	push	{r7}
 8006356:	b087      	sub	sp, #28
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a1b      	ldr	r3, [r3, #32]
 8006368:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	69db      	ldr	r3, [r3, #28]
 800637a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f023 0303 	bic.w	r3, r3, #3
 800638a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	4313      	orrs	r3, r2
 8006394:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800639c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	021b      	lsls	r3, r3, #8
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a21      	ldr	r2, [pc, #132]	@ (8006434 <TIM_OC3_SetConfig+0xe0>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d003      	beq.n	80063ba <TIM_OC3_SetConfig+0x66>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a20      	ldr	r2, [pc, #128]	@ (8006438 <TIM_OC3_SetConfig+0xe4>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d10d      	bne.n	80063d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80063c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	021b      	lsls	r3, r3, #8
 80063c8:	697a      	ldr	r2, [r7, #20]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80063d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a16      	ldr	r2, [pc, #88]	@ (8006434 <TIM_OC3_SetConfig+0xe0>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d003      	beq.n	80063e6 <TIM_OC3_SetConfig+0x92>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a15      	ldr	r2, [pc, #84]	@ (8006438 <TIM_OC3_SetConfig+0xe4>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d113      	bne.n	800640e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80063ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	011b      	lsls	r3, r3, #4
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	4313      	orrs	r3, r2
 8006400:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	011b      	lsls	r3, r3, #4
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	4313      	orrs	r3, r2
 800640c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	693a      	ldr	r2, [r7, #16]
 8006412:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	685a      	ldr	r2, [r3, #4]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	621a      	str	r2, [r3, #32]
}
 8006428:	bf00      	nop
 800642a:	371c      	adds	r7, #28
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr
 8006434:	40010000 	.word	0x40010000
 8006438:	40010400 	.word	0x40010400

0800643c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800643c:	b480      	push	{r7}
 800643e:	b087      	sub	sp, #28
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a1b      	ldr	r3, [r3, #32]
 8006450:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800646a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006472:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	021b      	lsls	r3, r3, #8
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	4313      	orrs	r3, r2
 800647e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006486:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	031b      	lsls	r3, r3, #12
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	4313      	orrs	r3, r2
 8006492:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a12      	ldr	r2, [pc, #72]	@ (80064e0 <TIM_OC4_SetConfig+0xa4>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d003      	beq.n	80064a4 <TIM_OC4_SetConfig+0x68>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a11      	ldr	r2, [pc, #68]	@ (80064e4 <TIM_OC4_SetConfig+0xa8>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d109      	bne.n	80064b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	695b      	ldr	r3, [r3, #20]
 80064b0:	019b      	lsls	r3, r3, #6
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	685a      	ldr	r2, [r3, #4]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	621a      	str	r2, [r3, #32]
}
 80064d2:	bf00      	nop
 80064d4:	371c      	adds	r7, #28
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	40010000 	.word	0x40010000
 80064e4:	40010400 	.word	0x40010400

080064e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b087      	sub	sp, #28
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	f003 031f 	and.w	r3, r3, #31
 80064fa:	2201      	movs	r2, #1
 80064fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006500:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6a1a      	ldr	r2, [r3, #32]
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	43db      	mvns	r3, r3
 800650a:	401a      	ands	r2, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6a1a      	ldr	r2, [r3, #32]
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	f003 031f 	and.w	r3, r3, #31
 800651a:	6879      	ldr	r1, [r7, #4]
 800651c:	fa01 f303 	lsl.w	r3, r1, r3
 8006520:	431a      	orrs	r2, r3
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	621a      	str	r2, [r3, #32]
}
 8006526:	bf00      	nop
 8006528:	371c      	adds	r7, #28
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
	...

08006534 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006544:	2b01      	cmp	r3, #1
 8006546:	d101      	bne.n	800654c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006548:	2302      	movs	r3, #2
 800654a:	e05a      	b.n	8006602 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2202      	movs	r2, #2
 8006558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006572:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	4313      	orrs	r3, r2
 800657c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a21      	ldr	r2, [pc, #132]	@ (8006610 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d022      	beq.n	80065d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006598:	d01d      	beq.n	80065d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a1d      	ldr	r2, [pc, #116]	@ (8006614 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d018      	beq.n	80065d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a1b      	ldr	r2, [pc, #108]	@ (8006618 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d013      	beq.n	80065d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a1a      	ldr	r2, [pc, #104]	@ (800661c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d00e      	beq.n	80065d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a18      	ldr	r2, [pc, #96]	@ (8006620 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d009      	beq.n	80065d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a17      	ldr	r2, [pc, #92]	@ (8006624 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d004      	beq.n	80065d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a15      	ldr	r2, [pc, #84]	@ (8006628 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d10c      	bne.n	80065f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3714      	adds	r7, #20
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	40010000 	.word	0x40010000
 8006614:	40000400 	.word	0x40000400
 8006618:	40000800 	.word	0x40000800
 800661c:	40000c00 	.word	0x40000c00
 8006620:	40010400 	.word	0x40010400
 8006624:	40014000 	.word	0x40014000
 8006628:	40001800 	.word	0x40001800

0800662c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006634:	bf00      	nop
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006648:	bf00      	nop
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d101      	bne.n	8006666 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e042      	b.n	80066ec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800666c:	b2db      	uxtb	r3, r3
 800666e:	2b00      	cmp	r3, #0
 8006670:	d106      	bne.n	8006680 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f7fc fa30 	bl	8002ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2224      	movs	r2, #36	@ 0x24
 8006684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68da      	ldr	r2, [r3, #12]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006696:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 fbf7 	bl	8006e8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	691a      	ldr	r2, [r3, #16]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80066ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	695a      	ldr	r2, [r3, #20]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80066bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68da      	ldr	r2, [r3, #12]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80066cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2220      	movs	r2, #32
 80066d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2220      	movs	r2, #32
 80066e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3708      	adds	r7, #8
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b08a      	sub	sp, #40	@ 0x28
 80066f8:	af02      	add	r7, sp, #8
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	603b      	str	r3, [r7, #0]
 8006700:	4613      	mov	r3, r2
 8006702:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006704:	2300      	movs	r3, #0
 8006706:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800670e:	b2db      	uxtb	r3, r3
 8006710:	2b20      	cmp	r3, #32
 8006712:	d175      	bne.n	8006800 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d002      	beq.n	8006720 <HAL_UART_Transmit+0x2c>
 800671a:	88fb      	ldrh	r3, [r7, #6]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d101      	bne.n	8006724 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e06e      	b.n	8006802 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2221      	movs	r2, #33	@ 0x21
 800672e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006732:	f7fc fbf9 	bl	8002f28 <HAL_GetTick>
 8006736:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	88fa      	ldrh	r2, [r7, #6]
 800673c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	88fa      	ldrh	r2, [r7, #6]
 8006742:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800674c:	d108      	bne.n	8006760 <HAL_UART_Transmit+0x6c>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d104      	bne.n	8006760 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006756:	2300      	movs	r3, #0
 8006758:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	61bb      	str	r3, [r7, #24]
 800675e:	e003      	b.n	8006768 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006764:	2300      	movs	r3, #0
 8006766:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006768:	e02e      	b.n	80067c8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	2200      	movs	r2, #0
 8006772:	2180      	movs	r1, #128	@ 0x80
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	f000 fa0a 	bl	8006b8e <UART_WaitOnFlagUntilTimeout>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d005      	beq.n	800678c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2220      	movs	r2, #32
 8006784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e03a      	b.n	8006802 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10b      	bne.n	80067aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	881b      	ldrh	r3, [r3, #0]
 8006796:	461a      	mov	r2, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	3302      	adds	r3, #2
 80067a6:	61bb      	str	r3, [r7, #24]
 80067a8:	e007      	b.n	80067ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	781a      	ldrb	r2, [r3, #0]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	3301      	adds	r3, #1
 80067b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067be:	b29b      	uxth	r3, r3
 80067c0:	3b01      	subs	r3, #1
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1cb      	bne.n	800676a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	2200      	movs	r2, #0
 80067da:	2140      	movs	r1, #64	@ 0x40
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f000 f9d6 	bl	8006b8e <UART_WaitOnFlagUntilTimeout>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d005      	beq.n	80067f4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2220      	movs	r2, #32
 80067ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e006      	b.n	8006802 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2220      	movs	r2, #32
 80067f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80067fc:	2300      	movs	r3, #0
 80067fe:	e000      	b.n	8006802 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006800:	2302      	movs	r3, #2
  }
}
 8006802:	4618      	mov	r0, r3
 8006804:	3720      	adds	r7, #32
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800680a:	b580      	push	{r7, lr}
 800680c:	b084      	sub	sp, #16
 800680e:	af00      	add	r7, sp, #0
 8006810:	60f8      	str	r0, [r7, #12]
 8006812:	60b9      	str	r1, [r7, #8]
 8006814:	4613      	mov	r3, r2
 8006816:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800681e:	b2db      	uxtb	r3, r3
 8006820:	2b20      	cmp	r3, #32
 8006822:	d112      	bne.n	800684a <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d002      	beq.n	8006830 <HAL_UART_Receive_DMA+0x26>
 800682a:	88fb      	ldrh	r3, [r7, #6]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d101      	bne.n	8006834 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e00b      	b.n	800684c <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2200      	movs	r2, #0
 8006838:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800683a:	88fb      	ldrh	r3, [r7, #6]
 800683c:	461a      	mov	r2, r3
 800683e:	68b9      	ldr	r1, [r7, #8]
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f000 f9fd 	bl	8006c40 <UART_Start_Receive_DMA>
 8006846:	4603      	mov	r3, r0
 8006848:	e000      	b.n	800684c <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800684a:	2302      	movs	r3, #2
  }
}
 800684c:	4618      	mov	r0, r3
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b090      	sub	sp, #64	@ 0x40
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800685c:	2300      	movs	r3, #0
 800685e:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800686a:	2b80      	cmp	r3, #128	@ 0x80
 800686c:	bf0c      	ite	eq
 800686e:	2301      	moveq	r3, #1
 8006870:	2300      	movne	r3, #0
 8006872:	b2db      	uxtb	r3, r3
 8006874:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2b21      	cmp	r3, #33	@ 0x21
 8006880:	d128      	bne.n	80068d4 <HAL_UART_DMAStop+0x80>
 8006882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006884:	2b00      	cmp	r3, #0
 8006886:	d025      	beq.n	80068d4 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	3314      	adds	r3, #20
 800688e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006892:	e853 3f00 	ldrex	r3, [r3]
 8006896:	623b      	str	r3, [r7, #32]
   return(result);
 8006898:	6a3b      	ldr	r3, [r7, #32]
 800689a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800689e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	3314      	adds	r3, #20
 80068a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80068a8:	633a      	str	r2, [r7, #48]	@ 0x30
 80068aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068b0:	e841 2300 	strex	r3, r2, [r1]
 80068b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80068b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1e5      	bne.n	8006888 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d004      	beq.n	80068ce <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068c8:	4618      	mov	r0, r3
 80068ca:	f7fc fd45 	bl	8003358 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 fa50 	bl	8006d74 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068de:	2b40      	cmp	r3, #64	@ 0x40
 80068e0:	bf0c      	ite	eq
 80068e2:	2301      	moveq	r3, #1
 80068e4:	2300      	movne	r3, #0
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	2b22      	cmp	r3, #34	@ 0x22
 80068f4:	d128      	bne.n	8006948 <HAL_UART_DMAStop+0xf4>
 80068f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d025      	beq.n	8006948 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	3314      	adds	r3, #20
 8006902:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	e853 3f00 	ldrex	r3, [r3]
 800690a:	60fb      	str	r3, [r7, #12]
   return(result);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006912:	637b      	str	r3, [r7, #52]	@ 0x34
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	3314      	adds	r3, #20
 800691a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800691c:	61fa      	str	r2, [r7, #28]
 800691e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006920:	69b9      	ldr	r1, [r7, #24]
 8006922:	69fa      	ldr	r2, [r7, #28]
 8006924:	e841 2300 	strex	r3, r2, [r1]
 8006928:	617b      	str	r3, [r7, #20]
   return(result);
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1e5      	bne.n	80068fc <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006934:	2b00      	cmp	r3, #0
 8006936:	d004      	beq.n	8006942 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800693c:	4618      	mov	r0, r3
 800693e:	f7fc fd0b 	bl	8003358 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 fa3e 	bl	8006dc4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3740      	adds	r7, #64	@ 0x40
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006952:	b480      	push	{r7}
 8006954:	b083      	sub	sp, #12
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800695a:	bf00      	nop
 800695c:	370c      	adds	r7, #12
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006966:	b480      	push	{r7}
 8006968:	b083      	sub	sp, #12
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800696e:	bf00      	nop
 8006970:	370c      	adds	r7, #12
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr

0800697a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800697a:	b480      	push	{r7}
 800697c:	b083      	sub	sp, #12
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
 8006982:	460b      	mov	r3, r1
 8006984:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006986:	bf00      	nop
 8006988:	370c      	adds	r7, #12
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr

08006992 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b09c      	sub	sp, #112	@ 0x70
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800699e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d172      	bne.n	8006a94 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80069ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069b0:	2200      	movs	r2, #0
 80069b2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	330c      	adds	r3, #12
 80069ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069be:	e853 3f00 	ldrex	r3, [r3]
 80069c2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80069c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	330c      	adds	r3, #12
 80069d2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80069d4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80069d6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80069da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80069dc:	e841 2300 	strex	r3, r2, [r1]
 80069e0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80069e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d1e5      	bne.n	80069b4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	3314      	adds	r3, #20
 80069ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f2:	e853 3f00 	ldrex	r3, [r3]
 80069f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80069f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069fa:	f023 0301 	bic.w	r3, r3, #1
 80069fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	3314      	adds	r3, #20
 8006a06:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006a08:	647a      	str	r2, [r7, #68]	@ 0x44
 8006a0a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a10:	e841 2300 	strex	r3, r2, [r1]
 8006a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d1e5      	bne.n	80069e8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	3314      	adds	r3, #20
 8006a22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a26:	e853 3f00 	ldrex	r3, [r3]
 8006a2a:	623b      	str	r3, [r7, #32]
   return(result);
 8006a2c:	6a3b      	ldr	r3, [r7, #32]
 8006a2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a32:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	3314      	adds	r3, #20
 8006a3a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006a3c:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a44:	e841 2300 	strex	r3, r2, [r1]
 8006a48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1e5      	bne.n	8006a1c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006a50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a52:	2220      	movs	r2, #32
 8006a54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d119      	bne.n	8006a94 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	330c      	adds	r3, #12
 8006a66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	e853 3f00 	ldrex	r3, [r3]
 8006a6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f023 0310 	bic.w	r3, r3, #16
 8006a76:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	330c      	adds	r3, #12
 8006a7e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006a80:	61fa      	str	r2, [r7, #28]
 8006a82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a84:	69b9      	ldr	r1, [r7, #24]
 8006a86:	69fa      	ldr	r2, [r7, #28]
 8006a88:	e841 2300 	strex	r3, r2, [r1]
 8006a8c:	617b      	str	r3, [r7, #20]
   return(result);
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1e5      	bne.n	8006a60 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a96:	2200      	movs	r2, #0
 8006a98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d106      	bne.n	8006ab0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006aa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006aa4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006aaa:	f7ff ff66 	bl	800697a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006aae:	e002      	b.n	8006ab6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006ab0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006ab2:	f7fa fe49 	bl	8001748 <HAL_UART_RxCpltCallback>
}
 8006ab6:	bf00      	nop
 8006ab8:	3770      	adds	r7, #112	@ 0x70
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b084      	sub	sp, #16
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aca:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d108      	bne.n	8006aec <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006ade:	085b      	lsrs	r3, r3, #1
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f7ff ff48 	bl	800697a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006aea:	e002      	b.n	8006af2 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f7ff ff30 	bl	8006952 <HAL_UART_RxHalfCpltCallback>
}
 8006af2:	bf00      	nop
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b084      	sub	sp, #16
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006b02:	2300      	movs	r3, #0
 8006b04:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b0a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b16:	2b80      	cmp	r3, #128	@ 0x80
 8006b18:	bf0c      	ite	eq
 8006b1a:	2301      	moveq	r3, #1
 8006b1c:	2300      	movne	r3, #0
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	2b21      	cmp	r3, #33	@ 0x21
 8006b2c:	d108      	bne.n	8006b40 <UART_DMAError+0x46>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d005      	beq.n	8006b40 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	2200      	movs	r2, #0
 8006b38:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006b3a:	68b8      	ldr	r0, [r7, #8]
 8006b3c:	f000 f91a 	bl	8006d74 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b4a:	2b40      	cmp	r3, #64	@ 0x40
 8006b4c:	bf0c      	ite	eq
 8006b4e:	2301      	moveq	r3, #1
 8006b50:	2300      	movne	r3, #0
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	2b22      	cmp	r3, #34	@ 0x22
 8006b60:	d108      	bne.n	8006b74 <UART_DMAError+0x7a>
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d005      	beq.n	8006b74 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006b6e:	68b8      	ldr	r0, [r7, #8]
 8006b70:	f000 f928 	bl	8006dc4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b78:	f043 0210 	orr.w	r2, r3, #16
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b80:	68b8      	ldr	r0, [r7, #8]
 8006b82:	f7ff fef0 	bl	8006966 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b86:	bf00      	nop
 8006b88:	3710      	adds	r7, #16
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b086      	sub	sp, #24
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	60f8      	str	r0, [r7, #12]
 8006b96:	60b9      	str	r1, [r7, #8]
 8006b98:	603b      	str	r3, [r7, #0]
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b9e:	e03b      	b.n	8006c18 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ba0:	6a3b      	ldr	r3, [r7, #32]
 8006ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba6:	d037      	beq.n	8006c18 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ba8:	f7fc f9be 	bl	8002f28 <HAL_GetTick>
 8006bac:	4602      	mov	r2, r0
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	6a3a      	ldr	r2, [r7, #32]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d302      	bcc.n	8006bbe <UART_WaitOnFlagUntilTimeout+0x30>
 8006bb8:	6a3b      	ldr	r3, [r7, #32]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d101      	bne.n	8006bc2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e03a      	b.n	8006c38 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	f003 0304 	and.w	r3, r3, #4
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d023      	beq.n	8006c18 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	2b80      	cmp	r3, #128	@ 0x80
 8006bd4:	d020      	beq.n	8006c18 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	2b40      	cmp	r3, #64	@ 0x40
 8006bda:	d01d      	beq.n	8006c18 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0308 	and.w	r3, r3, #8
 8006be6:	2b08      	cmp	r3, #8
 8006be8:	d116      	bne.n	8006c18 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006bea:	2300      	movs	r3, #0
 8006bec:	617b      	str	r3, [r7, #20]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	617b      	str	r3, [r7, #20]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	617b      	str	r3, [r7, #20]
 8006bfe:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f000 f8df 	bl	8006dc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2208      	movs	r2, #8
 8006c0a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	e00f      	b.n	8006c38 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	4013      	ands	r3, r2
 8006c22:	68ba      	ldr	r2, [r7, #8]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	bf0c      	ite	eq
 8006c28:	2301      	moveq	r3, #1
 8006c2a:	2300      	movne	r3, #0
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	461a      	mov	r2, r3
 8006c30:	79fb      	ldrb	r3, [r7, #7]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d0b4      	beq.n	8006ba0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3718      	adds	r7, #24
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b098      	sub	sp, #96	@ 0x60
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006c4e:	68ba      	ldr	r2, [r7, #8]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	88fa      	ldrh	r2, [r7, #6]
 8006c58:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2222      	movs	r2, #34	@ 0x22
 8006c64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c6c:	4a3e      	ldr	r2, [pc, #248]	@ (8006d68 <UART_Start_Receive_DMA+0x128>)
 8006c6e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c74:	4a3d      	ldr	r2, [pc, #244]	@ (8006d6c <UART_Start_Receive_DMA+0x12c>)
 8006c76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c7c:	4a3c      	ldr	r2, [pc, #240]	@ (8006d70 <UART_Start_Receive_DMA+0x130>)
 8006c7e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c84:	2200      	movs	r2, #0
 8006c86:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006c88:	f107 0308 	add.w	r3, r7, #8
 8006c8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	3304      	adds	r3, #4
 8006c98:	4619      	mov	r1, r3
 8006c9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	88fb      	ldrh	r3, [r7, #6]
 8006ca0:	f7fc fb02 	bl	80032a8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	613b      	str	r3, [r7, #16]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	613b      	str	r3, [r7, #16]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	613b      	str	r3, [r7, #16]
 8006cb8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d019      	beq.n	8006cf6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	330c      	adds	r3, #12
 8006cc8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ccc:	e853 3f00 	ldrex	r3, [r3]
 8006cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006cd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006cd8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	330c      	adds	r3, #12
 8006ce0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006ce2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006ce4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006ce8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006cea:	e841 2300 	strex	r3, r2, [r1]
 8006cee:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006cf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1e5      	bne.n	8006cc2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	3314      	adds	r3, #20
 8006cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d00:	e853 3f00 	ldrex	r3, [r3]
 8006d04:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d08:	f043 0301 	orr.w	r3, r3, #1
 8006d0c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	3314      	adds	r3, #20
 8006d14:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006d16:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006d18:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006d1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d1e:	e841 2300 	strex	r3, r2, [r1]
 8006d22:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d1e5      	bne.n	8006cf6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	3314      	adds	r3, #20
 8006d30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	e853 3f00 	ldrex	r3, [r3]
 8006d38:	617b      	str	r3, [r7, #20]
   return(result);
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d40:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	3314      	adds	r3, #20
 8006d48:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006d4a:	627a      	str	r2, [r7, #36]	@ 0x24
 8006d4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4e:	6a39      	ldr	r1, [r7, #32]
 8006d50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d52:	e841 2300 	strex	r3, r2, [r1]
 8006d56:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d1e5      	bne.n	8006d2a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3760      	adds	r7, #96	@ 0x60
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	08006993 	.word	0x08006993
 8006d6c:	08006abf 	.word	0x08006abf
 8006d70:	08006afb 	.word	0x08006afb

08006d74 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b089      	sub	sp, #36	@ 0x24
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	330c      	adds	r3, #12
 8006d82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	e853 3f00 	ldrex	r3, [r3]
 8006d8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006d92:	61fb      	str	r3, [r7, #28]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	330c      	adds	r3, #12
 8006d9a:	69fa      	ldr	r2, [r7, #28]
 8006d9c:	61ba      	str	r2, [r7, #24]
 8006d9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da0:	6979      	ldr	r1, [r7, #20]
 8006da2:	69ba      	ldr	r2, [r7, #24]
 8006da4:	e841 2300 	strex	r3, r2, [r1]
 8006da8:	613b      	str	r3, [r7, #16]
   return(result);
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d1e5      	bne.n	8006d7c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2220      	movs	r2, #32
 8006db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006db8:	bf00      	nop
 8006dba:	3724      	adds	r7, #36	@ 0x24
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b095      	sub	sp, #84	@ 0x54
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	330c      	adds	r3, #12
 8006dd2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dd6:	e853 3f00 	ldrex	r3, [r3]
 8006dda:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006de2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	330c      	adds	r3, #12
 8006dea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006dec:	643a      	str	r2, [r7, #64]	@ 0x40
 8006dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006df2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006df4:	e841 2300 	strex	r3, r2, [r1]
 8006df8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1e5      	bne.n	8006dcc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	3314      	adds	r3, #20
 8006e06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e08:	6a3b      	ldr	r3, [r7, #32]
 8006e0a:	e853 3f00 	ldrex	r3, [r3]
 8006e0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	f023 0301 	bic.w	r3, r3, #1
 8006e16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	3314      	adds	r3, #20
 8006e1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e20:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e28:	e841 2300 	strex	r3, r2, [r1]
 8006e2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1e5      	bne.n	8006e00 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d119      	bne.n	8006e70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	330c      	adds	r3, #12
 8006e42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	e853 3f00 	ldrex	r3, [r3]
 8006e4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	f023 0310 	bic.w	r3, r3, #16
 8006e52:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	330c      	adds	r3, #12
 8006e5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e5c:	61ba      	str	r2, [r7, #24]
 8006e5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e60:	6979      	ldr	r1, [r7, #20]
 8006e62:	69ba      	ldr	r2, [r7, #24]
 8006e64:	e841 2300 	strex	r3, r2, [r1]
 8006e68:	613b      	str	r3, [r7, #16]
   return(result);
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1e5      	bne.n	8006e3c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2220      	movs	r2, #32
 8006e74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006e7e:	bf00      	nop
 8006e80:	3754      	adds	r7, #84	@ 0x54
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
	...

08006e8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e90:	b0c0      	sub	sp, #256	@ 0x100
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ea8:	68d9      	ldr	r1, [r3, #12]
 8006eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	ea40 0301 	orr.w	r3, r0, r1
 8006eb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eba:	689a      	ldr	r2, [r3, #8]
 8006ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	431a      	orrs	r2, r3
 8006ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	431a      	orrs	r2, r3
 8006ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ed0:	69db      	ldr	r3, [r3, #28]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006ee4:	f021 010c 	bic.w	r1, r1, #12
 8006ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006ef2:	430b      	orrs	r3, r1
 8006ef4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	695b      	ldr	r3, [r3, #20]
 8006efe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f06:	6999      	ldr	r1, [r3, #24]
 8006f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	ea40 0301 	orr.w	r3, r0, r1
 8006f12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	4b8f      	ldr	r3, [pc, #572]	@ (8007158 <UART_SetConfig+0x2cc>)
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d005      	beq.n	8006f2c <UART_SetConfig+0xa0>
 8006f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	4b8d      	ldr	r3, [pc, #564]	@ (800715c <UART_SetConfig+0x2d0>)
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d104      	bne.n	8006f36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f2c:	f7fd ffc6 	bl	8004ebc <HAL_RCC_GetPCLK2Freq>
 8006f30:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006f34:	e003      	b.n	8006f3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f36:	f7fd ffad 	bl	8004e94 <HAL_RCC_GetPCLK1Freq>
 8006f3a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f42:	69db      	ldr	r3, [r3, #28]
 8006f44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f48:	f040 810c 	bne.w	8007164 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f50:	2200      	movs	r2, #0
 8006f52:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006f56:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006f5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006f5e:	4622      	mov	r2, r4
 8006f60:	462b      	mov	r3, r5
 8006f62:	1891      	adds	r1, r2, r2
 8006f64:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006f66:	415b      	adcs	r3, r3
 8006f68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006f6e:	4621      	mov	r1, r4
 8006f70:	eb12 0801 	adds.w	r8, r2, r1
 8006f74:	4629      	mov	r1, r5
 8006f76:	eb43 0901 	adc.w	r9, r3, r1
 8006f7a:	f04f 0200 	mov.w	r2, #0
 8006f7e:	f04f 0300 	mov.w	r3, #0
 8006f82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f8e:	4690      	mov	r8, r2
 8006f90:	4699      	mov	r9, r3
 8006f92:	4623      	mov	r3, r4
 8006f94:	eb18 0303 	adds.w	r3, r8, r3
 8006f98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006f9c:	462b      	mov	r3, r5
 8006f9e:	eb49 0303 	adc.w	r3, r9, r3
 8006fa2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006fb2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006fb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006fba:	460b      	mov	r3, r1
 8006fbc:	18db      	adds	r3, r3, r3
 8006fbe:	653b      	str	r3, [r7, #80]	@ 0x50
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	eb42 0303 	adc.w	r3, r2, r3
 8006fc6:	657b      	str	r3, [r7, #84]	@ 0x54
 8006fc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006fcc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006fd0:	f7f9 fe52 	bl	8000c78 <__aeabi_uldivmod>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	4b61      	ldr	r3, [pc, #388]	@ (8007160 <UART_SetConfig+0x2d4>)
 8006fda:	fba3 2302 	umull	r2, r3, r3, r2
 8006fde:	095b      	lsrs	r3, r3, #5
 8006fe0:	011c      	lsls	r4, r3, #4
 8006fe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006fec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006ff0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006ff4:	4642      	mov	r2, r8
 8006ff6:	464b      	mov	r3, r9
 8006ff8:	1891      	adds	r1, r2, r2
 8006ffa:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006ffc:	415b      	adcs	r3, r3
 8006ffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007000:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007004:	4641      	mov	r1, r8
 8007006:	eb12 0a01 	adds.w	sl, r2, r1
 800700a:	4649      	mov	r1, r9
 800700c:	eb43 0b01 	adc.w	fp, r3, r1
 8007010:	f04f 0200 	mov.w	r2, #0
 8007014:	f04f 0300 	mov.w	r3, #0
 8007018:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800701c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007020:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007024:	4692      	mov	sl, r2
 8007026:	469b      	mov	fp, r3
 8007028:	4643      	mov	r3, r8
 800702a:	eb1a 0303 	adds.w	r3, sl, r3
 800702e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007032:	464b      	mov	r3, r9
 8007034:	eb4b 0303 	adc.w	r3, fp, r3
 8007038:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800703c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007048:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800704c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007050:	460b      	mov	r3, r1
 8007052:	18db      	adds	r3, r3, r3
 8007054:	643b      	str	r3, [r7, #64]	@ 0x40
 8007056:	4613      	mov	r3, r2
 8007058:	eb42 0303 	adc.w	r3, r2, r3
 800705c:	647b      	str	r3, [r7, #68]	@ 0x44
 800705e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007062:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007066:	f7f9 fe07 	bl	8000c78 <__aeabi_uldivmod>
 800706a:	4602      	mov	r2, r0
 800706c:	460b      	mov	r3, r1
 800706e:	4611      	mov	r1, r2
 8007070:	4b3b      	ldr	r3, [pc, #236]	@ (8007160 <UART_SetConfig+0x2d4>)
 8007072:	fba3 2301 	umull	r2, r3, r3, r1
 8007076:	095b      	lsrs	r3, r3, #5
 8007078:	2264      	movs	r2, #100	@ 0x64
 800707a:	fb02 f303 	mul.w	r3, r2, r3
 800707e:	1acb      	subs	r3, r1, r3
 8007080:	00db      	lsls	r3, r3, #3
 8007082:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007086:	4b36      	ldr	r3, [pc, #216]	@ (8007160 <UART_SetConfig+0x2d4>)
 8007088:	fba3 2302 	umull	r2, r3, r3, r2
 800708c:	095b      	lsrs	r3, r3, #5
 800708e:	005b      	lsls	r3, r3, #1
 8007090:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007094:	441c      	add	r4, r3
 8007096:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800709a:	2200      	movs	r2, #0
 800709c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80070a0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80070a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80070a8:	4642      	mov	r2, r8
 80070aa:	464b      	mov	r3, r9
 80070ac:	1891      	adds	r1, r2, r2
 80070ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80070b0:	415b      	adcs	r3, r3
 80070b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80070b8:	4641      	mov	r1, r8
 80070ba:	1851      	adds	r1, r2, r1
 80070bc:	6339      	str	r1, [r7, #48]	@ 0x30
 80070be:	4649      	mov	r1, r9
 80070c0:	414b      	adcs	r3, r1
 80070c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80070c4:	f04f 0200 	mov.w	r2, #0
 80070c8:	f04f 0300 	mov.w	r3, #0
 80070cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80070d0:	4659      	mov	r1, fp
 80070d2:	00cb      	lsls	r3, r1, #3
 80070d4:	4651      	mov	r1, sl
 80070d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070da:	4651      	mov	r1, sl
 80070dc:	00ca      	lsls	r2, r1, #3
 80070de:	4610      	mov	r0, r2
 80070e0:	4619      	mov	r1, r3
 80070e2:	4603      	mov	r3, r0
 80070e4:	4642      	mov	r2, r8
 80070e6:	189b      	adds	r3, r3, r2
 80070e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80070ec:	464b      	mov	r3, r9
 80070ee:	460a      	mov	r2, r1
 80070f0:	eb42 0303 	adc.w	r3, r2, r3
 80070f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80070f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007104:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007108:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800710c:	460b      	mov	r3, r1
 800710e:	18db      	adds	r3, r3, r3
 8007110:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007112:	4613      	mov	r3, r2
 8007114:	eb42 0303 	adc.w	r3, r2, r3
 8007118:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800711a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800711e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007122:	f7f9 fda9 	bl	8000c78 <__aeabi_uldivmod>
 8007126:	4602      	mov	r2, r0
 8007128:	460b      	mov	r3, r1
 800712a:	4b0d      	ldr	r3, [pc, #52]	@ (8007160 <UART_SetConfig+0x2d4>)
 800712c:	fba3 1302 	umull	r1, r3, r3, r2
 8007130:	095b      	lsrs	r3, r3, #5
 8007132:	2164      	movs	r1, #100	@ 0x64
 8007134:	fb01 f303 	mul.w	r3, r1, r3
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	00db      	lsls	r3, r3, #3
 800713c:	3332      	adds	r3, #50	@ 0x32
 800713e:	4a08      	ldr	r2, [pc, #32]	@ (8007160 <UART_SetConfig+0x2d4>)
 8007140:	fba2 2303 	umull	r2, r3, r2, r3
 8007144:	095b      	lsrs	r3, r3, #5
 8007146:	f003 0207 	and.w	r2, r3, #7
 800714a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4422      	add	r2, r4
 8007152:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007154:	e106      	b.n	8007364 <UART_SetConfig+0x4d8>
 8007156:	bf00      	nop
 8007158:	40011000 	.word	0x40011000
 800715c:	40011400 	.word	0x40011400
 8007160:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007164:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007168:	2200      	movs	r2, #0
 800716a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800716e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007172:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007176:	4642      	mov	r2, r8
 8007178:	464b      	mov	r3, r9
 800717a:	1891      	adds	r1, r2, r2
 800717c:	6239      	str	r1, [r7, #32]
 800717e:	415b      	adcs	r3, r3
 8007180:	627b      	str	r3, [r7, #36]	@ 0x24
 8007182:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007186:	4641      	mov	r1, r8
 8007188:	1854      	adds	r4, r2, r1
 800718a:	4649      	mov	r1, r9
 800718c:	eb43 0501 	adc.w	r5, r3, r1
 8007190:	f04f 0200 	mov.w	r2, #0
 8007194:	f04f 0300 	mov.w	r3, #0
 8007198:	00eb      	lsls	r3, r5, #3
 800719a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800719e:	00e2      	lsls	r2, r4, #3
 80071a0:	4614      	mov	r4, r2
 80071a2:	461d      	mov	r5, r3
 80071a4:	4643      	mov	r3, r8
 80071a6:	18e3      	adds	r3, r4, r3
 80071a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80071ac:	464b      	mov	r3, r9
 80071ae:	eb45 0303 	adc.w	r3, r5, r3
 80071b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80071b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80071c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80071c6:	f04f 0200 	mov.w	r2, #0
 80071ca:	f04f 0300 	mov.w	r3, #0
 80071ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80071d2:	4629      	mov	r1, r5
 80071d4:	008b      	lsls	r3, r1, #2
 80071d6:	4621      	mov	r1, r4
 80071d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071dc:	4621      	mov	r1, r4
 80071de:	008a      	lsls	r2, r1, #2
 80071e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80071e4:	f7f9 fd48 	bl	8000c78 <__aeabi_uldivmod>
 80071e8:	4602      	mov	r2, r0
 80071ea:	460b      	mov	r3, r1
 80071ec:	4b60      	ldr	r3, [pc, #384]	@ (8007370 <UART_SetConfig+0x4e4>)
 80071ee:	fba3 2302 	umull	r2, r3, r3, r2
 80071f2:	095b      	lsrs	r3, r3, #5
 80071f4:	011c      	lsls	r4, r3, #4
 80071f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071fa:	2200      	movs	r2, #0
 80071fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007200:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007204:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007208:	4642      	mov	r2, r8
 800720a:	464b      	mov	r3, r9
 800720c:	1891      	adds	r1, r2, r2
 800720e:	61b9      	str	r1, [r7, #24]
 8007210:	415b      	adcs	r3, r3
 8007212:	61fb      	str	r3, [r7, #28]
 8007214:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007218:	4641      	mov	r1, r8
 800721a:	1851      	adds	r1, r2, r1
 800721c:	6139      	str	r1, [r7, #16]
 800721e:	4649      	mov	r1, r9
 8007220:	414b      	adcs	r3, r1
 8007222:	617b      	str	r3, [r7, #20]
 8007224:	f04f 0200 	mov.w	r2, #0
 8007228:	f04f 0300 	mov.w	r3, #0
 800722c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007230:	4659      	mov	r1, fp
 8007232:	00cb      	lsls	r3, r1, #3
 8007234:	4651      	mov	r1, sl
 8007236:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800723a:	4651      	mov	r1, sl
 800723c:	00ca      	lsls	r2, r1, #3
 800723e:	4610      	mov	r0, r2
 8007240:	4619      	mov	r1, r3
 8007242:	4603      	mov	r3, r0
 8007244:	4642      	mov	r2, r8
 8007246:	189b      	adds	r3, r3, r2
 8007248:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800724c:	464b      	mov	r3, r9
 800724e:	460a      	mov	r2, r1
 8007250:	eb42 0303 	adc.w	r3, r2, r3
 8007254:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007262:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007264:	f04f 0200 	mov.w	r2, #0
 8007268:	f04f 0300 	mov.w	r3, #0
 800726c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007270:	4649      	mov	r1, r9
 8007272:	008b      	lsls	r3, r1, #2
 8007274:	4641      	mov	r1, r8
 8007276:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800727a:	4641      	mov	r1, r8
 800727c:	008a      	lsls	r2, r1, #2
 800727e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007282:	f7f9 fcf9 	bl	8000c78 <__aeabi_uldivmod>
 8007286:	4602      	mov	r2, r0
 8007288:	460b      	mov	r3, r1
 800728a:	4611      	mov	r1, r2
 800728c:	4b38      	ldr	r3, [pc, #224]	@ (8007370 <UART_SetConfig+0x4e4>)
 800728e:	fba3 2301 	umull	r2, r3, r3, r1
 8007292:	095b      	lsrs	r3, r3, #5
 8007294:	2264      	movs	r2, #100	@ 0x64
 8007296:	fb02 f303 	mul.w	r3, r2, r3
 800729a:	1acb      	subs	r3, r1, r3
 800729c:	011b      	lsls	r3, r3, #4
 800729e:	3332      	adds	r3, #50	@ 0x32
 80072a0:	4a33      	ldr	r2, [pc, #204]	@ (8007370 <UART_SetConfig+0x4e4>)
 80072a2:	fba2 2303 	umull	r2, r3, r2, r3
 80072a6:	095b      	lsrs	r3, r3, #5
 80072a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80072ac:	441c      	add	r4, r3
 80072ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072b2:	2200      	movs	r2, #0
 80072b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80072b6:	677a      	str	r2, [r7, #116]	@ 0x74
 80072b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80072bc:	4642      	mov	r2, r8
 80072be:	464b      	mov	r3, r9
 80072c0:	1891      	adds	r1, r2, r2
 80072c2:	60b9      	str	r1, [r7, #8]
 80072c4:	415b      	adcs	r3, r3
 80072c6:	60fb      	str	r3, [r7, #12]
 80072c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072cc:	4641      	mov	r1, r8
 80072ce:	1851      	adds	r1, r2, r1
 80072d0:	6039      	str	r1, [r7, #0]
 80072d2:	4649      	mov	r1, r9
 80072d4:	414b      	adcs	r3, r1
 80072d6:	607b      	str	r3, [r7, #4]
 80072d8:	f04f 0200 	mov.w	r2, #0
 80072dc:	f04f 0300 	mov.w	r3, #0
 80072e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80072e4:	4659      	mov	r1, fp
 80072e6:	00cb      	lsls	r3, r1, #3
 80072e8:	4651      	mov	r1, sl
 80072ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072ee:	4651      	mov	r1, sl
 80072f0:	00ca      	lsls	r2, r1, #3
 80072f2:	4610      	mov	r0, r2
 80072f4:	4619      	mov	r1, r3
 80072f6:	4603      	mov	r3, r0
 80072f8:	4642      	mov	r2, r8
 80072fa:	189b      	adds	r3, r3, r2
 80072fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80072fe:	464b      	mov	r3, r9
 8007300:	460a      	mov	r2, r1
 8007302:	eb42 0303 	adc.w	r3, r2, r3
 8007306:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	663b      	str	r3, [r7, #96]	@ 0x60
 8007312:	667a      	str	r2, [r7, #100]	@ 0x64
 8007314:	f04f 0200 	mov.w	r2, #0
 8007318:	f04f 0300 	mov.w	r3, #0
 800731c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007320:	4649      	mov	r1, r9
 8007322:	008b      	lsls	r3, r1, #2
 8007324:	4641      	mov	r1, r8
 8007326:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800732a:	4641      	mov	r1, r8
 800732c:	008a      	lsls	r2, r1, #2
 800732e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007332:	f7f9 fca1 	bl	8000c78 <__aeabi_uldivmod>
 8007336:	4602      	mov	r2, r0
 8007338:	460b      	mov	r3, r1
 800733a:	4b0d      	ldr	r3, [pc, #52]	@ (8007370 <UART_SetConfig+0x4e4>)
 800733c:	fba3 1302 	umull	r1, r3, r3, r2
 8007340:	095b      	lsrs	r3, r3, #5
 8007342:	2164      	movs	r1, #100	@ 0x64
 8007344:	fb01 f303 	mul.w	r3, r1, r3
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	011b      	lsls	r3, r3, #4
 800734c:	3332      	adds	r3, #50	@ 0x32
 800734e:	4a08      	ldr	r2, [pc, #32]	@ (8007370 <UART_SetConfig+0x4e4>)
 8007350:	fba2 2303 	umull	r2, r3, r2, r3
 8007354:	095b      	lsrs	r3, r3, #5
 8007356:	f003 020f 	and.w	r2, r3, #15
 800735a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4422      	add	r2, r4
 8007362:	609a      	str	r2, [r3, #8]
}
 8007364:	bf00      	nop
 8007366:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800736a:	46bd      	mov	sp, r7
 800736c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007370:	51eb851f 	.word	0x51eb851f

08007374 <__NVIC_SetPriority>:
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	4603      	mov	r3, r0
 800737c:	6039      	str	r1, [r7, #0]
 800737e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007384:	2b00      	cmp	r3, #0
 8007386:	db0a      	blt.n	800739e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	b2da      	uxtb	r2, r3
 800738c:	490c      	ldr	r1, [pc, #48]	@ (80073c0 <__NVIC_SetPriority+0x4c>)
 800738e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007392:	0112      	lsls	r2, r2, #4
 8007394:	b2d2      	uxtb	r2, r2
 8007396:	440b      	add	r3, r1
 8007398:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800739c:	e00a      	b.n	80073b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	b2da      	uxtb	r2, r3
 80073a2:	4908      	ldr	r1, [pc, #32]	@ (80073c4 <__NVIC_SetPriority+0x50>)
 80073a4:	79fb      	ldrb	r3, [r7, #7]
 80073a6:	f003 030f 	and.w	r3, r3, #15
 80073aa:	3b04      	subs	r3, #4
 80073ac:	0112      	lsls	r2, r2, #4
 80073ae:	b2d2      	uxtb	r2, r2
 80073b0:	440b      	add	r3, r1
 80073b2:	761a      	strb	r2, [r3, #24]
}
 80073b4:	bf00      	nop
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr
 80073c0:	e000e100 	.word	0xe000e100
 80073c4:	e000ed00 	.word	0xe000ed00

080073c8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80073c8:	b580      	push	{r7, lr}
 80073ca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80073cc:	4b05      	ldr	r3, [pc, #20]	@ (80073e4 <SysTick_Handler+0x1c>)
 80073ce:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80073d0:	f001 ffc0 	bl	8009354 <xTaskGetSchedulerState>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d001      	beq.n	80073de <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80073da:	f002 feb5 	bl	800a148 <xPortSysTickHandler>
  }
}
 80073de:	bf00      	nop
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	e000e010 	.word	0xe000e010

080073e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80073e8:	b580      	push	{r7, lr}
 80073ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80073ec:	2100      	movs	r1, #0
 80073ee:	f06f 0004 	mvn.w	r0, #4
 80073f2:	f7ff ffbf 	bl	8007374 <__NVIC_SetPriority>
#endif
}
 80073f6:	bf00      	nop
 80073f8:	bd80      	pop	{r7, pc}
	...

080073fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007402:	f3ef 8305 	mrs	r3, IPSR
 8007406:	603b      	str	r3, [r7, #0]
  return(result);
 8007408:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800740a:	2b00      	cmp	r3, #0
 800740c:	d003      	beq.n	8007416 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800740e:	f06f 0305 	mvn.w	r3, #5
 8007412:	607b      	str	r3, [r7, #4]
 8007414:	e00c      	b.n	8007430 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007416:	4b0a      	ldr	r3, [pc, #40]	@ (8007440 <osKernelInitialize+0x44>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d105      	bne.n	800742a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800741e:	4b08      	ldr	r3, [pc, #32]	@ (8007440 <osKernelInitialize+0x44>)
 8007420:	2201      	movs	r2, #1
 8007422:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007424:	2300      	movs	r3, #0
 8007426:	607b      	str	r3, [r7, #4]
 8007428:	e002      	b.n	8007430 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800742a:	f04f 33ff 	mov.w	r3, #4294967295
 800742e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007430:	687b      	ldr	r3, [r7, #4]
}
 8007432:	4618      	mov	r0, r3
 8007434:	370c      	adds	r7, #12
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop
 8007440:	20000998 	.word	0x20000998

08007444 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800744a:	f3ef 8305 	mrs	r3, IPSR
 800744e:	603b      	str	r3, [r7, #0]
  return(result);
 8007450:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007452:	2b00      	cmp	r3, #0
 8007454:	d003      	beq.n	800745e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007456:	f06f 0305 	mvn.w	r3, #5
 800745a:	607b      	str	r3, [r7, #4]
 800745c:	e010      	b.n	8007480 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800745e:	4b0b      	ldr	r3, [pc, #44]	@ (800748c <osKernelStart+0x48>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2b01      	cmp	r3, #1
 8007464:	d109      	bne.n	800747a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007466:	f7ff ffbf 	bl	80073e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800746a:	4b08      	ldr	r3, [pc, #32]	@ (800748c <osKernelStart+0x48>)
 800746c:	2202      	movs	r2, #2
 800746e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007470:	f001 fb22 	bl	8008ab8 <vTaskStartScheduler>
      stat = osOK;
 8007474:	2300      	movs	r3, #0
 8007476:	607b      	str	r3, [r7, #4]
 8007478:	e002      	b.n	8007480 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800747a:	f04f 33ff 	mov.w	r3, #4294967295
 800747e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007480:	687b      	ldr	r3, [r7, #4]
}
 8007482:	4618      	mov	r0, r3
 8007484:	3708      	adds	r7, #8
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	20000998 	.word	0x20000998

08007490 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007490:	b580      	push	{r7, lr}
 8007492:	b08e      	sub	sp, #56	@ 0x38
 8007494:	af04      	add	r7, sp, #16
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800749c:	2300      	movs	r3, #0
 800749e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074a0:	f3ef 8305 	mrs	r3, IPSR
 80074a4:	617b      	str	r3, [r7, #20]
  return(result);
 80074a6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d17e      	bne.n	80075aa <osThreadNew+0x11a>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d07b      	beq.n	80075aa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80074b2:	2380      	movs	r3, #128	@ 0x80
 80074b4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80074b6:	2318      	movs	r3, #24
 80074b8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80074ba:	2300      	movs	r3, #0
 80074bc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80074be:	f04f 33ff 	mov.w	r3, #4294967295
 80074c2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d045      	beq.n	8007556 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d002      	beq.n	80074d8 <osThreadNew+0x48>
        name = attr->name;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	699b      	ldr	r3, [r3, #24]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d002      	beq.n	80074e6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	699b      	ldr	r3, [r3, #24]
 80074e4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d008      	beq.n	80074fe <osThreadNew+0x6e>
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	2b38      	cmp	r3, #56	@ 0x38
 80074f0:	d805      	bhi.n	80074fe <osThreadNew+0x6e>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	f003 0301 	and.w	r3, r3, #1
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d001      	beq.n	8007502 <osThreadNew+0x72>
        return (NULL);
 80074fe:	2300      	movs	r3, #0
 8007500:	e054      	b.n	80075ac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	695b      	ldr	r3, [r3, #20]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d003      	beq.n	8007512 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	695b      	ldr	r3, [r3, #20]
 800750e:	089b      	lsrs	r3, r3, #2
 8007510:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00e      	beq.n	8007538 <osThreadNew+0xa8>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	2b5b      	cmp	r3, #91	@ 0x5b
 8007520:	d90a      	bls.n	8007538 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007526:	2b00      	cmp	r3, #0
 8007528:	d006      	beq.n	8007538 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	695b      	ldr	r3, [r3, #20]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d002      	beq.n	8007538 <osThreadNew+0xa8>
        mem = 1;
 8007532:	2301      	movs	r3, #1
 8007534:	61bb      	str	r3, [r7, #24]
 8007536:	e010      	b.n	800755a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d10c      	bne.n	800755a <osThreadNew+0xca>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d108      	bne.n	800755a <osThreadNew+0xca>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	691b      	ldr	r3, [r3, #16]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d104      	bne.n	800755a <osThreadNew+0xca>
          mem = 0;
 8007550:	2300      	movs	r3, #0
 8007552:	61bb      	str	r3, [r7, #24]
 8007554:	e001      	b.n	800755a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007556:	2300      	movs	r3, #0
 8007558:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	2b01      	cmp	r3, #1
 800755e:	d110      	bne.n	8007582 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007568:	9202      	str	r2, [sp, #8]
 800756a:	9301      	str	r3, [sp, #4]
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	9300      	str	r3, [sp, #0]
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	6a3a      	ldr	r2, [r7, #32]
 8007574:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007576:	68f8      	ldr	r0, [r7, #12]
 8007578:	f001 f8c2 	bl	8008700 <xTaskCreateStatic>
 800757c:	4603      	mov	r3, r0
 800757e:	613b      	str	r3, [r7, #16]
 8007580:	e013      	b.n	80075aa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d110      	bne.n	80075aa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007588:	6a3b      	ldr	r3, [r7, #32]
 800758a:	b29a      	uxth	r2, r3
 800758c:	f107 0310 	add.w	r3, r7, #16
 8007590:	9301      	str	r3, [sp, #4]
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	9300      	str	r3, [sp, #0]
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f001 f910 	bl	80087c0 <xTaskCreate>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d001      	beq.n	80075aa <osThreadNew+0x11a>
            hTask = NULL;
 80075a6:	2300      	movs	r3, #0
 80075a8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80075aa:	693b      	ldr	r3, [r7, #16]
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3728      	adds	r7, #40	@ 0x28
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075bc:	f3ef 8305 	mrs	r3, IPSR
 80075c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80075c2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d003      	beq.n	80075d0 <osDelay+0x1c>
    stat = osErrorISR;
 80075c8:	f06f 0305 	mvn.w	r3, #5
 80075cc:	60fb      	str	r3, [r7, #12]
 80075ce:	e007      	b.n	80075e0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80075d0:	2300      	movs	r3, #0
 80075d2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d002      	beq.n	80075e0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f001 fa36 	bl	8008a4c <vTaskDelay>
    }
  }

  return (stat);
 80075e0:	68fb      	ldr	r3, [r7, #12]
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3710      	adds	r7, #16
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}

080075ea <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b08a      	sub	sp, #40	@ 0x28
 80075ee:	af02      	add	r7, sp, #8
 80075f0:	60f8      	str	r0, [r7, #12]
 80075f2:	60b9      	str	r1, [r7, #8]
 80075f4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80075f6:	2300      	movs	r3, #0
 80075f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075fa:	f3ef 8305 	mrs	r3, IPSR
 80075fe:	613b      	str	r3, [r7, #16]
  return(result);
 8007600:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007602:	2b00      	cmp	r3, #0
 8007604:	d175      	bne.n	80076f2 <osSemaphoreNew+0x108>
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d072      	beq.n	80076f2 <osSemaphoreNew+0x108>
 800760c:	68ba      	ldr	r2, [r7, #8]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	429a      	cmp	r2, r3
 8007612:	d86e      	bhi.n	80076f2 <osSemaphoreNew+0x108>
    mem = -1;
 8007614:	f04f 33ff 	mov.w	r3, #4294967295
 8007618:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d015      	beq.n	800764c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d006      	beq.n	8007636 <osSemaphoreNew+0x4c>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	2b4f      	cmp	r3, #79	@ 0x4f
 800762e:	d902      	bls.n	8007636 <osSemaphoreNew+0x4c>
        mem = 1;
 8007630:	2301      	movs	r3, #1
 8007632:	61bb      	str	r3, [r7, #24]
 8007634:	e00c      	b.n	8007650 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d108      	bne.n	8007650 <osSemaphoreNew+0x66>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d104      	bne.n	8007650 <osSemaphoreNew+0x66>
          mem = 0;
 8007646:	2300      	movs	r3, #0
 8007648:	61bb      	str	r3, [r7, #24]
 800764a:	e001      	b.n	8007650 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800764c:	2300      	movs	r3, #0
 800764e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007656:	d04c      	beq.n	80076f2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2b01      	cmp	r3, #1
 800765c:	d128      	bne.n	80076b0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	2b01      	cmp	r3, #1
 8007662:	d10a      	bne.n	800767a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	2203      	movs	r2, #3
 800766a:	9200      	str	r2, [sp, #0]
 800766c:	2200      	movs	r2, #0
 800766e:	2100      	movs	r1, #0
 8007670:	2001      	movs	r0, #1
 8007672:	f000 f995 	bl	80079a0 <xQueueGenericCreateStatic>
 8007676:	61f8      	str	r0, [r7, #28]
 8007678:	e005      	b.n	8007686 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800767a:	2203      	movs	r2, #3
 800767c:	2100      	movs	r1, #0
 800767e:	2001      	movs	r0, #1
 8007680:	f000 fa0b 	bl	8007a9a <xQueueGenericCreate>
 8007684:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d022      	beq.n	80076d2 <osSemaphoreNew+0xe8>
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d01f      	beq.n	80076d2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007692:	2300      	movs	r3, #0
 8007694:	2200      	movs	r2, #0
 8007696:	2100      	movs	r1, #0
 8007698:	69f8      	ldr	r0, [r7, #28]
 800769a:	f000 facb 	bl	8007c34 <xQueueGenericSend>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d016      	beq.n	80076d2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80076a4:	69f8      	ldr	r0, [r7, #28]
 80076a6:	f000 fe57 	bl	8008358 <vQueueDelete>
            hSemaphore = NULL;
 80076aa:	2300      	movs	r3, #0
 80076ac:	61fb      	str	r3, [r7, #28]
 80076ae:	e010      	b.n	80076d2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d108      	bne.n	80076c8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	461a      	mov	r2, r3
 80076bc:	68b9      	ldr	r1, [r7, #8]
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f000 fa49 	bl	8007b56 <xQueueCreateCountingSemaphoreStatic>
 80076c4:	61f8      	str	r0, [r7, #28]
 80076c6:	e004      	b.n	80076d2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80076c8:	68b9      	ldr	r1, [r7, #8]
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f000 fa7c 	bl	8007bc8 <xQueueCreateCountingSemaphore>
 80076d0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00c      	beq.n	80076f2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d003      	beq.n	80076e6 <osSemaphoreNew+0xfc>
          name = attr->name;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	617b      	str	r3, [r7, #20]
 80076e4:	e001      	b.n	80076ea <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80076e6:	2300      	movs	r3, #0
 80076e8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80076ea:	6979      	ldr	r1, [r7, #20]
 80076ec:	69f8      	ldr	r0, [r7, #28]
 80076ee:	f000 ff7f 	bl	80085f0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80076f2:	69fb      	ldr	r3, [r7, #28]
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3720      	adds	r7, #32
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80076fc:	b480      	push	{r7}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	4a07      	ldr	r2, [pc, #28]	@ (8007728 <vApplicationGetIdleTaskMemory+0x2c>)
 800770c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	4a06      	ldr	r2, [pc, #24]	@ (800772c <vApplicationGetIdleTaskMemory+0x30>)
 8007712:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2280      	movs	r2, #128	@ 0x80
 8007718:	601a      	str	r2, [r3, #0]
}
 800771a:	bf00      	nop
 800771c:	3714      	adds	r7, #20
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr
 8007726:	bf00      	nop
 8007728:	2000099c 	.word	0x2000099c
 800772c:	200009f8 	.word	0x200009f8

08007730 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	4a07      	ldr	r2, [pc, #28]	@ (800775c <vApplicationGetTimerTaskMemory+0x2c>)
 8007740:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	4a06      	ldr	r2, [pc, #24]	@ (8007760 <vApplicationGetTimerTaskMemory+0x30>)
 8007746:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800774e:	601a      	str	r2, [r3, #0]
}
 8007750:	bf00      	nop
 8007752:	3714      	adds	r7, #20
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr
 800775c:	20000bf8 	.word	0x20000bf8
 8007760:	20000c54 	.word	0x20000c54

08007764 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f103 0208 	add.w	r2, r3, #8
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f04f 32ff 	mov.w	r2, #4294967295
 800777c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f103 0208 	add.w	r2, r3, #8
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f103 0208 	add.w	r2, r3, #8
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007798:	bf00      	nop
 800779a:	370c      	adds	r7, #12
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80077b2:	bf00      	nop
 80077b4:	370c      	adds	r7, #12
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr

080077be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80077be:	b480      	push	{r7}
 80077c0:	b085      	sub	sp, #20
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
 80077c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	689a      	ldr	r2, [r3, #8]
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	683a      	ldr	r2, [r7, #0]
 80077e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	683a      	ldr	r2, [r7, #0]
 80077e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	1c5a      	adds	r2, r3, #1
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	601a      	str	r2, [r3, #0]
}
 80077fa:	bf00      	nop
 80077fc:	3714      	adds	r7, #20
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr

08007806 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007806:	b480      	push	{r7}
 8007808:	b085      	sub	sp, #20
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
 800780e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800781c:	d103      	bne.n	8007826 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	60fb      	str	r3, [r7, #12]
 8007824:	e00c      	b.n	8007840 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	3308      	adds	r3, #8
 800782a:	60fb      	str	r3, [r7, #12]
 800782c:	e002      	b.n	8007834 <vListInsert+0x2e>
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	60fb      	str	r3, [r7, #12]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	68ba      	ldr	r2, [r7, #8]
 800783c:	429a      	cmp	r2, r3
 800783e:	d2f6      	bcs.n	800782e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	685a      	ldr	r2, [r3, #4]
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	683a      	ldr	r2, [r7, #0]
 800784e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	683a      	ldr	r2, [r7, #0]
 800785a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	1c5a      	adds	r2, r3, #1
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	601a      	str	r2, [r3, #0]
}
 800786c:	bf00      	nop
 800786e:	3714      	adds	r7, #20
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007878:	b480      	push	{r7}
 800787a:	b085      	sub	sp, #20
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	691b      	ldr	r3, [r3, #16]
 8007884:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	6892      	ldr	r2, [r2, #8]
 800788e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	6852      	ldr	r2, [r2, #4]
 8007898:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d103      	bne.n	80078ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	689a      	ldr	r2, [r3, #8]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	1e5a      	subs	r2, r3, #1
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3714      	adds	r7, #20
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d10b      	bne.n	80078f8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80078e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e4:	f383 8811 	msr	BASEPRI, r3
 80078e8:	f3bf 8f6f 	isb	sy
 80078ec:	f3bf 8f4f 	dsb	sy
 80078f0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80078f2:	bf00      	nop
 80078f4:	bf00      	nop
 80078f6:	e7fd      	b.n	80078f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80078f8:	f002 fb96 	bl	800a028 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007904:	68f9      	ldr	r1, [r7, #12]
 8007906:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007908:	fb01 f303 	mul.w	r3, r1, r3
 800790c:	441a      	add	r2, r3
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2200      	movs	r2, #0
 8007916:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007928:	3b01      	subs	r3, #1
 800792a:	68f9      	ldr	r1, [r7, #12]
 800792c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800792e:	fb01 f303 	mul.w	r3, r1, r3
 8007932:	441a      	add	r2, r3
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	22ff      	movs	r2, #255	@ 0xff
 800793c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	22ff      	movs	r2, #255	@ 0xff
 8007944:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d114      	bne.n	8007978 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d01a      	beq.n	800798c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	3310      	adds	r3, #16
 800795a:	4618      	mov	r0, r3
 800795c:	f001 fb3a 	bl	8008fd4 <xTaskRemoveFromEventList>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d012      	beq.n	800798c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007966:	4b0d      	ldr	r3, [pc, #52]	@ (800799c <xQueueGenericReset+0xd0>)
 8007968:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800796c:	601a      	str	r2, [r3, #0]
 800796e:	f3bf 8f4f 	dsb	sy
 8007972:	f3bf 8f6f 	isb	sy
 8007976:	e009      	b.n	800798c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	3310      	adds	r3, #16
 800797c:	4618      	mov	r0, r3
 800797e:	f7ff fef1 	bl	8007764 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	3324      	adds	r3, #36	@ 0x24
 8007986:	4618      	mov	r0, r3
 8007988:	f7ff feec 	bl	8007764 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800798c:	f002 fb7e 	bl	800a08c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007990:	2301      	movs	r3, #1
}
 8007992:	4618      	mov	r0, r3
 8007994:	3710      	adds	r7, #16
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	e000ed04 	.word	0xe000ed04

080079a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b08e      	sub	sp, #56	@ 0x38
 80079a4:	af02      	add	r7, sp, #8
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	607a      	str	r2, [r7, #4]
 80079ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d10b      	bne.n	80079cc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80079b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079b8:	f383 8811 	msr	BASEPRI, r3
 80079bc:	f3bf 8f6f 	isb	sy
 80079c0:	f3bf 8f4f 	dsb	sy
 80079c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80079c6:	bf00      	nop
 80079c8:	bf00      	nop
 80079ca:	e7fd      	b.n	80079c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d10b      	bne.n	80079ea <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80079d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d6:	f383 8811 	msr	BASEPRI, r3
 80079da:	f3bf 8f6f 	isb	sy
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80079e4:	bf00      	nop
 80079e6:	bf00      	nop
 80079e8:	e7fd      	b.n	80079e6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d002      	beq.n	80079f6 <xQueueGenericCreateStatic+0x56>
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d001      	beq.n	80079fa <xQueueGenericCreateStatic+0x5a>
 80079f6:	2301      	movs	r3, #1
 80079f8:	e000      	b.n	80079fc <xQueueGenericCreateStatic+0x5c>
 80079fa:	2300      	movs	r3, #0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10b      	bne.n	8007a18 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a04:	f383 8811 	msr	BASEPRI, r3
 8007a08:	f3bf 8f6f 	isb	sy
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	623b      	str	r3, [r7, #32]
}
 8007a12:	bf00      	nop
 8007a14:	bf00      	nop
 8007a16:	e7fd      	b.n	8007a14 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d102      	bne.n	8007a24 <xQueueGenericCreateStatic+0x84>
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d101      	bne.n	8007a28 <xQueueGenericCreateStatic+0x88>
 8007a24:	2301      	movs	r3, #1
 8007a26:	e000      	b.n	8007a2a <xQueueGenericCreateStatic+0x8a>
 8007a28:	2300      	movs	r3, #0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d10b      	bne.n	8007a46 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a32:	f383 8811 	msr	BASEPRI, r3
 8007a36:	f3bf 8f6f 	isb	sy
 8007a3a:	f3bf 8f4f 	dsb	sy
 8007a3e:	61fb      	str	r3, [r7, #28]
}
 8007a40:	bf00      	nop
 8007a42:	bf00      	nop
 8007a44:	e7fd      	b.n	8007a42 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007a46:	2350      	movs	r3, #80	@ 0x50
 8007a48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	2b50      	cmp	r3, #80	@ 0x50
 8007a4e:	d00b      	beq.n	8007a68 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a54:	f383 8811 	msr	BASEPRI, r3
 8007a58:	f3bf 8f6f 	isb	sy
 8007a5c:	f3bf 8f4f 	dsb	sy
 8007a60:	61bb      	str	r3, [r7, #24]
}
 8007a62:	bf00      	nop
 8007a64:	bf00      	nop
 8007a66:	e7fd      	b.n	8007a64 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007a68:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00d      	beq.n	8007a90 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a7c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a82:	9300      	str	r3, [sp, #0]
 8007a84:	4613      	mov	r3, r2
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	68b9      	ldr	r1, [r7, #8]
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f000 f840 	bl	8007b10 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3730      	adds	r7, #48	@ 0x30
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b08a      	sub	sp, #40	@ 0x28
 8007a9e:	af02      	add	r7, sp, #8
 8007aa0:	60f8      	str	r0, [r7, #12]
 8007aa2:	60b9      	str	r1, [r7, #8]
 8007aa4:	4613      	mov	r3, r2
 8007aa6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d10b      	bne.n	8007ac6 <xQueueGenericCreate+0x2c>
	__asm volatile
 8007aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ab2:	f383 8811 	msr	BASEPRI, r3
 8007ab6:	f3bf 8f6f 	isb	sy
 8007aba:	f3bf 8f4f 	dsb	sy
 8007abe:	613b      	str	r3, [r7, #16]
}
 8007ac0:	bf00      	nop
 8007ac2:	bf00      	nop
 8007ac4:	e7fd      	b.n	8007ac2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	68ba      	ldr	r2, [r7, #8]
 8007aca:	fb02 f303 	mul.w	r3, r2, r3
 8007ace:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	3350      	adds	r3, #80	@ 0x50
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f002 fbc9 	bl	800a26c <pvPortMalloc>
 8007ada:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d011      	beq.n	8007b06 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	3350      	adds	r3, #80	@ 0x50
 8007aea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007af4:	79fa      	ldrb	r2, [r7, #7]
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	9300      	str	r3, [sp, #0]
 8007afa:	4613      	mov	r3, r2
 8007afc:	697a      	ldr	r2, [r7, #20]
 8007afe:	68b9      	ldr	r1, [r7, #8]
 8007b00:	68f8      	ldr	r0, [r7, #12]
 8007b02:	f000 f805 	bl	8007b10 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007b06:	69bb      	ldr	r3, [r7, #24]
	}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3720      	adds	r7, #32
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	60f8      	str	r0, [r7, #12]
 8007b18:	60b9      	str	r1, [r7, #8]
 8007b1a:	607a      	str	r2, [r7, #4]
 8007b1c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d103      	bne.n	8007b2c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007b24:	69bb      	ldr	r3, [r7, #24]
 8007b26:	69ba      	ldr	r2, [r7, #24]
 8007b28:	601a      	str	r2, [r3, #0]
 8007b2a:	e002      	b.n	8007b32 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	68fa      	ldr	r2, [r7, #12]
 8007b36:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	68ba      	ldr	r2, [r7, #8]
 8007b3c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007b3e:	2101      	movs	r1, #1
 8007b40:	69b8      	ldr	r0, [r7, #24]
 8007b42:	f7ff fec3 	bl	80078cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	78fa      	ldrb	r2, [r7, #3]
 8007b4a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007b4e:	bf00      	nop
 8007b50:	3710      	adds	r7, #16
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007b56:	b580      	push	{r7, lr}
 8007b58:	b08a      	sub	sp, #40	@ 0x28
 8007b5a:	af02      	add	r7, sp, #8
 8007b5c:	60f8      	str	r0, [r7, #12]
 8007b5e:	60b9      	str	r1, [r7, #8]
 8007b60:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d10b      	bne.n	8007b80 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8007b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b6c:	f383 8811 	msr	BASEPRI, r3
 8007b70:	f3bf 8f6f 	isb	sy
 8007b74:	f3bf 8f4f 	dsb	sy
 8007b78:	61bb      	str	r3, [r7, #24]
}
 8007b7a:	bf00      	nop
 8007b7c:	bf00      	nop
 8007b7e:	e7fd      	b.n	8007b7c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007b80:	68ba      	ldr	r2, [r7, #8]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d90b      	bls.n	8007ba0 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8007b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b8c:	f383 8811 	msr	BASEPRI, r3
 8007b90:	f3bf 8f6f 	isb	sy
 8007b94:	f3bf 8f4f 	dsb	sy
 8007b98:	617b      	str	r3, [r7, #20]
}
 8007b9a:	bf00      	nop
 8007b9c:	bf00      	nop
 8007b9e:	e7fd      	b.n	8007b9c <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007ba0:	2302      	movs	r3, #2
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	2100      	movs	r1, #0
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f7ff fef8 	bl	80079a0 <xQueueGenericCreateStatic>
 8007bb0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007bb2:	69fb      	ldr	r3, [r7, #28]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d002      	beq.n	8007bbe <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	68ba      	ldr	r2, [r7, #8]
 8007bbc:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007bbe:	69fb      	ldr	r3, [r7, #28]
	}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3720      	adds	r7, #32
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b086      	sub	sp, #24
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d10b      	bne.n	8007bf0 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8007bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bdc:	f383 8811 	msr	BASEPRI, r3
 8007be0:	f3bf 8f6f 	isb	sy
 8007be4:	f3bf 8f4f 	dsb	sy
 8007be8:	613b      	str	r3, [r7, #16]
}
 8007bea:	bf00      	nop
 8007bec:	bf00      	nop
 8007bee:	e7fd      	b.n	8007bec <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007bf0:	683a      	ldr	r2, [r7, #0]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d90b      	bls.n	8007c10 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8007bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bfc:	f383 8811 	msr	BASEPRI, r3
 8007c00:	f3bf 8f6f 	isb	sy
 8007c04:	f3bf 8f4f 	dsb	sy
 8007c08:	60fb      	str	r3, [r7, #12]
}
 8007c0a:	bf00      	nop
 8007c0c:	bf00      	nop
 8007c0e:	e7fd      	b.n	8007c0c <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007c10:	2202      	movs	r2, #2
 8007c12:	2100      	movs	r1, #0
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f7ff ff40 	bl	8007a9a <xQueueGenericCreate>
 8007c1a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d002      	beq.n	8007c28 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	683a      	ldr	r2, [r7, #0]
 8007c26:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007c28:	697b      	ldr	r3, [r7, #20]
	}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3718      	adds	r7, #24
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
	...

08007c34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b08e      	sub	sp, #56	@ 0x38
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	607a      	str	r2, [r7, #4]
 8007c40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007c42:	2300      	movs	r3, #0
 8007c44:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d10b      	bne.n	8007c68 <xQueueGenericSend+0x34>
	__asm volatile
 8007c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c54:	f383 8811 	msr	BASEPRI, r3
 8007c58:	f3bf 8f6f 	isb	sy
 8007c5c:	f3bf 8f4f 	dsb	sy
 8007c60:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007c62:	bf00      	nop
 8007c64:	bf00      	nop
 8007c66:	e7fd      	b.n	8007c64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d103      	bne.n	8007c76 <xQueueGenericSend+0x42>
 8007c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d101      	bne.n	8007c7a <xQueueGenericSend+0x46>
 8007c76:	2301      	movs	r3, #1
 8007c78:	e000      	b.n	8007c7c <xQueueGenericSend+0x48>
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10b      	bne.n	8007c98 <xQueueGenericSend+0x64>
	__asm volatile
 8007c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c84:	f383 8811 	msr	BASEPRI, r3
 8007c88:	f3bf 8f6f 	isb	sy
 8007c8c:	f3bf 8f4f 	dsb	sy
 8007c90:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007c92:	bf00      	nop
 8007c94:	bf00      	nop
 8007c96:	e7fd      	b.n	8007c94 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	d103      	bne.n	8007ca6 <xQueueGenericSend+0x72>
 8007c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d101      	bne.n	8007caa <xQueueGenericSend+0x76>
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	e000      	b.n	8007cac <xQueueGenericSend+0x78>
 8007caa:	2300      	movs	r3, #0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d10b      	bne.n	8007cc8 <xQueueGenericSend+0x94>
	__asm volatile
 8007cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cb4:	f383 8811 	msr	BASEPRI, r3
 8007cb8:	f3bf 8f6f 	isb	sy
 8007cbc:	f3bf 8f4f 	dsb	sy
 8007cc0:	623b      	str	r3, [r7, #32]
}
 8007cc2:	bf00      	nop
 8007cc4:	bf00      	nop
 8007cc6:	e7fd      	b.n	8007cc4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007cc8:	f001 fb44 	bl	8009354 <xTaskGetSchedulerState>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d102      	bne.n	8007cd8 <xQueueGenericSend+0xa4>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d101      	bne.n	8007cdc <xQueueGenericSend+0xa8>
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e000      	b.n	8007cde <xQueueGenericSend+0xaa>
 8007cdc:	2300      	movs	r3, #0
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10b      	bne.n	8007cfa <xQueueGenericSend+0xc6>
	__asm volatile
 8007ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ce6:	f383 8811 	msr	BASEPRI, r3
 8007cea:	f3bf 8f6f 	isb	sy
 8007cee:	f3bf 8f4f 	dsb	sy
 8007cf2:	61fb      	str	r3, [r7, #28]
}
 8007cf4:	bf00      	nop
 8007cf6:	bf00      	nop
 8007cf8:	e7fd      	b.n	8007cf6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007cfa:	f002 f995 	bl	800a028 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d302      	bcc.n	8007d10 <xQueueGenericSend+0xdc>
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	2b02      	cmp	r3, #2
 8007d0e:	d129      	bne.n	8007d64 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d10:	683a      	ldr	r2, [r7, #0]
 8007d12:	68b9      	ldr	r1, [r7, #8]
 8007d14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d16:	f000 fb5b 	bl	80083d0 <prvCopyDataToQueue>
 8007d1a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d010      	beq.n	8007d46 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d26:	3324      	adds	r3, #36	@ 0x24
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f001 f953 	bl	8008fd4 <xTaskRemoveFromEventList>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d013      	beq.n	8007d5c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007d34:	4b3f      	ldr	r3, [pc, #252]	@ (8007e34 <xQueueGenericSend+0x200>)
 8007d36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d3a:	601a      	str	r2, [r3, #0]
 8007d3c:	f3bf 8f4f 	dsb	sy
 8007d40:	f3bf 8f6f 	isb	sy
 8007d44:	e00a      	b.n	8007d5c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d007      	beq.n	8007d5c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007d4c:	4b39      	ldr	r3, [pc, #228]	@ (8007e34 <xQueueGenericSend+0x200>)
 8007d4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d52:	601a      	str	r2, [r3, #0]
 8007d54:	f3bf 8f4f 	dsb	sy
 8007d58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007d5c:	f002 f996 	bl	800a08c <vPortExitCritical>
				return pdPASS;
 8007d60:	2301      	movs	r3, #1
 8007d62:	e063      	b.n	8007e2c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d103      	bne.n	8007d72 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d6a:	f002 f98f 	bl	800a08c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	e05c      	b.n	8007e2c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d106      	bne.n	8007d86 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d78:	f107 0314 	add.w	r3, r7, #20
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f001 f98d 	bl	800909c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d82:	2301      	movs	r3, #1
 8007d84:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d86:	f002 f981 	bl	800a08c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d8a:	f000 fefd 	bl	8008b88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d8e:	f002 f94b 	bl	800a028 <vPortEnterCritical>
 8007d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d98:	b25b      	sxtb	r3, r3
 8007d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d9e:	d103      	bne.n	8007da8 <xQueueGenericSend+0x174>
 8007da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da2:	2200      	movs	r2, #0
 8007da4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007daa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007dae:	b25b      	sxtb	r3, r3
 8007db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db4:	d103      	bne.n	8007dbe <xQueueGenericSend+0x18a>
 8007db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007dbe:	f002 f965 	bl	800a08c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007dc2:	1d3a      	adds	r2, r7, #4
 8007dc4:	f107 0314 	add.w	r3, r7, #20
 8007dc8:	4611      	mov	r1, r2
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f001 f97c 	bl	80090c8 <xTaskCheckForTimeOut>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d124      	bne.n	8007e20 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007dd6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007dd8:	f000 fbf2 	bl	80085c0 <prvIsQueueFull>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d018      	beq.n	8007e14 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de4:	3310      	adds	r3, #16
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	4611      	mov	r1, r2
 8007dea:	4618      	mov	r0, r3
 8007dec:	f001 f8a0 	bl	8008f30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007df0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007df2:	f000 fb7d 	bl	80084f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007df6:	f000 fed5 	bl	8008ba4 <xTaskResumeAll>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f47f af7c 	bne.w	8007cfa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007e02:	4b0c      	ldr	r3, [pc, #48]	@ (8007e34 <xQueueGenericSend+0x200>)
 8007e04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e08:	601a      	str	r2, [r3, #0]
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	f3bf 8f6f 	isb	sy
 8007e12:	e772      	b.n	8007cfa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007e14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e16:	f000 fb6b 	bl	80084f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e1a:	f000 fec3 	bl	8008ba4 <xTaskResumeAll>
 8007e1e:	e76c      	b.n	8007cfa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007e20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e22:	f000 fb65 	bl	80084f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e26:	f000 febd 	bl	8008ba4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007e2a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3738      	adds	r7, #56	@ 0x38
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	e000ed04 	.word	0xe000ed04

08007e38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b090      	sub	sp, #64	@ 0x40
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	607a      	str	r2, [r7, #4]
 8007e44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d10b      	bne.n	8007e68 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e54:	f383 8811 	msr	BASEPRI, r3
 8007e58:	f3bf 8f6f 	isb	sy
 8007e5c:	f3bf 8f4f 	dsb	sy
 8007e60:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007e62:	bf00      	nop
 8007e64:	bf00      	nop
 8007e66:	e7fd      	b.n	8007e64 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d103      	bne.n	8007e76 <xQueueGenericSendFromISR+0x3e>
 8007e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d101      	bne.n	8007e7a <xQueueGenericSendFromISR+0x42>
 8007e76:	2301      	movs	r3, #1
 8007e78:	e000      	b.n	8007e7c <xQueueGenericSendFromISR+0x44>
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d10b      	bne.n	8007e98 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e84:	f383 8811 	msr	BASEPRI, r3
 8007e88:	f3bf 8f6f 	isb	sy
 8007e8c:	f3bf 8f4f 	dsb	sy
 8007e90:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007e92:	bf00      	nop
 8007e94:	bf00      	nop
 8007e96:	e7fd      	b.n	8007e94 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	d103      	bne.n	8007ea6 <xQueueGenericSendFromISR+0x6e>
 8007e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d101      	bne.n	8007eaa <xQueueGenericSendFromISR+0x72>
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e000      	b.n	8007eac <xQueueGenericSendFromISR+0x74>
 8007eaa:	2300      	movs	r3, #0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d10b      	bne.n	8007ec8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eb4:	f383 8811 	msr	BASEPRI, r3
 8007eb8:	f3bf 8f6f 	isb	sy
 8007ebc:	f3bf 8f4f 	dsb	sy
 8007ec0:	623b      	str	r3, [r7, #32]
}
 8007ec2:	bf00      	nop
 8007ec4:	bf00      	nop
 8007ec6:	e7fd      	b.n	8007ec4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ec8:	f002 f98e 	bl	800a1e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007ecc:	f3ef 8211 	mrs	r2, BASEPRI
 8007ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ed4:	f383 8811 	msr	BASEPRI, r3
 8007ed8:	f3bf 8f6f 	isb	sy
 8007edc:	f3bf 8f4f 	dsb	sy
 8007ee0:	61fa      	str	r2, [r7, #28]
 8007ee2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007ee4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ee6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d302      	bcc.n	8007efa <xQueueGenericSendFromISR+0xc2>
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d12f      	bne.n	8007f5a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007efc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f00:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f0a:	683a      	ldr	r2, [r7, #0]
 8007f0c:	68b9      	ldr	r1, [r7, #8]
 8007f0e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007f10:	f000 fa5e 	bl	80083d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007f14:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f1c:	d112      	bne.n	8007f44 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d016      	beq.n	8007f54 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f28:	3324      	adds	r3, #36	@ 0x24
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f001 f852 	bl	8008fd4 <xTaskRemoveFromEventList>
 8007f30:	4603      	mov	r3, r0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d00e      	beq.n	8007f54 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00b      	beq.n	8007f54 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	601a      	str	r2, [r3, #0]
 8007f42:	e007      	b.n	8007f54 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007f44:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007f48:	3301      	adds	r3, #1
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	b25a      	sxtb	r2, r3
 8007f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007f54:	2301      	movs	r3, #1
 8007f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007f58:	e001      	b.n	8007f5e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f60:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007f68:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3740      	adds	r7, #64	@ 0x40
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b08c      	sub	sp, #48	@ 0x30
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007f80:	2300      	movs	r3, #0
 8007f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d10b      	bne.n	8007fa6 <xQueueReceive+0x32>
	__asm volatile
 8007f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f92:	f383 8811 	msr	BASEPRI, r3
 8007f96:	f3bf 8f6f 	isb	sy
 8007f9a:	f3bf 8f4f 	dsb	sy
 8007f9e:	623b      	str	r3, [r7, #32]
}
 8007fa0:	bf00      	nop
 8007fa2:	bf00      	nop
 8007fa4:	e7fd      	b.n	8007fa2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d103      	bne.n	8007fb4 <xQueueReceive+0x40>
 8007fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d101      	bne.n	8007fb8 <xQueueReceive+0x44>
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e000      	b.n	8007fba <xQueueReceive+0x46>
 8007fb8:	2300      	movs	r3, #0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d10b      	bne.n	8007fd6 <xQueueReceive+0x62>
	__asm volatile
 8007fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc2:	f383 8811 	msr	BASEPRI, r3
 8007fc6:	f3bf 8f6f 	isb	sy
 8007fca:	f3bf 8f4f 	dsb	sy
 8007fce:	61fb      	str	r3, [r7, #28]
}
 8007fd0:	bf00      	nop
 8007fd2:	bf00      	nop
 8007fd4:	e7fd      	b.n	8007fd2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007fd6:	f001 f9bd 	bl	8009354 <xTaskGetSchedulerState>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d102      	bne.n	8007fe6 <xQueueReceive+0x72>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d101      	bne.n	8007fea <xQueueReceive+0x76>
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e000      	b.n	8007fec <xQueueReceive+0x78>
 8007fea:	2300      	movs	r3, #0
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d10b      	bne.n	8008008 <xQueueReceive+0x94>
	__asm volatile
 8007ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ff4:	f383 8811 	msr	BASEPRI, r3
 8007ff8:	f3bf 8f6f 	isb	sy
 8007ffc:	f3bf 8f4f 	dsb	sy
 8008000:	61bb      	str	r3, [r7, #24]
}
 8008002:	bf00      	nop
 8008004:	bf00      	nop
 8008006:	e7fd      	b.n	8008004 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008008:	f002 f80e 	bl	800a028 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800800c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800800e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008010:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008014:	2b00      	cmp	r3, #0
 8008016:	d01f      	beq.n	8008058 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008018:	68b9      	ldr	r1, [r7, #8]
 800801a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800801c:	f000 fa42 	bl	80084a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008022:	1e5a      	subs	r2, r3, #1
 8008024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008026:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800802a:	691b      	ldr	r3, [r3, #16]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d00f      	beq.n	8008050 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008032:	3310      	adds	r3, #16
 8008034:	4618      	mov	r0, r3
 8008036:	f000 ffcd 	bl	8008fd4 <xTaskRemoveFromEventList>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d007      	beq.n	8008050 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008040:	4b3c      	ldr	r3, [pc, #240]	@ (8008134 <xQueueReceive+0x1c0>)
 8008042:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008046:	601a      	str	r2, [r3, #0]
 8008048:	f3bf 8f4f 	dsb	sy
 800804c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008050:	f002 f81c 	bl	800a08c <vPortExitCritical>
				return pdPASS;
 8008054:	2301      	movs	r3, #1
 8008056:	e069      	b.n	800812c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d103      	bne.n	8008066 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800805e:	f002 f815 	bl	800a08c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008062:	2300      	movs	r3, #0
 8008064:	e062      	b.n	800812c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008068:	2b00      	cmp	r3, #0
 800806a:	d106      	bne.n	800807a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800806c:	f107 0310 	add.w	r3, r7, #16
 8008070:	4618      	mov	r0, r3
 8008072:	f001 f813 	bl	800909c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008076:	2301      	movs	r3, #1
 8008078:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800807a:	f002 f807 	bl	800a08c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800807e:	f000 fd83 	bl	8008b88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008082:	f001 ffd1 	bl	800a028 <vPortEnterCritical>
 8008086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008088:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800808c:	b25b      	sxtb	r3, r3
 800808e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008092:	d103      	bne.n	800809c <xQueueReceive+0x128>
 8008094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008096:	2200      	movs	r2, #0
 8008098:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800809c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800809e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80080a2:	b25b      	sxtb	r3, r3
 80080a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a8:	d103      	bne.n	80080b2 <xQueueReceive+0x13e>
 80080aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ac:	2200      	movs	r2, #0
 80080ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080b2:	f001 ffeb 	bl	800a08c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80080b6:	1d3a      	adds	r2, r7, #4
 80080b8:	f107 0310 	add.w	r3, r7, #16
 80080bc:	4611      	mov	r1, r2
 80080be:	4618      	mov	r0, r3
 80080c0:	f001 f802 	bl	80090c8 <xTaskCheckForTimeOut>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d123      	bne.n	8008112 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80080cc:	f000 fa62 	bl	8008594 <prvIsQueueEmpty>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d017      	beq.n	8008106 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80080d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080d8:	3324      	adds	r3, #36	@ 0x24
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	4611      	mov	r1, r2
 80080de:	4618      	mov	r0, r3
 80080e0:	f000 ff26 	bl	8008f30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80080e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80080e6:	f000 fa03 	bl	80084f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80080ea:	f000 fd5b 	bl	8008ba4 <xTaskResumeAll>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d189      	bne.n	8008008 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80080f4:	4b0f      	ldr	r3, [pc, #60]	@ (8008134 <xQueueReceive+0x1c0>)
 80080f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080fa:	601a      	str	r2, [r3, #0]
 80080fc:	f3bf 8f4f 	dsb	sy
 8008100:	f3bf 8f6f 	isb	sy
 8008104:	e780      	b.n	8008008 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008106:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008108:	f000 f9f2 	bl	80084f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800810c:	f000 fd4a 	bl	8008ba4 <xTaskResumeAll>
 8008110:	e77a      	b.n	8008008 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008112:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008114:	f000 f9ec 	bl	80084f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008118:	f000 fd44 	bl	8008ba4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800811c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800811e:	f000 fa39 	bl	8008594 <prvIsQueueEmpty>
 8008122:	4603      	mov	r3, r0
 8008124:	2b00      	cmp	r3, #0
 8008126:	f43f af6f 	beq.w	8008008 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800812a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800812c:	4618      	mov	r0, r3
 800812e:	3730      	adds	r7, #48	@ 0x30
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	e000ed04 	.word	0xe000ed04

08008138 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b08e      	sub	sp, #56	@ 0x38
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008142:	2300      	movs	r3, #0
 8008144:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800814a:	2300      	movs	r3, #0
 800814c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800814e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008150:	2b00      	cmp	r3, #0
 8008152:	d10b      	bne.n	800816c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008158:	f383 8811 	msr	BASEPRI, r3
 800815c:	f3bf 8f6f 	isb	sy
 8008160:	f3bf 8f4f 	dsb	sy
 8008164:	623b      	str	r3, [r7, #32]
}
 8008166:	bf00      	nop
 8008168:	bf00      	nop
 800816a:	e7fd      	b.n	8008168 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800816c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800816e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008170:	2b00      	cmp	r3, #0
 8008172:	d00b      	beq.n	800818c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008178:	f383 8811 	msr	BASEPRI, r3
 800817c:	f3bf 8f6f 	isb	sy
 8008180:	f3bf 8f4f 	dsb	sy
 8008184:	61fb      	str	r3, [r7, #28]
}
 8008186:	bf00      	nop
 8008188:	bf00      	nop
 800818a:	e7fd      	b.n	8008188 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800818c:	f001 f8e2 	bl	8009354 <xTaskGetSchedulerState>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d102      	bne.n	800819c <xQueueSemaphoreTake+0x64>
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d101      	bne.n	80081a0 <xQueueSemaphoreTake+0x68>
 800819c:	2301      	movs	r3, #1
 800819e:	e000      	b.n	80081a2 <xQueueSemaphoreTake+0x6a>
 80081a0:	2300      	movs	r3, #0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d10b      	bne.n	80081be <xQueueSemaphoreTake+0x86>
	__asm volatile
 80081a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081aa:	f383 8811 	msr	BASEPRI, r3
 80081ae:	f3bf 8f6f 	isb	sy
 80081b2:	f3bf 8f4f 	dsb	sy
 80081b6:	61bb      	str	r3, [r7, #24]
}
 80081b8:	bf00      	nop
 80081ba:	bf00      	nop
 80081bc:	e7fd      	b.n	80081ba <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80081be:	f001 ff33 	bl	800a028 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80081c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081c6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80081c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d024      	beq.n	8008218 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80081ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081d0:	1e5a      	subs	r2, r3, #1
 80081d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081d4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80081d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d104      	bne.n	80081e8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80081de:	f001 fa33 	bl	8009648 <pvTaskIncrementMutexHeldCount>
 80081e2:	4602      	mov	r2, r0
 80081e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081e6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d00f      	beq.n	8008210 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081f2:	3310      	adds	r3, #16
 80081f4:	4618      	mov	r0, r3
 80081f6:	f000 feed 	bl	8008fd4 <xTaskRemoveFromEventList>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d007      	beq.n	8008210 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008200:	4b54      	ldr	r3, [pc, #336]	@ (8008354 <xQueueSemaphoreTake+0x21c>)
 8008202:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008206:	601a      	str	r2, [r3, #0]
 8008208:	f3bf 8f4f 	dsb	sy
 800820c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008210:	f001 ff3c 	bl	800a08c <vPortExitCritical>
				return pdPASS;
 8008214:	2301      	movs	r3, #1
 8008216:	e098      	b.n	800834a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d112      	bne.n	8008244 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800821e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008220:	2b00      	cmp	r3, #0
 8008222:	d00b      	beq.n	800823c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008228:	f383 8811 	msr	BASEPRI, r3
 800822c:	f3bf 8f6f 	isb	sy
 8008230:	f3bf 8f4f 	dsb	sy
 8008234:	617b      	str	r3, [r7, #20]
}
 8008236:	bf00      	nop
 8008238:	bf00      	nop
 800823a:	e7fd      	b.n	8008238 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800823c:	f001 ff26 	bl	800a08c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008240:	2300      	movs	r3, #0
 8008242:	e082      	b.n	800834a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008246:	2b00      	cmp	r3, #0
 8008248:	d106      	bne.n	8008258 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800824a:	f107 030c 	add.w	r3, r7, #12
 800824e:	4618      	mov	r0, r3
 8008250:	f000 ff24 	bl	800909c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008254:	2301      	movs	r3, #1
 8008256:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008258:	f001 ff18 	bl	800a08c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800825c:	f000 fc94 	bl	8008b88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008260:	f001 fee2 	bl	800a028 <vPortEnterCritical>
 8008264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008266:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800826a:	b25b      	sxtb	r3, r3
 800826c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008270:	d103      	bne.n	800827a <xQueueSemaphoreTake+0x142>
 8008272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008274:	2200      	movs	r2, #0
 8008276:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800827a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800827c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008280:	b25b      	sxtb	r3, r3
 8008282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008286:	d103      	bne.n	8008290 <xQueueSemaphoreTake+0x158>
 8008288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800828a:	2200      	movs	r2, #0
 800828c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008290:	f001 fefc 	bl	800a08c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008294:	463a      	mov	r2, r7
 8008296:	f107 030c 	add.w	r3, r7, #12
 800829a:	4611      	mov	r1, r2
 800829c:	4618      	mov	r0, r3
 800829e:	f000 ff13 	bl	80090c8 <xTaskCheckForTimeOut>
 80082a2:	4603      	mov	r3, r0
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d132      	bne.n	800830e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80082a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80082aa:	f000 f973 	bl	8008594 <prvIsQueueEmpty>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d026      	beq.n	8008302 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80082b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d109      	bne.n	80082d0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80082bc:	f001 feb4 	bl	800a028 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80082c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	4618      	mov	r0, r3
 80082c6:	f001 f863 	bl	8009390 <xTaskPriorityInherit>
 80082ca:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80082cc:	f001 fede 	bl	800a08c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80082d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082d2:	3324      	adds	r3, #36	@ 0x24
 80082d4:	683a      	ldr	r2, [r7, #0]
 80082d6:	4611      	mov	r1, r2
 80082d8:	4618      	mov	r0, r3
 80082da:	f000 fe29 	bl	8008f30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80082de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80082e0:	f000 f906 	bl	80084f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80082e4:	f000 fc5e 	bl	8008ba4 <xTaskResumeAll>
 80082e8:	4603      	mov	r3, r0
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	f47f af67 	bne.w	80081be <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80082f0:	4b18      	ldr	r3, [pc, #96]	@ (8008354 <xQueueSemaphoreTake+0x21c>)
 80082f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082f6:	601a      	str	r2, [r3, #0]
 80082f8:	f3bf 8f4f 	dsb	sy
 80082fc:	f3bf 8f6f 	isb	sy
 8008300:	e75d      	b.n	80081be <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008302:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008304:	f000 f8f4 	bl	80084f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008308:	f000 fc4c 	bl	8008ba4 <xTaskResumeAll>
 800830c:	e757      	b.n	80081be <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800830e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008310:	f000 f8ee 	bl	80084f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008314:	f000 fc46 	bl	8008ba4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008318:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800831a:	f000 f93b 	bl	8008594 <prvIsQueueEmpty>
 800831e:	4603      	mov	r3, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	f43f af4c 	beq.w	80081be <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008328:	2b00      	cmp	r3, #0
 800832a:	d00d      	beq.n	8008348 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800832c:	f001 fe7c 	bl	800a028 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008330:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008332:	f000 f835 	bl	80083a0 <prvGetDisinheritPriorityAfterTimeout>
 8008336:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800833e:	4618      	mov	r0, r3
 8008340:	f001 f8fe 	bl	8009540 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008344:	f001 fea2 	bl	800a08c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008348:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800834a:	4618      	mov	r0, r3
 800834c:	3738      	adds	r7, #56	@ 0x38
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	e000ed04 	.word	0xe000ed04

08008358 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d10b      	bne.n	8008382 <vQueueDelete+0x2a>
	__asm volatile
 800836a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800836e:	f383 8811 	msr	BASEPRI, r3
 8008372:	f3bf 8f6f 	isb	sy
 8008376:	f3bf 8f4f 	dsb	sy
 800837a:	60bb      	str	r3, [r7, #8]
}
 800837c:	bf00      	nop
 800837e:	bf00      	nop
 8008380:	e7fd      	b.n	800837e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008382:	68f8      	ldr	r0, [r7, #12]
 8008384:	f000 f95e 	bl	8008644 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800838e:	2b00      	cmp	r3, #0
 8008390:	d102      	bne.n	8008398 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8008392:	68f8      	ldr	r0, [r7, #12]
 8008394:	f002 f838 	bl	800a408 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008398:	bf00      	nop
 800839a:	3710      	adds	r7, #16
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80083a0:	b480      	push	{r7}
 80083a2:	b085      	sub	sp, #20
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d006      	beq.n	80083be <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80083ba:	60fb      	str	r3, [r7, #12]
 80083bc:	e001      	b.n	80083c2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80083be:	2300      	movs	r3, #0
 80083c0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80083c2:	68fb      	ldr	r3, [r7, #12]
	}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3714      	adds	r7, #20
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b086      	sub	sp, #24
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	60b9      	str	r1, [r7, #8]
 80083da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80083dc:	2300      	movs	r3, #0
 80083de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d10d      	bne.n	800840a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d14d      	bne.n	8008492 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	4618      	mov	r0, r3
 80083fc:	f001 f830 	bl	8009460 <xTaskPriorityDisinherit>
 8008400:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2200      	movs	r2, #0
 8008406:	609a      	str	r2, [r3, #8]
 8008408:	e043      	b.n	8008492 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d119      	bne.n	8008444 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6858      	ldr	r0, [r3, #4]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008418:	461a      	mov	r2, r3
 800841a:	68b9      	ldr	r1, [r7, #8]
 800841c:	f002 fa14 	bl	800a848 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	685a      	ldr	r2, [r3, #4]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008428:	441a      	add	r2, r3
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	685a      	ldr	r2, [r3, #4]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	429a      	cmp	r2, r3
 8008438:	d32b      	bcc.n	8008492 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	605a      	str	r2, [r3, #4]
 8008442:	e026      	b.n	8008492 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	68d8      	ldr	r0, [r3, #12]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800844c:	461a      	mov	r2, r3
 800844e:	68b9      	ldr	r1, [r7, #8]
 8008450:	f002 f9fa 	bl	800a848 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	68da      	ldr	r2, [r3, #12]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800845c:	425b      	negs	r3, r3
 800845e:	441a      	add	r2, r3
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	68da      	ldr	r2, [r3, #12]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	429a      	cmp	r2, r3
 800846e:	d207      	bcs.n	8008480 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	689a      	ldr	r2, [r3, #8]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008478:	425b      	negs	r3, r3
 800847a:	441a      	add	r2, r3
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2b02      	cmp	r3, #2
 8008484:	d105      	bne.n	8008492 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d002      	beq.n	8008492 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	3b01      	subs	r3, #1
 8008490:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	1c5a      	adds	r2, r3, #1
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800849a:	697b      	ldr	r3, [r7, #20]
}
 800849c:	4618      	mov	r0, r3
 800849e:	3718      	adds	r7, #24
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b082      	sub	sp, #8
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d018      	beq.n	80084e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	68da      	ldr	r2, [r3, #12]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084be:	441a      	add	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	68da      	ldr	r2, [r3, #12]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d303      	bcc.n	80084d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	68d9      	ldr	r1, [r3, #12]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084e0:	461a      	mov	r2, r3
 80084e2:	6838      	ldr	r0, [r7, #0]
 80084e4:	f002 f9b0 	bl	800a848 <memcpy>
	}
}
 80084e8:	bf00      	nop
 80084ea:	3708      	adds	r7, #8
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80084f8:	f001 fd96 	bl	800a028 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008502:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008504:	e011      	b.n	800852a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800850a:	2b00      	cmp	r3, #0
 800850c:	d012      	beq.n	8008534 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	3324      	adds	r3, #36	@ 0x24
 8008512:	4618      	mov	r0, r3
 8008514:	f000 fd5e 	bl	8008fd4 <xTaskRemoveFromEventList>
 8008518:	4603      	mov	r3, r0
 800851a:	2b00      	cmp	r3, #0
 800851c:	d001      	beq.n	8008522 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800851e:	f000 fe37 	bl	8009190 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008522:	7bfb      	ldrb	r3, [r7, #15]
 8008524:	3b01      	subs	r3, #1
 8008526:	b2db      	uxtb	r3, r3
 8008528:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800852a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800852e:	2b00      	cmp	r3, #0
 8008530:	dce9      	bgt.n	8008506 <prvUnlockQueue+0x16>
 8008532:	e000      	b.n	8008536 <prvUnlockQueue+0x46>
					break;
 8008534:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	22ff      	movs	r2, #255	@ 0xff
 800853a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800853e:	f001 fda5 	bl	800a08c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008542:	f001 fd71 	bl	800a028 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800854c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800854e:	e011      	b.n	8008574 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d012      	beq.n	800857e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	3310      	adds	r3, #16
 800855c:	4618      	mov	r0, r3
 800855e:	f000 fd39 	bl	8008fd4 <xTaskRemoveFromEventList>
 8008562:	4603      	mov	r3, r0
 8008564:	2b00      	cmp	r3, #0
 8008566:	d001      	beq.n	800856c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008568:	f000 fe12 	bl	8009190 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800856c:	7bbb      	ldrb	r3, [r7, #14]
 800856e:	3b01      	subs	r3, #1
 8008570:	b2db      	uxtb	r3, r3
 8008572:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008574:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008578:	2b00      	cmp	r3, #0
 800857a:	dce9      	bgt.n	8008550 <prvUnlockQueue+0x60>
 800857c:	e000      	b.n	8008580 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800857e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	22ff      	movs	r2, #255	@ 0xff
 8008584:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008588:	f001 fd80 	bl	800a08c <vPortExitCritical>
}
 800858c:	bf00      	nop
 800858e:	3710      	adds	r7, #16
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800859c:	f001 fd44 	bl	800a028 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d102      	bne.n	80085ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80085a8:	2301      	movs	r3, #1
 80085aa:	60fb      	str	r3, [r7, #12]
 80085ac:	e001      	b.n	80085b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80085ae:	2300      	movs	r3, #0
 80085b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80085b2:	f001 fd6b 	bl	800a08c <vPortExitCritical>

	return xReturn;
 80085b6:	68fb      	ldr	r3, [r7, #12]
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3710      	adds	r7, #16
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80085c8:	f001 fd2e 	bl	800a028 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d102      	bne.n	80085de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80085d8:	2301      	movs	r3, #1
 80085da:	60fb      	str	r3, [r7, #12]
 80085dc:	e001      	b.n	80085e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80085de:	2300      	movs	r3, #0
 80085e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80085e2:	f001 fd53 	bl	800a08c <vPortExitCritical>

	return xReturn;
 80085e6:	68fb      	ldr	r3, [r7, #12]
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3710      	adds	r7, #16
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80085fa:	2300      	movs	r3, #0
 80085fc:	60fb      	str	r3, [r7, #12]
 80085fe:	e014      	b.n	800862a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008600:	4a0f      	ldr	r2, [pc, #60]	@ (8008640 <vQueueAddToRegistry+0x50>)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d10b      	bne.n	8008624 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800860c:	490c      	ldr	r1, [pc, #48]	@ (8008640 <vQueueAddToRegistry+0x50>)
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	683a      	ldr	r2, [r7, #0]
 8008612:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008616:	4a0a      	ldr	r2, [pc, #40]	@ (8008640 <vQueueAddToRegistry+0x50>)
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	00db      	lsls	r3, r3, #3
 800861c:	4413      	add	r3, r2
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008622:	e006      	b.n	8008632 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	3301      	adds	r3, #1
 8008628:	60fb      	str	r3, [r7, #12]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2b07      	cmp	r3, #7
 800862e:	d9e7      	bls.n	8008600 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008630:	bf00      	nop
 8008632:	bf00      	nop
 8008634:	3714      	adds	r7, #20
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr
 800863e:	bf00      	nop
 8008640:	20001054 	.word	0x20001054

08008644 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008644:	b480      	push	{r7}
 8008646:	b085      	sub	sp, #20
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800864c:	2300      	movs	r3, #0
 800864e:	60fb      	str	r3, [r7, #12]
 8008650:	e016      	b.n	8008680 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008652:	4a10      	ldr	r2, [pc, #64]	@ (8008694 <vQueueUnregisterQueue+0x50>)
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	00db      	lsls	r3, r3, #3
 8008658:	4413      	add	r3, r2
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	429a      	cmp	r2, r3
 8008660:	d10b      	bne.n	800867a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008662:	4a0c      	ldr	r2, [pc, #48]	@ (8008694 <vQueueUnregisterQueue+0x50>)
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2100      	movs	r1, #0
 8008668:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800866c:	4a09      	ldr	r2, [pc, #36]	@ (8008694 <vQueueUnregisterQueue+0x50>)
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	00db      	lsls	r3, r3, #3
 8008672:	4413      	add	r3, r2
 8008674:	2200      	movs	r2, #0
 8008676:	605a      	str	r2, [r3, #4]
				break;
 8008678:	e006      	b.n	8008688 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	3301      	adds	r3, #1
 800867e:	60fb      	str	r3, [r7, #12]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2b07      	cmp	r3, #7
 8008684:	d9e5      	bls.n	8008652 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008686:	bf00      	nop
 8008688:	bf00      	nop
 800868a:	3714      	adds	r7, #20
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr
 8008694:	20001054 	.word	0x20001054

08008698 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008698:	b580      	push	{r7, lr}
 800869a:	b086      	sub	sp, #24
 800869c:	af00      	add	r7, sp, #0
 800869e:	60f8      	str	r0, [r7, #12]
 80086a0:	60b9      	str	r1, [r7, #8]
 80086a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80086a8:	f001 fcbe 	bl	800a028 <vPortEnterCritical>
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80086b2:	b25b      	sxtb	r3, r3
 80086b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086b8:	d103      	bne.n	80086c2 <vQueueWaitForMessageRestricted+0x2a>
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	2200      	movs	r2, #0
 80086be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80086c8:	b25b      	sxtb	r3, r3
 80086ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ce:	d103      	bne.n	80086d8 <vQueueWaitForMessageRestricted+0x40>
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80086d8:	f001 fcd8 	bl	800a08c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d106      	bne.n	80086f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	3324      	adds	r3, #36	@ 0x24
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	68b9      	ldr	r1, [r7, #8]
 80086ec:	4618      	mov	r0, r3
 80086ee:	f000 fc45 	bl	8008f7c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80086f2:	6978      	ldr	r0, [r7, #20]
 80086f4:	f7ff fefc 	bl	80084f0 <prvUnlockQueue>
	}
 80086f8:	bf00      	nop
 80086fa:	3718      	adds	r7, #24
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008700:	b580      	push	{r7, lr}
 8008702:	b08e      	sub	sp, #56	@ 0x38
 8008704:	af04      	add	r7, sp, #16
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	607a      	str	r2, [r7, #4]
 800870c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800870e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008710:	2b00      	cmp	r3, #0
 8008712:	d10b      	bne.n	800872c <xTaskCreateStatic+0x2c>
	__asm volatile
 8008714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008718:	f383 8811 	msr	BASEPRI, r3
 800871c:	f3bf 8f6f 	isb	sy
 8008720:	f3bf 8f4f 	dsb	sy
 8008724:	623b      	str	r3, [r7, #32]
}
 8008726:	bf00      	nop
 8008728:	bf00      	nop
 800872a:	e7fd      	b.n	8008728 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800872c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800872e:	2b00      	cmp	r3, #0
 8008730:	d10b      	bne.n	800874a <xTaskCreateStatic+0x4a>
	__asm volatile
 8008732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008736:	f383 8811 	msr	BASEPRI, r3
 800873a:	f3bf 8f6f 	isb	sy
 800873e:	f3bf 8f4f 	dsb	sy
 8008742:	61fb      	str	r3, [r7, #28]
}
 8008744:	bf00      	nop
 8008746:	bf00      	nop
 8008748:	e7fd      	b.n	8008746 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800874a:	235c      	movs	r3, #92	@ 0x5c
 800874c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	2b5c      	cmp	r3, #92	@ 0x5c
 8008752:	d00b      	beq.n	800876c <xTaskCreateStatic+0x6c>
	__asm volatile
 8008754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008758:	f383 8811 	msr	BASEPRI, r3
 800875c:	f3bf 8f6f 	isb	sy
 8008760:	f3bf 8f4f 	dsb	sy
 8008764:	61bb      	str	r3, [r7, #24]
}
 8008766:	bf00      	nop
 8008768:	bf00      	nop
 800876a:	e7fd      	b.n	8008768 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800876c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800876e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008770:	2b00      	cmp	r3, #0
 8008772:	d01e      	beq.n	80087b2 <xTaskCreateStatic+0xb2>
 8008774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008776:	2b00      	cmp	r3, #0
 8008778:	d01b      	beq.n	80087b2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800877a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800877c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800877e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008780:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008782:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008786:	2202      	movs	r2, #2
 8008788:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800878c:	2300      	movs	r3, #0
 800878e:	9303      	str	r3, [sp, #12]
 8008790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008792:	9302      	str	r3, [sp, #8]
 8008794:	f107 0314 	add.w	r3, r7, #20
 8008798:	9301      	str	r3, [sp, #4]
 800879a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800879c:	9300      	str	r3, [sp, #0]
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	68b9      	ldr	r1, [r7, #8]
 80087a4:	68f8      	ldr	r0, [r7, #12]
 80087a6:	f000 f850 	bl	800884a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80087ac:	f000 f8de 	bl	800896c <prvAddNewTaskToReadyList>
 80087b0:	e001      	b.n	80087b6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80087b2:	2300      	movs	r3, #0
 80087b4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80087b6:	697b      	ldr	r3, [r7, #20]
	}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3728      	adds	r7, #40	@ 0x28
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b08c      	sub	sp, #48	@ 0x30
 80087c4:	af04      	add	r7, sp, #16
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	60b9      	str	r1, [r7, #8]
 80087ca:	603b      	str	r3, [r7, #0]
 80087cc:	4613      	mov	r3, r2
 80087ce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80087d0:	88fb      	ldrh	r3, [r7, #6]
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	4618      	mov	r0, r3
 80087d6:	f001 fd49 	bl	800a26c <pvPortMalloc>
 80087da:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d00e      	beq.n	8008800 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80087e2:	205c      	movs	r0, #92	@ 0x5c
 80087e4:	f001 fd42 	bl	800a26c <pvPortMalloc>
 80087e8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d003      	beq.n	80087f8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	697a      	ldr	r2, [r7, #20]
 80087f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80087f6:	e005      	b.n	8008804 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80087f8:	6978      	ldr	r0, [r7, #20]
 80087fa:	f001 fe05 	bl	800a408 <vPortFree>
 80087fe:	e001      	b.n	8008804 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008800:	2300      	movs	r3, #0
 8008802:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008804:	69fb      	ldr	r3, [r7, #28]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d017      	beq.n	800883a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800880a:	69fb      	ldr	r3, [r7, #28]
 800880c:	2200      	movs	r2, #0
 800880e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008812:	88fa      	ldrh	r2, [r7, #6]
 8008814:	2300      	movs	r3, #0
 8008816:	9303      	str	r3, [sp, #12]
 8008818:	69fb      	ldr	r3, [r7, #28]
 800881a:	9302      	str	r3, [sp, #8]
 800881c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800881e:	9301      	str	r3, [sp, #4]
 8008820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008822:	9300      	str	r3, [sp, #0]
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	68b9      	ldr	r1, [r7, #8]
 8008828:	68f8      	ldr	r0, [r7, #12]
 800882a:	f000 f80e 	bl	800884a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800882e:	69f8      	ldr	r0, [r7, #28]
 8008830:	f000 f89c 	bl	800896c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008834:	2301      	movs	r3, #1
 8008836:	61bb      	str	r3, [r7, #24]
 8008838:	e002      	b.n	8008840 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800883a:	f04f 33ff 	mov.w	r3, #4294967295
 800883e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008840:	69bb      	ldr	r3, [r7, #24]
	}
 8008842:	4618      	mov	r0, r3
 8008844:	3720      	adds	r7, #32
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800884a:	b580      	push	{r7, lr}
 800884c:	b088      	sub	sp, #32
 800884e:	af00      	add	r7, sp, #0
 8008850:	60f8      	str	r0, [r7, #12]
 8008852:	60b9      	str	r1, [r7, #8]
 8008854:	607a      	str	r2, [r7, #4]
 8008856:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800885a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	461a      	mov	r2, r3
 8008862:	21a5      	movs	r1, #165	@ 0xa5
 8008864:	f001 ff98 	bl	800a798 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800886a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008872:	3b01      	subs	r3, #1
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	4413      	add	r3, r2
 8008878:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	f023 0307 	bic.w	r3, r3, #7
 8008880:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008882:	69bb      	ldr	r3, [r7, #24]
 8008884:	f003 0307 	and.w	r3, r3, #7
 8008888:	2b00      	cmp	r3, #0
 800888a:	d00b      	beq.n	80088a4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800888c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008890:	f383 8811 	msr	BASEPRI, r3
 8008894:	f3bf 8f6f 	isb	sy
 8008898:	f3bf 8f4f 	dsb	sy
 800889c:	617b      	str	r3, [r7, #20]
}
 800889e:	bf00      	nop
 80088a0:	bf00      	nop
 80088a2:	e7fd      	b.n	80088a0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d01f      	beq.n	80088ea <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80088aa:	2300      	movs	r3, #0
 80088ac:	61fb      	str	r3, [r7, #28]
 80088ae:	e012      	b.n	80088d6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80088b0:	68ba      	ldr	r2, [r7, #8]
 80088b2:	69fb      	ldr	r3, [r7, #28]
 80088b4:	4413      	add	r3, r2
 80088b6:	7819      	ldrb	r1, [r3, #0]
 80088b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088ba:	69fb      	ldr	r3, [r7, #28]
 80088bc:	4413      	add	r3, r2
 80088be:	3334      	adds	r3, #52	@ 0x34
 80088c0:	460a      	mov	r2, r1
 80088c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80088c4:	68ba      	ldr	r2, [r7, #8]
 80088c6:	69fb      	ldr	r3, [r7, #28]
 80088c8:	4413      	add	r3, r2
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d006      	beq.n	80088de <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80088d0:	69fb      	ldr	r3, [r7, #28]
 80088d2:	3301      	adds	r3, #1
 80088d4:	61fb      	str	r3, [r7, #28]
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	2b0f      	cmp	r3, #15
 80088da:	d9e9      	bls.n	80088b0 <prvInitialiseNewTask+0x66>
 80088dc:	e000      	b.n	80088e0 <prvInitialiseNewTask+0x96>
			{
				break;
 80088de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80088e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e2:	2200      	movs	r2, #0
 80088e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80088e8:	e003      	b.n	80088f2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80088ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ec:	2200      	movs	r2, #0
 80088ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80088f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088f4:	2b37      	cmp	r3, #55	@ 0x37
 80088f6:	d901      	bls.n	80088fc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80088f8:	2337      	movs	r3, #55	@ 0x37
 80088fa:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80088fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008900:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008904:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008906:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800890a:	2200      	movs	r2, #0
 800890c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800890e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008910:	3304      	adds	r3, #4
 8008912:	4618      	mov	r0, r3
 8008914:	f7fe ff46 	bl	80077a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800891a:	3318      	adds	r3, #24
 800891c:	4618      	mov	r0, r3
 800891e:	f7fe ff41 	bl	80077a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008924:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008926:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800892a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800892e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008930:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008934:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008936:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800893a:	2200      	movs	r2, #0
 800893c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800893e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008940:	2200      	movs	r2, #0
 8008942:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008946:	683a      	ldr	r2, [r7, #0]
 8008948:	68f9      	ldr	r1, [r7, #12]
 800894a:	69b8      	ldr	r0, [r7, #24]
 800894c:	f001 fa3e 	bl	8009dcc <pxPortInitialiseStack>
 8008950:	4602      	mov	r2, r0
 8008952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008954:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008958:	2b00      	cmp	r3, #0
 800895a:	d002      	beq.n	8008962 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800895c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800895e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008960:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008962:	bf00      	nop
 8008964:	3720      	adds	r7, #32
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
	...

0800896c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008974:	f001 fb58 	bl	800a028 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008978:	4b2d      	ldr	r3, [pc, #180]	@ (8008a30 <prvAddNewTaskToReadyList+0xc4>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	3301      	adds	r3, #1
 800897e:	4a2c      	ldr	r2, [pc, #176]	@ (8008a30 <prvAddNewTaskToReadyList+0xc4>)
 8008980:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008982:	4b2c      	ldr	r3, [pc, #176]	@ (8008a34 <prvAddNewTaskToReadyList+0xc8>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d109      	bne.n	800899e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800898a:	4a2a      	ldr	r2, [pc, #168]	@ (8008a34 <prvAddNewTaskToReadyList+0xc8>)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008990:	4b27      	ldr	r3, [pc, #156]	@ (8008a30 <prvAddNewTaskToReadyList+0xc4>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2b01      	cmp	r3, #1
 8008996:	d110      	bne.n	80089ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008998:	f000 fc1e 	bl	80091d8 <prvInitialiseTaskLists>
 800899c:	e00d      	b.n	80089ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800899e:	4b26      	ldr	r3, [pc, #152]	@ (8008a38 <prvAddNewTaskToReadyList+0xcc>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d109      	bne.n	80089ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80089a6:	4b23      	ldr	r3, [pc, #140]	@ (8008a34 <prvAddNewTaskToReadyList+0xc8>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d802      	bhi.n	80089ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80089b4:	4a1f      	ldr	r2, [pc, #124]	@ (8008a34 <prvAddNewTaskToReadyList+0xc8>)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80089ba:	4b20      	ldr	r3, [pc, #128]	@ (8008a3c <prvAddNewTaskToReadyList+0xd0>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	3301      	adds	r3, #1
 80089c0:	4a1e      	ldr	r2, [pc, #120]	@ (8008a3c <prvAddNewTaskToReadyList+0xd0>)
 80089c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80089c4:	4b1d      	ldr	r3, [pc, #116]	@ (8008a3c <prvAddNewTaskToReadyList+0xd0>)
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089d0:	4b1b      	ldr	r3, [pc, #108]	@ (8008a40 <prvAddNewTaskToReadyList+0xd4>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d903      	bls.n	80089e0 <prvAddNewTaskToReadyList+0x74>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089dc:	4a18      	ldr	r2, [pc, #96]	@ (8008a40 <prvAddNewTaskToReadyList+0xd4>)
 80089de:	6013      	str	r3, [r2, #0]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089e4:	4613      	mov	r3, r2
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	4413      	add	r3, r2
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	4a15      	ldr	r2, [pc, #84]	@ (8008a44 <prvAddNewTaskToReadyList+0xd8>)
 80089ee:	441a      	add	r2, r3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	3304      	adds	r3, #4
 80089f4:	4619      	mov	r1, r3
 80089f6:	4610      	mov	r0, r2
 80089f8:	f7fe fee1 	bl	80077be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80089fc:	f001 fb46 	bl	800a08c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008a00:	4b0d      	ldr	r3, [pc, #52]	@ (8008a38 <prvAddNewTaskToReadyList+0xcc>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d00e      	beq.n	8008a26 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008a08:	4b0a      	ldr	r3, [pc, #40]	@ (8008a34 <prvAddNewTaskToReadyList+0xc8>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d207      	bcs.n	8008a26 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008a16:	4b0c      	ldr	r3, [pc, #48]	@ (8008a48 <prvAddNewTaskToReadyList+0xdc>)
 8008a18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a1c:	601a      	str	r2, [r3, #0]
 8008a1e:	f3bf 8f4f 	dsb	sy
 8008a22:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a26:	bf00      	nop
 8008a28:	3708      	adds	r7, #8
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
 8008a2e:	bf00      	nop
 8008a30:	20001568 	.word	0x20001568
 8008a34:	20001094 	.word	0x20001094
 8008a38:	20001574 	.word	0x20001574
 8008a3c:	20001584 	.word	0x20001584
 8008a40:	20001570 	.word	0x20001570
 8008a44:	20001098 	.word	0x20001098
 8008a48:	e000ed04 	.word	0xe000ed04

08008a4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008a54:	2300      	movs	r3, #0
 8008a56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d018      	beq.n	8008a90 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008a5e:	4b14      	ldr	r3, [pc, #80]	@ (8008ab0 <vTaskDelay+0x64>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d00b      	beq.n	8008a7e <vTaskDelay+0x32>
	__asm volatile
 8008a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a6a:	f383 8811 	msr	BASEPRI, r3
 8008a6e:	f3bf 8f6f 	isb	sy
 8008a72:	f3bf 8f4f 	dsb	sy
 8008a76:	60bb      	str	r3, [r7, #8]
}
 8008a78:	bf00      	nop
 8008a7a:	bf00      	nop
 8008a7c:	e7fd      	b.n	8008a7a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008a7e:	f000 f883 	bl	8008b88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008a82:	2100      	movs	r1, #0
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 fdf3 	bl	8009670 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008a8a:	f000 f88b 	bl	8008ba4 <xTaskResumeAll>
 8008a8e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d107      	bne.n	8008aa6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008a96:	4b07      	ldr	r3, [pc, #28]	@ (8008ab4 <vTaskDelay+0x68>)
 8008a98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a9c:	601a      	str	r2, [r3, #0]
 8008a9e:	f3bf 8f4f 	dsb	sy
 8008aa2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008aa6:	bf00      	nop
 8008aa8:	3710      	adds	r7, #16
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	20001590 	.word	0x20001590
 8008ab4:	e000ed04 	.word	0xe000ed04

08008ab8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b08a      	sub	sp, #40	@ 0x28
 8008abc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008ac6:	463a      	mov	r2, r7
 8008ac8:	1d39      	adds	r1, r7, #4
 8008aca:	f107 0308 	add.w	r3, r7, #8
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7fe fe14 	bl	80076fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008ad4:	6839      	ldr	r1, [r7, #0]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	68ba      	ldr	r2, [r7, #8]
 8008ada:	9202      	str	r2, [sp, #8]
 8008adc:	9301      	str	r3, [sp, #4]
 8008ade:	2300      	movs	r3, #0
 8008ae0:	9300      	str	r3, [sp, #0]
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	460a      	mov	r2, r1
 8008ae6:	4922      	ldr	r1, [pc, #136]	@ (8008b70 <vTaskStartScheduler+0xb8>)
 8008ae8:	4822      	ldr	r0, [pc, #136]	@ (8008b74 <vTaskStartScheduler+0xbc>)
 8008aea:	f7ff fe09 	bl	8008700 <xTaskCreateStatic>
 8008aee:	4603      	mov	r3, r0
 8008af0:	4a21      	ldr	r2, [pc, #132]	@ (8008b78 <vTaskStartScheduler+0xc0>)
 8008af2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008af4:	4b20      	ldr	r3, [pc, #128]	@ (8008b78 <vTaskStartScheduler+0xc0>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d002      	beq.n	8008b02 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008afc:	2301      	movs	r3, #1
 8008afe:	617b      	str	r3, [r7, #20]
 8008b00:	e001      	b.n	8008b06 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008b02:	2300      	movs	r3, #0
 8008b04:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d102      	bne.n	8008b12 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008b0c:	f000 fe04 	bl	8009718 <xTimerCreateTimerTask>
 8008b10:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d116      	bne.n	8008b46 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b1c:	f383 8811 	msr	BASEPRI, r3
 8008b20:	f3bf 8f6f 	isb	sy
 8008b24:	f3bf 8f4f 	dsb	sy
 8008b28:	613b      	str	r3, [r7, #16]
}
 8008b2a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008b2c:	4b13      	ldr	r3, [pc, #76]	@ (8008b7c <vTaskStartScheduler+0xc4>)
 8008b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b32:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008b34:	4b12      	ldr	r3, [pc, #72]	@ (8008b80 <vTaskStartScheduler+0xc8>)
 8008b36:	2201      	movs	r2, #1
 8008b38:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008b3a:	4b12      	ldr	r3, [pc, #72]	@ (8008b84 <vTaskStartScheduler+0xcc>)
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008b40:	f001 f9ce 	bl	8009ee0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008b44:	e00f      	b.n	8008b66 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b4c:	d10b      	bne.n	8008b66 <vTaskStartScheduler+0xae>
	__asm volatile
 8008b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b52:	f383 8811 	msr	BASEPRI, r3
 8008b56:	f3bf 8f6f 	isb	sy
 8008b5a:	f3bf 8f4f 	dsb	sy
 8008b5e:	60fb      	str	r3, [r7, #12]
}
 8008b60:	bf00      	nop
 8008b62:	bf00      	nop
 8008b64:	e7fd      	b.n	8008b62 <vTaskStartScheduler+0xaa>
}
 8008b66:	bf00      	nop
 8008b68:	3718      	adds	r7, #24
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	0800c55c 	.word	0x0800c55c
 8008b74:	080091a9 	.word	0x080091a9
 8008b78:	2000158c 	.word	0x2000158c
 8008b7c:	20001588 	.word	0x20001588
 8008b80:	20001574 	.word	0x20001574
 8008b84:	2000156c 	.word	0x2000156c

08008b88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008b88:	b480      	push	{r7}
 8008b8a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008b8c:	4b04      	ldr	r3, [pc, #16]	@ (8008ba0 <vTaskSuspendAll+0x18>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	3301      	adds	r3, #1
 8008b92:	4a03      	ldr	r2, [pc, #12]	@ (8008ba0 <vTaskSuspendAll+0x18>)
 8008b94:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008b96:	bf00      	nop
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr
 8008ba0:	20001590 	.word	0x20001590

08008ba4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008baa:	2300      	movs	r3, #0
 8008bac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008bb2:	4b42      	ldr	r3, [pc, #264]	@ (8008cbc <xTaskResumeAll+0x118>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d10b      	bne.n	8008bd2 <xTaskResumeAll+0x2e>
	__asm volatile
 8008bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bbe:	f383 8811 	msr	BASEPRI, r3
 8008bc2:	f3bf 8f6f 	isb	sy
 8008bc6:	f3bf 8f4f 	dsb	sy
 8008bca:	603b      	str	r3, [r7, #0]
}
 8008bcc:	bf00      	nop
 8008bce:	bf00      	nop
 8008bd0:	e7fd      	b.n	8008bce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008bd2:	f001 fa29 	bl	800a028 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008bd6:	4b39      	ldr	r3, [pc, #228]	@ (8008cbc <xTaskResumeAll+0x118>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	3b01      	subs	r3, #1
 8008bdc:	4a37      	ldr	r2, [pc, #220]	@ (8008cbc <xTaskResumeAll+0x118>)
 8008bde:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008be0:	4b36      	ldr	r3, [pc, #216]	@ (8008cbc <xTaskResumeAll+0x118>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d162      	bne.n	8008cae <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008be8:	4b35      	ldr	r3, [pc, #212]	@ (8008cc0 <xTaskResumeAll+0x11c>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d05e      	beq.n	8008cae <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008bf0:	e02f      	b.n	8008c52 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bf2:	4b34      	ldr	r3, [pc, #208]	@ (8008cc4 <xTaskResumeAll+0x120>)
 8008bf4:	68db      	ldr	r3, [r3, #12]
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	3318      	adds	r3, #24
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7fe fe3a 	bl	8007878 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	3304      	adds	r3, #4
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f7fe fe35 	bl	8007878 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c12:	4b2d      	ldr	r3, [pc, #180]	@ (8008cc8 <xTaskResumeAll+0x124>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d903      	bls.n	8008c22 <xTaskResumeAll+0x7e>
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c1e:	4a2a      	ldr	r2, [pc, #168]	@ (8008cc8 <xTaskResumeAll+0x124>)
 8008c20:	6013      	str	r3, [r2, #0]
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c26:	4613      	mov	r3, r2
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	4413      	add	r3, r2
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	4a27      	ldr	r2, [pc, #156]	@ (8008ccc <xTaskResumeAll+0x128>)
 8008c30:	441a      	add	r2, r3
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	3304      	adds	r3, #4
 8008c36:	4619      	mov	r1, r3
 8008c38:	4610      	mov	r0, r2
 8008c3a:	f7fe fdc0 	bl	80077be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c42:	4b23      	ldr	r3, [pc, #140]	@ (8008cd0 <xTaskResumeAll+0x12c>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d302      	bcc.n	8008c52 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008c4c:	4b21      	ldr	r3, [pc, #132]	@ (8008cd4 <xTaskResumeAll+0x130>)
 8008c4e:	2201      	movs	r2, #1
 8008c50:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c52:	4b1c      	ldr	r3, [pc, #112]	@ (8008cc4 <xTaskResumeAll+0x120>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d1cb      	bne.n	8008bf2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d001      	beq.n	8008c64 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008c60:	f000 fb58 	bl	8009314 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008c64:	4b1c      	ldr	r3, [pc, #112]	@ (8008cd8 <xTaskResumeAll+0x134>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d010      	beq.n	8008c92 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008c70:	f000 f846 	bl	8008d00 <xTaskIncrementTick>
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d002      	beq.n	8008c80 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008c7a:	4b16      	ldr	r3, [pc, #88]	@ (8008cd4 <xTaskResumeAll+0x130>)
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	3b01      	subs	r3, #1
 8008c84:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d1f1      	bne.n	8008c70 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008c8c:	4b12      	ldr	r3, [pc, #72]	@ (8008cd8 <xTaskResumeAll+0x134>)
 8008c8e:	2200      	movs	r2, #0
 8008c90:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008c92:	4b10      	ldr	r3, [pc, #64]	@ (8008cd4 <xTaskResumeAll+0x130>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d009      	beq.n	8008cae <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8008cdc <xTaskResumeAll+0x138>)
 8008ca0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ca4:	601a      	str	r2, [r3, #0]
 8008ca6:	f3bf 8f4f 	dsb	sy
 8008caa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008cae:	f001 f9ed 	bl	800a08c <vPortExitCritical>

	return xAlreadyYielded;
 8008cb2:	68bb      	ldr	r3, [r7, #8]
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3710      	adds	r7, #16
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	20001590 	.word	0x20001590
 8008cc0:	20001568 	.word	0x20001568
 8008cc4:	20001528 	.word	0x20001528
 8008cc8:	20001570 	.word	0x20001570
 8008ccc:	20001098 	.word	0x20001098
 8008cd0:	20001094 	.word	0x20001094
 8008cd4:	2000157c 	.word	0x2000157c
 8008cd8:	20001578 	.word	0x20001578
 8008cdc:	e000ed04 	.word	0xe000ed04

08008ce0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b083      	sub	sp, #12
 8008ce4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008ce6:	4b05      	ldr	r3, [pc, #20]	@ (8008cfc <xTaskGetTickCount+0x1c>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008cec:	687b      	ldr	r3, [r7, #4]
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	370c      	adds	r7, #12
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr
 8008cfa:	bf00      	nop
 8008cfc:	2000156c 	.word	0x2000156c

08008d00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b086      	sub	sp, #24
 8008d04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008d06:	2300      	movs	r3, #0
 8008d08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d0a:	4b4f      	ldr	r3, [pc, #316]	@ (8008e48 <xTaskIncrementTick+0x148>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	f040 8090 	bne.w	8008e34 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008d14:	4b4d      	ldr	r3, [pc, #308]	@ (8008e4c <xTaskIncrementTick+0x14c>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008d1c:	4a4b      	ldr	r2, [pc, #300]	@ (8008e4c <xTaskIncrementTick+0x14c>)
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d121      	bne.n	8008d6c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008d28:	4b49      	ldr	r3, [pc, #292]	@ (8008e50 <xTaskIncrementTick+0x150>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d00b      	beq.n	8008d4a <xTaskIncrementTick+0x4a>
	__asm volatile
 8008d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d36:	f383 8811 	msr	BASEPRI, r3
 8008d3a:	f3bf 8f6f 	isb	sy
 8008d3e:	f3bf 8f4f 	dsb	sy
 8008d42:	603b      	str	r3, [r7, #0]
}
 8008d44:	bf00      	nop
 8008d46:	bf00      	nop
 8008d48:	e7fd      	b.n	8008d46 <xTaskIncrementTick+0x46>
 8008d4a:	4b41      	ldr	r3, [pc, #260]	@ (8008e50 <xTaskIncrementTick+0x150>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	60fb      	str	r3, [r7, #12]
 8008d50:	4b40      	ldr	r3, [pc, #256]	@ (8008e54 <xTaskIncrementTick+0x154>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a3e      	ldr	r2, [pc, #248]	@ (8008e50 <xTaskIncrementTick+0x150>)
 8008d56:	6013      	str	r3, [r2, #0]
 8008d58:	4a3e      	ldr	r2, [pc, #248]	@ (8008e54 <xTaskIncrementTick+0x154>)
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	6013      	str	r3, [r2, #0]
 8008d5e:	4b3e      	ldr	r3, [pc, #248]	@ (8008e58 <xTaskIncrementTick+0x158>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	3301      	adds	r3, #1
 8008d64:	4a3c      	ldr	r2, [pc, #240]	@ (8008e58 <xTaskIncrementTick+0x158>)
 8008d66:	6013      	str	r3, [r2, #0]
 8008d68:	f000 fad4 	bl	8009314 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008d6c:	4b3b      	ldr	r3, [pc, #236]	@ (8008e5c <xTaskIncrementTick+0x15c>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	693a      	ldr	r2, [r7, #16]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d349      	bcc.n	8008e0a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d76:	4b36      	ldr	r3, [pc, #216]	@ (8008e50 <xTaskIncrementTick+0x150>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d104      	bne.n	8008d8a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d80:	4b36      	ldr	r3, [pc, #216]	@ (8008e5c <xTaskIncrementTick+0x15c>)
 8008d82:	f04f 32ff 	mov.w	r2, #4294967295
 8008d86:	601a      	str	r2, [r3, #0]
					break;
 8008d88:	e03f      	b.n	8008e0a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d8a:	4b31      	ldr	r3, [pc, #196]	@ (8008e50 <xTaskIncrementTick+0x150>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008d9a:	693a      	ldr	r2, [r7, #16]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d203      	bcs.n	8008daa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008da2:	4a2e      	ldr	r2, [pc, #184]	@ (8008e5c <xTaskIncrementTick+0x15c>)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008da8:	e02f      	b.n	8008e0a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	3304      	adds	r3, #4
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7fe fd62 	bl	8007878 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d004      	beq.n	8008dc6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	3318      	adds	r3, #24
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f7fe fd59 	bl	8007878 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dca:	4b25      	ldr	r3, [pc, #148]	@ (8008e60 <xTaskIncrementTick+0x160>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d903      	bls.n	8008dda <xTaskIncrementTick+0xda>
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dd6:	4a22      	ldr	r2, [pc, #136]	@ (8008e60 <xTaskIncrementTick+0x160>)
 8008dd8:	6013      	str	r3, [r2, #0]
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dde:	4613      	mov	r3, r2
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	4413      	add	r3, r2
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	4a1f      	ldr	r2, [pc, #124]	@ (8008e64 <xTaskIncrementTick+0x164>)
 8008de8:	441a      	add	r2, r3
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	3304      	adds	r3, #4
 8008dee:	4619      	mov	r1, r3
 8008df0:	4610      	mov	r0, r2
 8008df2:	f7fe fce4 	bl	80077be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8008e68 <xTaskIncrementTick+0x168>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d3b8      	bcc.n	8008d76 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008e04:	2301      	movs	r3, #1
 8008e06:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e08:	e7b5      	b.n	8008d76 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008e0a:	4b17      	ldr	r3, [pc, #92]	@ (8008e68 <xTaskIncrementTick+0x168>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e10:	4914      	ldr	r1, [pc, #80]	@ (8008e64 <xTaskIncrementTick+0x164>)
 8008e12:	4613      	mov	r3, r2
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	4413      	add	r3, r2
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	440b      	add	r3, r1
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d901      	bls.n	8008e26 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008e22:	2301      	movs	r3, #1
 8008e24:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008e26:	4b11      	ldr	r3, [pc, #68]	@ (8008e6c <xTaskIncrementTick+0x16c>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d007      	beq.n	8008e3e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	617b      	str	r3, [r7, #20]
 8008e32:	e004      	b.n	8008e3e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008e34:	4b0e      	ldr	r3, [pc, #56]	@ (8008e70 <xTaskIncrementTick+0x170>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	3301      	adds	r3, #1
 8008e3a:	4a0d      	ldr	r2, [pc, #52]	@ (8008e70 <xTaskIncrementTick+0x170>)
 8008e3c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008e3e:	697b      	ldr	r3, [r7, #20]
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3718      	adds	r7, #24
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}
 8008e48:	20001590 	.word	0x20001590
 8008e4c:	2000156c 	.word	0x2000156c
 8008e50:	20001520 	.word	0x20001520
 8008e54:	20001524 	.word	0x20001524
 8008e58:	20001580 	.word	0x20001580
 8008e5c:	20001588 	.word	0x20001588
 8008e60:	20001570 	.word	0x20001570
 8008e64:	20001098 	.word	0x20001098
 8008e68:	20001094 	.word	0x20001094
 8008e6c:	2000157c 	.word	0x2000157c
 8008e70:	20001578 	.word	0x20001578

08008e74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008e74:	b480      	push	{r7}
 8008e76:	b085      	sub	sp, #20
 8008e78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008e7a:	4b28      	ldr	r3, [pc, #160]	@ (8008f1c <vTaskSwitchContext+0xa8>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d003      	beq.n	8008e8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008e82:	4b27      	ldr	r3, [pc, #156]	@ (8008f20 <vTaskSwitchContext+0xac>)
 8008e84:	2201      	movs	r2, #1
 8008e86:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008e88:	e042      	b.n	8008f10 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008e8a:	4b25      	ldr	r3, [pc, #148]	@ (8008f20 <vTaskSwitchContext+0xac>)
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e90:	4b24      	ldr	r3, [pc, #144]	@ (8008f24 <vTaskSwitchContext+0xb0>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	60fb      	str	r3, [r7, #12]
 8008e96:	e011      	b.n	8008ebc <vTaskSwitchContext+0x48>
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d10b      	bne.n	8008eb6 <vTaskSwitchContext+0x42>
	__asm volatile
 8008e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ea2:	f383 8811 	msr	BASEPRI, r3
 8008ea6:	f3bf 8f6f 	isb	sy
 8008eaa:	f3bf 8f4f 	dsb	sy
 8008eae:	607b      	str	r3, [r7, #4]
}
 8008eb0:	bf00      	nop
 8008eb2:	bf00      	nop
 8008eb4:	e7fd      	b.n	8008eb2 <vTaskSwitchContext+0x3e>
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	3b01      	subs	r3, #1
 8008eba:	60fb      	str	r3, [r7, #12]
 8008ebc:	491a      	ldr	r1, [pc, #104]	@ (8008f28 <vTaskSwitchContext+0xb4>)
 8008ebe:	68fa      	ldr	r2, [r7, #12]
 8008ec0:	4613      	mov	r3, r2
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	4413      	add	r3, r2
 8008ec6:	009b      	lsls	r3, r3, #2
 8008ec8:	440b      	add	r3, r1
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d0e3      	beq.n	8008e98 <vTaskSwitchContext+0x24>
 8008ed0:	68fa      	ldr	r2, [r7, #12]
 8008ed2:	4613      	mov	r3, r2
 8008ed4:	009b      	lsls	r3, r3, #2
 8008ed6:	4413      	add	r3, r2
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	4a13      	ldr	r2, [pc, #76]	@ (8008f28 <vTaskSwitchContext+0xb4>)
 8008edc:	4413      	add	r3, r2
 8008ede:	60bb      	str	r3, [r7, #8]
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	685a      	ldr	r2, [r3, #4]
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	605a      	str	r2, [r3, #4]
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	685a      	ldr	r2, [r3, #4]
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	3308      	adds	r3, #8
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d104      	bne.n	8008f00 <vTaskSwitchContext+0x8c>
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	685a      	ldr	r2, [r3, #4]
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	605a      	str	r2, [r3, #4]
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	68db      	ldr	r3, [r3, #12]
 8008f06:	4a09      	ldr	r2, [pc, #36]	@ (8008f2c <vTaskSwitchContext+0xb8>)
 8008f08:	6013      	str	r3, [r2, #0]
 8008f0a:	4a06      	ldr	r2, [pc, #24]	@ (8008f24 <vTaskSwitchContext+0xb0>)
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	6013      	str	r3, [r2, #0]
}
 8008f10:	bf00      	nop
 8008f12:	3714      	adds	r7, #20
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr
 8008f1c:	20001590 	.word	0x20001590
 8008f20:	2000157c 	.word	0x2000157c
 8008f24:	20001570 	.word	0x20001570
 8008f28:	20001098 	.word	0x20001098
 8008f2c:	20001094 	.word	0x20001094

08008f30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d10b      	bne.n	8008f58 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f44:	f383 8811 	msr	BASEPRI, r3
 8008f48:	f3bf 8f6f 	isb	sy
 8008f4c:	f3bf 8f4f 	dsb	sy
 8008f50:	60fb      	str	r3, [r7, #12]
}
 8008f52:	bf00      	nop
 8008f54:	bf00      	nop
 8008f56:	e7fd      	b.n	8008f54 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f58:	4b07      	ldr	r3, [pc, #28]	@ (8008f78 <vTaskPlaceOnEventList+0x48>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	3318      	adds	r3, #24
 8008f5e:	4619      	mov	r1, r3
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f7fe fc50 	bl	8007806 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008f66:	2101      	movs	r1, #1
 8008f68:	6838      	ldr	r0, [r7, #0]
 8008f6a:	f000 fb81 	bl	8009670 <prvAddCurrentTaskToDelayedList>
}
 8008f6e:	bf00      	nop
 8008f70:	3710      	adds	r7, #16
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	20001094 	.word	0x20001094

08008f7c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b086      	sub	sp, #24
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d10b      	bne.n	8008fa6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f92:	f383 8811 	msr	BASEPRI, r3
 8008f96:	f3bf 8f6f 	isb	sy
 8008f9a:	f3bf 8f4f 	dsb	sy
 8008f9e:	617b      	str	r3, [r7, #20]
}
 8008fa0:	bf00      	nop
 8008fa2:	bf00      	nop
 8008fa4:	e7fd      	b.n	8008fa2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8008fd0 <vTaskPlaceOnEventListRestricted+0x54>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	3318      	adds	r3, #24
 8008fac:	4619      	mov	r1, r3
 8008fae:	68f8      	ldr	r0, [r7, #12]
 8008fb0:	f7fe fc05 	bl	80077be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d002      	beq.n	8008fc0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008fba:	f04f 33ff 	mov.w	r3, #4294967295
 8008fbe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008fc0:	6879      	ldr	r1, [r7, #4]
 8008fc2:	68b8      	ldr	r0, [r7, #8]
 8008fc4:	f000 fb54 	bl	8009670 <prvAddCurrentTaskToDelayedList>
	}
 8008fc8:	bf00      	nop
 8008fca:	3718      	adds	r7, #24
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}
 8008fd0:	20001094 	.word	0x20001094

08008fd4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b086      	sub	sp, #24
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	68db      	ldr	r3, [r3, #12]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d10b      	bne.n	8009002 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fee:	f383 8811 	msr	BASEPRI, r3
 8008ff2:	f3bf 8f6f 	isb	sy
 8008ff6:	f3bf 8f4f 	dsb	sy
 8008ffa:	60fb      	str	r3, [r7, #12]
}
 8008ffc:	bf00      	nop
 8008ffe:	bf00      	nop
 8009000:	e7fd      	b.n	8008ffe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	3318      	adds	r3, #24
 8009006:	4618      	mov	r0, r3
 8009008:	f7fe fc36 	bl	8007878 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800900c:	4b1d      	ldr	r3, [pc, #116]	@ (8009084 <xTaskRemoveFromEventList+0xb0>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d11d      	bne.n	8009050 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	3304      	adds	r3, #4
 8009018:	4618      	mov	r0, r3
 800901a:	f7fe fc2d 	bl	8007878 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009022:	4b19      	ldr	r3, [pc, #100]	@ (8009088 <xTaskRemoveFromEventList+0xb4>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	429a      	cmp	r2, r3
 8009028:	d903      	bls.n	8009032 <xTaskRemoveFromEventList+0x5e>
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800902e:	4a16      	ldr	r2, [pc, #88]	@ (8009088 <xTaskRemoveFromEventList+0xb4>)
 8009030:	6013      	str	r3, [r2, #0]
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009036:	4613      	mov	r3, r2
 8009038:	009b      	lsls	r3, r3, #2
 800903a:	4413      	add	r3, r2
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	4a13      	ldr	r2, [pc, #76]	@ (800908c <xTaskRemoveFromEventList+0xb8>)
 8009040:	441a      	add	r2, r3
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	3304      	adds	r3, #4
 8009046:	4619      	mov	r1, r3
 8009048:	4610      	mov	r0, r2
 800904a:	f7fe fbb8 	bl	80077be <vListInsertEnd>
 800904e:	e005      	b.n	800905c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	3318      	adds	r3, #24
 8009054:	4619      	mov	r1, r3
 8009056:	480e      	ldr	r0, [pc, #56]	@ (8009090 <xTaskRemoveFromEventList+0xbc>)
 8009058:	f7fe fbb1 	bl	80077be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009060:	4b0c      	ldr	r3, [pc, #48]	@ (8009094 <xTaskRemoveFromEventList+0xc0>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009066:	429a      	cmp	r2, r3
 8009068:	d905      	bls.n	8009076 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800906a:	2301      	movs	r3, #1
 800906c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800906e:	4b0a      	ldr	r3, [pc, #40]	@ (8009098 <xTaskRemoveFromEventList+0xc4>)
 8009070:	2201      	movs	r2, #1
 8009072:	601a      	str	r2, [r3, #0]
 8009074:	e001      	b.n	800907a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009076:	2300      	movs	r3, #0
 8009078:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800907a:	697b      	ldr	r3, [r7, #20]
}
 800907c:	4618      	mov	r0, r3
 800907e:	3718      	adds	r7, #24
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}
 8009084:	20001590 	.word	0x20001590
 8009088:	20001570 	.word	0x20001570
 800908c:	20001098 	.word	0x20001098
 8009090:	20001528 	.word	0x20001528
 8009094:	20001094 	.word	0x20001094
 8009098:	2000157c 	.word	0x2000157c

0800909c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800909c:	b480      	push	{r7}
 800909e:	b083      	sub	sp, #12
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80090a4:	4b06      	ldr	r3, [pc, #24]	@ (80090c0 <vTaskInternalSetTimeOutState+0x24>)
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80090ac:	4b05      	ldr	r3, [pc, #20]	@ (80090c4 <vTaskInternalSetTimeOutState+0x28>)
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	605a      	str	r2, [r3, #4]
}
 80090b4:	bf00      	nop
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr
 80090c0:	20001580 	.word	0x20001580
 80090c4:	2000156c 	.word	0x2000156c

080090c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b088      	sub	sp, #32
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d10b      	bne.n	80090f0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80090d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090dc:	f383 8811 	msr	BASEPRI, r3
 80090e0:	f3bf 8f6f 	isb	sy
 80090e4:	f3bf 8f4f 	dsb	sy
 80090e8:	613b      	str	r3, [r7, #16]
}
 80090ea:	bf00      	nop
 80090ec:	bf00      	nop
 80090ee:	e7fd      	b.n	80090ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d10b      	bne.n	800910e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80090f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090fa:	f383 8811 	msr	BASEPRI, r3
 80090fe:	f3bf 8f6f 	isb	sy
 8009102:	f3bf 8f4f 	dsb	sy
 8009106:	60fb      	str	r3, [r7, #12]
}
 8009108:	bf00      	nop
 800910a:	bf00      	nop
 800910c:	e7fd      	b.n	800910a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800910e:	f000 ff8b 	bl	800a028 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009112:	4b1d      	ldr	r3, [pc, #116]	@ (8009188 <xTaskCheckForTimeOut+0xc0>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	69ba      	ldr	r2, [r7, #24]
 800911e:	1ad3      	subs	r3, r2, r3
 8009120:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800912a:	d102      	bne.n	8009132 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800912c:	2300      	movs	r3, #0
 800912e:	61fb      	str	r3, [r7, #28]
 8009130:	e023      	b.n	800917a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	4b15      	ldr	r3, [pc, #84]	@ (800918c <xTaskCheckForTimeOut+0xc4>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	429a      	cmp	r2, r3
 800913c:	d007      	beq.n	800914e <xTaskCheckForTimeOut+0x86>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	69ba      	ldr	r2, [r7, #24]
 8009144:	429a      	cmp	r2, r3
 8009146:	d302      	bcc.n	800914e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009148:	2301      	movs	r3, #1
 800914a:	61fb      	str	r3, [r7, #28]
 800914c:	e015      	b.n	800917a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	697a      	ldr	r2, [r7, #20]
 8009154:	429a      	cmp	r2, r3
 8009156:	d20b      	bcs.n	8009170 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	1ad2      	subs	r2, r2, r3
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f7ff ff99 	bl	800909c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800916a:	2300      	movs	r3, #0
 800916c:	61fb      	str	r3, [r7, #28]
 800916e:	e004      	b.n	800917a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	2200      	movs	r2, #0
 8009174:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009176:	2301      	movs	r3, #1
 8009178:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800917a:	f000 ff87 	bl	800a08c <vPortExitCritical>

	return xReturn;
 800917e:	69fb      	ldr	r3, [r7, #28]
}
 8009180:	4618      	mov	r0, r3
 8009182:	3720      	adds	r7, #32
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}
 8009188:	2000156c 	.word	0x2000156c
 800918c:	20001580 	.word	0x20001580

08009190 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009190:	b480      	push	{r7}
 8009192:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009194:	4b03      	ldr	r3, [pc, #12]	@ (80091a4 <vTaskMissedYield+0x14>)
 8009196:	2201      	movs	r2, #1
 8009198:	601a      	str	r2, [r3, #0]
}
 800919a:	bf00      	nop
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr
 80091a4:	2000157c 	.word	0x2000157c

080091a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80091b0:	f000 f852 	bl	8009258 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80091b4:	4b06      	ldr	r3, [pc, #24]	@ (80091d0 <prvIdleTask+0x28>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d9f9      	bls.n	80091b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80091bc:	4b05      	ldr	r3, [pc, #20]	@ (80091d4 <prvIdleTask+0x2c>)
 80091be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091c2:	601a      	str	r2, [r3, #0]
 80091c4:	f3bf 8f4f 	dsb	sy
 80091c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80091cc:	e7f0      	b.n	80091b0 <prvIdleTask+0x8>
 80091ce:	bf00      	nop
 80091d0:	20001098 	.word	0x20001098
 80091d4:	e000ed04 	.word	0xe000ed04

080091d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80091de:	2300      	movs	r3, #0
 80091e0:	607b      	str	r3, [r7, #4]
 80091e2:	e00c      	b.n	80091fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	4613      	mov	r3, r2
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	4413      	add	r3, r2
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	4a12      	ldr	r2, [pc, #72]	@ (8009238 <prvInitialiseTaskLists+0x60>)
 80091f0:	4413      	add	r3, r2
 80091f2:	4618      	mov	r0, r3
 80091f4:	f7fe fab6 	bl	8007764 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	3301      	adds	r3, #1
 80091fc:	607b      	str	r3, [r7, #4]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2b37      	cmp	r3, #55	@ 0x37
 8009202:	d9ef      	bls.n	80091e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009204:	480d      	ldr	r0, [pc, #52]	@ (800923c <prvInitialiseTaskLists+0x64>)
 8009206:	f7fe faad 	bl	8007764 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800920a:	480d      	ldr	r0, [pc, #52]	@ (8009240 <prvInitialiseTaskLists+0x68>)
 800920c:	f7fe faaa 	bl	8007764 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009210:	480c      	ldr	r0, [pc, #48]	@ (8009244 <prvInitialiseTaskLists+0x6c>)
 8009212:	f7fe faa7 	bl	8007764 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009216:	480c      	ldr	r0, [pc, #48]	@ (8009248 <prvInitialiseTaskLists+0x70>)
 8009218:	f7fe faa4 	bl	8007764 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800921c:	480b      	ldr	r0, [pc, #44]	@ (800924c <prvInitialiseTaskLists+0x74>)
 800921e:	f7fe faa1 	bl	8007764 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009222:	4b0b      	ldr	r3, [pc, #44]	@ (8009250 <prvInitialiseTaskLists+0x78>)
 8009224:	4a05      	ldr	r2, [pc, #20]	@ (800923c <prvInitialiseTaskLists+0x64>)
 8009226:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009228:	4b0a      	ldr	r3, [pc, #40]	@ (8009254 <prvInitialiseTaskLists+0x7c>)
 800922a:	4a05      	ldr	r2, [pc, #20]	@ (8009240 <prvInitialiseTaskLists+0x68>)
 800922c:	601a      	str	r2, [r3, #0]
}
 800922e:	bf00      	nop
 8009230:	3708      	adds	r7, #8
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	20001098 	.word	0x20001098
 800923c:	200014f8 	.word	0x200014f8
 8009240:	2000150c 	.word	0x2000150c
 8009244:	20001528 	.word	0x20001528
 8009248:	2000153c 	.word	0x2000153c
 800924c:	20001554 	.word	0x20001554
 8009250:	20001520 	.word	0x20001520
 8009254:	20001524 	.word	0x20001524

08009258 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800925e:	e019      	b.n	8009294 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009260:	f000 fee2 	bl	800a028 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009264:	4b10      	ldr	r3, [pc, #64]	@ (80092a8 <prvCheckTasksWaitingTermination+0x50>)
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	3304      	adds	r3, #4
 8009270:	4618      	mov	r0, r3
 8009272:	f7fe fb01 	bl	8007878 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009276:	4b0d      	ldr	r3, [pc, #52]	@ (80092ac <prvCheckTasksWaitingTermination+0x54>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	3b01      	subs	r3, #1
 800927c:	4a0b      	ldr	r2, [pc, #44]	@ (80092ac <prvCheckTasksWaitingTermination+0x54>)
 800927e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009280:	4b0b      	ldr	r3, [pc, #44]	@ (80092b0 <prvCheckTasksWaitingTermination+0x58>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	3b01      	subs	r3, #1
 8009286:	4a0a      	ldr	r2, [pc, #40]	@ (80092b0 <prvCheckTasksWaitingTermination+0x58>)
 8009288:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800928a:	f000 feff 	bl	800a08c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 f810 	bl	80092b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009294:	4b06      	ldr	r3, [pc, #24]	@ (80092b0 <prvCheckTasksWaitingTermination+0x58>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d1e1      	bne.n	8009260 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800929c:	bf00      	nop
 800929e:	bf00      	nop
 80092a0:	3708      	adds	r7, #8
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	2000153c 	.word	0x2000153c
 80092ac:	20001568 	.word	0x20001568
 80092b0:	20001550 	.word	0x20001550

080092b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b084      	sub	sp, #16
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d108      	bne.n	80092d8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092ca:	4618      	mov	r0, r3
 80092cc:	f001 f89c 	bl	800a408 <vPortFree>
				vPortFree( pxTCB );
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f001 f899 	bl	800a408 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80092d6:	e019      	b.n	800930c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d103      	bne.n	80092ea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f001 f890 	bl	800a408 <vPortFree>
	}
 80092e8:	e010      	b.n	800930c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80092f0:	2b02      	cmp	r3, #2
 80092f2:	d00b      	beq.n	800930c <prvDeleteTCB+0x58>
	__asm volatile
 80092f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092f8:	f383 8811 	msr	BASEPRI, r3
 80092fc:	f3bf 8f6f 	isb	sy
 8009300:	f3bf 8f4f 	dsb	sy
 8009304:	60fb      	str	r3, [r7, #12]
}
 8009306:	bf00      	nop
 8009308:	bf00      	nop
 800930a:	e7fd      	b.n	8009308 <prvDeleteTCB+0x54>
	}
 800930c:	bf00      	nop
 800930e:	3710      	adds	r7, #16
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009314:	b480      	push	{r7}
 8009316:	b083      	sub	sp, #12
 8009318:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800931a:	4b0c      	ldr	r3, [pc, #48]	@ (800934c <prvResetNextTaskUnblockTime+0x38>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d104      	bne.n	800932e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009324:	4b0a      	ldr	r3, [pc, #40]	@ (8009350 <prvResetNextTaskUnblockTime+0x3c>)
 8009326:	f04f 32ff 	mov.w	r2, #4294967295
 800932a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800932c:	e008      	b.n	8009340 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800932e:	4b07      	ldr	r3, [pc, #28]	@ (800934c <prvResetNextTaskUnblockTime+0x38>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	68db      	ldr	r3, [r3, #12]
 8009334:	68db      	ldr	r3, [r3, #12]
 8009336:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	4a04      	ldr	r2, [pc, #16]	@ (8009350 <prvResetNextTaskUnblockTime+0x3c>)
 800933e:	6013      	str	r3, [r2, #0]
}
 8009340:	bf00      	nop
 8009342:	370c      	adds	r7, #12
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr
 800934c:	20001520 	.word	0x20001520
 8009350:	20001588 	.word	0x20001588

08009354 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800935a:	4b0b      	ldr	r3, [pc, #44]	@ (8009388 <xTaskGetSchedulerState+0x34>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d102      	bne.n	8009368 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009362:	2301      	movs	r3, #1
 8009364:	607b      	str	r3, [r7, #4]
 8009366:	e008      	b.n	800937a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009368:	4b08      	ldr	r3, [pc, #32]	@ (800938c <xTaskGetSchedulerState+0x38>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d102      	bne.n	8009376 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009370:	2302      	movs	r3, #2
 8009372:	607b      	str	r3, [r7, #4]
 8009374:	e001      	b.n	800937a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009376:	2300      	movs	r3, #0
 8009378:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800937a:	687b      	ldr	r3, [r7, #4]
	}
 800937c:	4618      	mov	r0, r3
 800937e:	370c      	adds	r7, #12
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr
 8009388:	20001574 	.word	0x20001574
 800938c:	20001590 	.word	0x20001590

08009390 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800939c:	2300      	movs	r3, #0
 800939e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d051      	beq.n	800944a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093aa:	4b2a      	ldr	r3, [pc, #168]	@ (8009454 <xTaskPriorityInherit+0xc4>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d241      	bcs.n	8009438 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	699b      	ldr	r3, [r3, #24]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	db06      	blt.n	80093ca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093bc:	4b25      	ldr	r3, [pc, #148]	@ (8009454 <xTaskPriorityInherit+0xc4>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093c2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	6959      	ldr	r1, [r3, #20]
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093d2:	4613      	mov	r3, r2
 80093d4:	009b      	lsls	r3, r3, #2
 80093d6:	4413      	add	r3, r2
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	4a1f      	ldr	r2, [pc, #124]	@ (8009458 <xTaskPriorityInherit+0xc8>)
 80093dc:	4413      	add	r3, r2
 80093de:	4299      	cmp	r1, r3
 80093e0:	d122      	bne.n	8009428 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	3304      	adds	r3, #4
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7fe fa46 	bl	8007878 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80093ec:	4b19      	ldr	r3, [pc, #100]	@ (8009454 <xTaskPriorityInherit+0xc4>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093fa:	4b18      	ldr	r3, [pc, #96]	@ (800945c <xTaskPriorityInherit+0xcc>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d903      	bls.n	800940a <xTaskPriorityInherit+0x7a>
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009406:	4a15      	ldr	r2, [pc, #84]	@ (800945c <xTaskPriorityInherit+0xcc>)
 8009408:	6013      	str	r3, [r2, #0]
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800940e:	4613      	mov	r3, r2
 8009410:	009b      	lsls	r3, r3, #2
 8009412:	4413      	add	r3, r2
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	4a10      	ldr	r2, [pc, #64]	@ (8009458 <xTaskPriorityInherit+0xc8>)
 8009418:	441a      	add	r2, r3
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	3304      	adds	r3, #4
 800941e:	4619      	mov	r1, r3
 8009420:	4610      	mov	r0, r2
 8009422:	f7fe f9cc 	bl	80077be <vListInsertEnd>
 8009426:	e004      	b.n	8009432 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009428:	4b0a      	ldr	r3, [pc, #40]	@ (8009454 <xTaskPriorityInherit+0xc4>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009432:	2301      	movs	r3, #1
 8009434:	60fb      	str	r3, [r7, #12]
 8009436:	e008      	b.n	800944a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800943c:	4b05      	ldr	r3, [pc, #20]	@ (8009454 <xTaskPriorityInherit+0xc4>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009442:	429a      	cmp	r2, r3
 8009444:	d201      	bcs.n	800944a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009446:	2301      	movs	r3, #1
 8009448:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800944a:	68fb      	ldr	r3, [r7, #12]
	}
 800944c:	4618      	mov	r0, r3
 800944e:	3710      	adds	r7, #16
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}
 8009454:	20001094 	.word	0x20001094
 8009458:	20001098 	.word	0x20001098
 800945c:	20001570 	.word	0x20001570

08009460 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009460:	b580      	push	{r7, lr}
 8009462:	b086      	sub	sp, #24
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800946c:	2300      	movs	r3, #0
 800946e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d058      	beq.n	8009528 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009476:	4b2f      	ldr	r3, [pc, #188]	@ (8009534 <xTaskPriorityDisinherit+0xd4>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	693a      	ldr	r2, [r7, #16]
 800947c:	429a      	cmp	r2, r3
 800947e:	d00b      	beq.n	8009498 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009484:	f383 8811 	msr	BASEPRI, r3
 8009488:	f3bf 8f6f 	isb	sy
 800948c:	f3bf 8f4f 	dsb	sy
 8009490:	60fb      	str	r3, [r7, #12]
}
 8009492:	bf00      	nop
 8009494:	bf00      	nop
 8009496:	e7fd      	b.n	8009494 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800949c:	2b00      	cmp	r3, #0
 800949e:	d10b      	bne.n	80094b8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80094a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094a4:	f383 8811 	msr	BASEPRI, r3
 80094a8:	f3bf 8f6f 	isb	sy
 80094ac:	f3bf 8f4f 	dsb	sy
 80094b0:	60bb      	str	r3, [r7, #8]
}
 80094b2:	bf00      	nop
 80094b4:	bf00      	nop
 80094b6:	e7fd      	b.n	80094b4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094bc:	1e5a      	subs	r2, r3, #1
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d02c      	beq.n	8009528 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d128      	bne.n	8009528 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	3304      	adds	r3, #4
 80094da:	4618      	mov	r0, r3
 80094dc:	f7fe f9cc 	bl	8007878 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094f8:	4b0f      	ldr	r3, [pc, #60]	@ (8009538 <xTaskPriorityDisinherit+0xd8>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d903      	bls.n	8009508 <xTaskPriorityDisinherit+0xa8>
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009504:	4a0c      	ldr	r2, [pc, #48]	@ (8009538 <xTaskPriorityDisinherit+0xd8>)
 8009506:	6013      	str	r3, [r2, #0]
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800950c:	4613      	mov	r3, r2
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	4413      	add	r3, r2
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	4a09      	ldr	r2, [pc, #36]	@ (800953c <xTaskPriorityDisinherit+0xdc>)
 8009516:	441a      	add	r2, r3
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	3304      	adds	r3, #4
 800951c:	4619      	mov	r1, r3
 800951e:	4610      	mov	r0, r2
 8009520:	f7fe f94d 	bl	80077be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009524:	2301      	movs	r3, #1
 8009526:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009528:	697b      	ldr	r3, [r7, #20]
	}
 800952a:	4618      	mov	r0, r3
 800952c:	3718      	adds	r7, #24
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
 8009532:	bf00      	nop
 8009534:	20001094 	.word	0x20001094
 8009538:	20001570 	.word	0x20001570
 800953c:	20001098 	.word	0x20001098

08009540 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009540:	b580      	push	{r7, lr}
 8009542:	b088      	sub	sp, #32
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800954e:	2301      	movs	r3, #1
 8009550:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d06c      	beq.n	8009632 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800955c:	2b00      	cmp	r3, #0
 800955e:	d10b      	bne.n	8009578 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009564:	f383 8811 	msr	BASEPRI, r3
 8009568:	f3bf 8f6f 	isb	sy
 800956c:	f3bf 8f4f 	dsb	sy
 8009570:	60fb      	str	r3, [r7, #12]
}
 8009572:	bf00      	nop
 8009574:	bf00      	nop
 8009576:	e7fd      	b.n	8009574 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009578:	69bb      	ldr	r3, [r7, #24]
 800957a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800957c:	683a      	ldr	r2, [r7, #0]
 800957e:	429a      	cmp	r2, r3
 8009580:	d902      	bls.n	8009588 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	61fb      	str	r3, [r7, #28]
 8009586:	e002      	b.n	800958e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009588:	69bb      	ldr	r3, [r7, #24]
 800958a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800958c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009592:	69fa      	ldr	r2, [r7, #28]
 8009594:	429a      	cmp	r2, r3
 8009596:	d04c      	beq.n	8009632 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009598:	69bb      	ldr	r3, [r7, #24]
 800959a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800959c:	697a      	ldr	r2, [r7, #20]
 800959e:	429a      	cmp	r2, r3
 80095a0:	d147      	bne.n	8009632 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80095a2:	4b26      	ldr	r3, [pc, #152]	@ (800963c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	69ba      	ldr	r2, [r7, #24]
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d10b      	bne.n	80095c4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80095ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b0:	f383 8811 	msr	BASEPRI, r3
 80095b4:	f3bf 8f6f 	isb	sy
 80095b8:	f3bf 8f4f 	dsb	sy
 80095bc:	60bb      	str	r3, [r7, #8]
}
 80095be:	bf00      	nop
 80095c0:	bf00      	nop
 80095c2:	e7fd      	b.n	80095c0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80095c4:	69bb      	ldr	r3, [r7, #24]
 80095c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095c8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80095ca:	69bb      	ldr	r3, [r7, #24]
 80095cc:	69fa      	ldr	r2, [r7, #28]
 80095ce:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80095d0:	69bb      	ldr	r3, [r7, #24]
 80095d2:	699b      	ldr	r3, [r3, #24]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	db04      	blt.n	80095e2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095d8:	69fb      	ldr	r3, [r7, #28]
 80095da:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80095de:	69bb      	ldr	r3, [r7, #24]
 80095e0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	6959      	ldr	r1, [r3, #20]
 80095e6:	693a      	ldr	r2, [r7, #16]
 80095e8:	4613      	mov	r3, r2
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	4413      	add	r3, r2
 80095ee:	009b      	lsls	r3, r3, #2
 80095f0:	4a13      	ldr	r2, [pc, #76]	@ (8009640 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80095f2:	4413      	add	r3, r2
 80095f4:	4299      	cmp	r1, r3
 80095f6:	d11c      	bne.n	8009632 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095f8:	69bb      	ldr	r3, [r7, #24]
 80095fa:	3304      	adds	r3, #4
 80095fc:	4618      	mov	r0, r3
 80095fe:	f7fe f93b 	bl	8007878 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009602:	69bb      	ldr	r3, [r7, #24]
 8009604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009606:	4b0f      	ldr	r3, [pc, #60]	@ (8009644 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	429a      	cmp	r2, r3
 800960c:	d903      	bls.n	8009616 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800960e:	69bb      	ldr	r3, [r7, #24]
 8009610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009612:	4a0c      	ldr	r2, [pc, #48]	@ (8009644 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009614:	6013      	str	r3, [r2, #0]
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800961a:	4613      	mov	r3, r2
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	4413      	add	r3, r2
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	4a07      	ldr	r2, [pc, #28]	@ (8009640 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009624:	441a      	add	r2, r3
 8009626:	69bb      	ldr	r3, [r7, #24]
 8009628:	3304      	adds	r3, #4
 800962a:	4619      	mov	r1, r3
 800962c:	4610      	mov	r0, r2
 800962e:	f7fe f8c6 	bl	80077be <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009632:	bf00      	nop
 8009634:	3720      	adds	r7, #32
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	20001094 	.word	0x20001094
 8009640:	20001098 	.word	0x20001098
 8009644:	20001570 	.word	0x20001570

08009648 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009648:	b480      	push	{r7}
 800964a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800964c:	4b07      	ldr	r3, [pc, #28]	@ (800966c <pvTaskIncrementMutexHeldCount+0x24>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d004      	beq.n	800965e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009654:	4b05      	ldr	r3, [pc, #20]	@ (800966c <pvTaskIncrementMutexHeldCount+0x24>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800965a:	3201      	adds	r2, #1
 800965c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800965e:	4b03      	ldr	r3, [pc, #12]	@ (800966c <pvTaskIncrementMutexHeldCount+0x24>)
 8009660:	681b      	ldr	r3, [r3, #0]
	}
 8009662:	4618      	mov	r0, r3
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr
 800966c:	20001094 	.word	0x20001094

08009670 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b084      	sub	sp, #16
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800967a:	4b21      	ldr	r3, [pc, #132]	@ (8009700 <prvAddCurrentTaskToDelayedList+0x90>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009680:	4b20      	ldr	r3, [pc, #128]	@ (8009704 <prvAddCurrentTaskToDelayedList+0x94>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	3304      	adds	r3, #4
 8009686:	4618      	mov	r0, r3
 8009688:	f7fe f8f6 	bl	8007878 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009692:	d10a      	bne.n	80096aa <prvAddCurrentTaskToDelayedList+0x3a>
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d007      	beq.n	80096aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800969a:	4b1a      	ldr	r3, [pc, #104]	@ (8009704 <prvAddCurrentTaskToDelayedList+0x94>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	3304      	adds	r3, #4
 80096a0:	4619      	mov	r1, r3
 80096a2:	4819      	ldr	r0, [pc, #100]	@ (8009708 <prvAddCurrentTaskToDelayedList+0x98>)
 80096a4:	f7fe f88b 	bl	80077be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80096a8:	e026      	b.n	80096f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80096aa:	68fa      	ldr	r2, [r7, #12]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	4413      	add	r3, r2
 80096b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80096b2:	4b14      	ldr	r3, [pc, #80]	@ (8009704 <prvAddCurrentTaskToDelayedList+0x94>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	68ba      	ldr	r2, [r7, #8]
 80096b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80096ba:	68ba      	ldr	r2, [r7, #8]
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	429a      	cmp	r2, r3
 80096c0:	d209      	bcs.n	80096d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096c2:	4b12      	ldr	r3, [pc, #72]	@ (800970c <prvAddCurrentTaskToDelayedList+0x9c>)
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	4b0f      	ldr	r3, [pc, #60]	@ (8009704 <prvAddCurrentTaskToDelayedList+0x94>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	3304      	adds	r3, #4
 80096cc:	4619      	mov	r1, r3
 80096ce:	4610      	mov	r0, r2
 80096d0:	f7fe f899 	bl	8007806 <vListInsert>
}
 80096d4:	e010      	b.n	80096f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096d6:	4b0e      	ldr	r3, [pc, #56]	@ (8009710 <prvAddCurrentTaskToDelayedList+0xa0>)
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	4b0a      	ldr	r3, [pc, #40]	@ (8009704 <prvAddCurrentTaskToDelayedList+0x94>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	3304      	adds	r3, #4
 80096e0:	4619      	mov	r1, r3
 80096e2:	4610      	mov	r0, r2
 80096e4:	f7fe f88f 	bl	8007806 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80096e8:	4b0a      	ldr	r3, [pc, #40]	@ (8009714 <prvAddCurrentTaskToDelayedList+0xa4>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	68ba      	ldr	r2, [r7, #8]
 80096ee:	429a      	cmp	r2, r3
 80096f0:	d202      	bcs.n	80096f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80096f2:	4a08      	ldr	r2, [pc, #32]	@ (8009714 <prvAddCurrentTaskToDelayedList+0xa4>)
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	6013      	str	r3, [r2, #0]
}
 80096f8:	bf00      	nop
 80096fa:	3710      	adds	r7, #16
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}
 8009700:	2000156c 	.word	0x2000156c
 8009704:	20001094 	.word	0x20001094
 8009708:	20001554 	.word	0x20001554
 800970c:	20001524 	.word	0x20001524
 8009710:	20001520 	.word	0x20001520
 8009714:	20001588 	.word	0x20001588

08009718 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b08a      	sub	sp, #40	@ 0x28
 800971c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800971e:	2300      	movs	r3, #0
 8009720:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009722:	f000 fb13 	bl	8009d4c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009726:	4b1d      	ldr	r3, [pc, #116]	@ (800979c <xTimerCreateTimerTask+0x84>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d021      	beq.n	8009772 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800972e:	2300      	movs	r3, #0
 8009730:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009732:	2300      	movs	r3, #0
 8009734:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009736:	1d3a      	adds	r2, r7, #4
 8009738:	f107 0108 	add.w	r1, r7, #8
 800973c:	f107 030c 	add.w	r3, r7, #12
 8009740:	4618      	mov	r0, r3
 8009742:	f7fd fff5 	bl	8007730 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009746:	6879      	ldr	r1, [r7, #4]
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	68fa      	ldr	r2, [r7, #12]
 800974c:	9202      	str	r2, [sp, #8]
 800974e:	9301      	str	r3, [sp, #4]
 8009750:	2302      	movs	r3, #2
 8009752:	9300      	str	r3, [sp, #0]
 8009754:	2300      	movs	r3, #0
 8009756:	460a      	mov	r2, r1
 8009758:	4911      	ldr	r1, [pc, #68]	@ (80097a0 <xTimerCreateTimerTask+0x88>)
 800975a:	4812      	ldr	r0, [pc, #72]	@ (80097a4 <xTimerCreateTimerTask+0x8c>)
 800975c:	f7fe ffd0 	bl	8008700 <xTaskCreateStatic>
 8009760:	4603      	mov	r3, r0
 8009762:	4a11      	ldr	r2, [pc, #68]	@ (80097a8 <xTimerCreateTimerTask+0x90>)
 8009764:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009766:	4b10      	ldr	r3, [pc, #64]	@ (80097a8 <xTimerCreateTimerTask+0x90>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d001      	beq.n	8009772 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800976e:	2301      	movs	r3, #1
 8009770:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d10b      	bne.n	8009790 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800977c:	f383 8811 	msr	BASEPRI, r3
 8009780:	f3bf 8f6f 	isb	sy
 8009784:	f3bf 8f4f 	dsb	sy
 8009788:	613b      	str	r3, [r7, #16]
}
 800978a:	bf00      	nop
 800978c:	bf00      	nop
 800978e:	e7fd      	b.n	800978c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009790:	697b      	ldr	r3, [r7, #20]
}
 8009792:	4618      	mov	r0, r3
 8009794:	3718      	adds	r7, #24
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop
 800979c:	200015c4 	.word	0x200015c4
 80097a0:	0800c564 	.word	0x0800c564
 80097a4:	080098e5 	.word	0x080098e5
 80097a8:	200015c8 	.word	0x200015c8

080097ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b08a      	sub	sp, #40	@ 0x28
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	60b9      	str	r1, [r7, #8]
 80097b6:	607a      	str	r2, [r7, #4]
 80097b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80097ba:	2300      	movs	r3, #0
 80097bc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d10b      	bne.n	80097dc <xTimerGenericCommand+0x30>
	__asm volatile
 80097c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097c8:	f383 8811 	msr	BASEPRI, r3
 80097cc:	f3bf 8f6f 	isb	sy
 80097d0:	f3bf 8f4f 	dsb	sy
 80097d4:	623b      	str	r3, [r7, #32]
}
 80097d6:	bf00      	nop
 80097d8:	bf00      	nop
 80097da:	e7fd      	b.n	80097d8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80097dc:	4b19      	ldr	r3, [pc, #100]	@ (8009844 <xTimerGenericCommand+0x98>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d02a      	beq.n	800983a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	2b05      	cmp	r3, #5
 80097f4:	dc18      	bgt.n	8009828 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80097f6:	f7ff fdad 	bl	8009354 <xTaskGetSchedulerState>
 80097fa:	4603      	mov	r3, r0
 80097fc:	2b02      	cmp	r3, #2
 80097fe:	d109      	bne.n	8009814 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009800:	4b10      	ldr	r3, [pc, #64]	@ (8009844 <xTimerGenericCommand+0x98>)
 8009802:	6818      	ldr	r0, [r3, #0]
 8009804:	f107 0110 	add.w	r1, r7, #16
 8009808:	2300      	movs	r3, #0
 800980a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800980c:	f7fe fa12 	bl	8007c34 <xQueueGenericSend>
 8009810:	6278      	str	r0, [r7, #36]	@ 0x24
 8009812:	e012      	b.n	800983a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009814:	4b0b      	ldr	r3, [pc, #44]	@ (8009844 <xTimerGenericCommand+0x98>)
 8009816:	6818      	ldr	r0, [r3, #0]
 8009818:	f107 0110 	add.w	r1, r7, #16
 800981c:	2300      	movs	r3, #0
 800981e:	2200      	movs	r2, #0
 8009820:	f7fe fa08 	bl	8007c34 <xQueueGenericSend>
 8009824:	6278      	str	r0, [r7, #36]	@ 0x24
 8009826:	e008      	b.n	800983a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009828:	4b06      	ldr	r3, [pc, #24]	@ (8009844 <xTimerGenericCommand+0x98>)
 800982a:	6818      	ldr	r0, [r3, #0]
 800982c:	f107 0110 	add.w	r1, r7, #16
 8009830:	2300      	movs	r3, #0
 8009832:	683a      	ldr	r2, [r7, #0]
 8009834:	f7fe fb00 	bl	8007e38 <xQueueGenericSendFromISR>
 8009838:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800983a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800983c:	4618      	mov	r0, r3
 800983e:	3728      	adds	r7, #40	@ 0x28
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}
 8009844:	200015c4 	.word	0x200015c4

08009848 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b088      	sub	sp, #32
 800984c:	af02      	add	r7, sp, #8
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009852:	4b23      	ldr	r3, [pc, #140]	@ (80098e0 <prvProcessExpiredTimer+0x98>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	68db      	ldr	r3, [r3, #12]
 800985a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	3304      	adds	r3, #4
 8009860:	4618      	mov	r0, r3
 8009862:	f7fe f809 	bl	8007878 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800986c:	f003 0304 	and.w	r3, r3, #4
 8009870:	2b00      	cmp	r3, #0
 8009872:	d023      	beq.n	80098bc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	699a      	ldr	r2, [r3, #24]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	18d1      	adds	r1, r2, r3
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	683a      	ldr	r2, [r7, #0]
 8009880:	6978      	ldr	r0, [r7, #20]
 8009882:	f000 f8d5 	bl	8009a30 <prvInsertTimerInActiveList>
 8009886:	4603      	mov	r3, r0
 8009888:	2b00      	cmp	r3, #0
 800988a:	d020      	beq.n	80098ce <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800988c:	2300      	movs	r3, #0
 800988e:	9300      	str	r3, [sp, #0]
 8009890:	2300      	movs	r3, #0
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	2100      	movs	r1, #0
 8009896:	6978      	ldr	r0, [r7, #20]
 8009898:	f7ff ff88 	bl	80097ac <xTimerGenericCommand>
 800989c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d114      	bne.n	80098ce <prvProcessExpiredTimer+0x86>
	__asm volatile
 80098a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098a8:	f383 8811 	msr	BASEPRI, r3
 80098ac:	f3bf 8f6f 	isb	sy
 80098b0:	f3bf 8f4f 	dsb	sy
 80098b4:	60fb      	str	r3, [r7, #12]
}
 80098b6:	bf00      	nop
 80098b8:	bf00      	nop
 80098ba:	e7fd      	b.n	80098b8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80098c2:	f023 0301 	bic.w	r3, r3, #1
 80098c6:	b2da      	uxtb	r2, r3
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	6a1b      	ldr	r3, [r3, #32]
 80098d2:	6978      	ldr	r0, [r7, #20]
 80098d4:	4798      	blx	r3
}
 80098d6:	bf00      	nop
 80098d8:	3718      	adds	r7, #24
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	200015bc 	.word	0x200015bc

080098e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b084      	sub	sp, #16
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80098ec:	f107 0308 	add.w	r3, r7, #8
 80098f0:	4618      	mov	r0, r3
 80098f2:	f000 f859 	bl	80099a8 <prvGetNextExpireTime>
 80098f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	4619      	mov	r1, r3
 80098fc:	68f8      	ldr	r0, [r7, #12]
 80098fe:	f000 f805 	bl	800990c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009902:	f000 f8d7 	bl	8009ab4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009906:	bf00      	nop
 8009908:	e7f0      	b.n	80098ec <prvTimerTask+0x8>
	...

0800990c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009916:	f7ff f937 	bl	8008b88 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800991a:	f107 0308 	add.w	r3, r7, #8
 800991e:	4618      	mov	r0, r3
 8009920:	f000 f866 	bl	80099f0 <prvSampleTimeNow>
 8009924:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d130      	bne.n	800998e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d10a      	bne.n	8009948 <prvProcessTimerOrBlockTask+0x3c>
 8009932:	687a      	ldr	r2, [r7, #4]
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	429a      	cmp	r2, r3
 8009938:	d806      	bhi.n	8009948 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800993a:	f7ff f933 	bl	8008ba4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800993e:	68f9      	ldr	r1, [r7, #12]
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f7ff ff81 	bl	8009848 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009946:	e024      	b.n	8009992 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d008      	beq.n	8009960 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800994e:	4b13      	ldr	r3, [pc, #76]	@ (800999c <prvProcessTimerOrBlockTask+0x90>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d101      	bne.n	800995c <prvProcessTimerOrBlockTask+0x50>
 8009958:	2301      	movs	r3, #1
 800995a:	e000      	b.n	800995e <prvProcessTimerOrBlockTask+0x52>
 800995c:	2300      	movs	r3, #0
 800995e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009960:	4b0f      	ldr	r3, [pc, #60]	@ (80099a0 <prvProcessTimerOrBlockTask+0x94>)
 8009962:	6818      	ldr	r0, [r3, #0]
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	1ad3      	subs	r3, r2, r3
 800996a:	683a      	ldr	r2, [r7, #0]
 800996c:	4619      	mov	r1, r3
 800996e:	f7fe fe93 	bl	8008698 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009972:	f7ff f917 	bl	8008ba4 <xTaskResumeAll>
 8009976:	4603      	mov	r3, r0
 8009978:	2b00      	cmp	r3, #0
 800997a:	d10a      	bne.n	8009992 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800997c:	4b09      	ldr	r3, [pc, #36]	@ (80099a4 <prvProcessTimerOrBlockTask+0x98>)
 800997e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009982:	601a      	str	r2, [r3, #0]
 8009984:	f3bf 8f4f 	dsb	sy
 8009988:	f3bf 8f6f 	isb	sy
}
 800998c:	e001      	b.n	8009992 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800998e:	f7ff f909 	bl	8008ba4 <xTaskResumeAll>
}
 8009992:	bf00      	nop
 8009994:	3710      	adds	r7, #16
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	200015c0 	.word	0x200015c0
 80099a0:	200015c4 	.word	0x200015c4
 80099a4:	e000ed04 	.word	0xe000ed04

080099a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80099a8:	b480      	push	{r7}
 80099aa:	b085      	sub	sp, #20
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80099b0:	4b0e      	ldr	r3, [pc, #56]	@ (80099ec <prvGetNextExpireTime+0x44>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d101      	bne.n	80099be <prvGetNextExpireTime+0x16>
 80099ba:	2201      	movs	r2, #1
 80099bc:	e000      	b.n	80099c0 <prvGetNextExpireTime+0x18>
 80099be:	2200      	movs	r2, #0
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d105      	bne.n	80099d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80099cc:	4b07      	ldr	r3, [pc, #28]	@ (80099ec <prvGetNextExpireTime+0x44>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	68db      	ldr	r3, [r3, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	60fb      	str	r3, [r7, #12]
 80099d6:	e001      	b.n	80099dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80099d8:	2300      	movs	r3, #0
 80099da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80099dc:	68fb      	ldr	r3, [r7, #12]
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3714      	adds	r7, #20
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr
 80099ea:	bf00      	nop
 80099ec:	200015bc 	.word	0x200015bc

080099f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80099f8:	f7ff f972 	bl	8008ce0 <xTaskGetTickCount>
 80099fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80099fe:	4b0b      	ldr	r3, [pc, #44]	@ (8009a2c <prvSampleTimeNow+0x3c>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	68fa      	ldr	r2, [r7, #12]
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d205      	bcs.n	8009a14 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009a08:	f000 f93a 	bl	8009c80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2201      	movs	r2, #1
 8009a10:	601a      	str	r2, [r3, #0]
 8009a12:	e002      	b.n	8009a1a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2200      	movs	r2, #0
 8009a18:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009a1a:	4a04      	ldr	r2, [pc, #16]	@ (8009a2c <prvSampleTimeNow+0x3c>)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009a20:	68fb      	ldr	r3, [r7, #12]
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3710      	adds	r7, #16
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}
 8009a2a:	bf00      	nop
 8009a2c:	200015cc 	.word	0x200015cc

08009a30 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b086      	sub	sp, #24
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	60b9      	str	r1, [r7, #8]
 8009a3a:	607a      	str	r2, [r7, #4]
 8009a3c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	68ba      	ldr	r2, [r7, #8]
 8009a46:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	68fa      	ldr	r2, [r7, #12]
 8009a4c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009a4e:	68ba      	ldr	r2, [r7, #8]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d812      	bhi.n	8009a7c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	1ad2      	subs	r2, r2, r3
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	699b      	ldr	r3, [r3, #24]
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d302      	bcc.n	8009a6a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009a64:	2301      	movs	r3, #1
 8009a66:	617b      	str	r3, [r7, #20]
 8009a68:	e01b      	b.n	8009aa2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009a6a:	4b10      	ldr	r3, [pc, #64]	@ (8009aac <prvInsertTimerInActiveList+0x7c>)
 8009a6c:	681a      	ldr	r2, [r3, #0]
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	3304      	adds	r3, #4
 8009a72:	4619      	mov	r1, r3
 8009a74:	4610      	mov	r0, r2
 8009a76:	f7fd fec6 	bl	8007806 <vListInsert>
 8009a7a:	e012      	b.n	8009aa2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d206      	bcs.n	8009a92 <prvInsertTimerInActiveList+0x62>
 8009a84:	68ba      	ldr	r2, [r7, #8]
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d302      	bcc.n	8009a92 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	617b      	str	r3, [r7, #20]
 8009a90:	e007      	b.n	8009aa2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a92:	4b07      	ldr	r3, [pc, #28]	@ (8009ab0 <prvInsertTimerInActiveList+0x80>)
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	3304      	adds	r3, #4
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	4610      	mov	r0, r2
 8009a9e:	f7fd feb2 	bl	8007806 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009aa2:	697b      	ldr	r3, [r7, #20]
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3718      	adds	r7, #24
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}
 8009aac:	200015c0 	.word	0x200015c0
 8009ab0:	200015bc 	.word	0x200015bc

08009ab4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b08e      	sub	sp, #56	@ 0x38
 8009ab8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009aba:	e0ce      	b.n	8009c5a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	da19      	bge.n	8009af6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009ac2:	1d3b      	adds	r3, r7, #4
 8009ac4:	3304      	adds	r3, #4
 8009ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d10b      	bne.n	8009ae6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ad2:	f383 8811 	msr	BASEPRI, r3
 8009ad6:	f3bf 8f6f 	isb	sy
 8009ada:	f3bf 8f4f 	dsb	sy
 8009ade:	61fb      	str	r3, [r7, #28]
}
 8009ae0:	bf00      	nop
 8009ae2:	bf00      	nop
 8009ae4:	e7fd      	b.n	8009ae2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009aec:	6850      	ldr	r0, [r2, #4]
 8009aee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009af0:	6892      	ldr	r2, [r2, #8]
 8009af2:	4611      	mov	r1, r2
 8009af4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	f2c0 80ae 	blt.w	8009c5a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b04:	695b      	ldr	r3, [r3, #20]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d004      	beq.n	8009b14 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b0c:	3304      	adds	r3, #4
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f7fd feb2 	bl	8007878 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b14:	463b      	mov	r3, r7
 8009b16:	4618      	mov	r0, r3
 8009b18:	f7ff ff6a 	bl	80099f0 <prvSampleTimeNow>
 8009b1c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2b09      	cmp	r3, #9
 8009b22:	f200 8097 	bhi.w	8009c54 <prvProcessReceivedCommands+0x1a0>
 8009b26:	a201      	add	r2, pc, #4	@ (adr r2, 8009b2c <prvProcessReceivedCommands+0x78>)
 8009b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b2c:	08009b55 	.word	0x08009b55
 8009b30:	08009b55 	.word	0x08009b55
 8009b34:	08009b55 	.word	0x08009b55
 8009b38:	08009bcb 	.word	0x08009bcb
 8009b3c:	08009bdf 	.word	0x08009bdf
 8009b40:	08009c2b 	.word	0x08009c2b
 8009b44:	08009b55 	.word	0x08009b55
 8009b48:	08009b55 	.word	0x08009b55
 8009b4c:	08009bcb 	.word	0x08009bcb
 8009b50:	08009bdf 	.word	0x08009bdf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b5a:	f043 0301 	orr.w	r3, r3, #1
 8009b5e:	b2da      	uxtb	r2, r3
 8009b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009b66:	68ba      	ldr	r2, [r7, #8]
 8009b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b6a:	699b      	ldr	r3, [r3, #24]
 8009b6c:	18d1      	adds	r1, r2, r3
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b74:	f7ff ff5c 	bl	8009a30 <prvInsertTimerInActiveList>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d06c      	beq.n	8009c58 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b80:	6a1b      	ldr	r3, [r3, #32]
 8009b82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b84:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b8c:	f003 0304 	and.w	r3, r3, #4
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d061      	beq.n	8009c58 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009b94:	68ba      	ldr	r2, [r7, #8]
 8009b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b98:	699b      	ldr	r3, [r3, #24]
 8009b9a:	441a      	add	r2, r3
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	9300      	str	r3, [sp, #0]
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	2100      	movs	r1, #0
 8009ba4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ba6:	f7ff fe01 	bl	80097ac <xTimerGenericCommand>
 8009baa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009bac:	6a3b      	ldr	r3, [r7, #32]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d152      	bne.n	8009c58 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bb6:	f383 8811 	msr	BASEPRI, r3
 8009bba:	f3bf 8f6f 	isb	sy
 8009bbe:	f3bf 8f4f 	dsb	sy
 8009bc2:	61bb      	str	r3, [r7, #24]
}
 8009bc4:	bf00      	nop
 8009bc6:	bf00      	nop
 8009bc8:	e7fd      	b.n	8009bc6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bcc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009bd0:	f023 0301 	bic.w	r3, r3, #1
 8009bd4:	b2da      	uxtb	r2, r3
 8009bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009bdc:	e03d      	b.n	8009c5a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009be4:	f043 0301 	orr.w	r3, r3, #1
 8009be8:	b2da      	uxtb	r2, r3
 8009bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009bf0:	68ba      	ldr	r2, [r7, #8]
 8009bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bf4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bf8:	699b      	ldr	r3, [r3, #24]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d10b      	bne.n	8009c16 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c02:	f383 8811 	msr	BASEPRI, r3
 8009c06:	f3bf 8f6f 	isb	sy
 8009c0a:	f3bf 8f4f 	dsb	sy
 8009c0e:	617b      	str	r3, [r7, #20]
}
 8009c10:	bf00      	nop
 8009c12:	bf00      	nop
 8009c14:	e7fd      	b.n	8009c12 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c18:	699a      	ldr	r2, [r3, #24]
 8009c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c1c:	18d1      	adds	r1, r2, r3
 8009c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c24:	f7ff ff04 	bl	8009a30 <prvInsertTimerInActiveList>
					break;
 8009c28:	e017      	b.n	8009c5a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c30:	f003 0302 	and.w	r3, r3, #2
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d103      	bne.n	8009c40 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009c38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c3a:	f000 fbe5 	bl	800a408 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009c3e:	e00c      	b.n	8009c5a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c42:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c46:	f023 0301 	bic.w	r3, r3, #1
 8009c4a:	b2da      	uxtb	r2, r3
 8009c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c4e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009c52:	e002      	b.n	8009c5a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009c54:	bf00      	nop
 8009c56:	e000      	b.n	8009c5a <prvProcessReceivedCommands+0x1a6>
					break;
 8009c58:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009c5a:	4b08      	ldr	r3, [pc, #32]	@ (8009c7c <prvProcessReceivedCommands+0x1c8>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	1d39      	adds	r1, r7, #4
 8009c60:	2200      	movs	r2, #0
 8009c62:	4618      	mov	r0, r3
 8009c64:	f7fe f986 	bl	8007f74 <xQueueReceive>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	f47f af26 	bne.w	8009abc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009c70:	bf00      	nop
 8009c72:	bf00      	nop
 8009c74:	3730      	adds	r7, #48	@ 0x30
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	200015c4 	.word	0x200015c4

08009c80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b088      	sub	sp, #32
 8009c84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009c86:	e049      	b.n	8009d1c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c88:	4b2e      	ldr	r3, [pc, #184]	@ (8009d44 <prvSwitchTimerLists+0xc4>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	68db      	ldr	r3, [r3, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c92:	4b2c      	ldr	r3, [pc, #176]	@ (8009d44 <prvSwitchTimerLists+0xc4>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	68db      	ldr	r3, [r3, #12]
 8009c98:	68db      	ldr	r3, [r3, #12]
 8009c9a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	3304      	adds	r3, #4
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f7fd fde9 	bl	8007878 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	6a1b      	ldr	r3, [r3, #32]
 8009caa:	68f8      	ldr	r0, [r7, #12]
 8009cac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009cb4:	f003 0304 	and.w	r3, r3, #4
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d02f      	beq.n	8009d1c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	699b      	ldr	r3, [r3, #24]
 8009cc0:	693a      	ldr	r2, [r7, #16]
 8009cc2:	4413      	add	r3, r2
 8009cc4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009cc6:	68ba      	ldr	r2, [r7, #8]
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d90e      	bls.n	8009cec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	68ba      	ldr	r2, [r7, #8]
 8009cd2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	68fa      	ldr	r2, [r7, #12]
 8009cd8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009cda:	4b1a      	ldr	r3, [pc, #104]	@ (8009d44 <prvSwitchTimerLists+0xc4>)
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	3304      	adds	r3, #4
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	4610      	mov	r0, r2
 8009ce6:	f7fd fd8e 	bl	8007806 <vListInsert>
 8009cea:	e017      	b.n	8009d1c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009cec:	2300      	movs	r3, #0
 8009cee:	9300      	str	r3, [sp, #0]
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	693a      	ldr	r2, [r7, #16]
 8009cf4:	2100      	movs	r1, #0
 8009cf6:	68f8      	ldr	r0, [r7, #12]
 8009cf8:	f7ff fd58 	bl	80097ac <xTimerGenericCommand>
 8009cfc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d10b      	bne.n	8009d1c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d08:	f383 8811 	msr	BASEPRI, r3
 8009d0c:	f3bf 8f6f 	isb	sy
 8009d10:	f3bf 8f4f 	dsb	sy
 8009d14:	603b      	str	r3, [r7, #0]
}
 8009d16:	bf00      	nop
 8009d18:	bf00      	nop
 8009d1a:	e7fd      	b.n	8009d18 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d1c:	4b09      	ldr	r3, [pc, #36]	@ (8009d44 <prvSwitchTimerLists+0xc4>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d1b0      	bne.n	8009c88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009d26:	4b07      	ldr	r3, [pc, #28]	@ (8009d44 <prvSwitchTimerLists+0xc4>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009d2c:	4b06      	ldr	r3, [pc, #24]	@ (8009d48 <prvSwitchTimerLists+0xc8>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a04      	ldr	r2, [pc, #16]	@ (8009d44 <prvSwitchTimerLists+0xc4>)
 8009d32:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009d34:	4a04      	ldr	r2, [pc, #16]	@ (8009d48 <prvSwitchTimerLists+0xc8>)
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	6013      	str	r3, [r2, #0]
}
 8009d3a:	bf00      	nop
 8009d3c:	3718      	adds	r7, #24
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
 8009d42:	bf00      	nop
 8009d44:	200015bc 	.word	0x200015bc
 8009d48:	200015c0 	.word	0x200015c0

08009d4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009d52:	f000 f969 	bl	800a028 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009d56:	4b15      	ldr	r3, [pc, #84]	@ (8009dac <prvCheckForValidListAndQueue+0x60>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d120      	bne.n	8009da0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009d5e:	4814      	ldr	r0, [pc, #80]	@ (8009db0 <prvCheckForValidListAndQueue+0x64>)
 8009d60:	f7fd fd00 	bl	8007764 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009d64:	4813      	ldr	r0, [pc, #76]	@ (8009db4 <prvCheckForValidListAndQueue+0x68>)
 8009d66:	f7fd fcfd 	bl	8007764 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009d6a:	4b13      	ldr	r3, [pc, #76]	@ (8009db8 <prvCheckForValidListAndQueue+0x6c>)
 8009d6c:	4a10      	ldr	r2, [pc, #64]	@ (8009db0 <prvCheckForValidListAndQueue+0x64>)
 8009d6e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009d70:	4b12      	ldr	r3, [pc, #72]	@ (8009dbc <prvCheckForValidListAndQueue+0x70>)
 8009d72:	4a10      	ldr	r2, [pc, #64]	@ (8009db4 <prvCheckForValidListAndQueue+0x68>)
 8009d74:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009d76:	2300      	movs	r3, #0
 8009d78:	9300      	str	r3, [sp, #0]
 8009d7a:	4b11      	ldr	r3, [pc, #68]	@ (8009dc0 <prvCheckForValidListAndQueue+0x74>)
 8009d7c:	4a11      	ldr	r2, [pc, #68]	@ (8009dc4 <prvCheckForValidListAndQueue+0x78>)
 8009d7e:	2110      	movs	r1, #16
 8009d80:	200a      	movs	r0, #10
 8009d82:	f7fd fe0d 	bl	80079a0 <xQueueGenericCreateStatic>
 8009d86:	4603      	mov	r3, r0
 8009d88:	4a08      	ldr	r2, [pc, #32]	@ (8009dac <prvCheckForValidListAndQueue+0x60>)
 8009d8a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009d8c:	4b07      	ldr	r3, [pc, #28]	@ (8009dac <prvCheckForValidListAndQueue+0x60>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d005      	beq.n	8009da0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009d94:	4b05      	ldr	r3, [pc, #20]	@ (8009dac <prvCheckForValidListAndQueue+0x60>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	490b      	ldr	r1, [pc, #44]	@ (8009dc8 <prvCheckForValidListAndQueue+0x7c>)
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f7fe fc28 	bl	80085f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009da0:	f000 f974 	bl	800a08c <vPortExitCritical>
}
 8009da4:	bf00      	nop
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}
 8009daa:	bf00      	nop
 8009dac:	200015c4 	.word	0x200015c4
 8009db0:	20001594 	.word	0x20001594
 8009db4:	200015a8 	.word	0x200015a8
 8009db8:	200015bc 	.word	0x200015bc
 8009dbc:	200015c0 	.word	0x200015c0
 8009dc0:	20001670 	.word	0x20001670
 8009dc4:	200015d0 	.word	0x200015d0
 8009dc8:	0800c56c 	.word	0x0800c56c

08009dcc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b085      	sub	sp, #20
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	60b9      	str	r1, [r7, #8]
 8009dd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	3b04      	subs	r3, #4
 8009ddc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009de4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	3b04      	subs	r3, #4
 8009dea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	f023 0201 	bic.w	r2, r3, #1
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	3b04      	subs	r3, #4
 8009dfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009dfc:	4a0c      	ldr	r2, [pc, #48]	@ (8009e30 <pxPortInitialiseStack+0x64>)
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	3b14      	subs	r3, #20
 8009e06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009e08:	687a      	ldr	r2, [r7, #4]
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	3b04      	subs	r3, #4
 8009e12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f06f 0202 	mvn.w	r2, #2
 8009e1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	3b20      	subs	r3, #32
 8009e20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009e22:	68fb      	ldr	r3, [r7, #12]
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3714      	adds	r7, #20
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr
 8009e30:	08009e35 	.word	0x08009e35

08009e34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009e34:	b480      	push	{r7}
 8009e36:	b085      	sub	sp, #20
 8009e38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009e3e:	4b13      	ldr	r3, [pc, #76]	@ (8009e8c <prvTaskExitError+0x58>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e46:	d00b      	beq.n	8009e60 <prvTaskExitError+0x2c>
	__asm volatile
 8009e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e4c:	f383 8811 	msr	BASEPRI, r3
 8009e50:	f3bf 8f6f 	isb	sy
 8009e54:	f3bf 8f4f 	dsb	sy
 8009e58:	60fb      	str	r3, [r7, #12]
}
 8009e5a:	bf00      	nop
 8009e5c:	bf00      	nop
 8009e5e:	e7fd      	b.n	8009e5c <prvTaskExitError+0x28>
	__asm volatile
 8009e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e64:	f383 8811 	msr	BASEPRI, r3
 8009e68:	f3bf 8f6f 	isb	sy
 8009e6c:	f3bf 8f4f 	dsb	sy
 8009e70:	60bb      	str	r3, [r7, #8]
}
 8009e72:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009e74:	bf00      	nop
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d0fc      	beq.n	8009e76 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009e7c:	bf00      	nop
 8009e7e:	bf00      	nop
 8009e80:	3714      	adds	r7, #20
 8009e82:	46bd      	mov	sp, r7
 8009e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e88:	4770      	bx	lr
 8009e8a:	bf00      	nop
 8009e8c:	20000040 	.word	0x20000040

08009e90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009e90:	4b07      	ldr	r3, [pc, #28]	@ (8009eb0 <pxCurrentTCBConst2>)
 8009e92:	6819      	ldr	r1, [r3, #0]
 8009e94:	6808      	ldr	r0, [r1, #0]
 8009e96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e9a:	f380 8809 	msr	PSP, r0
 8009e9e:	f3bf 8f6f 	isb	sy
 8009ea2:	f04f 0000 	mov.w	r0, #0
 8009ea6:	f380 8811 	msr	BASEPRI, r0
 8009eaa:	4770      	bx	lr
 8009eac:	f3af 8000 	nop.w

08009eb0 <pxCurrentTCBConst2>:
 8009eb0:	20001094 	.word	0x20001094
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009eb4:	bf00      	nop
 8009eb6:	bf00      	nop

08009eb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009eb8:	4808      	ldr	r0, [pc, #32]	@ (8009edc <prvPortStartFirstTask+0x24>)
 8009eba:	6800      	ldr	r0, [r0, #0]
 8009ebc:	6800      	ldr	r0, [r0, #0]
 8009ebe:	f380 8808 	msr	MSP, r0
 8009ec2:	f04f 0000 	mov.w	r0, #0
 8009ec6:	f380 8814 	msr	CONTROL, r0
 8009eca:	b662      	cpsie	i
 8009ecc:	b661      	cpsie	f
 8009ece:	f3bf 8f4f 	dsb	sy
 8009ed2:	f3bf 8f6f 	isb	sy
 8009ed6:	df00      	svc	0
 8009ed8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009eda:	bf00      	nop
 8009edc:	e000ed08 	.word	0xe000ed08

08009ee0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b086      	sub	sp, #24
 8009ee4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009ee6:	4b47      	ldr	r3, [pc, #284]	@ (800a004 <xPortStartScheduler+0x124>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a47      	ldr	r2, [pc, #284]	@ (800a008 <xPortStartScheduler+0x128>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d10b      	bne.n	8009f08 <xPortStartScheduler+0x28>
	__asm volatile
 8009ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ef4:	f383 8811 	msr	BASEPRI, r3
 8009ef8:	f3bf 8f6f 	isb	sy
 8009efc:	f3bf 8f4f 	dsb	sy
 8009f00:	613b      	str	r3, [r7, #16]
}
 8009f02:	bf00      	nop
 8009f04:	bf00      	nop
 8009f06:	e7fd      	b.n	8009f04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009f08:	4b3e      	ldr	r3, [pc, #248]	@ (800a004 <xPortStartScheduler+0x124>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4a3f      	ldr	r2, [pc, #252]	@ (800a00c <xPortStartScheduler+0x12c>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d10b      	bne.n	8009f2a <xPortStartScheduler+0x4a>
	__asm volatile
 8009f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f16:	f383 8811 	msr	BASEPRI, r3
 8009f1a:	f3bf 8f6f 	isb	sy
 8009f1e:	f3bf 8f4f 	dsb	sy
 8009f22:	60fb      	str	r3, [r7, #12]
}
 8009f24:	bf00      	nop
 8009f26:	bf00      	nop
 8009f28:	e7fd      	b.n	8009f26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009f2a:	4b39      	ldr	r3, [pc, #228]	@ (800a010 <xPortStartScheduler+0x130>)
 8009f2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	b2db      	uxtb	r3, r3
 8009f34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	22ff      	movs	r2, #255	@ 0xff
 8009f3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	b2db      	uxtb	r3, r3
 8009f42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009f44:	78fb      	ldrb	r3, [r7, #3]
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009f4c:	b2da      	uxtb	r2, r3
 8009f4e:	4b31      	ldr	r3, [pc, #196]	@ (800a014 <xPortStartScheduler+0x134>)
 8009f50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009f52:	4b31      	ldr	r3, [pc, #196]	@ (800a018 <xPortStartScheduler+0x138>)
 8009f54:	2207      	movs	r2, #7
 8009f56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f58:	e009      	b.n	8009f6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009f5a:	4b2f      	ldr	r3, [pc, #188]	@ (800a018 <xPortStartScheduler+0x138>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	3b01      	subs	r3, #1
 8009f60:	4a2d      	ldr	r2, [pc, #180]	@ (800a018 <xPortStartScheduler+0x138>)
 8009f62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009f64:	78fb      	ldrb	r3, [r7, #3]
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	005b      	lsls	r3, r3, #1
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f6e:	78fb      	ldrb	r3, [r7, #3]
 8009f70:	b2db      	uxtb	r3, r3
 8009f72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f76:	2b80      	cmp	r3, #128	@ 0x80
 8009f78:	d0ef      	beq.n	8009f5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009f7a:	4b27      	ldr	r3, [pc, #156]	@ (800a018 <xPortStartScheduler+0x138>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f1c3 0307 	rsb	r3, r3, #7
 8009f82:	2b04      	cmp	r3, #4
 8009f84:	d00b      	beq.n	8009f9e <xPortStartScheduler+0xbe>
	__asm volatile
 8009f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f8a:	f383 8811 	msr	BASEPRI, r3
 8009f8e:	f3bf 8f6f 	isb	sy
 8009f92:	f3bf 8f4f 	dsb	sy
 8009f96:	60bb      	str	r3, [r7, #8]
}
 8009f98:	bf00      	nop
 8009f9a:	bf00      	nop
 8009f9c:	e7fd      	b.n	8009f9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009f9e:	4b1e      	ldr	r3, [pc, #120]	@ (800a018 <xPortStartScheduler+0x138>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	021b      	lsls	r3, r3, #8
 8009fa4:	4a1c      	ldr	r2, [pc, #112]	@ (800a018 <xPortStartScheduler+0x138>)
 8009fa6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009fa8:	4b1b      	ldr	r3, [pc, #108]	@ (800a018 <xPortStartScheduler+0x138>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009fb0:	4a19      	ldr	r2, [pc, #100]	@ (800a018 <xPortStartScheduler+0x138>)
 8009fb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	b2da      	uxtb	r2, r3
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009fbc:	4b17      	ldr	r3, [pc, #92]	@ (800a01c <xPortStartScheduler+0x13c>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a16      	ldr	r2, [pc, #88]	@ (800a01c <xPortStartScheduler+0x13c>)
 8009fc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009fc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009fc8:	4b14      	ldr	r3, [pc, #80]	@ (800a01c <xPortStartScheduler+0x13c>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4a13      	ldr	r2, [pc, #76]	@ (800a01c <xPortStartScheduler+0x13c>)
 8009fce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009fd2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009fd4:	f000 f8da 	bl	800a18c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009fd8:	4b11      	ldr	r3, [pc, #68]	@ (800a020 <xPortStartScheduler+0x140>)
 8009fda:	2200      	movs	r2, #0
 8009fdc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009fde:	f000 f8f9 	bl	800a1d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009fe2:	4b10      	ldr	r3, [pc, #64]	@ (800a024 <xPortStartScheduler+0x144>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	4a0f      	ldr	r2, [pc, #60]	@ (800a024 <xPortStartScheduler+0x144>)
 8009fe8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009fec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009fee:	f7ff ff63 	bl	8009eb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009ff2:	f7fe ff3f 	bl	8008e74 <vTaskSwitchContext>
	prvTaskExitError();
 8009ff6:	f7ff ff1d 	bl	8009e34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009ffa:	2300      	movs	r3, #0
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3718      	adds	r7, #24
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}
 800a004:	e000ed00 	.word	0xe000ed00
 800a008:	410fc271 	.word	0x410fc271
 800a00c:	410fc270 	.word	0x410fc270
 800a010:	e000e400 	.word	0xe000e400
 800a014:	200016c0 	.word	0x200016c0
 800a018:	200016c4 	.word	0x200016c4
 800a01c:	e000ed20 	.word	0xe000ed20
 800a020:	20000040 	.word	0x20000040
 800a024:	e000ef34 	.word	0xe000ef34

0800a028 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a028:	b480      	push	{r7}
 800a02a:	b083      	sub	sp, #12
 800a02c:	af00      	add	r7, sp, #0
	__asm volatile
 800a02e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a032:	f383 8811 	msr	BASEPRI, r3
 800a036:	f3bf 8f6f 	isb	sy
 800a03a:	f3bf 8f4f 	dsb	sy
 800a03e:	607b      	str	r3, [r7, #4]
}
 800a040:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a042:	4b10      	ldr	r3, [pc, #64]	@ (800a084 <vPortEnterCritical+0x5c>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	3301      	adds	r3, #1
 800a048:	4a0e      	ldr	r2, [pc, #56]	@ (800a084 <vPortEnterCritical+0x5c>)
 800a04a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a04c:	4b0d      	ldr	r3, [pc, #52]	@ (800a084 <vPortEnterCritical+0x5c>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	2b01      	cmp	r3, #1
 800a052:	d110      	bne.n	800a076 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a054:	4b0c      	ldr	r3, [pc, #48]	@ (800a088 <vPortEnterCritical+0x60>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d00b      	beq.n	800a076 <vPortEnterCritical+0x4e>
	__asm volatile
 800a05e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a062:	f383 8811 	msr	BASEPRI, r3
 800a066:	f3bf 8f6f 	isb	sy
 800a06a:	f3bf 8f4f 	dsb	sy
 800a06e:	603b      	str	r3, [r7, #0]
}
 800a070:	bf00      	nop
 800a072:	bf00      	nop
 800a074:	e7fd      	b.n	800a072 <vPortEnterCritical+0x4a>
	}
}
 800a076:	bf00      	nop
 800a078:	370c      	adds	r7, #12
 800a07a:	46bd      	mov	sp, r7
 800a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a080:	4770      	bx	lr
 800a082:	bf00      	nop
 800a084:	20000040 	.word	0x20000040
 800a088:	e000ed04 	.word	0xe000ed04

0800a08c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a092:	4b12      	ldr	r3, [pc, #72]	@ (800a0dc <vPortExitCritical+0x50>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d10b      	bne.n	800a0b2 <vPortExitCritical+0x26>
	__asm volatile
 800a09a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a09e:	f383 8811 	msr	BASEPRI, r3
 800a0a2:	f3bf 8f6f 	isb	sy
 800a0a6:	f3bf 8f4f 	dsb	sy
 800a0aa:	607b      	str	r3, [r7, #4]
}
 800a0ac:	bf00      	nop
 800a0ae:	bf00      	nop
 800a0b0:	e7fd      	b.n	800a0ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a0b2:	4b0a      	ldr	r3, [pc, #40]	@ (800a0dc <vPortExitCritical+0x50>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	3b01      	subs	r3, #1
 800a0b8:	4a08      	ldr	r2, [pc, #32]	@ (800a0dc <vPortExitCritical+0x50>)
 800a0ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a0bc:	4b07      	ldr	r3, [pc, #28]	@ (800a0dc <vPortExitCritical+0x50>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d105      	bne.n	800a0d0 <vPortExitCritical+0x44>
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	f383 8811 	msr	BASEPRI, r3
}
 800a0ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a0d0:	bf00      	nop
 800a0d2:	370c      	adds	r7, #12
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr
 800a0dc:	20000040 	.word	0x20000040

0800a0e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a0e0:	f3ef 8009 	mrs	r0, PSP
 800a0e4:	f3bf 8f6f 	isb	sy
 800a0e8:	4b15      	ldr	r3, [pc, #84]	@ (800a140 <pxCurrentTCBConst>)
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	f01e 0f10 	tst.w	lr, #16
 800a0f0:	bf08      	it	eq
 800a0f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a0f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0fa:	6010      	str	r0, [r2, #0]
 800a0fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a100:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a104:	f380 8811 	msr	BASEPRI, r0
 800a108:	f3bf 8f4f 	dsb	sy
 800a10c:	f3bf 8f6f 	isb	sy
 800a110:	f7fe feb0 	bl	8008e74 <vTaskSwitchContext>
 800a114:	f04f 0000 	mov.w	r0, #0
 800a118:	f380 8811 	msr	BASEPRI, r0
 800a11c:	bc09      	pop	{r0, r3}
 800a11e:	6819      	ldr	r1, [r3, #0]
 800a120:	6808      	ldr	r0, [r1, #0]
 800a122:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a126:	f01e 0f10 	tst.w	lr, #16
 800a12a:	bf08      	it	eq
 800a12c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a130:	f380 8809 	msr	PSP, r0
 800a134:	f3bf 8f6f 	isb	sy
 800a138:	4770      	bx	lr
 800a13a:	bf00      	nop
 800a13c:	f3af 8000 	nop.w

0800a140 <pxCurrentTCBConst>:
 800a140:	20001094 	.word	0x20001094
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a144:	bf00      	nop
 800a146:	bf00      	nop

0800a148 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b082      	sub	sp, #8
 800a14c:	af00      	add	r7, sp, #0
	__asm volatile
 800a14e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a152:	f383 8811 	msr	BASEPRI, r3
 800a156:	f3bf 8f6f 	isb	sy
 800a15a:	f3bf 8f4f 	dsb	sy
 800a15e:	607b      	str	r3, [r7, #4]
}
 800a160:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a162:	f7fe fdcd 	bl	8008d00 <xTaskIncrementTick>
 800a166:	4603      	mov	r3, r0
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d003      	beq.n	800a174 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a16c:	4b06      	ldr	r3, [pc, #24]	@ (800a188 <xPortSysTickHandler+0x40>)
 800a16e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a172:	601a      	str	r2, [r3, #0]
 800a174:	2300      	movs	r3, #0
 800a176:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	f383 8811 	msr	BASEPRI, r3
}
 800a17e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a180:	bf00      	nop
 800a182:	3708      	adds	r7, #8
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}
 800a188:	e000ed04 	.word	0xe000ed04

0800a18c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a18c:	b480      	push	{r7}
 800a18e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a190:	4b0b      	ldr	r3, [pc, #44]	@ (800a1c0 <vPortSetupTimerInterrupt+0x34>)
 800a192:	2200      	movs	r2, #0
 800a194:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a196:	4b0b      	ldr	r3, [pc, #44]	@ (800a1c4 <vPortSetupTimerInterrupt+0x38>)
 800a198:	2200      	movs	r2, #0
 800a19a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a19c:	4b0a      	ldr	r3, [pc, #40]	@ (800a1c8 <vPortSetupTimerInterrupt+0x3c>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a0a      	ldr	r2, [pc, #40]	@ (800a1cc <vPortSetupTimerInterrupt+0x40>)
 800a1a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a1a6:	099b      	lsrs	r3, r3, #6
 800a1a8:	4a09      	ldr	r2, [pc, #36]	@ (800a1d0 <vPortSetupTimerInterrupt+0x44>)
 800a1aa:	3b01      	subs	r3, #1
 800a1ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a1ae:	4b04      	ldr	r3, [pc, #16]	@ (800a1c0 <vPortSetupTimerInterrupt+0x34>)
 800a1b0:	2207      	movs	r2, #7
 800a1b2:	601a      	str	r2, [r3, #0]
}
 800a1b4:	bf00      	nop
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1bc:	4770      	bx	lr
 800a1be:	bf00      	nop
 800a1c0:	e000e010 	.word	0xe000e010
 800a1c4:	e000e018 	.word	0xe000e018
 800a1c8:	20000034 	.word	0x20000034
 800a1cc:	10624dd3 	.word	0x10624dd3
 800a1d0:	e000e014 	.word	0xe000e014

0800a1d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a1d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a1e4 <vPortEnableVFP+0x10>
 800a1d8:	6801      	ldr	r1, [r0, #0]
 800a1da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a1de:	6001      	str	r1, [r0, #0]
 800a1e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a1e2:	bf00      	nop
 800a1e4:	e000ed88 	.word	0xe000ed88

0800a1e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b085      	sub	sp, #20
 800a1ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a1ee:	f3ef 8305 	mrs	r3, IPSR
 800a1f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2b0f      	cmp	r3, #15
 800a1f8:	d915      	bls.n	800a226 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a1fa:	4a18      	ldr	r2, [pc, #96]	@ (800a25c <vPortValidateInterruptPriority+0x74>)
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	4413      	add	r3, r2
 800a200:	781b      	ldrb	r3, [r3, #0]
 800a202:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a204:	4b16      	ldr	r3, [pc, #88]	@ (800a260 <vPortValidateInterruptPriority+0x78>)
 800a206:	781b      	ldrb	r3, [r3, #0]
 800a208:	7afa      	ldrb	r2, [r7, #11]
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d20b      	bcs.n	800a226 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a20e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a212:	f383 8811 	msr	BASEPRI, r3
 800a216:	f3bf 8f6f 	isb	sy
 800a21a:	f3bf 8f4f 	dsb	sy
 800a21e:	607b      	str	r3, [r7, #4]
}
 800a220:	bf00      	nop
 800a222:	bf00      	nop
 800a224:	e7fd      	b.n	800a222 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a226:	4b0f      	ldr	r3, [pc, #60]	@ (800a264 <vPortValidateInterruptPriority+0x7c>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a22e:	4b0e      	ldr	r3, [pc, #56]	@ (800a268 <vPortValidateInterruptPriority+0x80>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	429a      	cmp	r2, r3
 800a234:	d90b      	bls.n	800a24e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a23a:	f383 8811 	msr	BASEPRI, r3
 800a23e:	f3bf 8f6f 	isb	sy
 800a242:	f3bf 8f4f 	dsb	sy
 800a246:	603b      	str	r3, [r7, #0]
}
 800a248:	bf00      	nop
 800a24a:	bf00      	nop
 800a24c:	e7fd      	b.n	800a24a <vPortValidateInterruptPriority+0x62>
	}
 800a24e:	bf00      	nop
 800a250:	3714      	adds	r7, #20
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr
 800a25a:	bf00      	nop
 800a25c:	e000e3f0 	.word	0xe000e3f0
 800a260:	200016c0 	.word	0x200016c0
 800a264:	e000ed0c 	.word	0xe000ed0c
 800a268:	200016c4 	.word	0x200016c4

0800a26c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b08a      	sub	sp, #40	@ 0x28
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a274:	2300      	movs	r3, #0
 800a276:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a278:	f7fe fc86 	bl	8008b88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a27c:	4b5c      	ldr	r3, [pc, #368]	@ (800a3f0 <pvPortMalloc+0x184>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d101      	bne.n	800a288 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a284:	f000 f924 	bl	800a4d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a288:	4b5a      	ldr	r3, [pc, #360]	@ (800a3f4 <pvPortMalloc+0x188>)
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	4013      	ands	r3, r2
 800a290:	2b00      	cmp	r3, #0
 800a292:	f040 8095 	bne.w	800a3c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d01e      	beq.n	800a2da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a29c:	2208      	movs	r2, #8
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	4413      	add	r3, r2
 800a2a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f003 0307 	and.w	r3, r3, #7
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d015      	beq.n	800a2da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f023 0307 	bic.w	r3, r3, #7
 800a2b4:	3308      	adds	r3, #8
 800a2b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f003 0307 	and.w	r3, r3, #7
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d00b      	beq.n	800a2da <pvPortMalloc+0x6e>
	__asm volatile
 800a2c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2c6:	f383 8811 	msr	BASEPRI, r3
 800a2ca:	f3bf 8f6f 	isb	sy
 800a2ce:	f3bf 8f4f 	dsb	sy
 800a2d2:	617b      	str	r3, [r7, #20]
}
 800a2d4:	bf00      	nop
 800a2d6:	bf00      	nop
 800a2d8:	e7fd      	b.n	800a2d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d06f      	beq.n	800a3c0 <pvPortMalloc+0x154>
 800a2e0:	4b45      	ldr	r3, [pc, #276]	@ (800a3f8 <pvPortMalloc+0x18c>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	687a      	ldr	r2, [r7, #4]
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	d86a      	bhi.n	800a3c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a2ea:	4b44      	ldr	r3, [pc, #272]	@ (800a3fc <pvPortMalloc+0x190>)
 800a2ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a2ee:	4b43      	ldr	r3, [pc, #268]	@ (800a3fc <pvPortMalloc+0x190>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a2f4:	e004      	b.n	800a300 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a2f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a2fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	429a      	cmp	r2, r3
 800a308:	d903      	bls.n	800a312 <pvPortMalloc+0xa6>
 800a30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d1f1      	bne.n	800a2f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a312:	4b37      	ldr	r3, [pc, #220]	@ (800a3f0 <pvPortMalloc+0x184>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a318:	429a      	cmp	r2, r3
 800a31a:	d051      	beq.n	800a3c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a31c:	6a3b      	ldr	r3, [r7, #32]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2208      	movs	r2, #8
 800a322:	4413      	add	r3, r2
 800a324:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	6a3b      	ldr	r3, [r7, #32]
 800a32c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a32e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a330:	685a      	ldr	r2, [r3, #4]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	1ad2      	subs	r2, r2, r3
 800a336:	2308      	movs	r3, #8
 800a338:	005b      	lsls	r3, r3, #1
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d920      	bls.n	800a380 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a33e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	4413      	add	r3, r2
 800a344:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a346:	69bb      	ldr	r3, [r7, #24]
 800a348:	f003 0307 	and.w	r3, r3, #7
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d00b      	beq.n	800a368 <pvPortMalloc+0xfc>
	__asm volatile
 800a350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a354:	f383 8811 	msr	BASEPRI, r3
 800a358:	f3bf 8f6f 	isb	sy
 800a35c:	f3bf 8f4f 	dsb	sy
 800a360:	613b      	str	r3, [r7, #16]
}
 800a362:	bf00      	nop
 800a364:	bf00      	nop
 800a366:	e7fd      	b.n	800a364 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a36a:	685a      	ldr	r2, [r3, #4]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	1ad2      	subs	r2, r2, r3
 800a370:	69bb      	ldr	r3, [r7, #24]
 800a372:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a376:	687a      	ldr	r2, [r7, #4]
 800a378:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a37a:	69b8      	ldr	r0, [r7, #24]
 800a37c:	f000 f90a 	bl	800a594 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a380:	4b1d      	ldr	r3, [pc, #116]	@ (800a3f8 <pvPortMalloc+0x18c>)
 800a382:	681a      	ldr	r2, [r3, #0]
 800a384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a386:	685b      	ldr	r3, [r3, #4]
 800a388:	1ad3      	subs	r3, r2, r3
 800a38a:	4a1b      	ldr	r2, [pc, #108]	@ (800a3f8 <pvPortMalloc+0x18c>)
 800a38c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a38e:	4b1a      	ldr	r3, [pc, #104]	@ (800a3f8 <pvPortMalloc+0x18c>)
 800a390:	681a      	ldr	r2, [r3, #0]
 800a392:	4b1b      	ldr	r3, [pc, #108]	@ (800a400 <pvPortMalloc+0x194>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	429a      	cmp	r2, r3
 800a398:	d203      	bcs.n	800a3a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a39a:	4b17      	ldr	r3, [pc, #92]	@ (800a3f8 <pvPortMalloc+0x18c>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4a18      	ldr	r2, [pc, #96]	@ (800a400 <pvPortMalloc+0x194>)
 800a3a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a3a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3a4:	685a      	ldr	r2, [r3, #4]
 800a3a6:	4b13      	ldr	r3, [pc, #76]	@ (800a3f4 <pvPortMalloc+0x188>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	431a      	orrs	r2, r3
 800a3ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a3b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a3b6:	4b13      	ldr	r3, [pc, #76]	@ (800a404 <pvPortMalloc+0x198>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	3301      	adds	r3, #1
 800a3bc:	4a11      	ldr	r2, [pc, #68]	@ (800a404 <pvPortMalloc+0x198>)
 800a3be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a3c0:	f7fe fbf0 	bl	8008ba4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3c4:	69fb      	ldr	r3, [r7, #28]
 800a3c6:	f003 0307 	and.w	r3, r3, #7
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d00b      	beq.n	800a3e6 <pvPortMalloc+0x17a>
	__asm volatile
 800a3ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3d2:	f383 8811 	msr	BASEPRI, r3
 800a3d6:	f3bf 8f6f 	isb	sy
 800a3da:	f3bf 8f4f 	dsb	sy
 800a3de:	60fb      	str	r3, [r7, #12]
}
 800a3e0:	bf00      	nop
 800a3e2:	bf00      	nop
 800a3e4:	e7fd      	b.n	800a3e2 <pvPortMalloc+0x176>
	return pvReturn;
 800a3e6:	69fb      	ldr	r3, [r7, #28]
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3728      	adds	r7, #40	@ 0x28
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	200052d0 	.word	0x200052d0
 800a3f4:	200052e4 	.word	0x200052e4
 800a3f8:	200052d4 	.word	0x200052d4
 800a3fc:	200052c8 	.word	0x200052c8
 800a400:	200052d8 	.word	0x200052d8
 800a404:	200052dc 	.word	0x200052dc

0800a408 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b086      	sub	sp, #24
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d04f      	beq.n	800a4ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a41a:	2308      	movs	r3, #8
 800a41c:	425b      	negs	r3, r3
 800a41e:	697a      	ldr	r2, [r7, #20]
 800a420:	4413      	add	r3, r2
 800a422:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	685a      	ldr	r2, [r3, #4]
 800a42c:	4b25      	ldr	r3, [pc, #148]	@ (800a4c4 <vPortFree+0xbc>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4013      	ands	r3, r2
 800a432:	2b00      	cmp	r3, #0
 800a434:	d10b      	bne.n	800a44e <vPortFree+0x46>
	__asm volatile
 800a436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a43a:	f383 8811 	msr	BASEPRI, r3
 800a43e:	f3bf 8f6f 	isb	sy
 800a442:	f3bf 8f4f 	dsb	sy
 800a446:	60fb      	str	r3, [r7, #12]
}
 800a448:	bf00      	nop
 800a44a:	bf00      	nop
 800a44c:	e7fd      	b.n	800a44a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d00b      	beq.n	800a46e <vPortFree+0x66>
	__asm volatile
 800a456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a45a:	f383 8811 	msr	BASEPRI, r3
 800a45e:	f3bf 8f6f 	isb	sy
 800a462:	f3bf 8f4f 	dsb	sy
 800a466:	60bb      	str	r3, [r7, #8]
}
 800a468:	bf00      	nop
 800a46a:	bf00      	nop
 800a46c:	e7fd      	b.n	800a46a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	685a      	ldr	r2, [r3, #4]
 800a472:	4b14      	ldr	r3, [pc, #80]	@ (800a4c4 <vPortFree+0xbc>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	4013      	ands	r3, r2
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d01e      	beq.n	800a4ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d11a      	bne.n	800a4ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	685a      	ldr	r2, [r3, #4]
 800a488:	4b0e      	ldr	r3, [pc, #56]	@ (800a4c4 <vPortFree+0xbc>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	43db      	mvns	r3, r3
 800a48e:	401a      	ands	r2, r3
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a494:	f7fe fb78 	bl	8008b88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	685a      	ldr	r2, [r3, #4]
 800a49c:	4b0a      	ldr	r3, [pc, #40]	@ (800a4c8 <vPortFree+0xc0>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4413      	add	r3, r2
 800a4a2:	4a09      	ldr	r2, [pc, #36]	@ (800a4c8 <vPortFree+0xc0>)
 800a4a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a4a6:	6938      	ldr	r0, [r7, #16]
 800a4a8:	f000 f874 	bl	800a594 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a4ac:	4b07      	ldr	r3, [pc, #28]	@ (800a4cc <vPortFree+0xc4>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	4a06      	ldr	r2, [pc, #24]	@ (800a4cc <vPortFree+0xc4>)
 800a4b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a4b6:	f7fe fb75 	bl	8008ba4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a4ba:	bf00      	nop
 800a4bc:	3718      	adds	r7, #24
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	200052e4 	.word	0x200052e4
 800a4c8:	200052d4 	.word	0x200052d4
 800a4cc:	200052e0 	.word	0x200052e0

0800a4d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b085      	sub	sp, #20
 800a4d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a4d6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a4da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a4dc:	4b27      	ldr	r3, [pc, #156]	@ (800a57c <prvHeapInit+0xac>)
 800a4de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f003 0307 	and.w	r3, r3, #7
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d00c      	beq.n	800a504 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	3307      	adds	r3, #7
 800a4ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	f023 0307 	bic.w	r3, r3, #7
 800a4f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a4f8:	68ba      	ldr	r2, [r7, #8]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	1ad3      	subs	r3, r2, r3
 800a4fe:	4a1f      	ldr	r2, [pc, #124]	@ (800a57c <prvHeapInit+0xac>)
 800a500:	4413      	add	r3, r2
 800a502:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a508:	4a1d      	ldr	r2, [pc, #116]	@ (800a580 <prvHeapInit+0xb0>)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a50e:	4b1c      	ldr	r3, [pc, #112]	@ (800a580 <prvHeapInit+0xb0>)
 800a510:	2200      	movs	r2, #0
 800a512:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	68ba      	ldr	r2, [r7, #8]
 800a518:	4413      	add	r3, r2
 800a51a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a51c:	2208      	movs	r2, #8
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	1a9b      	subs	r3, r3, r2
 800a522:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f023 0307 	bic.w	r3, r3, #7
 800a52a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	4a15      	ldr	r2, [pc, #84]	@ (800a584 <prvHeapInit+0xb4>)
 800a530:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a532:	4b14      	ldr	r3, [pc, #80]	@ (800a584 <prvHeapInit+0xb4>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	2200      	movs	r2, #0
 800a538:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a53a:	4b12      	ldr	r3, [pc, #72]	@ (800a584 <prvHeapInit+0xb4>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	2200      	movs	r2, #0
 800a540:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	68fa      	ldr	r2, [r7, #12]
 800a54a:	1ad2      	subs	r2, r2, r3
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a550:	4b0c      	ldr	r3, [pc, #48]	@ (800a584 <prvHeapInit+0xb4>)
 800a552:	681a      	ldr	r2, [r3, #0]
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	685b      	ldr	r3, [r3, #4]
 800a55c:	4a0a      	ldr	r2, [pc, #40]	@ (800a588 <prvHeapInit+0xb8>)
 800a55e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	4a09      	ldr	r2, [pc, #36]	@ (800a58c <prvHeapInit+0xbc>)
 800a566:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a568:	4b09      	ldr	r3, [pc, #36]	@ (800a590 <prvHeapInit+0xc0>)
 800a56a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a56e:	601a      	str	r2, [r3, #0]
}
 800a570:	bf00      	nop
 800a572:	3714      	adds	r7, #20
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr
 800a57c:	200016c8 	.word	0x200016c8
 800a580:	200052c8 	.word	0x200052c8
 800a584:	200052d0 	.word	0x200052d0
 800a588:	200052d8 	.word	0x200052d8
 800a58c:	200052d4 	.word	0x200052d4
 800a590:	200052e4 	.word	0x200052e4

0800a594 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a594:	b480      	push	{r7}
 800a596:	b085      	sub	sp, #20
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a59c:	4b28      	ldr	r3, [pc, #160]	@ (800a640 <prvInsertBlockIntoFreeList+0xac>)
 800a59e:	60fb      	str	r3, [r7, #12]
 800a5a0:	e002      	b.n	800a5a8 <prvInsertBlockIntoFreeList+0x14>
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	60fb      	str	r3, [r7, #12]
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	687a      	ldr	r2, [r7, #4]
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d8f7      	bhi.n	800a5a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	685b      	ldr	r3, [r3, #4]
 800a5ba:	68ba      	ldr	r2, [r7, #8]
 800a5bc:	4413      	add	r3, r2
 800a5be:	687a      	ldr	r2, [r7, #4]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d108      	bne.n	800a5d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	685a      	ldr	r2, [r3, #4]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	685b      	ldr	r3, [r3, #4]
 800a5cc:	441a      	add	r2, r3
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	68ba      	ldr	r2, [r7, #8]
 800a5e0:	441a      	add	r2, r3
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d118      	bne.n	800a61c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	4b15      	ldr	r3, [pc, #84]	@ (800a644 <prvInsertBlockIntoFreeList+0xb0>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d00d      	beq.n	800a612 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	685a      	ldr	r2, [r3, #4]
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	441a      	add	r2, r3
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	681a      	ldr	r2, [r3, #0]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	601a      	str	r2, [r3, #0]
 800a610:	e008      	b.n	800a624 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a612:	4b0c      	ldr	r3, [pc, #48]	@ (800a644 <prvInsertBlockIntoFreeList+0xb0>)
 800a614:	681a      	ldr	r2, [r3, #0]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	601a      	str	r2, [r3, #0]
 800a61a:	e003      	b.n	800a624 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681a      	ldr	r2, [r3, #0]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a624:	68fa      	ldr	r2, [r7, #12]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	429a      	cmp	r2, r3
 800a62a:	d002      	beq.n	800a632 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a632:	bf00      	nop
 800a634:	3714      	adds	r7, #20
 800a636:	46bd      	mov	sp, r7
 800a638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63c:	4770      	bx	lr
 800a63e:	bf00      	nop
 800a640:	200052c8 	.word	0x200052c8
 800a644:	200052d0 	.word	0x200052d0

0800a648 <atoi>:
 800a648:	220a      	movs	r2, #10
 800a64a:	2100      	movs	r1, #0
 800a64c:	f000 b87a 	b.w	800a744 <strtol>

0800a650 <_strtol_l.constprop.0>:
 800a650:	2b24      	cmp	r3, #36	@ 0x24
 800a652:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a656:	4686      	mov	lr, r0
 800a658:	4690      	mov	r8, r2
 800a65a:	d801      	bhi.n	800a660 <_strtol_l.constprop.0+0x10>
 800a65c:	2b01      	cmp	r3, #1
 800a65e:	d106      	bne.n	800a66e <_strtol_l.constprop.0+0x1e>
 800a660:	f000 f8c6 	bl	800a7f0 <__errno>
 800a664:	2316      	movs	r3, #22
 800a666:	6003      	str	r3, [r0, #0]
 800a668:	2000      	movs	r0, #0
 800a66a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a66e:	4834      	ldr	r0, [pc, #208]	@ (800a740 <_strtol_l.constprop.0+0xf0>)
 800a670:	460d      	mov	r5, r1
 800a672:	462a      	mov	r2, r5
 800a674:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a678:	5d06      	ldrb	r6, [r0, r4]
 800a67a:	f016 0608 	ands.w	r6, r6, #8
 800a67e:	d1f8      	bne.n	800a672 <_strtol_l.constprop.0+0x22>
 800a680:	2c2d      	cmp	r4, #45	@ 0x2d
 800a682:	d12d      	bne.n	800a6e0 <_strtol_l.constprop.0+0x90>
 800a684:	782c      	ldrb	r4, [r5, #0]
 800a686:	2601      	movs	r6, #1
 800a688:	1c95      	adds	r5, r2, #2
 800a68a:	f033 0210 	bics.w	r2, r3, #16
 800a68e:	d109      	bne.n	800a6a4 <_strtol_l.constprop.0+0x54>
 800a690:	2c30      	cmp	r4, #48	@ 0x30
 800a692:	d12a      	bne.n	800a6ea <_strtol_l.constprop.0+0x9a>
 800a694:	782a      	ldrb	r2, [r5, #0]
 800a696:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a69a:	2a58      	cmp	r2, #88	@ 0x58
 800a69c:	d125      	bne.n	800a6ea <_strtol_l.constprop.0+0x9a>
 800a69e:	786c      	ldrb	r4, [r5, #1]
 800a6a0:	2310      	movs	r3, #16
 800a6a2:	3502      	adds	r5, #2
 800a6a4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a6a8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	fbbc f9f3 	udiv	r9, ip, r3
 800a6b2:	4610      	mov	r0, r2
 800a6b4:	fb03 ca19 	mls	sl, r3, r9, ip
 800a6b8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a6bc:	2f09      	cmp	r7, #9
 800a6be:	d81b      	bhi.n	800a6f8 <_strtol_l.constprop.0+0xa8>
 800a6c0:	463c      	mov	r4, r7
 800a6c2:	42a3      	cmp	r3, r4
 800a6c4:	dd27      	ble.n	800a716 <_strtol_l.constprop.0+0xc6>
 800a6c6:	1c57      	adds	r7, r2, #1
 800a6c8:	d007      	beq.n	800a6da <_strtol_l.constprop.0+0x8a>
 800a6ca:	4581      	cmp	r9, r0
 800a6cc:	d320      	bcc.n	800a710 <_strtol_l.constprop.0+0xc0>
 800a6ce:	d101      	bne.n	800a6d4 <_strtol_l.constprop.0+0x84>
 800a6d0:	45a2      	cmp	sl, r4
 800a6d2:	db1d      	blt.n	800a710 <_strtol_l.constprop.0+0xc0>
 800a6d4:	fb00 4003 	mla	r0, r0, r3, r4
 800a6d8:	2201      	movs	r2, #1
 800a6da:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a6de:	e7eb      	b.n	800a6b8 <_strtol_l.constprop.0+0x68>
 800a6e0:	2c2b      	cmp	r4, #43	@ 0x2b
 800a6e2:	bf04      	itt	eq
 800a6e4:	782c      	ldrbeq	r4, [r5, #0]
 800a6e6:	1c95      	addeq	r5, r2, #2
 800a6e8:	e7cf      	b.n	800a68a <_strtol_l.constprop.0+0x3a>
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d1da      	bne.n	800a6a4 <_strtol_l.constprop.0+0x54>
 800a6ee:	2c30      	cmp	r4, #48	@ 0x30
 800a6f0:	bf0c      	ite	eq
 800a6f2:	2308      	moveq	r3, #8
 800a6f4:	230a      	movne	r3, #10
 800a6f6:	e7d5      	b.n	800a6a4 <_strtol_l.constprop.0+0x54>
 800a6f8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a6fc:	2f19      	cmp	r7, #25
 800a6fe:	d801      	bhi.n	800a704 <_strtol_l.constprop.0+0xb4>
 800a700:	3c37      	subs	r4, #55	@ 0x37
 800a702:	e7de      	b.n	800a6c2 <_strtol_l.constprop.0+0x72>
 800a704:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a708:	2f19      	cmp	r7, #25
 800a70a:	d804      	bhi.n	800a716 <_strtol_l.constprop.0+0xc6>
 800a70c:	3c57      	subs	r4, #87	@ 0x57
 800a70e:	e7d8      	b.n	800a6c2 <_strtol_l.constprop.0+0x72>
 800a710:	f04f 32ff 	mov.w	r2, #4294967295
 800a714:	e7e1      	b.n	800a6da <_strtol_l.constprop.0+0x8a>
 800a716:	1c53      	adds	r3, r2, #1
 800a718:	d108      	bne.n	800a72c <_strtol_l.constprop.0+0xdc>
 800a71a:	2322      	movs	r3, #34	@ 0x22
 800a71c:	f8ce 3000 	str.w	r3, [lr]
 800a720:	4660      	mov	r0, ip
 800a722:	f1b8 0f00 	cmp.w	r8, #0
 800a726:	d0a0      	beq.n	800a66a <_strtol_l.constprop.0+0x1a>
 800a728:	1e69      	subs	r1, r5, #1
 800a72a:	e006      	b.n	800a73a <_strtol_l.constprop.0+0xea>
 800a72c:	b106      	cbz	r6, 800a730 <_strtol_l.constprop.0+0xe0>
 800a72e:	4240      	negs	r0, r0
 800a730:	f1b8 0f00 	cmp.w	r8, #0
 800a734:	d099      	beq.n	800a66a <_strtol_l.constprop.0+0x1a>
 800a736:	2a00      	cmp	r2, #0
 800a738:	d1f6      	bne.n	800a728 <_strtol_l.constprop.0+0xd8>
 800a73a:	f8c8 1000 	str.w	r1, [r8]
 800a73e:	e794      	b.n	800a66a <_strtol_l.constprop.0+0x1a>
 800a740:	0800c611 	.word	0x0800c611

0800a744 <strtol>:
 800a744:	4613      	mov	r3, r2
 800a746:	460a      	mov	r2, r1
 800a748:	4601      	mov	r1, r0
 800a74a:	4802      	ldr	r0, [pc, #8]	@ (800a754 <strtol+0x10>)
 800a74c:	6800      	ldr	r0, [r0, #0]
 800a74e:	f7ff bf7f 	b.w	800a650 <_strtol_l.constprop.0>
 800a752:	bf00      	nop
 800a754:	20000044 	.word	0x20000044

0800a758 <siprintf>:
 800a758:	b40e      	push	{r1, r2, r3}
 800a75a:	b500      	push	{lr}
 800a75c:	b09c      	sub	sp, #112	@ 0x70
 800a75e:	ab1d      	add	r3, sp, #116	@ 0x74
 800a760:	9002      	str	r0, [sp, #8]
 800a762:	9006      	str	r0, [sp, #24]
 800a764:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a768:	4809      	ldr	r0, [pc, #36]	@ (800a790 <siprintf+0x38>)
 800a76a:	9107      	str	r1, [sp, #28]
 800a76c:	9104      	str	r1, [sp, #16]
 800a76e:	4909      	ldr	r1, [pc, #36]	@ (800a794 <siprintf+0x3c>)
 800a770:	f853 2b04 	ldr.w	r2, [r3], #4
 800a774:	9105      	str	r1, [sp, #20]
 800a776:	6800      	ldr	r0, [r0, #0]
 800a778:	9301      	str	r3, [sp, #4]
 800a77a:	a902      	add	r1, sp, #8
 800a77c:	f000 f9c6 	bl	800ab0c <_svfiprintf_r>
 800a780:	9b02      	ldr	r3, [sp, #8]
 800a782:	2200      	movs	r2, #0
 800a784:	701a      	strb	r2, [r3, #0]
 800a786:	b01c      	add	sp, #112	@ 0x70
 800a788:	f85d eb04 	ldr.w	lr, [sp], #4
 800a78c:	b003      	add	sp, #12
 800a78e:	4770      	bx	lr
 800a790:	20000044 	.word	0x20000044
 800a794:	ffff0208 	.word	0xffff0208

0800a798 <memset>:
 800a798:	4402      	add	r2, r0
 800a79a:	4603      	mov	r3, r0
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d100      	bne.n	800a7a2 <memset+0xa>
 800a7a0:	4770      	bx	lr
 800a7a2:	f803 1b01 	strb.w	r1, [r3], #1
 800a7a6:	e7f9      	b.n	800a79c <memset+0x4>

0800a7a8 <strchr>:
 800a7a8:	b2c9      	uxtb	r1, r1
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7b2:	b112      	cbz	r2, 800a7ba <strchr+0x12>
 800a7b4:	428a      	cmp	r2, r1
 800a7b6:	d1f9      	bne.n	800a7ac <strchr+0x4>
 800a7b8:	4770      	bx	lr
 800a7ba:	2900      	cmp	r1, #0
 800a7bc:	bf18      	it	ne
 800a7be:	2000      	movne	r0, #0
 800a7c0:	4770      	bx	lr

0800a7c2 <strstr>:
 800a7c2:	780a      	ldrb	r2, [r1, #0]
 800a7c4:	b570      	push	{r4, r5, r6, lr}
 800a7c6:	b96a      	cbnz	r2, 800a7e4 <strstr+0x22>
 800a7c8:	bd70      	pop	{r4, r5, r6, pc}
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d109      	bne.n	800a7e2 <strstr+0x20>
 800a7ce:	460c      	mov	r4, r1
 800a7d0:	4605      	mov	r5, r0
 800a7d2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d0f6      	beq.n	800a7c8 <strstr+0x6>
 800a7da:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800a7de:	429e      	cmp	r6, r3
 800a7e0:	d0f7      	beq.n	800a7d2 <strstr+0x10>
 800a7e2:	3001      	adds	r0, #1
 800a7e4:	7803      	ldrb	r3, [r0, #0]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d1ef      	bne.n	800a7ca <strstr+0x8>
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	e7ec      	b.n	800a7c8 <strstr+0x6>
	...

0800a7f0 <__errno>:
 800a7f0:	4b01      	ldr	r3, [pc, #4]	@ (800a7f8 <__errno+0x8>)
 800a7f2:	6818      	ldr	r0, [r3, #0]
 800a7f4:	4770      	bx	lr
 800a7f6:	bf00      	nop
 800a7f8:	20000044 	.word	0x20000044

0800a7fc <__libc_init_array>:
 800a7fc:	b570      	push	{r4, r5, r6, lr}
 800a7fe:	4d0d      	ldr	r5, [pc, #52]	@ (800a834 <__libc_init_array+0x38>)
 800a800:	4c0d      	ldr	r4, [pc, #52]	@ (800a838 <__libc_init_array+0x3c>)
 800a802:	1b64      	subs	r4, r4, r5
 800a804:	10a4      	asrs	r4, r4, #2
 800a806:	2600      	movs	r6, #0
 800a808:	42a6      	cmp	r6, r4
 800a80a:	d109      	bne.n	800a820 <__libc_init_array+0x24>
 800a80c:	4d0b      	ldr	r5, [pc, #44]	@ (800a83c <__libc_init_array+0x40>)
 800a80e:	4c0c      	ldr	r4, [pc, #48]	@ (800a840 <__libc_init_array+0x44>)
 800a810:	f001 fe28 	bl	800c464 <_init>
 800a814:	1b64      	subs	r4, r4, r5
 800a816:	10a4      	asrs	r4, r4, #2
 800a818:	2600      	movs	r6, #0
 800a81a:	42a6      	cmp	r6, r4
 800a81c:	d105      	bne.n	800a82a <__libc_init_array+0x2e>
 800a81e:	bd70      	pop	{r4, r5, r6, pc}
 800a820:	f855 3b04 	ldr.w	r3, [r5], #4
 800a824:	4798      	blx	r3
 800a826:	3601      	adds	r6, #1
 800a828:	e7ee      	b.n	800a808 <__libc_init_array+0xc>
 800a82a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a82e:	4798      	blx	r3
 800a830:	3601      	adds	r6, #1
 800a832:	e7f2      	b.n	800a81a <__libc_init_array+0x1e>
 800a834:	0800c7f0 	.word	0x0800c7f0
 800a838:	0800c7f0 	.word	0x0800c7f0
 800a83c:	0800c7f0 	.word	0x0800c7f0
 800a840:	0800c7f4 	.word	0x0800c7f4

0800a844 <__retarget_lock_acquire_recursive>:
 800a844:	4770      	bx	lr

0800a846 <__retarget_lock_release_recursive>:
 800a846:	4770      	bx	lr

0800a848 <memcpy>:
 800a848:	440a      	add	r2, r1
 800a84a:	4291      	cmp	r1, r2
 800a84c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a850:	d100      	bne.n	800a854 <memcpy+0xc>
 800a852:	4770      	bx	lr
 800a854:	b510      	push	{r4, lr}
 800a856:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a85a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a85e:	4291      	cmp	r1, r2
 800a860:	d1f9      	bne.n	800a856 <memcpy+0xe>
 800a862:	bd10      	pop	{r4, pc}

0800a864 <_free_r>:
 800a864:	b538      	push	{r3, r4, r5, lr}
 800a866:	4605      	mov	r5, r0
 800a868:	2900      	cmp	r1, #0
 800a86a:	d041      	beq.n	800a8f0 <_free_r+0x8c>
 800a86c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a870:	1f0c      	subs	r4, r1, #4
 800a872:	2b00      	cmp	r3, #0
 800a874:	bfb8      	it	lt
 800a876:	18e4      	addlt	r4, r4, r3
 800a878:	f000 f8e0 	bl	800aa3c <__malloc_lock>
 800a87c:	4a1d      	ldr	r2, [pc, #116]	@ (800a8f4 <_free_r+0x90>)
 800a87e:	6813      	ldr	r3, [r2, #0]
 800a880:	b933      	cbnz	r3, 800a890 <_free_r+0x2c>
 800a882:	6063      	str	r3, [r4, #4]
 800a884:	6014      	str	r4, [r2, #0]
 800a886:	4628      	mov	r0, r5
 800a888:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a88c:	f000 b8dc 	b.w	800aa48 <__malloc_unlock>
 800a890:	42a3      	cmp	r3, r4
 800a892:	d908      	bls.n	800a8a6 <_free_r+0x42>
 800a894:	6820      	ldr	r0, [r4, #0]
 800a896:	1821      	adds	r1, r4, r0
 800a898:	428b      	cmp	r3, r1
 800a89a:	bf01      	itttt	eq
 800a89c:	6819      	ldreq	r1, [r3, #0]
 800a89e:	685b      	ldreq	r3, [r3, #4]
 800a8a0:	1809      	addeq	r1, r1, r0
 800a8a2:	6021      	streq	r1, [r4, #0]
 800a8a4:	e7ed      	b.n	800a882 <_free_r+0x1e>
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	b10b      	cbz	r3, 800a8b0 <_free_r+0x4c>
 800a8ac:	42a3      	cmp	r3, r4
 800a8ae:	d9fa      	bls.n	800a8a6 <_free_r+0x42>
 800a8b0:	6811      	ldr	r1, [r2, #0]
 800a8b2:	1850      	adds	r0, r2, r1
 800a8b4:	42a0      	cmp	r0, r4
 800a8b6:	d10b      	bne.n	800a8d0 <_free_r+0x6c>
 800a8b8:	6820      	ldr	r0, [r4, #0]
 800a8ba:	4401      	add	r1, r0
 800a8bc:	1850      	adds	r0, r2, r1
 800a8be:	4283      	cmp	r3, r0
 800a8c0:	6011      	str	r1, [r2, #0]
 800a8c2:	d1e0      	bne.n	800a886 <_free_r+0x22>
 800a8c4:	6818      	ldr	r0, [r3, #0]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	6053      	str	r3, [r2, #4]
 800a8ca:	4408      	add	r0, r1
 800a8cc:	6010      	str	r0, [r2, #0]
 800a8ce:	e7da      	b.n	800a886 <_free_r+0x22>
 800a8d0:	d902      	bls.n	800a8d8 <_free_r+0x74>
 800a8d2:	230c      	movs	r3, #12
 800a8d4:	602b      	str	r3, [r5, #0]
 800a8d6:	e7d6      	b.n	800a886 <_free_r+0x22>
 800a8d8:	6820      	ldr	r0, [r4, #0]
 800a8da:	1821      	adds	r1, r4, r0
 800a8dc:	428b      	cmp	r3, r1
 800a8de:	bf04      	itt	eq
 800a8e0:	6819      	ldreq	r1, [r3, #0]
 800a8e2:	685b      	ldreq	r3, [r3, #4]
 800a8e4:	6063      	str	r3, [r4, #4]
 800a8e6:	bf04      	itt	eq
 800a8e8:	1809      	addeq	r1, r1, r0
 800a8ea:	6021      	streq	r1, [r4, #0]
 800a8ec:	6054      	str	r4, [r2, #4]
 800a8ee:	e7ca      	b.n	800a886 <_free_r+0x22>
 800a8f0:	bd38      	pop	{r3, r4, r5, pc}
 800a8f2:	bf00      	nop
 800a8f4:	2000542c 	.word	0x2000542c

0800a8f8 <sbrk_aligned>:
 800a8f8:	b570      	push	{r4, r5, r6, lr}
 800a8fa:	4e0f      	ldr	r6, [pc, #60]	@ (800a938 <sbrk_aligned+0x40>)
 800a8fc:	460c      	mov	r4, r1
 800a8fe:	6831      	ldr	r1, [r6, #0]
 800a900:	4605      	mov	r5, r0
 800a902:	b911      	cbnz	r1, 800a90a <sbrk_aligned+0x12>
 800a904:	f000 fba6 	bl	800b054 <_sbrk_r>
 800a908:	6030      	str	r0, [r6, #0]
 800a90a:	4621      	mov	r1, r4
 800a90c:	4628      	mov	r0, r5
 800a90e:	f000 fba1 	bl	800b054 <_sbrk_r>
 800a912:	1c43      	adds	r3, r0, #1
 800a914:	d103      	bne.n	800a91e <sbrk_aligned+0x26>
 800a916:	f04f 34ff 	mov.w	r4, #4294967295
 800a91a:	4620      	mov	r0, r4
 800a91c:	bd70      	pop	{r4, r5, r6, pc}
 800a91e:	1cc4      	adds	r4, r0, #3
 800a920:	f024 0403 	bic.w	r4, r4, #3
 800a924:	42a0      	cmp	r0, r4
 800a926:	d0f8      	beq.n	800a91a <sbrk_aligned+0x22>
 800a928:	1a21      	subs	r1, r4, r0
 800a92a:	4628      	mov	r0, r5
 800a92c:	f000 fb92 	bl	800b054 <_sbrk_r>
 800a930:	3001      	adds	r0, #1
 800a932:	d1f2      	bne.n	800a91a <sbrk_aligned+0x22>
 800a934:	e7ef      	b.n	800a916 <sbrk_aligned+0x1e>
 800a936:	bf00      	nop
 800a938:	20005428 	.word	0x20005428

0800a93c <_malloc_r>:
 800a93c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a940:	1ccd      	adds	r5, r1, #3
 800a942:	f025 0503 	bic.w	r5, r5, #3
 800a946:	3508      	adds	r5, #8
 800a948:	2d0c      	cmp	r5, #12
 800a94a:	bf38      	it	cc
 800a94c:	250c      	movcc	r5, #12
 800a94e:	2d00      	cmp	r5, #0
 800a950:	4606      	mov	r6, r0
 800a952:	db01      	blt.n	800a958 <_malloc_r+0x1c>
 800a954:	42a9      	cmp	r1, r5
 800a956:	d904      	bls.n	800a962 <_malloc_r+0x26>
 800a958:	230c      	movs	r3, #12
 800a95a:	6033      	str	r3, [r6, #0]
 800a95c:	2000      	movs	r0, #0
 800a95e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a962:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aa38 <_malloc_r+0xfc>
 800a966:	f000 f869 	bl	800aa3c <__malloc_lock>
 800a96a:	f8d8 3000 	ldr.w	r3, [r8]
 800a96e:	461c      	mov	r4, r3
 800a970:	bb44      	cbnz	r4, 800a9c4 <_malloc_r+0x88>
 800a972:	4629      	mov	r1, r5
 800a974:	4630      	mov	r0, r6
 800a976:	f7ff ffbf 	bl	800a8f8 <sbrk_aligned>
 800a97a:	1c43      	adds	r3, r0, #1
 800a97c:	4604      	mov	r4, r0
 800a97e:	d158      	bne.n	800aa32 <_malloc_r+0xf6>
 800a980:	f8d8 4000 	ldr.w	r4, [r8]
 800a984:	4627      	mov	r7, r4
 800a986:	2f00      	cmp	r7, #0
 800a988:	d143      	bne.n	800aa12 <_malloc_r+0xd6>
 800a98a:	2c00      	cmp	r4, #0
 800a98c:	d04b      	beq.n	800aa26 <_malloc_r+0xea>
 800a98e:	6823      	ldr	r3, [r4, #0]
 800a990:	4639      	mov	r1, r7
 800a992:	4630      	mov	r0, r6
 800a994:	eb04 0903 	add.w	r9, r4, r3
 800a998:	f000 fb5c 	bl	800b054 <_sbrk_r>
 800a99c:	4581      	cmp	r9, r0
 800a99e:	d142      	bne.n	800aa26 <_malloc_r+0xea>
 800a9a0:	6821      	ldr	r1, [r4, #0]
 800a9a2:	1a6d      	subs	r5, r5, r1
 800a9a4:	4629      	mov	r1, r5
 800a9a6:	4630      	mov	r0, r6
 800a9a8:	f7ff ffa6 	bl	800a8f8 <sbrk_aligned>
 800a9ac:	3001      	adds	r0, #1
 800a9ae:	d03a      	beq.n	800aa26 <_malloc_r+0xea>
 800a9b0:	6823      	ldr	r3, [r4, #0]
 800a9b2:	442b      	add	r3, r5
 800a9b4:	6023      	str	r3, [r4, #0]
 800a9b6:	f8d8 3000 	ldr.w	r3, [r8]
 800a9ba:	685a      	ldr	r2, [r3, #4]
 800a9bc:	bb62      	cbnz	r2, 800aa18 <_malloc_r+0xdc>
 800a9be:	f8c8 7000 	str.w	r7, [r8]
 800a9c2:	e00f      	b.n	800a9e4 <_malloc_r+0xa8>
 800a9c4:	6822      	ldr	r2, [r4, #0]
 800a9c6:	1b52      	subs	r2, r2, r5
 800a9c8:	d420      	bmi.n	800aa0c <_malloc_r+0xd0>
 800a9ca:	2a0b      	cmp	r2, #11
 800a9cc:	d917      	bls.n	800a9fe <_malloc_r+0xc2>
 800a9ce:	1961      	adds	r1, r4, r5
 800a9d0:	42a3      	cmp	r3, r4
 800a9d2:	6025      	str	r5, [r4, #0]
 800a9d4:	bf18      	it	ne
 800a9d6:	6059      	strne	r1, [r3, #4]
 800a9d8:	6863      	ldr	r3, [r4, #4]
 800a9da:	bf08      	it	eq
 800a9dc:	f8c8 1000 	streq.w	r1, [r8]
 800a9e0:	5162      	str	r2, [r4, r5]
 800a9e2:	604b      	str	r3, [r1, #4]
 800a9e4:	4630      	mov	r0, r6
 800a9e6:	f000 f82f 	bl	800aa48 <__malloc_unlock>
 800a9ea:	f104 000b 	add.w	r0, r4, #11
 800a9ee:	1d23      	adds	r3, r4, #4
 800a9f0:	f020 0007 	bic.w	r0, r0, #7
 800a9f4:	1ac2      	subs	r2, r0, r3
 800a9f6:	bf1c      	itt	ne
 800a9f8:	1a1b      	subne	r3, r3, r0
 800a9fa:	50a3      	strne	r3, [r4, r2]
 800a9fc:	e7af      	b.n	800a95e <_malloc_r+0x22>
 800a9fe:	6862      	ldr	r2, [r4, #4]
 800aa00:	42a3      	cmp	r3, r4
 800aa02:	bf0c      	ite	eq
 800aa04:	f8c8 2000 	streq.w	r2, [r8]
 800aa08:	605a      	strne	r2, [r3, #4]
 800aa0a:	e7eb      	b.n	800a9e4 <_malloc_r+0xa8>
 800aa0c:	4623      	mov	r3, r4
 800aa0e:	6864      	ldr	r4, [r4, #4]
 800aa10:	e7ae      	b.n	800a970 <_malloc_r+0x34>
 800aa12:	463c      	mov	r4, r7
 800aa14:	687f      	ldr	r7, [r7, #4]
 800aa16:	e7b6      	b.n	800a986 <_malloc_r+0x4a>
 800aa18:	461a      	mov	r2, r3
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	42a3      	cmp	r3, r4
 800aa1e:	d1fb      	bne.n	800aa18 <_malloc_r+0xdc>
 800aa20:	2300      	movs	r3, #0
 800aa22:	6053      	str	r3, [r2, #4]
 800aa24:	e7de      	b.n	800a9e4 <_malloc_r+0xa8>
 800aa26:	230c      	movs	r3, #12
 800aa28:	6033      	str	r3, [r6, #0]
 800aa2a:	4630      	mov	r0, r6
 800aa2c:	f000 f80c 	bl	800aa48 <__malloc_unlock>
 800aa30:	e794      	b.n	800a95c <_malloc_r+0x20>
 800aa32:	6005      	str	r5, [r0, #0]
 800aa34:	e7d6      	b.n	800a9e4 <_malloc_r+0xa8>
 800aa36:	bf00      	nop
 800aa38:	2000542c 	.word	0x2000542c

0800aa3c <__malloc_lock>:
 800aa3c:	4801      	ldr	r0, [pc, #4]	@ (800aa44 <__malloc_lock+0x8>)
 800aa3e:	f7ff bf01 	b.w	800a844 <__retarget_lock_acquire_recursive>
 800aa42:	bf00      	nop
 800aa44:	20005424 	.word	0x20005424

0800aa48 <__malloc_unlock>:
 800aa48:	4801      	ldr	r0, [pc, #4]	@ (800aa50 <__malloc_unlock+0x8>)
 800aa4a:	f7ff befc 	b.w	800a846 <__retarget_lock_release_recursive>
 800aa4e:	bf00      	nop
 800aa50:	20005424 	.word	0x20005424

0800aa54 <__ssputs_r>:
 800aa54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa58:	688e      	ldr	r6, [r1, #8]
 800aa5a:	461f      	mov	r7, r3
 800aa5c:	42be      	cmp	r6, r7
 800aa5e:	680b      	ldr	r3, [r1, #0]
 800aa60:	4682      	mov	sl, r0
 800aa62:	460c      	mov	r4, r1
 800aa64:	4690      	mov	r8, r2
 800aa66:	d82d      	bhi.n	800aac4 <__ssputs_r+0x70>
 800aa68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aa6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aa70:	d026      	beq.n	800aac0 <__ssputs_r+0x6c>
 800aa72:	6965      	ldr	r5, [r4, #20]
 800aa74:	6909      	ldr	r1, [r1, #16]
 800aa76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa7a:	eba3 0901 	sub.w	r9, r3, r1
 800aa7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa82:	1c7b      	adds	r3, r7, #1
 800aa84:	444b      	add	r3, r9
 800aa86:	106d      	asrs	r5, r5, #1
 800aa88:	429d      	cmp	r5, r3
 800aa8a:	bf38      	it	cc
 800aa8c:	461d      	movcc	r5, r3
 800aa8e:	0553      	lsls	r3, r2, #21
 800aa90:	d527      	bpl.n	800aae2 <__ssputs_r+0x8e>
 800aa92:	4629      	mov	r1, r5
 800aa94:	f7ff ff52 	bl	800a93c <_malloc_r>
 800aa98:	4606      	mov	r6, r0
 800aa9a:	b360      	cbz	r0, 800aaf6 <__ssputs_r+0xa2>
 800aa9c:	6921      	ldr	r1, [r4, #16]
 800aa9e:	464a      	mov	r2, r9
 800aaa0:	f7ff fed2 	bl	800a848 <memcpy>
 800aaa4:	89a3      	ldrh	r3, [r4, #12]
 800aaa6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aaaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aaae:	81a3      	strh	r3, [r4, #12]
 800aab0:	6126      	str	r6, [r4, #16]
 800aab2:	6165      	str	r5, [r4, #20]
 800aab4:	444e      	add	r6, r9
 800aab6:	eba5 0509 	sub.w	r5, r5, r9
 800aaba:	6026      	str	r6, [r4, #0]
 800aabc:	60a5      	str	r5, [r4, #8]
 800aabe:	463e      	mov	r6, r7
 800aac0:	42be      	cmp	r6, r7
 800aac2:	d900      	bls.n	800aac6 <__ssputs_r+0x72>
 800aac4:	463e      	mov	r6, r7
 800aac6:	6820      	ldr	r0, [r4, #0]
 800aac8:	4632      	mov	r2, r6
 800aaca:	4641      	mov	r1, r8
 800aacc:	f000 faa8 	bl	800b020 <memmove>
 800aad0:	68a3      	ldr	r3, [r4, #8]
 800aad2:	1b9b      	subs	r3, r3, r6
 800aad4:	60a3      	str	r3, [r4, #8]
 800aad6:	6823      	ldr	r3, [r4, #0]
 800aad8:	4433      	add	r3, r6
 800aada:	6023      	str	r3, [r4, #0]
 800aadc:	2000      	movs	r0, #0
 800aade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aae2:	462a      	mov	r2, r5
 800aae4:	f000 fac6 	bl	800b074 <_realloc_r>
 800aae8:	4606      	mov	r6, r0
 800aaea:	2800      	cmp	r0, #0
 800aaec:	d1e0      	bne.n	800aab0 <__ssputs_r+0x5c>
 800aaee:	6921      	ldr	r1, [r4, #16]
 800aaf0:	4650      	mov	r0, sl
 800aaf2:	f7ff feb7 	bl	800a864 <_free_r>
 800aaf6:	230c      	movs	r3, #12
 800aaf8:	f8ca 3000 	str.w	r3, [sl]
 800aafc:	89a3      	ldrh	r3, [r4, #12]
 800aafe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab02:	81a3      	strh	r3, [r4, #12]
 800ab04:	f04f 30ff 	mov.w	r0, #4294967295
 800ab08:	e7e9      	b.n	800aade <__ssputs_r+0x8a>
	...

0800ab0c <_svfiprintf_r>:
 800ab0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab10:	4698      	mov	r8, r3
 800ab12:	898b      	ldrh	r3, [r1, #12]
 800ab14:	061b      	lsls	r3, r3, #24
 800ab16:	b09d      	sub	sp, #116	@ 0x74
 800ab18:	4607      	mov	r7, r0
 800ab1a:	460d      	mov	r5, r1
 800ab1c:	4614      	mov	r4, r2
 800ab1e:	d510      	bpl.n	800ab42 <_svfiprintf_r+0x36>
 800ab20:	690b      	ldr	r3, [r1, #16]
 800ab22:	b973      	cbnz	r3, 800ab42 <_svfiprintf_r+0x36>
 800ab24:	2140      	movs	r1, #64	@ 0x40
 800ab26:	f7ff ff09 	bl	800a93c <_malloc_r>
 800ab2a:	6028      	str	r0, [r5, #0]
 800ab2c:	6128      	str	r0, [r5, #16]
 800ab2e:	b930      	cbnz	r0, 800ab3e <_svfiprintf_r+0x32>
 800ab30:	230c      	movs	r3, #12
 800ab32:	603b      	str	r3, [r7, #0]
 800ab34:	f04f 30ff 	mov.w	r0, #4294967295
 800ab38:	b01d      	add	sp, #116	@ 0x74
 800ab3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab3e:	2340      	movs	r3, #64	@ 0x40
 800ab40:	616b      	str	r3, [r5, #20]
 800ab42:	2300      	movs	r3, #0
 800ab44:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab46:	2320      	movs	r3, #32
 800ab48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ab4c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab50:	2330      	movs	r3, #48	@ 0x30
 800ab52:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800acf0 <_svfiprintf_r+0x1e4>
 800ab56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ab5a:	f04f 0901 	mov.w	r9, #1
 800ab5e:	4623      	mov	r3, r4
 800ab60:	469a      	mov	sl, r3
 800ab62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab66:	b10a      	cbz	r2, 800ab6c <_svfiprintf_r+0x60>
 800ab68:	2a25      	cmp	r2, #37	@ 0x25
 800ab6a:	d1f9      	bne.n	800ab60 <_svfiprintf_r+0x54>
 800ab6c:	ebba 0b04 	subs.w	fp, sl, r4
 800ab70:	d00b      	beq.n	800ab8a <_svfiprintf_r+0x7e>
 800ab72:	465b      	mov	r3, fp
 800ab74:	4622      	mov	r2, r4
 800ab76:	4629      	mov	r1, r5
 800ab78:	4638      	mov	r0, r7
 800ab7a:	f7ff ff6b 	bl	800aa54 <__ssputs_r>
 800ab7e:	3001      	adds	r0, #1
 800ab80:	f000 80a7 	beq.w	800acd2 <_svfiprintf_r+0x1c6>
 800ab84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab86:	445a      	add	r2, fp
 800ab88:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab8a:	f89a 3000 	ldrb.w	r3, [sl]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	f000 809f 	beq.w	800acd2 <_svfiprintf_r+0x1c6>
 800ab94:	2300      	movs	r3, #0
 800ab96:	f04f 32ff 	mov.w	r2, #4294967295
 800ab9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab9e:	f10a 0a01 	add.w	sl, sl, #1
 800aba2:	9304      	str	r3, [sp, #16]
 800aba4:	9307      	str	r3, [sp, #28]
 800aba6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800abaa:	931a      	str	r3, [sp, #104]	@ 0x68
 800abac:	4654      	mov	r4, sl
 800abae:	2205      	movs	r2, #5
 800abb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abb4:	484e      	ldr	r0, [pc, #312]	@ (800acf0 <_svfiprintf_r+0x1e4>)
 800abb6:	f7f5 fb33 	bl	8000220 <memchr>
 800abba:	9a04      	ldr	r2, [sp, #16]
 800abbc:	b9d8      	cbnz	r0, 800abf6 <_svfiprintf_r+0xea>
 800abbe:	06d0      	lsls	r0, r2, #27
 800abc0:	bf44      	itt	mi
 800abc2:	2320      	movmi	r3, #32
 800abc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abc8:	0711      	lsls	r1, r2, #28
 800abca:	bf44      	itt	mi
 800abcc:	232b      	movmi	r3, #43	@ 0x2b
 800abce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abd2:	f89a 3000 	ldrb.w	r3, [sl]
 800abd6:	2b2a      	cmp	r3, #42	@ 0x2a
 800abd8:	d015      	beq.n	800ac06 <_svfiprintf_r+0xfa>
 800abda:	9a07      	ldr	r2, [sp, #28]
 800abdc:	4654      	mov	r4, sl
 800abde:	2000      	movs	r0, #0
 800abe0:	f04f 0c0a 	mov.w	ip, #10
 800abe4:	4621      	mov	r1, r4
 800abe6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abea:	3b30      	subs	r3, #48	@ 0x30
 800abec:	2b09      	cmp	r3, #9
 800abee:	d94b      	bls.n	800ac88 <_svfiprintf_r+0x17c>
 800abf0:	b1b0      	cbz	r0, 800ac20 <_svfiprintf_r+0x114>
 800abf2:	9207      	str	r2, [sp, #28]
 800abf4:	e014      	b.n	800ac20 <_svfiprintf_r+0x114>
 800abf6:	eba0 0308 	sub.w	r3, r0, r8
 800abfa:	fa09 f303 	lsl.w	r3, r9, r3
 800abfe:	4313      	orrs	r3, r2
 800ac00:	9304      	str	r3, [sp, #16]
 800ac02:	46a2      	mov	sl, r4
 800ac04:	e7d2      	b.n	800abac <_svfiprintf_r+0xa0>
 800ac06:	9b03      	ldr	r3, [sp, #12]
 800ac08:	1d19      	adds	r1, r3, #4
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	9103      	str	r1, [sp, #12]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	bfbb      	ittet	lt
 800ac12:	425b      	neglt	r3, r3
 800ac14:	f042 0202 	orrlt.w	r2, r2, #2
 800ac18:	9307      	strge	r3, [sp, #28]
 800ac1a:	9307      	strlt	r3, [sp, #28]
 800ac1c:	bfb8      	it	lt
 800ac1e:	9204      	strlt	r2, [sp, #16]
 800ac20:	7823      	ldrb	r3, [r4, #0]
 800ac22:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac24:	d10a      	bne.n	800ac3c <_svfiprintf_r+0x130>
 800ac26:	7863      	ldrb	r3, [r4, #1]
 800ac28:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac2a:	d132      	bne.n	800ac92 <_svfiprintf_r+0x186>
 800ac2c:	9b03      	ldr	r3, [sp, #12]
 800ac2e:	1d1a      	adds	r2, r3, #4
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	9203      	str	r2, [sp, #12]
 800ac34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ac38:	3402      	adds	r4, #2
 800ac3a:	9305      	str	r3, [sp, #20]
 800ac3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ad00 <_svfiprintf_r+0x1f4>
 800ac40:	7821      	ldrb	r1, [r4, #0]
 800ac42:	2203      	movs	r2, #3
 800ac44:	4650      	mov	r0, sl
 800ac46:	f7f5 faeb 	bl	8000220 <memchr>
 800ac4a:	b138      	cbz	r0, 800ac5c <_svfiprintf_r+0x150>
 800ac4c:	9b04      	ldr	r3, [sp, #16]
 800ac4e:	eba0 000a 	sub.w	r0, r0, sl
 800ac52:	2240      	movs	r2, #64	@ 0x40
 800ac54:	4082      	lsls	r2, r0
 800ac56:	4313      	orrs	r3, r2
 800ac58:	3401      	adds	r4, #1
 800ac5a:	9304      	str	r3, [sp, #16]
 800ac5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac60:	4824      	ldr	r0, [pc, #144]	@ (800acf4 <_svfiprintf_r+0x1e8>)
 800ac62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac66:	2206      	movs	r2, #6
 800ac68:	f7f5 fada 	bl	8000220 <memchr>
 800ac6c:	2800      	cmp	r0, #0
 800ac6e:	d036      	beq.n	800acde <_svfiprintf_r+0x1d2>
 800ac70:	4b21      	ldr	r3, [pc, #132]	@ (800acf8 <_svfiprintf_r+0x1ec>)
 800ac72:	bb1b      	cbnz	r3, 800acbc <_svfiprintf_r+0x1b0>
 800ac74:	9b03      	ldr	r3, [sp, #12]
 800ac76:	3307      	adds	r3, #7
 800ac78:	f023 0307 	bic.w	r3, r3, #7
 800ac7c:	3308      	adds	r3, #8
 800ac7e:	9303      	str	r3, [sp, #12]
 800ac80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac82:	4433      	add	r3, r6
 800ac84:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac86:	e76a      	b.n	800ab5e <_svfiprintf_r+0x52>
 800ac88:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac8c:	460c      	mov	r4, r1
 800ac8e:	2001      	movs	r0, #1
 800ac90:	e7a8      	b.n	800abe4 <_svfiprintf_r+0xd8>
 800ac92:	2300      	movs	r3, #0
 800ac94:	3401      	adds	r4, #1
 800ac96:	9305      	str	r3, [sp, #20]
 800ac98:	4619      	mov	r1, r3
 800ac9a:	f04f 0c0a 	mov.w	ip, #10
 800ac9e:	4620      	mov	r0, r4
 800aca0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aca4:	3a30      	subs	r2, #48	@ 0x30
 800aca6:	2a09      	cmp	r2, #9
 800aca8:	d903      	bls.n	800acb2 <_svfiprintf_r+0x1a6>
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d0c6      	beq.n	800ac3c <_svfiprintf_r+0x130>
 800acae:	9105      	str	r1, [sp, #20]
 800acb0:	e7c4      	b.n	800ac3c <_svfiprintf_r+0x130>
 800acb2:	fb0c 2101 	mla	r1, ip, r1, r2
 800acb6:	4604      	mov	r4, r0
 800acb8:	2301      	movs	r3, #1
 800acba:	e7f0      	b.n	800ac9e <_svfiprintf_r+0x192>
 800acbc:	ab03      	add	r3, sp, #12
 800acbe:	9300      	str	r3, [sp, #0]
 800acc0:	462a      	mov	r2, r5
 800acc2:	4b0e      	ldr	r3, [pc, #56]	@ (800acfc <_svfiprintf_r+0x1f0>)
 800acc4:	a904      	add	r1, sp, #16
 800acc6:	4638      	mov	r0, r7
 800acc8:	f3af 8000 	nop.w
 800accc:	1c42      	adds	r2, r0, #1
 800acce:	4606      	mov	r6, r0
 800acd0:	d1d6      	bne.n	800ac80 <_svfiprintf_r+0x174>
 800acd2:	89ab      	ldrh	r3, [r5, #12]
 800acd4:	065b      	lsls	r3, r3, #25
 800acd6:	f53f af2d 	bmi.w	800ab34 <_svfiprintf_r+0x28>
 800acda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800acdc:	e72c      	b.n	800ab38 <_svfiprintf_r+0x2c>
 800acde:	ab03      	add	r3, sp, #12
 800ace0:	9300      	str	r3, [sp, #0]
 800ace2:	462a      	mov	r2, r5
 800ace4:	4b05      	ldr	r3, [pc, #20]	@ (800acfc <_svfiprintf_r+0x1f0>)
 800ace6:	a904      	add	r1, sp, #16
 800ace8:	4638      	mov	r0, r7
 800acea:	f000 f879 	bl	800ade0 <_printf_i>
 800acee:	e7ed      	b.n	800accc <_svfiprintf_r+0x1c0>
 800acf0:	0800c711 	.word	0x0800c711
 800acf4:	0800c71b 	.word	0x0800c71b
 800acf8:	00000000 	.word	0x00000000
 800acfc:	0800aa55 	.word	0x0800aa55
 800ad00:	0800c717 	.word	0x0800c717

0800ad04 <_printf_common>:
 800ad04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad08:	4616      	mov	r6, r2
 800ad0a:	4698      	mov	r8, r3
 800ad0c:	688a      	ldr	r2, [r1, #8]
 800ad0e:	690b      	ldr	r3, [r1, #16]
 800ad10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ad14:	4293      	cmp	r3, r2
 800ad16:	bfb8      	it	lt
 800ad18:	4613      	movlt	r3, r2
 800ad1a:	6033      	str	r3, [r6, #0]
 800ad1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ad20:	4607      	mov	r7, r0
 800ad22:	460c      	mov	r4, r1
 800ad24:	b10a      	cbz	r2, 800ad2a <_printf_common+0x26>
 800ad26:	3301      	adds	r3, #1
 800ad28:	6033      	str	r3, [r6, #0]
 800ad2a:	6823      	ldr	r3, [r4, #0]
 800ad2c:	0699      	lsls	r1, r3, #26
 800ad2e:	bf42      	ittt	mi
 800ad30:	6833      	ldrmi	r3, [r6, #0]
 800ad32:	3302      	addmi	r3, #2
 800ad34:	6033      	strmi	r3, [r6, #0]
 800ad36:	6825      	ldr	r5, [r4, #0]
 800ad38:	f015 0506 	ands.w	r5, r5, #6
 800ad3c:	d106      	bne.n	800ad4c <_printf_common+0x48>
 800ad3e:	f104 0a19 	add.w	sl, r4, #25
 800ad42:	68e3      	ldr	r3, [r4, #12]
 800ad44:	6832      	ldr	r2, [r6, #0]
 800ad46:	1a9b      	subs	r3, r3, r2
 800ad48:	42ab      	cmp	r3, r5
 800ad4a:	dc26      	bgt.n	800ad9a <_printf_common+0x96>
 800ad4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ad50:	6822      	ldr	r2, [r4, #0]
 800ad52:	3b00      	subs	r3, #0
 800ad54:	bf18      	it	ne
 800ad56:	2301      	movne	r3, #1
 800ad58:	0692      	lsls	r2, r2, #26
 800ad5a:	d42b      	bmi.n	800adb4 <_printf_common+0xb0>
 800ad5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ad60:	4641      	mov	r1, r8
 800ad62:	4638      	mov	r0, r7
 800ad64:	47c8      	blx	r9
 800ad66:	3001      	adds	r0, #1
 800ad68:	d01e      	beq.n	800ada8 <_printf_common+0xa4>
 800ad6a:	6823      	ldr	r3, [r4, #0]
 800ad6c:	6922      	ldr	r2, [r4, #16]
 800ad6e:	f003 0306 	and.w	r3, r3, #6
 800ad72:	2b04      	cmp	r3, #4
 800ad74:	bf02      	ittt	eq
 800ad76:	68e5      	ldreq	r5, [r4, #12]
 800ad78:	6833      	ldreq	r3, [r6, #0]
 800ad7a:	1aed      	subeq	r5, r5, r3
 800ad7c:	68a3      	ldr	r3, [r4, #8]
 800ad7e:	bf0c      	ite	eq
 800ad80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad84:	2500      	movne	r5, #0
 800ad86:	4293      	cmp	r3, r2
 800ad88:	bfc4      	itt	gt
 800ad8a:	1a9b      	subgt	r3, r3, r2
 800ad8c:	18ed      	addgt	r5, r5, r3
 800ad8e:	2600      	movs	r6, #0
 800ad90:	341a      	adds	r4, #26
 800ad92:	42b5      	cmp	r5, r6
 800ad94:	d11a      	bne.n	800adcc <_printf_common+0xc8>
 800ad96:	2000      	movs	r0, #0
 800ad98:	e008      	b.n	800adac <_printf_common+0xa8>
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	4652      	mov	r2, sl
 800ad9e:	4641      	mov	r1, r8
 800ada0:	4638      	mov	r0, r7
 800ada2:	47c8      	blx	r9
 800ada4:	3001      	adds	r0, #1
 800ada6:	d103      	bne.n	800adb0 <_printf_common+0xac>
 800ada8:	f04f 30ff 	mov.w	r0, #4294967295
 800adac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adb0:	3501      	adds	r5, #1
 800adb2:	e7c6      	b.n	800ad42 <_printf_common+0x3e>
 800adb4:	18e1      	adds	r1, r4, r3
 800adb6:	1c5a      	adds	r2, r3, #1
 800adb8:	2030      	movs	r0, #48	@ 0x30
 800adba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800adbe:	4422      	add	r2, r4
 800adc0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800adc4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800adc8:	3302      	adds	r3, #2
 800adca:	e7c7      	b.n	800ad5c <_printf_common+0x58>
 800adcc:	2301      	movs	r3, #1
 800adce:	4622      	mov	r2, r4
 800add0:	4641      	mov	r1, r8
 800add2:	4638      	mov	r0, r7
 800add4:	47c8      	blx	r9
 800add6:	3001      	adds	r0, #1
 800add8:	d0e6      	beq.n	800ada8 <_printf_common+0xa4>
 800adda:	3601      	adds	r6, #1
 800addc:	e7d9      	b.n	800ad92 <_printf_common+0x8e>
	...

0800ade0 <_printf_i>:
 800ade0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ade4:	7e0f      	ldrb	r7, [r1, #24]
 800ade6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ade8:	2f78      	cmp	r7, #120	@ 0x78
 800adea:	4691      	mov	r9, r2
 800adec:	4680      	mov	r8, r0
 800adee:	460c      	mov	r4, r1
 800adf0:	469a      	mov	sl, r3
 800adf2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800adf6:	d807      	bhi.n	800ae08 <_printf_i+0x28>
 800adf8:	2f62      	cmp	r7, #98	@ 0x62
 800adfa:	d80a      	bhi.n	800ae12 <_printf_i+0x32>
 800adfc:	2f00      	cmp	r7, #0
 800adfe:	f000 80d2 	beq.w	800afa6 <_printf_i+0x1c6>
 800ae02:	2f58      	cmp	r7, #88	@ 0x58
 800ae04:	f000 80b9 	beq.w	800af7a <_printf_i+0x19a>
 800ae08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ae10:	e03a      	b.n	800ae88 <_printf_i+0xa8>
 800ae12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ae16:	2b15      	cmp	r3, #21
 800ae18:	d8f6      	bhi.n	800ae08 <_printf_i+0x28>
 800ae1a:	a101      	add	r1, pc, #4	@ (adr r1, 800ae20 <_printf_i+0x40>)
 800ae1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ae20:	0800ae79 	.word	0x0800ae79
 800ae24:	0800ae8d 	.word	0x0800ae8d
 800ae28:	0800ae09 	.word	0x0800ae09
 800ae2c:	0800ae09 	.word	0x0800ae09
 800ae30:	0800ae09 	.word	0x0800ae09
 800ae34:	0800ae09 	.word	0x0800ae09
 800ae38:	0800ae8d 	.word	0x0800ae8d
 800ae3c:	0800ae09 	.word	0x0800ae09
 800ae40:	0800ae09 	.word	0x0800ae09
 800ae44:	0800ae09 	.word	0x0800ae09
 800ae48:	0800ae09 	.word	0x0800ae09
 800ae4c:	0800af8d 	.word	0x0800af8d
 800ae50:	0800aeb7 	.word	0x0800aeb7
 800ae54:	0800af47 	.word	0x0800af47
 800ae58:	0800ae09 	.word	0x0800ae09
 800ae5c:	0800ae09 	.word	0x0800ae09
 800ae60:	0800afaf 	.word	0x0800afaf
 800ae64:	0800ae09 	.word	0x0800ae09
 800ae68:	0800aeb7 	.word	0x0800aeb7
 800ae6c:	0800ae09 	.word	0x0800ae09
 800ae70:	0800ae09 	.word	0x0800ae09
 800ae74:	0800af4f 	.word	0x0800af4f
 800ae78:	6833      	ldr	r3, [r6, #0]
 800ae7a:	1d1a      	adds	r2, r3, #4
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	6032      	str	r2, [r6, #0]
 800ae80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ae88:	2301      	movs	r3, #1
 800ae8a:	e09d      	b.n	800afc8 <_printf_i+0x1e8>
 800ae8c:	6833      	ldr	r3, [r6, #0]
 800ae8e:	6820      	ldr	r0, [r4, #0]
 800ae90:	1d19      	adds	r1, r3, #4
 800ae92:	6031      	str	r1, [r6, #0]
 800ae94:	0606      	lsls	r6, r0, #24
 800ae96:	d501      	bpl.n	800ae9c <_printf_i+0xbc>
 800ae98:	681d      	ldr	r5, [r3, #0]
 800ae9a:	e003      	b.n	800aea4 <_printf_i+0xc4>
 800ae9c:	0645      	lsls	r5, r0, #25
 800ae9e:	d5fb      	bpl.n	800ae98 <_printf_i+0xb8>
 800aea0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aea4:	2d00      	cmp	r5, #0
 800aea6:	da03      	bge.n	800aeb0 <_printf_i+0xd0>
 800aea8:	232d      	movs	r3, #45	@ 0x2d
 800aeaa:	426d      	negs	r5, r5
 800aeac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aeb0:	4859      	ldr	r0, [pc, #356]	@ (800b018 <_printf_i+0x238>)
 800aeb2:	230a      	movs	r3, #10
 800aeb4:	e011      	b.n	800aeda <_printf_i+0xfa>
 800aeb6:	6821      	ldr	r1, [r4, #0]
 800aeb8:	6833      	ldr	r3, [r6, #0]
 800aeba:	0608      	lsls	r0, r1, #24
 800aebc:	f853 5b04 	ldr.w	r5, [r3], #4
 800aec0:	d402      	bmi.n	800aec8 <_printf_i+0xe8>
 800aec2:	0649      	lsls	r1, r1, #25
 800aec4:	bf48      	it	mi
 800aec6:	b2ad      	uxthmi	r5, r5
 800aec8:	2f6f      	cmp	r7, #111	@ 0x6f
 800aeca:	4853      	ldr	r0, [pc, #332]	@ (800b018 <_printf_i+0x238>)
 800aecc:	6033      	str	r3, [r6, #0]
 800aece:	bf14      	ite	ne
 800aed0:	230a      	movne	r3, #10
 800aed2:	2308      	moveq	r3, #8
 800aed4:	2100      	movs	r1, #0
 800aed6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aeda:	6866      	ldr	r6, [r4, #4]
 800aedc:	60a6      	str	r6, [r4, #8]
 800aede:	2e00      	cmp	r6, #0
 800aee0:	bfa2      	ittt	ge
 800aee2:	6821      	ldrge	r1, [r4, #0]
 800aee4:	f021 0104 	bicge.w	r1, r1, #4
 800aee8:	6021      	strge	r1, [r4, #0]
 800aeea:	b90d      	cbnz	r5, 800aef0 <_printf_i+0x110>
 800aeec:	2e00      	cmp	r6, #0
 800aeee:	d04b      	beq.n	800af88 <_printf_i+0x1a8>
 800aef0:	4616      	mov	r6, r2
 800aef2:	fbb5 f1f3 	udiv	r1, r5, r3
 800aef6:	fb03 5711 	mls	r7, r3, r1, r5
 800aefa:	5dc7      	ldrb	r7, [r0, r7]
 800aefc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800af00:	462f      	mov	r7, r5
 800af02:	42bb      	cmp	r3, r7
 800af04:	460d      	mov	r5, r1
 800af06:	d9f4      	bls.n	800aef2 <_printf_i+0x112>
 800af08:	2b08      	cmp	r3, #8
 800af0a:	d10b      	bne.n	800af24 <_printf_i+0x144>
 800af0c:	6823      	ldr	r3, [r4, #0]
 800af0e:	07df      	lsls	r7, r3, #31
 800af10:	d508      	bpl.n	800af24 <_printf_i+0x144>
 800af12:	6923      	ldr	r3, [r4, #16]
 800af14:	6861      	ldr	r1, [r4, #4]
 800af16:	4299      	cmp	r1, r3
 800af18:	bfde      	ittt	le
 800af1a:	2330      	movle	r3, #48	@ 0x30
 800af1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800af20:	f106 36ff 	addle.w	r6, r6, #4294967295
 800af24:	1b92      	subs	r2, r2, r6
 800af26:	6122      	str	r2, [r4, #16]
 800af28:	f8cd a000 	str.w	sl, [sp]
 800af2c:	464b      	mov	r3, r9
 800af2e:	aa03      	add	r2, sp, #12
 800af30:	4621      	mov	r1, r4
 800af32:	4640      	mov	r0, r8
 800af34:	f7ff fee6 	bl	800ad04 <_printf_common>
 800af38:	3001      	adds	r0, #1
 800af3a:	d14a      	bne.n	800afd2 <_printf_i+0x1f2>
 800af3c:	f04f 30ff 	mov.w	r0, #4294967295
 800af40:	b004      	add	sp, #16
 800af42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af46:	6823      	ldr	r3, [r4, #0]
 800af48:	f043 0320 	orr.w	r3, r3, #32
 800af4c:	6023      	str	r3, [r4, #0]
 800af4e:	4833      	ldr	r0, [pc, #204]	@ (800b01c <_printf_i+0x23c>)
 800af50:	2778      	movs	r7, #120	@ 0x78
 800af52:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800af56:	6823      	ldr	r3, [r4, #0]
 800af58:	6831      	ldr	r1, [r6, #0]
 800af5a:	061f      	lsls	r7, r3, #24
 800af5c:	f851 5b04 	ldr.w	r5, [r1], #4
 800af60:	d402      	bmi.n	800af68 <_printf_i+0x188>
 800af62:	065f      	lsls	r7, r3, #25
 800af64:	bf48      	it	mi
 800af66:	b2ad      	uxthmi	r5, r5
 800af68:	6031      	str	r1, [r6, #0]
 800af6a:	07d9      	lsls	r1, r3, #31
 800af6c:	bf44      	itt	mi
 800af6e:	f043 0320 	orrmi.w	r3, r3, #32
 800af72:	6023      	strmi	r3, [r4, #0]
 800af74:	b11d      	cbz	r5, 800af7e <_printf_i+0x19e>
 800af76:	2310      	movs	r3, #16
 800af78:	e7ac      	b.n	800aed4 <_printf_i+0xf4>
 800af7a:	4827      	ldr	r0, [pc, #156]	@ (800b018 <_printf_i+0x238>)
 800af7c:	e7e9      	b.n	800af52 <_printf_i+0x172>
 800af7e:	6823      	ldr	r3, [r4, #0]
 800af80:	f023 0320 	bic.w	r3, r3, #32
 800af84:	6023      	str	r3, [r4, #0]
 800af86:	e7f6      	b.n	800af76 <_printf_i+0x196>
 800af88:	4616      	mov	r6, r2
 800af8a:	e7bd      	b.n	800af08 <_printf_i+0x128>
 800af8c:	6833      	ldr	r3, [r6, #0]
 800af8e:	6825      	ldr	r5, [r4, #0]
 800af90:	6961      	ldr	r1, [r4, #20]
 800af92:	1d18      	adds	r0, r3, #4
 800af94:	6030      	str	r0, [r6, #0]
 800af96:	062e      	lsls	r6, r5, #24
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	d501      	bpl.n	800afa0 <_printf_i+0x1c0>
 800af9c:	6019      	str	r1, [r3, #0]
 800af9e:	e002      	b.n	800afa6 <_printf_i+0x1c6>
 800afa0:	0668      	lsls	r0, r5, #25
 800afa2:	d5fb      	bpl.n	800af9c <_printf_i+0x1bc>
 800afa4:	8019      	strh	r1, [r3, #0]
 800afa6:	2300      	movs	r3, #0
 800afa8:	6123      	str	r3, [r4, #16]
 800afaa:	4616      	mov	r6, r2
 800afac:	e7bc      	b.n	800af28 <_printf_i+0x148>
 800afae:	6833      	ldr	r3, [r6, #0]
 800afb0:	1d1a      	adds	r2, r3, #4
 800afb2:	6032      	str	r2, [r6, #0]
 800afb4:	681e      	ldr	r6, [r3, #0]
 800afb6:	6862      	ldr	r2, [r4, #4]
 800afb8:	2100      	movs	r1, #0
 800afba:	4630      	mov	r0, r6
 800afbc:	f7f5 f930 	bl	8000220 <memchr>
 800afc0:	b108      	cbz	r0, 800afc6 <_printf_i+0x1e6>
 800afc2:	1b80      	subs	r0, r0, r6
 800afc4:	6060      	str	r0, [r4, #4]
 800afc6:	6863      	ldr	r3, [r4, #4]
 800afc8:	6123      	str	r3, [r4, #16]
 800afca:	2300      	movs	r3, #0
 800afcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800afd0:	e7aa      	b.n	800af28 <_printf_i+0x148>
 800afd2:	6923      	ldr	r3, [r4, #16]
 800afd4:	4632      	mov	r2, r6
 800afd6:	4649      	mov	r1, r9
 800afd8:	4640      	mov	r0, r8
 800afda:	47d0      	blx	sl
 800afdc:	3001      	adds	r0, #1
 800afde:	d0ad      	beq.n	800af3c <_printf_i+0x15c>
 800afe0:	6823      	ldr	r3, [r4, #0]
 800afe2:	079b      	lsls	r3, r3, #30
 800afe4:	d413      	bmi.n	800b00e <_printf_i+0x22e>
 800afe6:	68e0      	ldr	r0, [r4, #12]
 800afe8:	9b03      	ldr	r3, [sp, #12]
 800afea:	4298      	cmp	r0, r3
 800afec:	bfb8      	it	lt
 800afee:	4618      	movlt	r0, r3
 800aff0:	e7a6      	b.n	800af40 <_printf_i+0x160>
 800aff2:	2301      	movs	r3, #1
 800aff4:	4632      	mov	r2, r6
 800aff6:	4649      	mov	r1, r9
 800aff8:	4640      	mov	r0, r8
 800affa:	47d0      	blx	sl
 800affc:	3001      	adds	r0, #1
 800affe:	d09d      	beq.n	800af3c <_printf_i+0x15c>
 800b000:	3501      	adds	r5, #1
 800b002:	68e3      	ldr	r3, [r4, #12]
 800b004:	9903      	ldr	r1, [sp, #12]
 800b006:	1a5b      	subs	r3, r3, r1
 800b008:	42ab      	cmp	r3, r5
 800b00a:	dcf2      	bgt.n	800aff2 <_printf_i+0x212>
 800b00c:	e7eb      	b.n	800afe6 <_printf_i+0x206>
 800b00e:	2500      	movs	r5, #0
 800b010:	f104 0619 	add.w	r6, r4, #25
 800b014:	e7f5      	b.n	800b002 <_printf_i+0x222>
 800b016:	bf00      	nop
 800b018:	0800c722 	.word	0x0800c722
 800b01c:	0800c733 	.word	0x0800c733

0800b020 <memmove>:
 800b020:	4288      	cmp	r0, r1
 800b022:	b510      	push	{r4, lr}
 800b024:	eb01 0402 	add.w	r4, r1, r2
 800b028:	d902      	bls.n	800b030 <memmove+0x10>
 800b02a:	4284      	cmp	r4, r0
 800b02c:	4623      	mov	r3, r4
 800b02e:	d807      	bhi.n	800b040 <memmove+0x20>
 800b030:	1e43      	subs	r3, r0, #1
 800b032:	42a1      	cmp	r1, r4
 800b034:	d008      	beq.n	800b048 <memmove+0x28>
 800b036:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b03a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b03e:	e7f8      	b.n	800b032 <memmove+0x12>
 800b040:	4402      	add	r2, r0
 800b042:	4601      	mov	r1, r0
 800b044:	428a      	cmp	r2, r1
 800b046:	d100      	bne.n	800b04a <memmove+0x2a>
 800b048:	bd10      	pop	{r4, pc}
 800b04a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b04e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b052:	e7f7      	b.n	800b044 <memmove+0x24>

0800b054 <_sbrk_r>:
 800b054:	b538      	push	{r3, r4, r5, lr}
 800b056:	4d06      	ldr	r5, [pc, #24]	@ (800b070 <_sbrk_r+0x1c>)
 800b058:	2300      	movs	r3, #0
 800b05a:	4604      	mov	r4, r0
 800b05c:	4608      	mov	r0, r1
 800b05e:	602b      	str	r3, [r5, #0]
 800b060:	f7f7 feba 	bl	8002dd8 <_sbrk>
 800b064:	1c43      	adds	r3, r0, #1
 800b066:	d102      	bne.n	800b06e <_sbrk_r+0x1a>
 800b068:	682b      	ldr	r3, [r5, #0]
 800b06a:	b103      	cbz	r3, 800b06e <_sbrk_r+0x1a>
 800b06c:	6023      	str	r3, [r4, #0]
 800b06e:	bd38      	pop	{r3, r4, r5, pc}
 800b070:	20005420 	.word	0x20005420

0800b074 <_realloc_r>:
 800b074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b078:	4680      	mov	r8, r0
 800b07a:	4615      	mov	r5, r2
 800b07c:	460c      	mov	r4, r1
 800b07e:	b921      	cbnz	r1, 800b08a <_realloc_r+0x16>
 800b080:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b084:	4611      	mov	r1, r2
 800b086:	f7ff bc59 	b.w	800a93c <_malloc_r>
 800b08a:	b92a      	cbnz	r2, 800b098 <_realloc_r+0x24>
 800b08c:	f7ff fbea 	bl	800a864 <_free_r>
 800b090:	2400      	movs	r4, #0
 800b092:	4620      	mov	r0, r4
 800b094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b098:	f000 f81a 	bl	800b0d0 <_malloc_usable_size_r>
 800b09c:	4285      	cmp	r5, r0
 800b09e:	4606      	mov	r6, r0
 800b0a0:	d802      	bhi.n	800b0a8 <_realloc_r+0x34>
 800b0a2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b0a6:	d8f4      	bhi.n	800b092 <_realloc_r+0x1e>
 800b0a8:	4629      	mov	r1, r5
 800b0aa:	4640      	mov	r0, r8
 800b0ac:	f7ff fc46 	bl	800a93c <_malloc_r>
 800b0b0:	4607      	mov	r7, r0
 800b0b2:	2800      	cmp	r0, #0
 800b0b4:	d0ec      	beq.n	800b090 <_realloc_r+0x1c>
 800b0b6:	42b5      	cmp	r5, r6
 800b0b8:	462a      	mov	r2, r5
 800b0ba:	4621      	mov	r1, r4
 800b0bc:	bf28      	it	cs
 800b0be:	4632      	movcs	r2, r6
 800b0c0:	f7ff fbc2 	bl	800a848 <memcpy>
 800b0c4:	4621      	mov	r1, r4
 800b0c6:	4640      	mov	r0, r8
 800b0c8:	f7ff fbcc 	bl	800a864 <_free_r>
 800b0cc:	463c      	mov	r4, r7
 800b0ce:	e7e0      	b.n	800b092 <_realloc_r+0x1e>

0800b0d0 <_malloc_usable_size_r>:
 800b0d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0d4:	1f18      	subs	r0, r3, #4
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	bfbc      	itt	lt
 800b0da:	580b      	ldrlt	r3, [r1, r0]
 800b0dc:	18c0      	addlt	r0, r0, r3
 800b0de:	4770      	bx	lr

0800b0e0 <atan2>:
 800b0e0:	f000 ba1e 	b.w	800b520 <__ieee754_atan2>

0800b0e4 <pow>:
 800b0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0e6:	ed2d 8b02 	vpush	{d8}
 800b0ea:	eeb0 8a40 	vmov.f32	s16, s0
 800b0ee:	eef0 8a60 	vmov.f32	s17, s1
 800b0f2:	ec55 4b11 	vmov	r4, r5, d1
 800b0f6:	f000 fadb 	bl	800b6b0 <__ieee754_pow>
 800b0fa:	4622      	mov	r2, r4
 800b0fc:	462b      	mov	r3, r5
 800b0fe:	4620      	mov	r0, r4
 800b100:	4629      	mov	r1, r5
 800b102:	ec57 6b10 	vmov	r6, r7, d0
 800b106:	f7f5 fd31 	bl	8000b6c <__aeabi_dcmpun>
 800b10a:	2800      	cmp	r0, #0
 800b10c:	d13b      	bne.n	800b186 <pow+0xa2>
 800b10e:	ec51 0b18 	vmov	r0, r1, d8
 800b112:	2200      	movs	r2, #0
 800b114:	2300      	movs	r3, #0
 800b116:	f7f5 fcf7 	bl	8000b08 <__aeabi_dcmpeq>
 800b11a:	b1b8      	cbz	r0, 800b14c <pow+0x68>
 800b11c:	2200      	movs	r2, #0
 800b11e:	2300      	movs	r3, #0
 800b120:	4620      	mov	r0, r4
 800b122:	4629      	mov	r1, r5
 800b124:	f7f5 fcf0 	bl	8000b08 <__aeabi_dcmpeq>
 800b128:	2800      	cmp	r0, #0
 800b12a:	d146      	bne.n	800b1ba <pow+0xd6>
 800b12c:	ec45 4b10 	vmov	d0, r4, r5
 800b130:	f000 f9ea 	bl	800b508 <finite>
 800b134:	b338      	cbz	r0, 800b186 <pow+0xa2>
 800b136:	2200      	movs	r2, #0
 800b138:	2300      	movs	r3, #0
 800b13a:	4620      	mov	r0, r4
 800b13c:	4629      	mov	r1, r5
 800b13e:	f7f5 fced 	bl	8000b1c <__aeabi_dcmplt>
 800b142:	b300      	cbz	r0, 800b186 <pow+0xa2>
 800b144:	f7ff fb54 	bl	800a7f0 <__errno>
 800b148:	2322      	movs	r3, #34	@ 0x22
 800b14a:	e01b      	b.n	800b184 <pow+0xa0>
 800b14c:	ec47 6b10 	vmov	d0, r6, r7
 800b150:	f000 f9da 	bl	800b508 <finite>
 800b154:	b9e0      	cbnz	r0, 800b190 <pow+0xac>
 800b156:	eeb0 0a48 	vmov.f32	s0, s16
 800b15a:	eef0 0a68 	vmov.f32	s1, s17
 800b15e:	f000 f9d3 	bl	800b508 <finite>
 800b162:	b1a8      	cbz	r0, 800b190 <pow+0xac>
 800b164:	ec45 4b10 	vmov	d0, r4, r5
 800b168:	f000 f9ce 	bl	800b508 <finite>
 800b16c:	b180      	cbz	r0, 800b190 <pow+0xac>
 800b16e:	4632      	mov	r2, r6
 800b170:	463b      	mov	r3, r7
 800b172:	4630      	mov	r0, r6
 800b174:	4639      	mov	r1, r7
 800b176:	f7f5 fcf9 	bl	8000b6c <__aeabi_dcmpun>
 800b17a:	2800      	cmp	r0, #0
 800b17c:	d0e2      	beq.n	800b144 <pow+0x60>
 800b17e:	f7ff fb37 	bl	800a7f0 <__errno>
 800b182:	2321      	movs	r3, #33	@ 0x21
 800b184:	6003      	str	r3, [r0, #0]
 800b186:	ecbd 8b02 	vpop	{d8}
 800b18a:	ec47 6b10 	vmov	d0, r6, r7
 800b18e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b190:	2200      	movs	r2, #0
 800b192:	2300      	movs	r3, #0
 800b194:	4630      	mov	r0, r6
 800b196:	4639      	mov	r1, r7
 800b198:	f7f5 fcb6 	bl	8000b08 <__aeabi_dcmpeq>
 800b19c:	2800      	cmp	r0, #0
 800b19e:	d0f2      	beq.n	800b186 <pow+0xa2>
 800b1a0:	eeb0 0a48 	vmov.f32	s0, s16
 800b1a4:	eef0 0a68 	vmov.f32	s1, s17
 800b1a8:	f000 f9ae 	bl	800b508 <finite>
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	d0ea      	beq.n	800b186 <pow+0xa2>
 800b1b0:	ec45 4b10 	vmov	d0, r4, r5
 800b1b4:	f000 f9a8 	bl	800b508 <finite>
 800b1b8:	e7c3      	b.n	800b142 <pow+0x5e>
 800b1ba:	4f01      	ldr	r7, [pc, #4]	@ (800b1c0 <pow+0xdc>)
 800b1bc:	2600      	movs	r6, #0
 800b1be:	e7e2      	b.n	800b186 <pow+0xa2>
 800b1c0:	3ff00000 	.word	0x3ff00000
 800b1c4:	00000000 	.word	0x00000000

0800b1c8 <atan>:
 800b1c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1cc:	ec55 4b10 	vmov	r4, r5, d0
 800b1d0:	4bbf      	ldr	r3, [pc, #764]	@ (800b4d0 <atan+0x308>)
 800b1d2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800b1d6:	429e      	cmp	r6, r3
 800b1d8:	46ab      	mov	fp, r5
 800b1da:	d918      	bls.n	800b20e <atan+0x46>
 800b1dc:	4bbd      	ldr	r3, [pc, #756]	@ (800b4d4 <atan+0x30c>)
 800b1de:	429e      	cmp	r6, r3
 800b1e0:	d801      	bhi.n	800b1e6 <atan+0x1e>
 800b1e2:	d109      	bne.n	800b1f8 <atan+0x30>
 800b1e4:	b144      	cbz	r4, 800b1f8 <atan+0x30>
 800b1e6:	4622      	mov	r2, r4
 800b1e8:	462b      	mov	r3, r5
 800b1ea:	4620      	mov	r0, r4
 800b1ec:	4629      	mov	r1, r5
 800b1ee:	f7f5 f86d 	bl	80002cc <__adddf3>
 800b1f2:	4604      	mov	r4, r0
 800b1f4:	460d      	mov	r5, r1
 800b1f6:	e006      	b.n	800b206 <atan+0x3e>
 800b1f8:	f1bb 0f00 	cmp.w	fp, #0
 800b1fc:	f340 812b 	ble.w	800b456 <atan+0x28e>
 800b200:	a597      	add	r5, pc, #604	@ (adr r5, 800b460 <atan+0x298>)
 800b202:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b206:	ec45 4b10 	vmov	d0, r4, r5
 800b20a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b20e:	4bb2      	ldr	r3, [pc, #712]	@ (800b4d8 <atan+0x310>)
 800b210:	429e      	cmp	r6, r3
 800b212:	d813      	bhi.n	800b23c <atan+0x74>
 800b214:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800b218:	429e      	cmp	r6, r3
 800b21a:	d80c      	bhi.n	800b236 <atan+0x6e>
 800b21c:	a392      	add	r3, pc, #584	@ (adr r3, 800b468 <atan+0x2a0>)
 800b21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b222:	4620      	mov	r0, r4
 800b224:	4629      	mov	r1, r5
 800b226:	f7f5 f851 	bl	80002cc <__adddf3>
 800b22a:	4bac      	ldr	r3, [pc, #688]	@ (800b4dc <atan+0x314>)
 800b22c:	2200      	movs	r2, #0
 800b22e:	f7f5 fc93 	bl	8000b58 <__aeabi_dcmpgt>
 800b232:	2800      	cmp	r0, #0
 800b234:	d1e7      	bne.n	800b206 <atan+0x3e>
 800b236:	f04f 3aff 	mov.w	sl, #4294967295
 800b23a:	e029      	b.n	800b290 <atan+0xc8>
 800b23c:	f000 f95c 	bl	800b4f8 <fabs>
 800b240:	4ba7      	ldr	r3, [pc, #668]	@ (800b4e0 <atan+0x318>)
 800b242:	429e      	cmp	r6, r3
 800b244:	ec55 4b10 	vmov	r4, r5, d0
 800b248:	f200 80bc 	bhi.w	800b3c4 <atan+0x1fc>
 800b24c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800b250:	429e      	cmp	r6, r3
 800b252:	f200 809e 	bhi.w	800b392 <atan+0x1ca>
 800b256:	4622      	mov	r2, r4
 800b258:	462b      	mov	r3, r5
 800b25a:	4620      	mov	r0, r4
 800b25c:	4629      	mov	r1, r5
 800b25e:	f7f5 f835 	bl	80002cc <__adddf3>
 800b262:	4b9e      	ldr	r3, [pc, #632]	@ (800b4dc <atan+0x314>)
 800b264:	2200      	movs	r2, #0
 800b266:	f7f5 f82f 	bl	80002c8 <__aeabi_dsub>
 800b26a:	2200      	movs	r2, #0
 800b26c:	4606      	mov	r6, r0
 800b26e:	460f      	mov	r7, r1
 800b270:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b274:	4620      	mov	r0, r4
 800b276:	4629      	mov	r1, r5
 800b278:	f7f5 f828 	bl	80002cc <__adddf3>
 800b27c:	4602      	mov	r2, r0
 800b27e:	460b      	mov	r3, r1
 800b280:	4630      	mov	r0, r6
 800b282:	4639      	mov	r1, r7
 800b284:	f7f5 fb02 	bl	800088c <__aeabi_ddiv>
 800b288:	f04f 0a00 	mov.w	sl, #0
 800b28c:	4604      	mov	r4, r0
 800b28e:	460d      	mov	r5, r1
 800b290:	4622      	mov	r2, r4
 800b292:	462b      	mov	r3, r5
 800b294:	4620      	mov	r0, r4
 800b296:	4629      	mov	r1, r5
 800b298:	f7f5 f9ce 	bl	8000638 <__aeabi_dmul>
 800b29c:	4602      	mov	r2, r0
 800b29e:	460b      	mov	r3, r1
 800b2a0:	4680      	mov	r8, r0
 800b2a2:	4689      	mov	r9, r1
 800b2a4:	f7f5 f9c8 	bl	8000638 <__aeabi_dmul>
 800b2a8:	a371      	add	r3, pc, #452	@ (adr r3, 800b470 <atan+0x2a8>)
 800b2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ae:	4606      	mov	r6, r0
 800b2b0:	460f      	mov	r7, r1
 800b2b2:	f7f5 f9c1 	bl	8000638 <__aeabi_dmul>
 800b2b6:	a370      	add	r3, pc, #448	@ (adr r3, 800b478 <atan+0x2b0>)
 800b2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2bc:	f7f5 f806 	bl	80002cc <__adddf3>
 800b2c0:	4632      	mov	r2, r6
 800b2c2:	463b      	mov	r3, r7
 800b2c4:	f7f5 f9b8 	bl	8000638 <__aeabi_dmul>
 800b2c8:	a36d      	add	r3, pc, #436	@ (adr r3, 800b480 <atan+0x2b8>)
 800b2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ce:	f7f4 fffd 	bl	80002cc <__adddf3>
 800b2d2:	4632      	mov	r2, r6
 800b2d4:	463b      	mov	r3, r7
 800b2d6:	f7f5 f9af 	bl	8000638 <__aeabi_dmul>
 800b2da:	a36b      	add	r3, pc, #428	@ (adr r3, 800b488 <atan+0x2c0>)
 800b2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e0:	f7f4 fff4 	bl	80002cc <__adddf3>
 800b2e4:	4632      	mov	r2, r6
 800b2e6:	463b      	mov	r3, r7
 800b2e8:	f7f5 f9a6 	bl	8000638 <__aeabi_dmul>
 800b2ec:	a368      	add	r3, pc, #416	@ (adr r3, 800b490 <atan+0x2c8>)
 800b2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f2:	f7f4 ffeb 	bl	80002cc <__adddf3>
 800b2f6:	4632      	mov	r2, r6
 800b2f8:	463b      	mov	r3, r7
 800b2fa:	f7f5 f99d 	bl	8000638 <__aeabi_dmul>
 800b2fe:	a366      	add	r3, pc, #408	@ (adr r3, 800b498 <atan+0x2d0>)
 800b300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b304:	f7f4 ffe2 	bl	80002cc <__adddf3>
 800b308:	4642      	mov	r2, r8
 800b30a:	464b      	mov	r3, r9
 800b30c:	f7f5 f994 	bl	8000638 <__aeabi_dmul>
 800b310:	a363      	add	r3, pc, #396	@ (adr r3, 800b4a0 <atan+0x2d8>)
 800b312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b316:	4680      	mov	r8, r0
 800b318:	4689      	mov	r9, r1
 800b31a:	4630      	mov	r0, r6
 800b31c:	4639      	mov	r1, r7
 800b31e:	f7f5 f98b 	bl	8000638 <__aeabi_dmul>
 800b322:	a361      	add	r3, pc, #388	@ (adr r3, 800b4a8 <atan+0x2e0>)
 800b324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b328:	f7f4 ffce 	bl	80002c8 <__aeabi_dsub>
 800b32c:	4632      	mov	r2, r6
 800b32e:	463b      	mov	r3, r7
 800b330:	f7f5 f982 	bl	8000638 <__aeabi_dmul>
 800b334:	a35e      	add	r3, pc, #376	@ (adr r3, 800b4b0 <atan+0x2e8>)
 800b336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b33a:	f7f4 ffc5 	bl	80002c8 <__aeabi_dsub>
 800b33e:	4632      	mov	r2, r6
 800b340:	463b      	mov	r3, r7
 800b342:	f7f5 f979 	bl	8000638 <__aeabi_dmul>
 800b346:	a35c      	add	r3, pc, #368	@ (adr r3, 800b4b8 <atan+0x2f0>)
 800b348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b34c:	f7f4 ffbc 	bl	80002c8 <__aeabi_dsub>
 800b350:	4632      	mov	r2, r6
 800b352:	463b      	mov	r3, r7
 800b354:	f7f5 f970 	bl	8000638 <__aeabi_dmul>
 800b358:	a359      	add	r3, pc, #356	@ (adr r3, 800b4c0 <atan+0x2f8>)
 800b35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35e:	f7f4 ffb3 	bl	80002c8 <__aeabi_dsub>
 800b362:	4632      	mov	r2, r6
 800b364:	463b      	mov	r3, r7
 800b366:	f7f5 f967 	bl	8000638 <__aeabi_dmul>
 800b36a:	4602      	mov	r2, r0
 800b36c:	460b      	mov	r3, r1
 800b36e:	4640      	mov	r0, r8
 800b370:	4649      	mov	r1, r9
 800b372:	f7f4 ffab 	bl	80002cc <__adddf3>
 800b376:	4622      	mov	r2, r4
 800b378:	462b      	mov	r3, r5
 800b37a:	f7f5 f95d 	bl	8000638 <__aeabi_dmul>
 800b37e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b382:	4602      	mov	r2, r0
 800b384:	460b      	mov	r3, r1
 800b386:	d148      	bne.n	800b41a <atan+0x252>
 800b388:	4620      	mov	r0, r4
 800b38a:	4629      	mov	r1, r5
 800b38c:	f7f4 ff9c 	bl	80002c8 <__aeabi_dsub>
 800b390:	e72f      	b.n	800b1f2 <atan+0x2a>
 800b392:	4b52      	ldr	r3, [pc, #328]	@ (800b4dc <atan+0x314>)
 800b394:	2200      	movs	r2, #0
 800b396:	4620      	mov	r0, r4
 800b398:	4629      	mov	r1, r5
 800b39a:	f7f4 ff95 	bl	80002c8 <__aeabi_dsub>
 800b39e:	4b4f      	ldr	r3, [pc, #316]	@ (800b4dc <atan+0x314>)
 800b3a0:	4606      	mov	r6, r0
 800b3a2:	460f      	mov	r7, r1
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	4620      	mov	r0, r4
 800b3a8:	4629      	mov	r1, r5
 800b3aa:	f7f4 ff8f 	bl	80002cc <__adddf3>
 800b3ae:	4602      	mov	r2, r0
 800b3b0:	460b      	mov	r3, r1
 800b3b2:	4630      	mov	r0, r6
 800b3b4:	4639      	mov	r1, r7
 800b3b6:	f7f5 fa69 	bl	800088c <__aeabi_ddiv>
 800b3ba:	f04f 0a01 	mov.w	sl, #1
 800b3be:	4604      	mov	r4, r0
 800b3c0:	460d      	mov	r5, r1
 800b3c2:	e765      	b.n	800b290 <atan+0xc8>
 800b3c4:	4b47      	ldr	r3, [pc, #284]	@ (800b4e4 <atan+0x31c>)
 800b3c6:	429e      	cmp	r6, r3
 800b3c8:	d21c      	bcs.n	800b404 <atan+0x23c>
 800b3ca:	4b47      	ldr	r3, [pc, #284]	@ (800b4e8 <atan+0x320>)
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	4629      	mov	r1, r5
 800b3d2:	f7f4 ff79 	bl	80002c8 <__aeabi_dsub>
 800b3d6:	4b44      	ldr	r3, [pc, #272]	@ (800b4e8 <atan+0x320>)
 800b3d8:	4606      	mov	r6, r0
 800b3da:	460f      	mov	r7, r1
 800b3dc:	2200      	movs	r2, #0
 800b3de:	4620      	mov	r0, r4
 800b3e0:	4629      	mov	r1, r5
 800b3e2:	f7f5 f929 	bl	8000638 <__aeabi_dmul>
 800b3e6:	4b3d      	ldr	r3, [pc, #244]	@ (800b4dc <atan+0x314>)
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	f7f4 ff6f 	bl	80002cc <__adddf3>
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	4630      	mov	r0, r6
 800b3f4:	4639      	mov	r1, r7
 800b3f6:	f7f5 fa49 	bl	800088c <__aeabi_ddiv>
 800b3fa:	f04f 0a02 	mov.w	sl, #2
 800b3fe:	4604      	mov	r4, r0
 800b400:	460d      	mov	r5, r1
 800b402:	e745      	b.n	800b290 <atan+0xc8>
 800b404:	4622      	mov	r2, r4
 800b406:	462b      	mov	r3, r5
 800b408:	4938      	ldr	r1, [pc, #224]	@ (800b4ec <atan+0x324>)
 800b40a:	2000      	movs	r0, #0
 800b40c:	f7f5 fa3e 	bl	800088c <__aeabi_ddiv>
 800b410:	f04f 0a03 	mov.w	sl, #3
 800b414:	4604      	mov	r4, r0
 800b416:	460d      	mov	r5, r1
 800b418:	e73a      	b.n	800b290 <atan+0xc8>
 800b41a:	4b35      	ldr	r3, [pc, #212]	@ (800b4f0 <atan+0x328>)
 800b41c:	4e35      	ldr	r6, [pc, #212]	@ (800b4f4 <atan+0x32c>)
 800b41e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b426:	f7f4 ff4f 	bl	80002c8 <__aeabi_dsub>
 800b42a:	4622      	mov	r2, r4
 800b42c:	462b      	mov	r3, r5
 800b42e:	f7f4 ff4b 	bl	80002c8 <__aeabi_dsub>
 800b432:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b436:	4602      	mov	r2, r0
 800b438:	460b      	mov	r3, r1
 800b43a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b43e:	f7f4 ff43 	bl	80002c8 <__aeabi_dsub>
 800b442:	f1bb 0f00 	cmp.w	fp, #0
 800b446:	4604      	mov	r4, r0
 800b448:	460d      	mov	r5, r1
 800b44a:	f6bf aedc 	bge.w	800b206 <atan+0x3e>
 800b44e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b452:	461d      	mov	r5, r3
 800b454:	e6d7      	b.n	800b206 <atan+0x3e>
 800b456:	a51c      	add	r5, pc, #112	@ (adr r5, 800b4c8 <atan+0x300>)
 800b458:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b45c:	e6d3      	b.n	800b206 <atan+0x3e>
 800b45e:	bf00      	nop
 800b460:	54442d18 	.word	0x54442d18
 800b464:	3ff921fb 	.word	0x3ff921fb
 800b468:	8800759c 	.word	0x8800759c
 800b46c:	7e37e43c 	.word	0x7e37e43c
 800b470:	e322da11 	.word	0xe322da11
 800b474:	3f90ad3a 	.word	0x3f90ad3a
 800b478:	24760deb 	.word	0x24760deb
 800b47c:	3fa97b4b 	.word	0x3fa97b4b
 800b480:	a0d03d51 	.word	0xa0d03d51
 800b484:	3fb10d66 	.word	0x3fb10d66
 800b488:	c54c206e 	.word	0xc54c206e
 800b48c:	3fb745cd 	.word	0x3fb745cd
 800b490:	920083ff 	.word	0x920083ff
 800b494:	3fc24924 	.word	0x3fc24924
 800b498:	5555550d 	.word	0x5555550d
 800b49c:	3fd55555 	.word	0x3fd55555
 800b4a0:	2c6a6c2f 	.word	0x2c6a6c2f
 800b4a4:	bfa2b444 	.word	0xbfa2b444
 800b4a8:	52defd9a 	.word	0x52defd9a
 800b4ac:	3fadde2d 	.word	0x3fadde2d
 800b4b0:	af749a6d 	.word	0xaf749a6d
 800b4b4:	3fb3b0f2 	.word	0x3fb3b0f2
 800b4b8:	fe231671 	.word	0xfe231671
 800b4bc:	3fbc71c6 	.word	0x3fbc71c6
 800b4c0:	9998ebc4 	.word	0x9998ebc4
 800b4c4:	3fc99999 	.word	0x3fc99999
 800b4c8:	54442d18 	.word	0x54442d18
 800b4cc:	bff921fb 	.word	0xbff921fb
 800b4d0:	440fffff 	.word	0x440fffff
 800b4d4:	7ff00000 	.word	0x7ff00000
 800b4d8:	3fdbffff 	.word	0x3fdbffff
 800b4dc:	3ff00000 	.word	0x3ff00000
 800b4e0:	3ff2ffff 	.word	0x3ff2ffff
 800b4e4:	40038000 	.word	0x40038000
 800b4e8:	3ff80000 	.word	0x3ff80000
 800b4ec:	bff00000 	.word	0xbff00000
 800b4f0:	0800c748 	.word	0x0800c748
 800b4f4:	0800c768 	.word	0x0800c768

0800b4f8 <fabs>:
 800b4f8:	ec51 0b10 	vmov	r0, r1, d0
 800b4fc:	4602      	mov	r2, r0
 800b4fe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b502:	ec43 2b10 	vmov	d0, r2, r3
 800b506:	4770      	bx	lr

0800b508 <finite>:
 800b508:	b082      	sub	sp, #8
 800b50a:	ed8d 0b00 	vstr	d0, [sp]
 800b50e:	9801      	ldr	r0, [sp, #4]
 800b510:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800b514:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800b518:	0fc0      	lsrs	r0, r0, #31
 800b51a:	b002      	add	sp, #8
 800b51c:	4770      	bx	lr
	...

0800b520 <__ieee754_atan2>:
 800b520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b524:	ec57 6b11 	vmov	r6, r7, d1
 800b528:	4273      	negs	r3, r6
 800b52a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800b6a8 <__ieee754_atan2+0x188>
 800b52e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800b532:	4333      	orrs	r3, r6
 800b534:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b538:	4543      	cmp	r3, r8
 800b53a:	ec51 0b10 	vmov	r0, r1, d0
 800b53e:	4635      	mov	r5, r6
 800b540:	d809      	bhi.n	800b556 <__ieee754_atan2+0x36>
 800b542:	4244      	negs	r4, r0
 800b544:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b548:	4304      	orrs	r4, r0
 800b54a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b54e:	4544      	cmp	r4, r8
 800b550:	468e      	mov	lr, r1
 800b552:	4681      	mov	r9, r0
 800b554:	d907      	bls.n	800b566 <__ieee754_atan2+0x46>
 800b556:	4632      	mov	r2, r6
 800b558:	463b      	mov	r3, r7
 800b55a:	f7f4 feb7 	bl	80002cc <__adddf3>
 800b55e:	ec41 0b10 	vmov	d0, r0, r1
 800b562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b566:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800b56a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800b56e:	4334      	orrs	r4, r6
 800b570:	d103      	bne.n	800b57a <__ieee754_atan2+0x5a>
 800b572:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b576:	f7ff be27 	b.w	800b1c8 <atan>
 800b57a:	17bc      	asrs	r4, r7, #30
 800b57c:	f004 0402 	and.w	r4, r4, #2
 800b580:	ea53 0909 	orrs.w	r9, r3, r9
 800b584:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b588:	d107      	bne.n	800b59a <__ieee754_atan2+0x7a>
 800b58a:	2c02      	cmp	r4, #2
 800b58c:	d05f      	beq.n	800b64e <__ieee754_atan2+0x12e>
 800b58e:	2c03      	cmp	r4, #3
 800b590:	d1e5      	bne.n	800b55e <__ieee754_atan2+0x3e>
 800b592:	a141      	add	r1, pc, #260	@ (adr r1, 800b698 <__ieee754_atan2+0x178>)
 800b594:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b598:	e7e1      	b.n	800b55e <__ieee754_atan2+0x3e>
 800b59a:	4315      	orrs	r5, r2
 800b59c:	d106      	bne.n	800b5ac <__ieee754_atan2+0x8c>
 800b59e:	f1be 0f00 	cmp.w	lr, #0
 800b5a2:	da5f      	bge.n	800b664 <__ieee754_atan2+0x144>
 800b5a4:	a13e      	add	r1, pc, #248	@ (adr r1, 800b6a0 <__ieee754_atan2+0x180>)
 800b5a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5aa:	e7d8      	b.n	800b55e <__ieee754_atan2+0x3e>
 800b5ac:	4542      	cmp	r2, r8
 800b5ae:	d10f      	bne.n	800b5d0 <__ieee754_atan2+0xb0>
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	f104 34ff 	add.w	r4, r4, #4294967295
 800b5b6:	d107      	bne.n	800b5c8 <__ieee754_atan2+0xa8>
 800b5b8:	2c02      	cmp	r4, #2
 800b5ba:	d84c      	bhi.n	800b656 <__ieee754_atan2+0x136>
 800b5bc:	4b34      	ldr	r3, [pc, #208]	@ (800b690 <__ieee754_atan2+0x170>)
 800b5be:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b5c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b5c6:	e7ca      	b.n	800b55e <__ieee754_atan2+0x3e>
 800b5c8:	2c02      	cmp	r4, #2
 800b5ca:	d848      	bhi.n	800b65e <__ieee754_atan2+0x13e>
 800b5cc:	4b31      	ldr	r3, [pc, #196]	@ (800b694 <__ieee754_atan2+0x174>)
 800b5ce:	e7f6      	b.n	800b5be <__ieee754_atan2+0x9e>
 800b5d0:	4543      	cmp	r3, r8
 800b5d2:	d0e4      	beq.n	800b59e <__ieee754_atan2+0x7e>
 800b5d4:	1a9b      	subs	r3, r3, r2
 800b5d6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800b5da:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b5de:	da1e      	bge.n	800b61e <__ieee754_atan2+0xfe>
 800b5e0:	2f00      	cmp	r7, #0
 800b5e2:	da01      	bge.n	800b5e8 <__ieee754_atan2+0xc8>
 800b5e4:	323c      	adds	r2, #60	@ 0x3c
 800b5e6:	db1e      	blt.n	800b626 <__ieee754_atan2+0x106>
 800b5e8:	4632      	mov	r2, r6
 800b5ea:	463b      	mov	r3, r7
 800b5ec:	f7f5 f94e 	bl	800088c <__aeabi_ddiv>
 800b5f0:	ec41 0b10 	vmov	d0, r0, r1
 800b5f4:	f7ff ff80 	bl	800b4f8 <fabs>
 800b5f8:	f7ff fde6 	bl	800b1c8 <atan>
 800b5fc:	ec51 0b10 	vmov	r0, r1, d0
 800b600:	2c01      	cmp	r4, #1
 800b602:	d013      	beq.n	800b62c <__ieee754_atan2+0x10c>
 800b604:	2c02      	cmp	r4, #2
 800b606:	d015      	beq.n	800b634 <__ieee754_atan2+0x114>
 800b608:	2c00      	cmp	r4, #0
 800b60a:	d0a8      	beq.n	800b55e <__ieee754_atan2+0x3e>
 800b60c:	a318      	add	r3, pc, #96	@ (adr r3, 800b670 <__ieee754_atan2+0x150>)
 800b60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b612:	f7f4 fe59 	bl	80002c8 <__aeabi_dsub>
 800b616:	a318      	add	r3, pc, #96	@ (adr r3, 800b678 <__ieee754_atan2+0x158>)
 800b618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61c:	e014      	b.n	800b648 <__ieee754_atan2+0x128>
 800b61e:	a118      	add	r1, pc, #96	@ (adr r1, 800b680 <__ieee754_atan2+0x160>)
 800b620:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b624:	e7ec      	b.n	800b600 <__ieee754_atan2+0xe0>
 800b626:	2000      	movs	r0, #0
 800b628:	2100      	movs	r1, #0
 800b62a:	e7e9      	b.n	800b600 <__ieee754_atan2+0xe0>
 800b62c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b630:	4619      	mov	r1, r3
 800b632:	e794      	b.n	800b55e <__ieee754_atan2+0x3e>
 800b634:	a30e      	add	r3, pc, #56	@ (adr r3, 800b670 <__ieee754_atan2+0x150>)
 800b636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63a:	f7f4 fe45 	bl	80002c8 <__aeabi_dsub>
 800b63e:	4602      	mov	r2, r0
 800b640:	460b      	mov	r3, r1
 800b642:	a10d      	add	r1, pc, #52	@ (adr r1, 800b678 <__ieee754_atan2+0x158>)
 800b644:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b648:	f7f4 fe3e 	bl	80002c8 <__aeabi_dsub>
 800b64c:	e787      	b.n	800b55e <__ieee754_atan2+0x3e>
 800b64e:	a10a      	add	r1, pc, #40	@ (adr r1, 800b678 <__ieee754_atan2+0x158>)
 800b650:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b654:	e783      	b.n	800b55e <__ieee754_atan2+0x3e>
 800b656:	a10c      	add	r1, pc, #48	@ (adr r1, 800b688 <__ieee754_atan2+0x168>)
 800b658:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b65c:	e77f      	b.n	800b55e <__ieee754_atan2+0x3e>
 800b65e:	2000      	movs	r0, #0
 800b660:	2100      	movs	r1, #0
 800b662:	e77c      	b.n	800b55e <__ieee754_atan2+0x3e>
 800b664:	a106      	add	r1, pc, #24	@ (adr r1, 800b680 <__ieee754_atan2+0x160>)
 800b666:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b66a:	e778      	b.n	800b55e <__ieee754_atan2+0x3e>
 800b66c:	f3af 8000 	nop.w
 800b670:	33145c07 	.word	0x33145c07
 800b674:	3ca1a626 	.word	0x3ca1a626
 800b678:	54442d18 	.word	0x54442d18
 800b67c:	400921fb 	.word	0x400921fb
 800b680:	54442d18 	.word	0x54442d18
 800b684:	3ff921fb 	.word	0x3ff921fb
 800b688:	54442d18 	.word	0x54442d18
 800b68c:	3fe921fb 	.word	0x3fe921fb
 800b690:	0800c7a0 	.word	0x0800c7a0
 800b694:	0800c788 	.word	0x0800c788
 800b698:	54442d18 	.word	0x54442d18
 800b69c:	c00921fb 	.word	0xc00921fb
 800b6a0:	54442d18 	.word	0x54442d18
 800b6a4:	bff921fb 	.word	0xbff921fb
 800b6a8:	7ff00000 	.word	0x7ff00000
 800b6ac:	00000000 	.word	0x00000000

0800b6b0 <__ieee754_pow>:
 800b6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6b4:	b091      	sub	sp, #68	@ 0x44
 800b6b6:	ed8d 1b00 	vstr	d1, [sp]
 800b6ba:	e9dd 1900 	ldrd	r1, r9, [sp]
 800b6be:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800b6c2:	ea5a 0001 	orrs.w	r0, sl, r1
 800b6c6:	ec57 6b10 	vmov	r6, r7, d0
 800b6ca:	d113      	bne.n	800b6f4 <__ieee754_pow+0x44>
 800b6cc:	19b3      	adds	r3, r6, r6
 800b6ce:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800b6d2:	4152      	adcs	r2, r2
 800b6d4:	4298      	cmp	r0, r3
 800b6d6:	4b98      	ldr	r3, [pc, #608]	@ (800b938 <__ieee754_pow+0x288>)
 800b6d8:	4193      	sbcs	r3, r2
 800b6da:	f080 84ea 	bcs.w	800c0b2 <__ieee754_pow+0xa02>
 800b6de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6e2:	4630      	mov	r0, r6
 800b6e4:	4639      	mov	r1, r7
 800b6e6:	f7f4 fdf1 	bl	80002cc <__adddf3>
 800b6ea:	ec41 0b10 	vmov	d0, r0, r1
 800b6ee:	b011      	add	sp, #68	@ 0x44
 800b6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6f4:	4a91      	ldr	r2, [pc, #580]	@ (800b93c <__ieee754_pow+0x28c>)
 800b6f6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b6fa:	4590      	cmp	r8, r2
 800b6fc:	463d      	mov	r5, r7
 800b6fe:	4633      	mov	r3, r6
 800b700:	d806      	bhi.n	800b710 <__ieee754_pow+0x60>
 800b702:	d101      	bne.n	800b708 <__ieee754_pow+0x58>
 800b704:	2e00      	cmp	r6, #0
 800b706:	d1ea      	bne.n	800b6de <__ieee754_pow+0x2e>
 800b708:	4592      	cmp	sl, r2
 800b70a:	d801      	bhi.n	800b710 <__ieee754_pow+0x60>
 800b70c:	d10e      	bne.n	800b72c <__ieee754_pow+0x7c>
 800b70e:	b169      	cbz	r1, 800b72c <__ieee754_pow+0x7c>
 800b710:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800b714:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800b718:	431d      	orrs	r5, r3
 800b71a:	d1e0      	bne.n	800b6de <__ieee754_pow+0x2e>
 800b71c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b720:	18db      	adds	r3, r3, r3
 800b722:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800b726:	4152      	adcs	r2, r2
 800b728:	429d      	cmp	r5, r3
 800b72a:	e7d4      	b.n	800b6d6 <__ieee754_pow+0x26>
 800b72c:	2d00      	cmp	r5, #0
 800b72e:	46c3      	mov	fp, r8
 800b730:	da3a      	bge.n	800b7a8 <__ieee754_pow+0xf8>
 800b732:	4a83      	ldr	r2, [pc, #524]	@ (800b940 <__ieee754_pow+0x290>)
 800b734:	4592      	cmp	sl, r2
 800b736:	d84d      	bhi.n	800b7d4 <__ieee754_pow+0x124>
 800b738:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800b73c:	4592      	cmp	sl, r2
 800b73e:	f240 84c7 	bls.w	800c0d0 <__ieee754_pow+0xa20>
 800b742:	ea4f 522a 	mov.w	r2, sl, asr #20
 800b746:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800b74a:	2a14      	cmp	r2, #20
 800b74c:	dd0f      	ble.n	800b76e <__ieee754_pow+0xbe>
 800b74e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800b752:	fa21 f402 	lsr.w	r4, r1, r2
 800b756:	fa04 f202 	lsl.w	r2, r4, r2
 800b75a:	428a      	cmp	r2, r1
 800b75c:	f040 84b8 	bne.w	800c0d0 <__ieee754_pow+0xa20>
 800b760:	f004 0401 	and.w	r4, r4, #1
 800b764:	f1c4 0402 	rsb	r4, r4, #2
 800b768:	2900      	cmp	r1, #0
 800b76a:	d158      	bne.n	800b81e <__ieee754_pow+0x16e>
 800b76c:	e00e      	b.n	800b78c <__ieee754_pow+0xdc>
 800b76e:	2900      	cmp	r1, #0
 800b770:	d154      	bne.n	800b81c <__ieee754_pow+0x16c>
 800b772:	f1c2 0214 	rsb	r2, r2, #20
 800b776:	fa4a f402 	asr.w	r4, sl, r2
 800b77a:	fa04 f202 	lsl.w	r2, r4, r2
 800b77e:	4552      	cmp	r2, sl
 800b780:	f040 84a3 	bne.w	800c0ca <__ieee754_pow+0xa1a>
 800b784:	f004 0401 	and.w	r4, r4, #1
 800b788:	f1c4 0402 	rsb	r4, r4, #2
 800b78c:	4a6d      	ldr	r2, [pc, #436]	@ (800b944 <__ieee754_pow+0x294>)
 800b78e:	4592      	cmp	sl, r2
 800b790:	d12e      	bne.n	800b7f0 <__ieee754_pow+0x140>
 800b792:	f1b9 0f00 	cmp.w	r9, #0
 800b796:	f280 8494 	bge.w	800c0c2 <__ieee754_pow+0xa12>
 800b79a:	496a      	ldr	r1, [pc, #424]	@ (800b944 <__ieee754_pow+0x294>)
 800b79c:	4632      	mov	r2, r6
 800b79e:	463b      	mov	r3, r7
 800b7a0:	2000      	movs	r0, #0
 800b7a2:	f7f5 f873 	bl	800088c <__aeabi_ddiv>
 800b7a6:	e7a0      	b.n	800b6ea <__ieee754_pow+0x3a>
 800b7a8:	2400      	movs	r4, #0
 800b7aa:	bbc1      	cbnz	r1, 800b81e <__ieee754_pow+0x16e>
 800b7ac:	4a63      	ldr	r2, [pc, #396]	@ (800b93c <__ieee754_pow+0x28c>)
 800b7ae:	4592      	cmp	sl, r2
 800b7b0:	d1ec      	bne.n	800b78c <__ieee754_pow+0xdc>
 800b7b2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800b7b6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800b7ba:	431a      	orrs	r2, r3
 800b7bc:	f000 8479 	beq.w	800c0b2 <__ieee754_pow+0xa02>
 800b7c0:	4b61      	ldr	r3, [pc, #388]	@ (800b948 <__ieee754_pow+0x298>)
 800b7c2:	4598      	cmp	r8, r3
 800b7c4:	d908      	bls.n	800b7d8 <__ieee754_pow+0x128>
 800b7c6:	f1b9 0f00 	cmp.w	r9, #0
 800b7ca:	f2c0 8476 	blt.w	800c0ba <__ieee754_pow+0xa0a>
 800b7ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b7d2:	e78a      	b.n	800b6ea <__ieee754_pow+0x3a>
 800b7d4:	2402      	movs	r4, #2
 800b7d6:	e7e8      	b.n	800b7aa <__ieee754_pow+0xfa>
 800b7d8:	f1b9 0f00 	cmp.w	r9, #0
 800b7dc:	f04f 0000 	mov.w	r0, #0
 800b7e0:	f04f 0100 	mov.w	r1, #0
 800b7e4:	da81      	bge.n	800b6ea <__ieee754_pow+0x3a>
 800b7e6:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b7ea:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b7ee:	e77c      	b.n	800b6ea <__ieee754_pow+0x3a>
 800b7f0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800b7f4:	d106      	bne.n	800b804 <__ieee754_pow+0x154>
 800b7f6:	4632      	mov	r2, r6
 800b7f8:	463b      	mov	r3, r7
 800b7fa:	4630      	mov	r0, r6
 800b7fc:	4639      	mov	r1, r7
 800b7fe:	f7f4 ff1b 	bl	8000638 <__aeabi_dmul>
 800b802:	e772      	b.n	800b6ea <__ieee754_pow+0x3a>
 800b804:	4a51      	ldr	r2, [pc, #324]	@ (800b94c <__ieee754_pow+0x29c>)
 800b806:	4591      	cmp	r9, r2
 800b808:	d109      	bne.n	800b81e <__ieee754_pow+0x16e>
 800b80a:	2d00      	cmp	r5, #0
 800b80c:	db07      	blt.n	800b81e <__ieee754_pow+0x16e>
 800b80e:	ec47 6b10 	vmov	d0, r6, r7
 800b812:	b011      	add	sp, #68	@ 0x44
 800b814:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b818:	f000 bd4a 	b.w	800c2b0 <__ieee754_sqrt>
 800b81c:	2400      	movs	r4, #0
 800b81e:	ec47 6b10 	vmov	d0, r6, r7
 800b822:	9302      	str	r3, [sp, #8]
 800b824:	f7ff fe68 	bl	800b4f8 <fabs>
 800b828:	9b02      	ldr	r3, [sp, #8]
 800b82a:	ec51 0b10 	vmov	r0, r1, d0
 800b82e:	bb53      	cbnz	r3, 800b886 <__ieee754_pow+0x1d6>
 800b830:	4b44      	ldr	r3, [pc, #272]	@ (800b944 <__ieee754_pow+0x294>)
 800b832:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800b836:	429a      	cmp	r2, r3
 800b838:	d002      	beq.n	800b840 <__ieee754_pow+0x190>
 800b83a:	f1b8 0f00 	cmp.w	r8, #0
 800b83e:	d122      	bne.n	800b886 <__ieee754_pow+0x1d6>
 800b840:	f1b9 0f00 	cmp.w	r9, #0
 800b844:	da05      	bge.n	800b852 <__ieee754_pow+0x1a2>
 800b846:	4602      	mov	r2, r0
 800b848:	460b      	mov	r3, r1
 800b84a:	2000      	movs	r0, #0
 800b84c:	493d      	ldr	r1, [pc, #244]	@ (800b944 <__ieee754_pow+0x294>)
 800b84e:	f7f5 f81d 	bl	800088c <__aeabi_ddiv>
 800b852:	2d00      	cmp	r5, #0
 800b854:	f6bf af49 	bge.w	800b6ea <__ieee754_pow+0x3a>
 800b858:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800b85c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800b860:	ea58 0804 	orrs.w	r8, r8, r4
 800b864:	d108      	bne.n	800b878 <__ieee754_pow+0x1c8>
 800b866:	4602      	mov	r2, r0
 800b868:	460b      	mov	r3, r1
 800b86a:	4610      	mov	r0, r2
 800b86c:	4619      	mov	r1, r3
 800b86e:	f7f4 fd2b 	bl	80002c8 <__aeabi_dsub>
 800b872:	4602      	mov	r2, r0
 800b874:	460b      	mov	r3, r1
 800b876:	e794      	b.n	800b7a2 <__ieee754_pow+0xf2>
 800b878:	2c01      	cmp	r4, #1
 800b87a:	f47f af36 	bne.w	800b6ea <__ieee754_pow+0x3a>
 800b87e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b882:	4619      	mov	r1, r3
 800b884:	e731      	b.n	800b6ea <__ieee754_pow+0x3a>
 800b886:	0feb      	lsrs	r3, r5, #31
 800b888:	3b01      	subs	r3, #1
 800b88a:	ea53 0204 	orrs.w	r2, r3, r4
 800b88e:	d102      	bne.n	800b896 <__ieee754_pow+0x1e6>
 800b890:	4632      	mov	r2, r6
 800b892:	463b      	mov	r3, r7
 800b894:	e7e9      	b.n	800b86a <__ieee754_pow+0x1ba>
 800b896:	3c01      	subs	r4, #1
 800b898:	431c      	orrs	r4, r3
 800b89a:	d016      	beq.n	800b8ca <__ieee754_pow+0x21a>
 800b89c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800b928 <__ieee754_pow+0x278>
 800b8a0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800b8a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b8a8:	f240 8112 	bls.w	800bad0 <__ieee754_pow+0x420>
 800b8ac:	4b28      	ldr	r3, [pc, #160]	@ (800b950 <__ieee754_pow+0x2a0>)
 800b8ae:	459a      	cmp	sl, r3
 800b8b0:	4b25      	ldr	r3, [pc, #148]	@ (800b948 <__ieee754_pow+0x298>)
 800b8b2:	d916      	bls.n	800b8e2 <__ieee754_pow+0x232>
 800b8b4:	4598      	cmp	r8, r3
 800b8b6:	d80b      	bhi.n	800b8d0 <__ieee754_pow+0x220>
 800b8b8:	f1b9 0f00 	cmp.w	r9, #0
 800b8bc:	da0b      	bge.n	800b8d6 <__ieee754_pow+0x226>
 800b8be:	2000      	movs	r0, #0
 800b8c0:	b011      	add	sp, #68	@ 0x44
 800b8c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8c6:	f000 bceb 	b.w	800c2a0 <__math_oflow>
 800b8ca:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800b930 <__ieee754_pow+0x280>
 800b8ce:	e7e7      	b.n	800b8a0 <__ieee754_pow+0x1f0>
 800b8d0:	f1b9 0f00 	cmp.w	r9, #0
 800b8d4:	dcf3      	bgt.n	800b8be <__ieee754_pow+0x20e>
 800b8d6:	2000      	movs	r0, #0
 800b8d8:	b011      	add	sp, #68	@ 0x44
 800b8da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8de:	f000 bcd7 	b.w	800c290 <__math_uflow>
 800b8e2:	4598      	cmp	r8, r3
 800b8e4:	d20c      	bcs.n	800b900 <__ieee754_pow+0x250>
 800b8e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	f7f5 f915 	bl	8000b1c <__aeabi_dcmplt>
 800b8f2:	3800      	subs	r0, #0
 800b8f4:	bf18      	it	ne
 800b8f6:	2001      	movne	r0, #1
 800b8f8:	f1b9 0f00 	cmp.w	r9, #0
 800b8fc:	daec      	bge.n	800b8d8 <__ieee754_pow+0x228>
 800b8fe:	e7df      	b.n	800b8c0 <__ieee754_pow+0x210>
 800b900:	4b10      	ldr	r3, [pc, #64]	@ (800b944 <__ieee754_pow+0x294>)
 800b902:	4598      	cmp	r8, r3
 800b904:	f04f 0200 	mov.w	r2, #0
 800b908:	d924      	bls.n	800b954 <__ieee754_pow+0x2a4>
 800b90a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b90e:	2300      	movs	r3, #0
 800b910:	f7f5 f904 	bl	8000b1c <__aeabi_dcmplt>
 800b914:	3800      	subs	r0, #0
 800b916:	bf18      	it	ne
 800b918:	2001      	movne	r0, #1
 800b91a:	f1b9 0f00 	cmp.w	r9, #0
 800b91e:	dccf      	bgt.n	800b8c0 <__ieee754_pow+0x210>
 800b920:	e7da      	b.n	800b8d8 <__ieee754_pow+0x228>
 800b922:	bf00      	nop
 800b924:	f3af 8000 	nop.w
 800b928:	00000000 	.word	0x00000000
 800b92c:	3ff00000 	.word	0x3ff00000
 800b930:	00000000 	.word	0x00000000
 800b934:	bff00000 	.word	0xbff00000
 800b938:	fff00000 	.word	0xfff00000
 800b93c:	7ff00000 	.word	0x7ff00000
 800b940:	433fffff 	.word	0x433fffff
 800b944:	3ff00000 	.word	0x3ff00000
 800b948:	3fefffff 	.word	0x3fefffff
 800b94c:	3fe00000 	.word	0x3fe00000
 800b950:	43f00000 	.word	0x43f00000
 800b954:	4b5a      	ldr	r3, [pc, #360]	@ (800bac0 <__ieee754_pow+0x410>)
 800b956:	f7f4 fcb7 	bl	80002c8 <__aeabi_dsub>
 800b95a:	a351      	add	r3, pc, #324	@ (adr r3, 800baa0 <__ieee754_pow+0x3f0>)
 800b95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b960:	4604      	mov	r4, r0
 800b962:	460d      	mov	r5, r1
 800b964:	f7f4 fe68 	bl	8000638 <__aeabi_dmul>
 800b968:	a34f      	add	r3, pc, #316	@ (adr r3, 800baa8 <__ieee754_pow+0x3f8>)
 800b96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b96e:	4606      	mov	r6, r0
 800b970:	460f      	mov	r7, r1
 800b972:	4620      	mov	r0, r4
 800b974:	4629      	mov	r1, r5
 800b976:	f7f4 fe5f 	bl	8000638 <__aeabi_dmul>
 800b97a:	4b52      	ldr	r3, [pc, #328]	@ (800bac4 <__ieee754_pow+0x414>)
 800b97c:	4682      	mov	sl, r0
 800b97e:	468b      	mov	fp, r1
 800b980:	2200      	movs	r2, #0
 800b982:	4620      	mov	r0, r4
 800b984:	4629      	mov	r1, r5
 800b986:	f7f4 fe57 	bl	8000638 <__aeabi_dmul>
 800b98a:	4602      	mov	r2, r0
 800b98c:	460b      	mov	r3, r1
 800b98e:	a148      	add	r1, pc, #288	@ (adr r1, 800bab0 <__ieee754_pow+0x400>)
 800b990:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b994:	f7f4 fc98 	bl	80002c8 <__aeabi_dsub>
 800b998:	4622      	mov	r2, r4
 800b99a:	462b      	mov	r3, r5
 800b99c:	f7f4 fe4c 	bl	8000638 <__aeabi_dmul>
 800b9a0:	4602      	mov	r2, r0
 800b9a2:	460b      	mov	r3, r1
 800b9a4:	2000      	movs	r0, #0
 800b9a6:	4948      	ldr	r1, [pc, #288]	@ (800bac8 <__ieee754_pow+0x418>)
 800b9a8:	f7f4 fc8e 	bl	80002c8 <__aeabi_dsub>
 800b9ac:	4622      	mov	r2, r4
 800b9ae:	4680      	mov	r8, r0
 800b9b0:	4689      	mov	r9, r1
 800b9b2:	462b      	mov	r3, r5
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	4629      	mov	r1, r5
 800b9b8:	f7f4 fe3e 	bl	8000638 <__aeabi_dmul>
 800b9bc:	4602      	mov	r2, r0
 800b9be:	460b      	mov	r3, r1
 800b9c0:	4640      	mov	r0, r8
 800b9c2:	4649      	mov	r1, r9
 800b9c4:	f7f4 fe38 	bl	8000638 <__aeabi_dmul>
 800b9c8:	a33b      	add	r3, pc, #236	@ (adr r3, 800bab8 <__ieee754_pow+0x408>)
 800b9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ce:	f7f4 fe33 	bl	8000638 <__aeabi_dmul>
 800b9d2:	4602      	mov	r2, r0
 800b9d4:	460b      	mov	r3, r1
 800b9d6:	4650      	mov	r0, sl
 800b9d8:	4659      	mov	r1, fp
 800b9da:	f7f4 fc75 	bl	80002c8 <__aeabi_dsub>
 800b9de:	4602      	mov	r2, r0
 800b9e0:	460b      	mov	r3, r1
 800b9e2:	4680      	mov	r8, r0
 800b9e4:	4689      	mov	r9, r1
 800b9e6:	4630      	mov	r0, r6
 800b9e8:	4639      	mov	r1, r7
 800b9ea:	f7f4 fc6f 	bl	80002cc <__adddf3>
 800b9ee:	2400      	movs	r4, #0
 800b9f0:	4632      	mov	r2, r6
 800b9f2:	463b      	mov	r3, r7
 800b9f4:	4620      	mov	r0, r4
 800b9f6:	460d      	mov	r5, r1
 800b9f8:	f7f4 fc66 	bl	80002c8 <__aeabi_dsub>
 800b9fc:	4602      	mov	r2, r0
 800b9fe:	460b      	mov	r3, r1
 800ba00:	4640      	mov	r0, r8
 800ba02:	4649      	mov	r1, r9
 800ba04:	f7f4 fc60 	bl	80002c8 <__aeabi_dsub>
 800ba08:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba0c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ba10:	2300      	movs	r3, #0
 800ba12:	9304      	str	r3, [sp, #16]
 800ba14:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800ba18:	4606      	mov	r6, r0
 800ba1a:	460f      	mov	r7, r1
 800ba1c:	4652      	mov	r2, sl
 800ba1e:	465b      	mov	r3, fp
 800ba20:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba24:	f7f4 fc50 	bl	80002c8 <__aeabi_dsub>
 800ba28:	4622      	mov	r2, r4
 800ba2a:	462b      	mov	r3, r5
 800ba2c:	f7f4 fe04 	bl	8000638 <__aeabi_dmul>
 800ba30:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba34:	4680      	mov	r8, r0
 800ba36:	4689      	mov	r9, r1
 800ba38:	4630      	mov	r0, r6
 800ba3a:	4639      	mov	r1, r7
 800ba3c:	f7f4 fdfc 	bl	8000638 <__aeabi_dmul>
 800ba40:	4602      	mov	r2, r0
 800ba42:	460b      	mov	r3, r1
 800ba44:	4640      	mov	r0, r8
 800ba46:	4649      	mov	r1, r9
 800ba48:	f7f4 fc40 	bl	80002cc <__adddf3>
 800ba4c:	4652      	mov	r2, sl
 800ba4e:	465b      	mov	r3, fp
 800ba50:	4606      	mov	r6, r0
 800ba52:	460f      	mov	r7, r1
 800ba54:	4620      	mov	r0, r4
 800ba56:	4629      	mov	r1, r5
 800ba58:	f7f4 fdee 	bl	8000638 <__aeabi_dmul>
 800ba5c:	460b      	mov	r3, r1
 800ba5e:	4602      	mov	r2, r0
 800ba60:	4680      	mov	r8, r0
 800ba62:	4689      	mov	r9, r1
 800ba64:	4630      	mov	r0, r6
 800ba66:	4639      	mov	r1, r7
 800ba68:	f7f4 fc30 	bl	80002cc <__adddf3>
 800ba6c:	4b17      	ldr	r3, [pc, #92]	@ (800bacc <__ieee754_pow+0x41c>)
 800ba6e:	4299      	cmp	r1, r3
 800ba70:	4604      	mov	r4, r0
 800ba72:	460d      	mov	r5, r1
 800ba74:	468a      	mov	sl, r1
 800ba76:	468b      	mov	fp, r1
 800ba78:	f340 82ef 	ble.w	800c05a <__ieee754_pow+0x9aa>
 800ba7c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800ba80:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800ba84:	4303      	orrs	r3, r0
 800ba86:	f000 81e8 	beq.w	800be5a <__ieee754_pow+0x7aa>
 800ba8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	2300      	movs	r3, #0
 800ba92:	f7f5 f843 	bl	8000b1c <__aeabi_dcmplt>
 800ba96:	3800      	subs	r0, #0
 800ba98:	bf18      	it	ne
 800ba9a:	2001      	movne	r0, #1
 800ba9c:	e710      	b.n	800b8c0 <__ieee754_pow+0x210>
 800ba9e:	bf00      	nop
 800baa0:	60000000 	.word	0x60000000
 800baa4:	3ff71547 	.word	0x3ff71547
 800baa8:	f85ddf44 	.word	0xf85ddf44
 800baac:	3e54ae0b 	.word	0x3e54ae0b
 800bab0:	55555555 	.word	0x55555555
 800bab4:	3fd55555 	.word	0x3fd55555
 800bab8:	652b82fe 	.word	0x652b82fe
 800babc:	3ff71547 	.word	0x3ff71547
 800bac0:	3ff00000 	.word	0x3ff00000
 800bac4:	3fd00000 	.word	0x3fd00000
 800bac8:	3fe00000 	.word	0x3fe00000
 800bacc:	408fffff 	.word	0x408fffff
 800bad0:	4bd5      	ldr	r3, [pc, #852]	@ (800be28 <__ieee754_pow+0x778>)
 800bad2:	402b      	ands	r3, r5
 800bad4:	2200      	movs	r2, #0
 800bad6:	b92b      	cbnz	r3, 800bae4 <__ieee754_pow+0x434>
 800bad8:	4bd4      	ldr	r3, [pc, #848]	@ (800be2c <__ieee754_pow+0x77c>)
 800bada:	f7f4 fdad 	bl	8000638 <__aeabi_dmul>
 800bade:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800bae2:	468b      	mov	fp, r1
 800bae4:	ea4f 532b 	mov.w	r3, fp, asr #20
 800bae8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800baec:	4413      	add	r3, r2
 800baee:	930a      	str	r3, [sp, #40]	@ 0x28
 800baf0:	4bcf      	ldr	r3, [pc, #828]	@ (800be30 <__ieee754_pow+0x780>)
 800baf2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800baf6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800bafa:	459b      	cmp	fp, r3
 800bafc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bb00:	dd08      	ble.n	800bb14 <__ieee754_pow+0x464>
 800bb02:	4bcc      	ldr	r3, [pc, #816]	@ (800be34 <__ieee754_pow+0x784>)
 800bb04:	459b      	cmp	fp, r3
 800bb06:	f340 81a5 	ble.w	800be54 <__ieee754_pow+0x7a4>
 800bb0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb0c:	3301      	adds	r3, #1
 800bb0e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb10:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800bb14:	f04f 0a00 	mov.w	sl, #0
 800bb18:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800bb1c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb1e:	4bc6      	ldr	r3, [pc, #792]	@ (800be38 <__ieee754_pow+0x788>)
 800bb20:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bb24:	ed93 7b00 	vldr	d7, [r3]
 800bb28:	4629      	mov	r1, r5
 800bb2a:	ec53 2b17 	vmov	r2, r3, d7
 800bb2e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bb32:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bb36:	f7f4 fbc7 	bl	80002c8 <__aeabi_dsub>
 800bb3a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bb3e:	4606      	mov	r6, r0
 800bb40:	460f      	mov	r7, r1
 800bb42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb46:	f7f4 fbc1 	bl	80002cc <__adddf3>
 800bb4a:	4602      	mov	r2, r0
 800bb4c:	460b      	mov	r3, r1
 800bb4e:	2000      	movs	r0, #0
 800bb50:	49ba      	ldr	r1, [pc, #744]	@ (800be3c <__ieee754_pow+0x78c>)
 800bb52:	f7f4 fe9b 	bl	800088c <__aeabi_ddiv>
 800bb56:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800bb5a:	4602      	mov	r2, r0
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	4630      	mov	r0, r6
 800bb60:	4639      	mov	r1, r7
 800bb62:	f7f4 fd69 	bl	8000638 <__aeabi_dmul>
 800bb66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb6a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800bb6e:	106d      	asrs	r5, r5, #1
 800bb70:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800bb74:	f04f 0b00 	mov.w	fp, #0
 800bb78:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800bb7c:	4661      	mov	r1, ip
 800bb7e:	2200      	movs	r2, #0
 800bb80:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800bb84:	4658      	mov	r0, fp
 800bb86:	46e1      	mov	r9, ip
 800bb88:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800bb8c:	4614      	mov	r4, r2
 800bb8e:	461d      	mov	r5, r3
 800bb90:	f7f4 fd52 	bl	8000638 <__aeabi_dmul>
 800bb94:	4602      	mov	r2, r0
 800bb96:	460b      	mov	r3, r1
 800bb98:	4630      	mov	r0, r6
 800bb9a:	4639      	mov	r1, r7
 800bb9c:	f7f4 fb94 	bl	80002c8 <__aeabi_dsub>
 800bba0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bba4:	4606      	mov	r6, r0
 800bba6:	460f      	mov	r7, r1
 800bba8:	4620      	mov	r0, r4
 800bbaa:	4629      	mov	r1, r5
 800bbac:	f7f4 fb8c 	bl	80002c8 <__aeabi_dsub>
 800bbb0:	4602      	mov	r2, r0
 800bbb2:	460b      	mov	r3, r1
 800bbb4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bbb8:	f7f4 fb86 	bl	80002c8 <__aeabi_dsub>
 800bbbc:	465a      	mov	r2, fp
 800bbbe:	464b      	mov	r3, r9
 800bbc0:	f7f4 fd3a 	bl	8000638 <__aeabi_dmul>
 800bbc4:	4602      	mov	r2, r0
 800bbc6:	460b      	mov	r3, r1
 800bbc8:	4630      	mov	r0, r6
 800bbca:	4639      	mov	r1, r7
 800bbcc:	f7f4 fb7c 	bl	80002c8 <__aeabi_dsub>
 800bbd0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bbd4:	f7f4 fd30 	bl	8000638 <__aeabi_dmul>
 800bbd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbdc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bbe0:	4610      	mov	r0, r2
 800bbe2:	4619      	mov	r1, r3
 800bbe4:	f7f4 fd28 	bl	8000638 <__aeabi_dmul>
 800bbe8:	a37d      	add	r3, pc, #500	@ (adr r3, 800bde0 <__ieee754_pow+0x730>)
 800bbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbee:	4604      	mov	r4, r0
 800bbf0:	460d      	mov	r5, r1
 800bbf2:	f7f4 fd21 	bl	8000638 <__aeabi_dmul>
 800bbf6:	a37c      	add	r3, pc, #496	@ (adr r3, 800bde8 <__ieee754_pow+0x738>)
 800bbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbfc:	f7f4 fb66 	bl	80002cc <__adddf3>
 800bc00:	4622      	mov	r2, r4
 800bc02:	462b      	mov	r3, r5
 800bc04:	f7f4 fd18 	bl	8000638 <__aeabi_dmul>
 800bc08:	a379      	add	r3, pc, #484	@ (adr r3, 800bdf0 <__ieee754_pow+0x740>)
 800bc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc0e:	f7f4 fb5d 	bl	80002cc <__adddf3>
 800bc12:	4622      	mov	r2, r4
 800bc14:	462b      	mov	r3, r5
 800bc16:	f7f4 fd0f 	bl	8000638 <__aeabi_dmul>
 800bc1a:	a377      	add	r3, pc, #476	@ (adr r3, 800bdf8 <__ieee754_pow+0x748>)
 800bc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc20:	f7f4 fb54 	bl	80002cc <__adddf3>
 800bc24:	4622      	mov	r2, r4
 800bc26:	462b      	mov	r3, r5
 800bc28:	f7f4 fd06 	bl	8000638 <__aeabi_dmul>
 800bc2c:	a374      	add	r3, pc, #464	@ (adr r3, 800be00 <__ieee754_pow+0x750>)
 800bc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc32:	f7f4 fb4b 	bl	80002cc <__adddf3>
 800bc36:	4622      	mov	r2, r4
 800bc38:	462b      	mov	r3, r5
 800bc3a:	f7f4 fcfd 	bl	8000638 <__aeabi_dmul>
 800bc3e:	a372      	add	r3, pc, #456	@ (adr r3, 800be08 <__ieee754_pow+0x758>)
 800bc40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc44:	f7f4 fb42 	bl	80002cc <__adddf3>
 800bc48:	4622      	mov	r2, r4
 800bc4a:	4606      	mov	r6, r0
 800bc4c:	460f      	mov	r7, r1
 800bc4e:	462b      	mov	r3, r5
 800bc50:	4620      	mov	r0, r4
 800bc52:	4629      	mov	r1, r5
 800bc54:	f7f4 fcf0 	bl	8000638 <__aeabi_dmul>
 800bc58:	4602      	mov	r2, r0
 800bc5a:	460b      	mov	r3, r1
 800bc5c:	4630      	mov	r0, r6
 800bc5e:	4639      	mov	r1, r7
 800bc60:	f7f4 fcea 	bl	8000638 <__aeabi_dmul>
 800bc64:	465a      	mov	r2, fp
 800bc66:	4604      	mov	r4, r0
 800bc68:	460d      	mov	r5, r1
 800bc6a:	464b      	mov	r3, r9
 800bc6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc70:	f7f4 fb2c 	bl	80002cc <__adddf3>
 800bc74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc78:	f7f4 fcde 	bl	8000638 <__aeabi_dmul>
 800bc7c:	4622      	mov	r2, r4
 800bc7e:	462b      	mov	r3, r5
 800bc80:	f7f4 fb24 	bl	80002cc <__adddf3>
 800bc84:	465a      	mov	r2, fp
 800bc86:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bc8a:	464b      	mov	r3, r9
 800bc8c:	4658      	mov	r0, fp
 800bc8e:	4649      	mov	r1, r9
 800bc90:	f7f4 fcd2 	bl	8000638 <__aeabi_dmul>
 800bc94:	4b6a      	ldr	r3, [pc, #424]	@ (800be40 <__ieee754_pow+0x790>)
 800bc96:	2200      	movs	r2, #0
 800bc98:	4606      	mov	r6, r0
 800bc9a:	460f      	mov	r7, r1
 800bc9c:	f7f4 fb16 	bl	80002cc <__adddf3>
 800bca0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bca4:	f7f4 fb12 	bl	80002cc <__adddf3>
 800bca8:	46d8      	mov	r8, fp
 800bcaa:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800bcae:	460d      	mov	r5, r1
 800bcb0:	465a      	mov	r2, fp
 800bcb2:	460b      	mov	r3, r1
 800bcb4:	4640      	mov	r0, r8
 800bcb6:	4649      	mov	r1, r9
 800bcb8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800bcbc:	f7f4 fcbc 	bl	8000638 <__aeabi_dmul>
 800bcc0:	465c      	mov	r4, fp
 800bcc2:	4680      	mov	r8, r0
 800bcc4:	4689      	mov	r9, r1
 800bcc6:	4b5e      	ldr	r3, [pc, #376]	@ (800be40 <__ieee754_pow+0x790>)
 800bcc8:	2200      	movs	r2, #0
 800bcca:	4620      	mov	r0, r4
 800bccc:	4629      	mov	r1, r5
 800bcce:	f7f4 fafb 	bl	80002c8 <__aeabi_dsub>
 800bcd2:	4632      	mov	r2, r6
 800bcd4:	463b      	mov	r3, r7
 800bcd6:	f7f4 faf7 	bl	80002c8 <__aeabi_dsub>
 800bcda:	4602      	mov	r2, r0
 800bcdc:	460b      	mov	r3, r1
 800bcde:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bce2:	f7f4 faf1 	bl	80002c8 <__aeabi_dsub>
 800bce6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bcea:	f7f4 fca5 	bl	8000638 <__aeabi_dmul>
 800bcee:	4622      	mov	r2, r4
 800bcf0:	4606      	mov	r6, r0
 800bcf2:	460f      	mov	r7, r1
 800bcf4:	462b      	mov	r3, r5
 800bcf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bcfa:	f7f4 fc9d 	bl	8000638 <__aeabi_dmul>
 800bcfe:	4602      	mov	r2, r0
 800bd00:	460b      	mov	r3, r1
 800bd02:	4630      	mov	r0, r6
 800bd04:	4639      	mov	r1, r7
 800bd06:	f7f4 fae1 	bl	80002cc <__adddf3>
 800bd0a:	4606      	mov	r6, r0
 800bd0c:	460f      	mov	r7, r1
 800bd0e:	4602      	mov	r2, r0
 800bd10:	460b      	mov	r3, r1
 800bd12:	4640      	mov	r0, r8
 800bd14:	4649      	mov	r1, r9
 800bd16:	f7f4 fad9 	bl	80002cc <__adddf3>
 800bd1a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800bd1e:	a33c      	add	r3, pc, #240	@ (adr r3, 800be10 <__ieee754_pow+0x760>)
 800bd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd24:	4658      	mov	r0, fp
 800bd26:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800bd2a:	460d      	mov	r5, r1
 800bd2c:	f7f4 fc84 	bl	8000638 <__aeabi_dmul>
 800bd30:	465c      	mov	r4, fp
 800bd32:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd36:	4642      	mov	r2, r8
 800bd38:	464b      	mov	r3, r9
 800bd3a:	4620      	mov	r0, r4
 800bd3c:	4629      	mov	r1, r5
 800bd3e:	f7f4 fac3 	bl	80002c8 <__aeabi_dsub>
 800bd42:	4602      	mov	r2, r0
 800bd44:	460b      	mov	r3, r1
 800bd46:	4630      	mov	r0, r6
 800bd48:	4639      	mov	r1, r7
 800bd4a:	f7f4 fabd 	bl	80002c8 <__aeabi_dsub>
 800bd4e:	a332      	add	r3, pc, #200	@ (adr r3, 800be18 <__ieee754_pow+0x768>)
 800bd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd54:	f7f4 fc70 	bl	8000638 <__aeabi_dmul>
 800bd58:	a331      	add	r3, pc, #196	@ (adr r3, 800be20 <__ieee754_pow+0x770>)
 800bd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd5e:	4606      	mov	r6, r0
 800bd60:	460f      	mov	r7, r1
 800bd62:	4620      	mov	r0, r4
 800bd64:	4629      	mov	r1, r5
 800bd66:	f7f4 fc67 	bl	8000638 <__aeabi_dmul>
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	460b      	mov	r3, r1
 800bd6e:	4630      	mov	r0, r6
 800bd70:	4639      	mov	r1, r7
 800bd72:	f7f4 faab 	bl	80002cc <__adddf3>
 800bd76:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bd78:	4b32      	ldr	r3, [pc, #200]	@ (800be44 <__ieee754_pow+0x794>)
 800bd7a:	4413      	add	r3, r2
 800bd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd80:	f7f4 faa4 	bl	80002cc <__adddf3>
 800bd84:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bd88:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bd8a:	f7f4 fbeb 	bl	8000564 <__aeabi_i2d>
 800bd8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bd90:	4b2d      	ldr	r3, [pc, #180]	@ (800be48 <__ieee754_pow+0x798>)
 800bd92:	4413      	add	r3, r2
 800bd94:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bd98:	4606      	mov	r6, r0
 800bd9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd9e:	460f      	mov	r7, r1
 800bda0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bda4:	f7f4 fa92 	bl	80002cc <__adddf3>
 800bda8:	4642      	mov	r2, r8
 800bdaa:	464b      	mov	r3, r9
 800bdac:	f7f4 fa8e 	bl	80002cc <__adddf3>
 800bdb0:	4632      	mov	r2, r6
 800bdb2:	463b      	mov	r3, r7
 800bdb4:	f7f4 fa8a 	bl	80002cc <__adddf3>
 800bdb8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800bdbc:	4632      	mov	r2, r6
 800bdbe:	463b      	mov	r3, r7
 800bdc0:	4658      	mov	r0, fp
 800bdc2:	460d      	mov	r5, r1
 800bdc4:	f7f4 fa80 	bl	80002c8 <__aeabi_dsub>
 800bdc8:	4642      	mov	r2, r8
 800bdca:	464b      	mov	r3, r9
 800bdcc:	f7f4 fa7c 	bl	80002c8 <__aeabi_dsub>
 800bdd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdd4:	f7f4 fa78 	bl	80002c8 <__aeabi_dsub>
 800bdd8:	465c      	mov	r4, fp
 800bdda:	4602      	mov	r2, r0
 800bddc:	e036      	b.n	800be4c <__ieee754_pow+0x79c>
 800bdde:	bf00      	nop
 800bde0:	4a454eef 	.word	0x4a454eef
 800bde4:	3fca7e28 	.word	0x3fca7e28
 800bde8:	93c9db65 	.word	0x93c9db65
 800bdec:	3fcd864a 	.word	0x3fcd864a
 800bdf0:	a91d4101 	.word	0xa91d4101
 800bdf4:	3fd17460 	.word	0x3fd17460
 800bdf8:	518f264d 	.word	0x518f264d
 800bdfc:	3fd55555 	.word	0x3fd55555
 800be00:	db6fabff 	.word	0xdb6fabff
 800be04:	3fdb6db6 	.word	0x3fdb6db6
 800be08:	33333303 	.word	0x33333303
 800be0c:	3fe33333 	.word	0x3fe33333
 800be10:	e0000000 	.word	0xe0000000
 800be14:	3feec709 	.word	0x3feec709
 800be18:	dc3a03fd 	.word	0xdc3a03fd
 800be1c:	3feec709 	.word	0x3feec709
 800be20:	145b01f5 	.word	0x145b01f5
 800be24:	be3e2fe0 	.word	0xbe3e2fe0
 800be28:	7ff00000 	.word	0x7ff00000
 800be2c:	43400000 	.word	0x43400000
 800be30:	0003988e 	.word	0x0003988e
 800be34:	000bb679 	.word	0x000bb679
 800be38:	0800c7d8 	.word	0x0800c7d8
 800be3c:	3ff00000 	.word	0x3ff00000
 800be40:	40080000 	.word	0x40080000
 800be44:	0800c7b8 	.word	0x0800c7b8
 800be48:	0800c7c8 	.word	0x0800c7c8
 800be4c:	460b      	mov	r3, r1
 800be4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be52:	e5d7      	b.n	800ba04 <__ieee754_pow+0x354>
 800be54:	f04f 0a01 	mov.w	sl, #1
 800be58:	e65e      	b.n	800bb18 <__ieee754_pow+0x468>
 800be5a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800c12c <__ieee754_pow+0xa7c>)
 800be5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be60:	4630      	mov	r0, r6
 800be62:	4639      	mov	r1, r7
 800be64:	f7f4 fa32 	bl	80002cc <__adddf3>
 800be68:	4642      	mov	r2, r8
 800be6a:	e9cd 0100 	strd	r0, r1, [sp]
 800be6e:	464b      	mov	r3, r9
 800be70:	4620      	mov	r0, r4
 800be72:	4629      	mov	r1, r5
 800be74:	f7f4 fa28 	bl	80002c8 <__aeabi_dsub>
 800be78:	4602      	mov	r2, r0
 800be7a:	460b      	mov	r3, r1
 800be7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be80:	f7f4 fe6a 	bl	8000b58 <__aeabi_dcmpgt>
 800be84:	2800      	cmp	r0, #0
 800be86:	f47f ae00 	bne.w	800ba8a <__ieee754_pow+0x3da>
 800be8a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800be8e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800be92:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800be96:	fa43 fa0a 	asr.w	sl, r3, sl
 800be9a:	44da      	add	sl, fp
 800be9c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800bea0:	489d      	ldr	r0, [pc, #628]	@ (800c118 <__ieee754_pow+0xa68>)
 800bea2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800bea6:	4108      	asrs	r0, r1
 800bea8:	ea00 030a 	and.w	r3, r0, sl
 800beac:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800beb0:	f1c1 0114 	rsb	r1, r1, #20
 800beb4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800beb8:	fa4a fa01 	asr.w	sl, sl, r1
 800bebc:	f1bb 0f00 	cmp.w	fp, #0
 800bec0:	4640      	mov	r0, r8
 800bec2:	4649      	mov	r1, r9
 800bec4:	f04f 0200 	mov.w	r2, #0
 800bec8:	bfb8      	it	lt
 800beca:	f1ca 0a00 	rsblt	sl, sl, #0
 800bece:	f7f4 f9fb 	bl	80002c8 <__aeabi_dsub>
 800bed2:	4680      	mov	r8, r0
 800bed4:	4689      	mov	r9, r1
 800bed6:	4632      	mov	r2, r6
 800bed8:	463b      	mov	r3, r7
 800beda:	4640      	mov	r0, r8
 800bedc:	4649      	mov	r1, r9
 800bede:	f7f4 f9f5 	bl	80002cc <__adddf3>
 800bee2:	2400      	movs	r4, #0
 800bee4:	a37c      	add	r3, pc, #496	@ (adr r3, 800c0d8 <__ieee754_pow+0xa28>)
 800bee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beea:	4620      	mov	r0, r4
 800beec:	460d      	mov	r5, r1
 800beee:	f7f4 fba3 	bl	8000638 <__aeabi_dmul>
 800bef2:	4642      	mov	r2, r8
 800bef4:	e9cd 0100 	strd	r0, r1, [sp]
 800bef8:	464b      	mov	r3, r9
 800befa:	4620      	mov	r0, r4
 800befc:	4629      	mov	r1, r5
 800befe:	f7f4 f9e3 	bl	80002c8 <__aeabi_dsub>
 800bf02:	4602      	mov	r2, r0
 800bf04:	460b      	mov	r3, r1
 800bf06:	4630      	mov	r0, r6
 800bf08:	4639      	mov	r1, r7
 800bf0a:	f7f4 f9dd 	bl	80002c8 <__aeabi_dsub>
 800bf0e:	a374      	add	r3, pc, #464	@ (adr r3, 800c0e0 <__ieee754_pow+0xa30>)
 800bf10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf14:	f7f4 fb90 	bl	8000638 <__aeabi_dmul>
 800bf18:	a373      	add	r3, pc, #460	@ (adr r3, 800c0e8 <__ieee754_pow+0xa38>)
 800bf1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf1e:	4680      	mov	r8, r0
 800bf20:	4689      	mov	r9, r1
 800bf22:	4620      	mov	r0, r4
 800bf24:	4629      	mov	r1, r5
 800bf26:	f7f4 fb87 	bl	8000638 <__aeabi_dmul>
 800bf2a:	4602      	mov	r2, r0
 800bf2c:	460b      	mov	r3, r1
 800bf2e:	4640      	mov	r0, r8
 800bf30:	4649      	mov	r1, r9
 800bf32:	f7f4 f9cb 	bl	80002cc <__adddf3>
 800bf36:	4604      	mov	r4, r0
 800bf38:	460d      	mov	r5, r1
 800bf3a:	4602      	mov	r2, r0
 800bf3c:	460b      	mov	r3, r1
 800bf3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf42:	f7f4 f9c3 	bl	80002cc <__adddf3>
 800bf46:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf4a:	4680      	mov	r8, r0
 800bf4c:	4689      	mov	r9, r1
 800bf4e:	f7f4 f9bb 	bl	80002c8 <__aeabi_dsub>
 800bf52:	4602      	mov	r2, r0
 800bf54:	460b      	mov	r3, r1
 800bf56:	4620      	mov	r0, r4
 800bf58:	4629      	mov	r1, r5
 800bf5a:	f7f4 f9b5 	bl	80002c8 <__aeabi_dsub>
 800bf5e:	4642      	mov	r2, r8
 800bf60:	4606      	mov	r6, r0
 800bf62:	460f      	mov	r7, r1
 800bf64:	464b      	mov	r3, r9
 800bf66:	4640      	mov	r0, r8
 800bf68:	4649      	mov	r1, r9
 800bf6a:	f7f4 fb65 	bl	8000638 <__aeabi_dmul>
 800bf6e:	a360      	add	r3, pc, #384	@ (adr r3, 800c0f0 <__ieee754_pow+0xa40>)
 800bf70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf74:	4604      	mov	r4, r0
 800bf76:	460d      	mov	r5, r1
 800bf78:	f7f4 fb5e 	bl	8000638 <__aeabi_dmul>
 800bf7c:	a35e      	add	r3, pc, #376	@ (adr r3, 800c0f8 <__ieee754_pow+0xa48>)
 800bf7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf82:	f7f4 f9a1 	bl	80002c8 <__aeabi_dsub>
 800bf86:	4622      	mov	r2, r4
 800bf88:	462b      	mov	r3, r5
 800bf8a:	f7f4 fb55 	bl	8000638 <__aeabi_dmul>
 800bf8e:	a35c      	add	r3, pc, #368	@ (adr r3, 800c100 <__ieee754_pow+0xa50>)
 800bf90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf94:	f7f4 f99a 	bl	80002cc <__adddf3>
 800bf98:	4622      	mov	r2, r4
 800bf9a:	462b      	mov	r3, r5
 800bf9c:	f7f4 fb4c 	bl	8000638 <__aeabi_dmul>
 800bfa0:	a359      	add	r3, pc, #356	@ (adr r3, 800c108 <__ieee754_pow+0xa58>)
 800bfa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa6:	f7f4 f98f 	bl	80002c8 <__aeabi_dsub>
 800bfaa:	4622      	mov	r2, r4
 800bfac:	462b      	mov	r3, r5
 800bfae:	f7f4 fb43 	bl	8000638 <__aeabi_dmul>
 800bfb2:	a357      	add	r3, pc, #348	@ (adr r3, 800c110 <__ieee754_pow+0xa60>)
 800bfb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb8:	f7f4 f988 	bl	80002cc <__adddf3>
 800bfbc:	4622      	mov	r2, r4
 800bfbe:	462b      	mov	r3, r5
 800bfc0:	f7f4 fb3a 	bl	8000638 <__aeabi_dmul>
 800bfc4:	4602      	mov	r2, r0
 800bfc6:	460b      	mov	r3, r1
 800bfc8:	4640      	mov	r0, r8
 800bfca:	4649      	mov	r1, r9
 800bfcc:	f7f4 f97c 	bl	80002c8 <__aeabi_dsub>
 800bfd0:	4604      	mov	r4, r0
 800bfd2:	460d      	mov	r5, r1
 800bfd4:	4602      	mov	r2, r0
 800bfd6:	460b      	mov	r3, r1
 800bfd8:	4640      	mov	r0, r8
 800bfda:	4649      	mov	r1, r9
 800bfdc:	f7f4 fb2c 	bl	8000638 <__aeabi_dmul>
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	e9cd 0100 	strd	r0, r1, [sp]
 800bfe6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bfea:	4620      	mov	r0, r4
 800bfec:	4629      	mov	r1, r5
 800bfee:	f7f4 f96b 	bl	80002c8 <__aeabi_dsub>
 800bff2:	4602      	mov	r2, r0
 800bff4:	460b      	mov	r3, r1
 800bff6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bffa:	f7f4 fc47 	bl	800088c <__aeabi_ddiv>
 800bffe:	4632      	mov	r2, r6
 800c000:	4604      	mov	r4, r0
 800c002:	460d      	mov	r5, r1
 800c004:	463b      	mov	r3, r7
 800c006:	4640      	mov	r0, r8
 800c008:	4649      	mov	r1, r9
 800c00a:	f7f4 fb15 	bl	8000638 <__aeabi_dmul>
 800c00e:	4632      	mov	r2, r6
 800c010:	463b      	mov	r3, r7
 800c012:	f7f4 f95b 	bl	80002cc <__adddf3>
 800c016:	4602      	mov	r2, r0
 800c018:	460b      	mov	r3, r1
 800c01a:	4620      	mov	r0, r4
 800c01c:	4629      	mov	r1, r5
 800c01e:	f7f4 f953 	bl	80002c8 <__aeabi_dsub>
 800c022:	4642      	mov	r2, r8
 800c024:	464b      	mov	r3, r9
 800c026:	f7f4 f94f 	bl	80002c8 <__aeabi_dsub>
 800c02a:	460b      	mov	r3, r1
 800c02c:	4602      	mov	r2, r0
 800c02e:	493b      	ldr	r1, [pc, #236]	@ (800c11c <__ieee754_pow+0xa6c>)
 800c030:	2000      	movs	r0, #0
 800c032:	f7f4 f949 	bl	80002c8 <__aeabi_dsub>
 800c036:	ec41 0b10 	vmov	d0, r0, r1
 800c03a:	ee10 3a90 	vmov	r3, s1
 800c03e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c042:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c046:	da30      	bge.n	800c0aa <__ieee754_pow+0x9fa>
 800c048:	4650      	mov	r0, sl
 800c04a:	f000 f875 	bl	800c138 <scalbn>
 800c04e:	ec51 0b10 	vmov	r0, r1, d0
 800c052:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c056:	f7ff bbd2 	b.w	800b7fe <__ieee754_pow+0x14e>
 800c05a:	4c31      	ldr	r4, [pc, #196]	@ (800c120 <__ieee754_pow+0xa70>)
 800c05c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c060:	42a3      	cmp	r3, r4
 800c062:	d91a      	bls.n	800c09a <__ieee754_pow+0x9ea>
 800c064:	4b2f      	ldr	r3, [pc, #188]	@ (800c124 <__ieee754_pow+0xa74>)
 800c066:	440b      	add	r3, r1
 800c068:	4303      	orrs	r3, r0
 800c06a:	d009      	beq.n	800c080 <__ieee754_pow+0x9d0>
 800c06c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c070:	2200      	movs	r2, #0
 800c072:	2300      	movs	r3, #0
 800c074:	f7f4 fd52 	bl	8000b1c <__aeabi_dcmplt>
 800c078:	3800      	subs	r0, #0
 800c07a:	bf18      	it	ne
 800c07c:	2001      	movne	r0, #1
 800c07e:	e42b      	b.n	800b8d8 <__ieee754_pow+0x228>
 800c080:	4642      	mov	r2, r8
 800c082:	464b      	mov	r3, r9
 800c084:	f7f4 f920 	bl	80002c8 <__aeabi_dsub>
 800c088:	4632      	mov	r2, r6
 800c08a:	463b      	mov	r3, r7
 800c08c:	f7f4 fd5a 	bl	8000b44 <__aeabi_dcmpge>
 800c090:	2800      	cmp	r0, #0
 800c092:	d1eb      	bne.n	800c06c <__ieee754_pow+0x9bc>
 800c094:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800c134 <__ieee754_pow+0xa84>
 800c098:	e6f7      	b.n	800be8a <__ieee754_pow+0x7da>
 800c09a:	469a      	mov	sl, r3
 800c09c:	4b22      	ldr	r3, [pc, #136]	@ (800c128 <__ieee754_pow+0xa78>)
 800c09e:	459a      	cmp	sl, r3
 800c0a0:	f63f aef3 	bhi.w	800be8a <__ieee754_pow+0x7da>
 800c0a4:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c0a8:	e715      	b.n	800bed6 <__ieee754_pow+0x826>
 800c0aa:	ec51 0b10 	vmov	r0, r1, d0
 800c0ae:	4619      	mov	r1, r3
 800c0b0:	e7cf      	b.n	800c052 <__ieee754_pow+0x9a2>
 800c0b2:	491a      	ldr	r1, [pc, #104]	@ (800c11c <__ieee754_pow+0xa6c>)
 800c0b4:	2000      	movs	r0, #0
 800c0b6:	f7ff bb18 	b.w	800b6ea <__ieee754_pow+0x3a>
 800c0ba:	2000      	movs	r0, #0
 800c0bc:	2100      	movs	r1, #0
 800c0be:	f7ff bb14 	b.w	800b6ea <__ieee754_pow+0x3a>
 800c0c2:	4630      	mov	r0, r6
 800c0c4:	4639      	mov	r1, r7
 800c0c6:	f7ff bb10 	b.w	800b6ea <__ieee754_pow+0x3a>
 800c0ca:	460c      	mov	r4, r1
 800c0cc:	f7ff bb5e 	b.w	800b78c <__ieee754_pow+0xdc>
 800c0d0:	2400      	movs	r4, #0
 800c0d2:	f7ff bb49 	b.w	800b768 <__ieee754_pow+0xb8>
 800c0d6:	bf00      	nop
 800c0d8:	00000000 	.word	0x00000000
 800c0dc:	3fe62e43 	.word	0x3fe62e43
 800c0e0:	fefa39ef 	.word	0xfefa39ef
 800c0e4:	3fe62e42 	.word	0x3fe62e42
 800c0e8:	0ca86c39 	.word	0x0ca86c39
 800c0ec:	be205c61 	.word	0xbe205c61
 800c0f0:	72bea4d0 	.word	0x72bea4d0
 800c0f4:	3e663769 	.word	0x3e663769
 800c0f8:	c5d26bf1 	.word	0xc5d26bf1
 800c0fc:	3ebbbd41 	.word	0x3ebbbd41
 800c100:	af25de2c 	.word	0xaf25de2c
 800c104:	3f11566a 	.word	0x3f11566a
 800c108:	16bebd93 	.word	0x16bebd93
 800c10c:	3f66c16c 	.word	0x3f66c16c
 800c110:	5555553e 	.word	0x5555553e
 800c114:	3fc55555 	.word	0x3fc55555
 800c118:	fff00000 	.word	0xfff00000
 800c11c:	3ff00000 	.word	0x3ff00000
 800c120:	4090cbff 	.word	0x4090cbff
 800c124:	3f6f3400 	.word	0x3f6f3400
 800c128:	3fe00000 	.word	0x3fe00000
 800c12c:	652b82fe 	.word	0x652b82fe
 800c130:	3c971547 	.word	0x3c971547
 800c134:	4090cc00 	.word	0x4090cc00

0800c138 <scalbn>:
 800c138:	b570      	push	{r4, r5, r6, lr}
 800c13a:	ec55 4b10 	vmov	r4, r5, d0
 800c13e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c142:	4606      	mov	r6, r0
 800c144:	462b      	mov	r3, r5
 800c146:	b991      	cbnz	r1, 800c16e <scalbn+0x36>
 800c148:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c14c:	4323      	orrs	r3, r4
 800c14e:	d03d      	beq.n	800c1cc <scalbn+0x94>
 800c150:	4b35      	ldr	r3, [pc, #212]	@ (800c228 <scalbn+0xf0>)
 800c152:	4620      	mov	r0, r4
 800c154:	4629      	mov	r1, r5
 800c156:	2200      	movs	r2, #0
 800c158:	f7f4 fa6e 	bl	8000638 <__aeabi_dmul>
 800c15c:	4b33      	ldr	r3, [pc, #204]	@ (800c22c <scalbn+0xf4>)
 800c15e:	429e      	cmp	r6, r3
 800c160:	4604      	mov	r4, r0
 800c162:	460d      	mov	r5, r1
 800c164:	da0f      	bge.n	800c186 <scalbn+0x4e>
 800c166:	a328      	add	r3, pc, #160	@ (adr r3, 800c208 <scalbn+0xd0>)
 800c168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c16c:	e01e      	b.n	800c1ac <scalbn+0x74>
 800c16e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800c172:	4291      	cmp	r1, r2
 800c174:	d10b      	bne.n	800c18e <scalbn+0x56>
 800c176:	4622      	mov	r2, r4
 800c178:	4620      	mov	r0, r4
 800c17a:	4629      	mov	r1, r5
 800c17c:	f7f4 f8a6 	bl	80002cc <__adddf3>
 800c180:	4604      	mov	r4, r0
 800c182:	460d      	mov	r5, r1
 800c184:	e022      	b.n	800c1cc <scalbn+0x94>
 800c186:	460b      	mov	r3, r1
 800c188:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c18c:	3936      	subs	r1, #54	@ 0x36
 800c18e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800c192:	4296      	cmp	r6, r2
 800c194:	dd0d      	ble.n	800c1b2 <scalbn+0x7a>
 800c196:	2d00      	cmp	r5, #0
 800c198:	a11d      	add	r1, pc, #116	@ (adr r1, 800c210 <scalbn+0xd8>)
 800c19a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c19e:	da02      	bge.n	800c1a6 <scalbn+0x6e>
 800c1a0:	a11d      	add	r1, pc, #116	@ (adr r1, 800c218 <scalbn+0xe0>)
 800c1a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1a6:	a31a      	add	r3, pc, #104	@ (adr r3, 800c210 <scalbn+0xd8>)
 800c1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ac:	f7f4 fa44 	bl	8000638 <__aeabi_dmul>
 800c1b0:	e7e6      	b.n	800c180 <scalbn+0x48>
 800c1b2:	1872      	adds	r2, r6, r1
 800c1b4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800c1b8:	428a      	cmp	r2, r1
 800c1ba:	dcec      	bgt.n	800c196 <scalbn+0x5e>
 800c1bc:	2a00      	cmp	r2, #0
 800c1be:	dd08      	ble.n	800c1d2 <scalbn+0x9a>
 800c1c0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c1c4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c1c8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c1cc:	ec45 4b10 	vmov	d0, r4, r5
 800c1d0:	bd70      	pop	{r4, r5, r6, pc}
 800c1d2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800c1d6:	da08      	bge.n	800c1ea <scalbn+0xb2>
 800c1d8:	2d00      	cmp	r5, #0
 800c1da:	a10b      	add	r1, pc, #44	@ (adr r1, 800c208 <scalbn+0xd0>)
 800c1dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1e0:	dac1      	bge.n	800c166 <scalbn+0x2e>
 800c1e2:	a10f      	add	r1, pc, #60	@ (adr r1, 800c220 <scalbn+0xe8>)
 800c1e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1e8:	e7bd      	b.n	800c166 <scalbn+0x2e>
 800c1ea:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c1ee:	3236      	adds	r2, #54	@ 0x36
 800c1f0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c1f4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c1f8:	4620      	mov	r0, r4
 800c1fa:	4b0d      	ldr	r3, [pc, #52]	@ (800c230 <scalbn+0xf8>)
 800c1fc:	4629      	mov	r1, r5
 800c1fe:	2200      	movs	r2, #0
 800c200:	e7d4      	b.n	800c1ac <scalbn+0x74>
 800c202:	bf00      	nop
 800c204:	f3af 8000 	nop.w
 800c208:	c2f8f359 	.word	0xc2f8f359
 800c20c:	01a56e1f 	.word	0x01a56e1f
 800c210:	8800759c 	.word	0x8800759c
 800c214:	7e37e43c 	.word	0x7e37e43c
 800c218:	8800759c 	.word	0x8800759c
 800c21c:	fe37e43c 	.word	0xfe37e43c
 800c220:	c2f8f359 	.word	0xc2f8f359
 800c224:	81a56e1f 	.word	0x81a56e1f
 800c228:	43500000 	.word	0x43500000
 800c22c:	ffff3cb0 	.word	0xffff3cb0
 800c230:	3c900000 	.word	0x3c900000

0800c234 <with_errno>:
 800c234:	b510      	push	{r4, lr}
 800c236:	ed2d 8b02 	vpush	{d8}
 800c23a:	eeb0 8a40 	vmov.f32	s16, s0
 800c23e:	eef0 8a60 	vmov.f32	s17, s1
 800c242:	4604      	mov	r4, r0
 800c244:	f7fe fad4 	bl	800a7f0 <__errno>
 800c248:	eeb0 0a48 	vmov.f32	s0, s16
 800c24c:	eef0 0a68 	vmov.f32	s1, s17
 800c250:	ecbd 8b02 	vpop	{d8}
 800c254:	6004      	str	r4, [r0, #0]
 800c256:	bd10      	pop	{r4, pc}

0800c258 <xflow>:
 800c258:	4603      	mov	r3, r0
 800c25a:	b507      	push	{r0, r1, r2, lr}
 800c25c:	ec51 0b10 	vmov	r0, r1, d0
 800c260:	b183      	cbz	r3, 800c284 <xflow+0x2c>
 800c262:	4602      	mov	r2, r0
 800c264:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c268:	e9cd 2300 	strd	r2, r3, [sp]
 800c26c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c270:	f7f4 f9e2 	bl	8000638 <__aeabi_dmul>
 800c274:	ec41 0b10 	vmov	d0, r0, r1
 800c278:	2022      	movs	r0, #34	@ 0x22
 800c27a:	b003      	add	sp, #12
 800c27c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c280:	f7ff bfd8 	b.w	800c234 <with_errno>
 800c284:	4602      	mov	r2, r0
 800c286:	460b      	mov	r3, r1
 800c288:	e7ee      	b.n	800c268 <xflow+0x10>
 800c28a:	0000      	movs	r0, r0
 800c28c:	0000      	movs	r0, r0
	...

0800c290 <__math_uflow>:
 800c290:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c298 <__math_uflow+0x8>
 800c294:	f7ff bfe0 	b.w	800c258 <xflow>
 800c298:	00000000 	.word	0x00000000
 800c29c:	10000000 	.word	0x10000000

0800c2a0 <__math_oflow>:
 800c2a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c2a8 <__math_oflow+0x8>
 800c2a4:	f7ff bfd8 	b.w	800c258 <xflow>
 800c2a8:	00000000 	.word	0x00000000
 800c2ac:	70000000 	.word	0x70000000

0800c2b0 <__ieee754_sqrt>:
 800c2b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2b4:	4a68      	ldr	r2, [pc, #416]	@ (800c458 <__ieee754_sqrt+0x1a8>)
 800c2b6:	ec55 4b10 	vmov	r4, r5, d0
 800c2ba:	43aa      	bics	r2, r5
 800c2bc:	462b      	mov	r3, r5
 800c2be:	4621      	mov	r1, r4
 800c2c0:	d110      	bne.n	800c2e4 <__ieee754_sqrt+0x34>
 800c2c2:	4622      	mov	r2, r4
 800c2c4:	4620      	mov	r0, r4
 800c2c6:	4629      	mov	r1, r5
 800c2c8:	f7f4 f9b6 	bl	8000638 <__aeabi_dmul>
 800c2cc:	4602      	mov	r2, r0
 800c2ce:	460b      	mov	r3, r1
 800c2d0:	4620      	mov	r0, r4
 800c2d2:	4629      	mov	r1, r5
 800c2d4:	f7f3 fffa 	bl	80002cc <__adddf3>
 800c2d8:	4604      	mov	r4, r0
 800c2da:	460d      	mov	r5, r1
 800c2dc:	ec45 4b10 	vmov	d0, r4, r5
 800c2e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2e4:	2d00      	cmp	r5, #0
 800c2e6:	dc0e      	bgt.n	800c306 <__ieee754_sqrt+0x56>
 800c2e8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800c2ec:	4322      	orrs	r2, r4
 800c2ee:	d0f5      	beq.n	800c2dc <__ieee754_sqrt+0x2c>
 800c2f0:	b19d      	cbz	r5, 800c31a <__ieee754_sqrt+0x6a>
 800c2f2:	4622      	mov	r2, r4
 800c2f4:	4620      	mov	r0, r4
 800c2f6:	4629      	mov	r1, r5
 800c2f8:	f7f3 ffe6 	bl	80002c8 <__aeabi_dsub>
 800c2fc:	4602      	mov	r2, r0
 800c2fe:	460b      	mov	r3, r1
 800c300:	f7f4 fac4 	bl	800088c <__aeabi_ddiv>
 800c304:	e7e8      	b.n	800c2d8 <__ieee754_sqrt+0x28>
 800c306:	152a      	asrs	r2, r5, #20
 800c308:	d115      	bne.n	800c336 <__ieee754_sqrt+0x86>
 800c30a:	2000      	movs	r0, #0
 800c30c:	e009      	b.n	800c322 <__ieee754_sqrt+0x72>
 800c30e:	0acb      	lsrs	r3, r1, #11
 800c310:	3a15      	subs	r2, #21
 800c312:	0549      	lsls	r1, r1, #21
 800c314:	2b00      	cmp	r3, #0
 800c316:	d0fa      	beq.n	800c30e <__ieee754_sqrt+0x5e>
 800c318:	e7f7      	b.n	800c30a <__ieee754_sqrt+0x5a>
 800c31a:	462a      	mov	r2, r5
 800c31c:	e7fa      	b.n	800c314 <__ieee754_sqrt+0x64>
 800c31e:	005b      	lsls	r3, r3, #1
 800c320:	3001      	adds	r0, #1
 800c322:	02dc      	lsls	r4, r3, #11
 800c324:	d5fb      	bpl.n	800c31e <__ieee754_sqrt+0x6e>
 800c326:	1e44      	subs	r4, r0, #1
 800c328:	1b12      	subs	r2, r2, r4
 800c32a:	f1c0 0420 	rsb	r4, r0, #32
 800c32e:	fa21 f404 	lsr.w	r4, r1, r4
 800c332:	4323      	orrs	r3, r4
 800c334:	4081      	lsls	r1, r0
 800c336:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c33a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800c33e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c342:	07d2      	lsls	r2, r2, #31
 800c344:	bf5c      	itt	pl
 800c346:	005b      	lslpl	r3, r3, #1
 800c348:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800c34c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c350:	bf58      	it	pl
 800c352:	0049      	lslpl	r1, r1, #1
 800c354:	2600      	movs	r6, #0
 800c356:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800c35a:	106d      	asrs	r5, r5, #1
 800c35c:	0049      	lsls	r1, r1, #1
 800c35e:	2016      	movs	r0, #22
 800c360:	4632      	mov	r2, r6
 800c362:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800c366:	1917      	adds	r7, r2, r4
 800c368:	429f      	cmp	r7, r3
 800c36a:	bfde      	ittt	le
 800c36c:	193a      	addle	r2, r7, r4
 800c36e:	1bdb      	suble	r3, r3, r7
 800c370:	1936      	addle	r6, r6, r4
 800c372:	0fcf      	lsrs	r7, r1, #31
 800c374:	3801      	subs	r0, #1
 800c376:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800c37a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c37e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c382:	d1f0      	bne.n	800c366 <__ieee754_sqrt+0xb6>
 800c384:	4604      	mov	r4, r0
 800c386:	2720      	movs	r7, #32
 800c388:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800c38c:	429a      	cmp	r2, r3
 800c38e:	eb00 0e0c 	add.w	lr, r0, ip
 800c392:	db02      	blt.n	800c39a <__ieee754_sqrt+0xea>
 800c394:	d113      	bne.n	800c3be <__ieee754_sqrt+0x10e>
 800c396:	458e      	cmp	lr, r1
 800c398:	d811      	bhi.n	800c3be <__ieee754_sqrt+0x10e>
 800c39a:	f1be 0f00 	cmp.w	lr, #0
 800c39e:	eb0e 000c 	add.w	r0, lr, ip
 800c3a2:	da42      	bge.n	800c42a <__ieee754_sqrt+0x17a>
 800c3a4:	2800      	cmp	r0, #0
 800c3a6:	db40      	blt.n	800c42a <__ieee754_sqrt+0x17a>
 800c3a8:	f102 0801 	add.w	r8, r2, #1
 800c3ac:	1a9b      	subs	r3, r3, r2
 800c3ae:	458e      	cmp	lr, r1
 800c3b0:	bf88      	it	hi
 800c3b2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c3b6:	eba1 010e 	sub.w	r1, r1, lr
 800c3ba:	4464      	add	r4, ip
 800c3bc:	4642      	mov	r2, r8
 800c3be:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800c3c2:	3f01      	subs	r7, #1
 800c3c4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800c3c8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c3cc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800c3d0:	d1dc      	bne.n	800c38c <__ieee754_sqrt+0xdc>
 800c3d2:	4319      	orrs	r1, r3
 800c3d4:	d01b      	beq.n	800c40e <__ieee754_sqrt+0x15e>
 800c3d6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800c45c <__ieee754_sqrt+0x1ac>
 800c3da:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800c460 <__ieee754_sqrt+0x1b0>
 800c3de:	e9da 0100 	ldrd	r0, r1, [sl]
 800c3e2:	e9db 2300 	ldrd	r2, r3, [fp]
 800c3e6:	f7f3 ff6f 	bl	80002c8 <__aeabi_dsub>
 800c3ea:	e9da 8900 	ldrd	r8, r9, [sl]
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	4640      	mov	r0, r8
 800c3f4:	4649      	mov	r1, r9
 800c3f6:	f7f4 fb9b 	bl	8000b30 <__aeabi_dcmple>
 800c3fa:	b140      	cbz	r0, 800c40e <__ieee754_sqrt+0x15e>
 800c3fc:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c400:	e9da 0100 	ldrd	r0, r1, [sl]
 800c404:	e9db 2300 	ldrd	r2, r3, [fp]
 800c408:	d111      	bne.n	800c42e <__ieee754_sqrt+0x17e>
 800c40a:	3601      	adds	r6, #1
 800c40c:	463c      	mov	r4, r7
 800c40e:	1072      	asrs	r2, r6, #1
 800c410:	0863      	lsrs	r3, r4, #1
 800c412:	07f1      	lsls	r1, r6, #31
 800c414:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800c418:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800c41c:	bf48      	it	mi
 800c41e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800c422:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800c426:	4618      	mov	r0, r3
 800c428:	e756      	b.n	800c2d8 <__ieee754_sqrt+0x28>
 800c42a:	4690      	mov	r8, r2
 800c42c:	e7be      	b.n	800c3ac <__ieee754_sqrt+0xfc>
 800c42e:	f7f3 ff4d 	bl	80002cc <__adddf3>
 800c432:	e9da 8900 	ldrd	r8, r9, [sl]
 800c436:	4602      	mov	r2, r0
 800c438:	460b      	mov	r3, r1
 800c43a:	4640      	mov	r0, r8
 800c43c:	4649      	mov	r1, r9
 800c43e:	f7f4 fb6d 	bl	8000b1c <__aeabi_dcmplt>
 800c442:	b120      	cbz	r0, 800c44e <__ieee754_sqrt+0x19e>
 800c444:	1ca0      	adds	r0, r4, #2
 800c446:	bf08      	it	eq
 800c448:	3601      	addeq	r6, #1
 800c44a:	3402      	adds	r4, #2
 800c44c:	e7df      	b.n	800c40e <__ieee754_sqrt+0x15e>
 800c44e:	1c63      	adds	r3, r4, #1
 800c450:	f023 0401 	bic.w	r4, r3, #1
 800c454:	e7db      	b.n	800c40e <__ieee754_sqrt+0x15e>
 800c456:	bf00      	nop
 800c458:	7ff00000 	.word	0x7ff00000
 800c45c:	200000a0 	.word	0x200000a0
 800c460:	20000098 	.word	0x20000098

0800c464 <_init>:
 800c464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c466:	bf00      	nop
 800c468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c46a:	bc08      	pop	{r3}
 800c46c:	469e      	mov	lr, r3
 800c46e:	4770      	bx	lr

0800c470 <_fini>:
 800c470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c472:	bf00      	nop
 800c474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c476:	bc08      	pop	{r3}
 800c478:	469e      	mov	lr, r3
 800c47a:	4770      	bx	lr
