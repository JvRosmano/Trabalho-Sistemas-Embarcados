
TrabalhoBarco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000834c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  08008520  08008520  00009520  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087a0  080087a0  0000a0a0  2**0
                  CONTENTS
  4 .ARM          00000008  080087a0  080087a0  000097a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087a8  080087a8  0000a0a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087a8  080087a8  000097a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080087ac  080087ac  000097ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  080087b0  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000974  200000a0  08008850  0000a0a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a14  08008850  0000aa14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000127b4  00000000  00000000  0000a0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002988  00000000  00000000  0001c884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  0001f210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d5b  00000000  00000000  00020308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023836  00000000  00000000  00021063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c7f  00000000  00000000  00044899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4d19  00000000  00000000  0005b518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00130231  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000537c  00000000  00000000  00130274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b2  00000000  00000000  001355f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a0 	.word	0x200000a0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008504 	.word	0x08008504

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a4 	.word	0x200000a4
 800020c:	08008504 	.word	0x08008504

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b96a 	b.w	8000f64 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	460c      	mov	r4, r1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d14e      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb4:	4694      	mov	ip, r2
 8000cb6:	458c      	cmp	ip, r1
 8000cb8:	4686      	mov	lr, r0
 8000cba:	fab2 f282 	clz	r2, r2
 8000cbe:	d962      	bls.n	8000d86 <__udivmoddi4+0xde>
 8000cc0:	b14a      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc2:	f1c2 0320 	rsb	r3, r2, #32
 8000cc6:	4091      	lsls	r1, r2
 8000cc8:	fa20 f303 	lsr.w	r3, r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	4319      	orrs	r1, r3
 8000cd2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cda:	fa1f f68c 	uxth.w	r6, ip
 8000cde:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ce2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb04 f106 	mul.w	r1, r4, r6
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cfe:	f080 8112 	bcs.w	8000f26 <__udivmoddi4+0x27e>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 810f 	bls.w	8000f26 <__udivmoddi4+0x27e>
 8000d08:	3c02      	subs	r4, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	fa1f f38e 	uxth.w	r3, lr
 8000d12:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d16:	fb07 1110 	mls	r1, r7, r0, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb00 f606 	mul.w	r6, r0, r6
 8000d22:	429e      	cmp	r6, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x94>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d2e:	f080 80fc 	bcs.w	8000f2a <__udivmoddi4+0x282>
 8000d32:	429e      	cmp	r6, r3
 8000d34:	f240 80f9 	bls.w	8000f2a <__udivmoddi4+0x282>
 8000d38:	4463      	add	r3, ip
 8000d3a:	3802      	subs	r0, #2
 8000d3c:	1b9b      	subs	r3, r3, r6
 8000d3e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d42:	2100      	movs	r1, #0
 8000d44:	b11d      	cbz	r5, 8000d4e <__udivmoddi4+0xa6>
 8000d46:	40d3      	lsrs	r3, r2
 8000d48:	2200      	movs	r2, #0
 8000d4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d905      	bls.n	8000d62 <__udivmoddi4+0xba>
 8000d56:	b10d      	cbz	r5, 8000d5c <__udivmoddi4+0xb4>
 8000d58:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e7f5      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000d62:	fab3 f183 	clz	r1, r3
 8000d66:	2900      	cmp	r1, #0
 8000d68:	d146      	bne.n	8000df8 <__udivmoddi4+0x150>
 8000d6a:	42a3      	cmp	r3, r4
 8000d6c:	d302      	bcc.n	8000d74 <__udivmoddi4+0xcc>
 8000d6e:	4290      	cmp	r0, r2
 8000d70:	f0c0 80f0 	bcc.w	8000f54 <__udivmoddi4+0x2ac>
 8000d74:	1a86      	subs	r6, r0, r2
 8000d76:	eb64 0303 	sbc.w	r3, r4, r3
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	2d00      	cmp	r5, #0
 8000d7e:	d0e6      	beq.n	8000d4e <__udivmoddi4+0xa6>
 8000d80:	e9c5 6300 	strd	r6, r3, [r5]
 8000d84:	e7e3      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	f040 8090 	bne.w	8000eac <__udivmoddi4+0x204>
 8000d8c:	eba1 040c 	sub.w	r4, r1, ip
 8000d90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d94:	fa1f f78c 	uxth.w	r7, ip
 8000d98:	2101      	movs	r1, #1
 8000d9a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb08 4416 	mls	r4, r8, r6, r4
 8000da6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000daa:	fb07 f006 	mul.w	r0, r7, r6
 8000dae:	4298      	cmp	r0, r3
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x11c>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x11a>
 8000dbc:	4298      	cmp	r0, r3
 8000dbe:	f200 80cd 	bhi.w	8000f5c <__udivmoddi4+0x2b4>
 8000dc2:	4626      	mov	r6, r4
 8000dc4:	1a1c      	subs	r4, r3, r0
 8000dc6:	fa1f f38e 	uxth.w	r3, lr
 8000dca:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dce:	fb08 4410 	mls	r4, r8, r0, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb00 f707 	mul.w	r7, r0, r7
 8000dda:	429f      	cmp	r7, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x148>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x146>
 8000de8:	429f      	cmp	r7, r3
 8000dea:	f200 80b0 	bhi.w	8000f4e <__udivmoddi4+0x2a6>
 8000dee:	4620      	mov	r0, r4
 8000df0:	1bdb      	subs	r3, r3, r7
 8000df2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df6:	e7a5      	b.n	8000d44 <__udivmoddi4+0x9c>
 8000df8:	f1c1 0620 	rsb	r6, r1, #32
 8000dfc:	408b      	lsls	r3, r1
 8000dfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000e02:	431f      	orrs	r7, r3
 8000e04:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e08:	fa04 f301 	lsl.w	r3, r4, r1
 8000e0c:	ea43 030c 	orr.w	r3, r3, ip
 8000e10:	40f4      	lsrs	r4, r6
 8000e12:	fa00 f801 	lsl.w	r8, r0, r1
 8000e16:	0c38      	lsrs	r0, r7, #16
 8000e18:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e1c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e20:	fa1f fc87 	uxth.w	ip, r7
 8000e24:	fb00 441e 	mls	r4, r0, lr, r4
 8000e28:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e2c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e30:	45a1      	cmp	r9, r4
 8000e32:	fa02 f201 	lsl.w	r2, r2, r1
 8000e36:	d90a      	bls.n	8000e4e <__udivmoddi4+0x1a6>
 8000e38:	193c      	adds	r4, r7, r4
 8000e3a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e3e:	f080 8084 	bcs.w	8000f4a <__udivmoddi4+0x2a2>
 8000e42:	45a1      	cmp	r9, r4
 8000e44:	f240 8081 	bls.w	8000f4a <__udivmoddi4+0x2a2>
 8000e48:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e4c:	443c      	add	r4, r7
 8000e4e:	eba4 0409 	sub.w	r4, r4, r9
 8000e52:	fa1f f983 	uxth.w	r9, r3
 8000e56:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e5a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e5e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e62:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e66:	45a4      	cmp	ip, r4
 8000e68:	d907      	bls.n	8000e7a <__udivmoddi4+0x1d2>
 8000e6a:	193c      	adds	r4, r7, r4
 8000e6c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e70:	d267      	bcs.n	8000f42 <__udivmoddi4+0x29a>
 8000e72:	45a4      	cmp	ip, r4
 8000e74:	d965      	bls.n	8000f42 <__udivmoddi4+0x29a>
 8000e76:	3b02      	subs	r3, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e7e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e82:	eba4 040c 	sub.w	r4, r4, ip
 8000e86:	429c      	cmp	r4, r3
 8000e88:	46ce      	mov	lr, r9
 8000e8a:	469c      	mov	ip, r3
 8000e8c:	d351      	bcc.n	8000f32 <__udivmoddi4+0x28a>
 8000e8e:	d04e      	beq.n	8000f2e <__udivmoddi4+0x286>
 8000e90:	b155      	cbz	r5, 8000ea8 <__udivmoddi4+0x200>
 8000e92:	ebb8 030e 	subs.w	r3, r8, lr
 8000e96:	eb64 040c 	sbc.w	r4, r4, ip
 8000e9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e9e:	40cb      	lsrs	r3, r1
 8000ea0:	431e      	orrs	r6, r3
 8000ea2:	40cc      	lsrs	r4, r1
 8000ea4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	e750      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000eac:	f1c2 0320 	rsb	r3, r2, #32
 8000eb0:	fa20 f103 	lsr.w	r1, r0, r3
 8000eb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eb8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ebc:	4094      	lsls	r4, r2
 8000ebe:	430c      	orrs	r4, r1
 8000ec0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ec4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ec8:	fa1f f78c 	uxth.w	r7, ip
 8000ecc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ed0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ed4:	0c23      	lsrs	r3, r4, #16
 8000ed6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eda:	fb00 f107 	mul.w	r1, r0, r7
 8000ede:	4299      	cmp	r1, r3
 8000ee0:	d908      	bls.n	8000ef4 <__udivmoddi4+0x24c>
 8000ee2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ee6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eea:	d22c      	bcs.n	8000f46 <__udivmoddi4+0x29e>
 8000eec:	4299      	cmp	r1, r3
 8000eee:	d92a      	bls.n	8000f46 <__udivmoddi4+0x29e>
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	4463      	add	r3, ip
 8000ef4:	1a5b      	subs	r3, r3, r1
 8000ef6:	b2a4      	uxth	r4, r4
 8000ef8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000efc:	fb08 3311 	mls	r3, r8, r1, r3
 8000f00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f04:	fb01 f307 	mul.w	r3, r1, r7
 8000f08:	42a3      	cmp	r3, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x276>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f14:	d213      	bcs.n	8000f3e <__udivmoddi4+0x296>
 8000f16:	42a3      	cmp	r3, r4
 8000f18:	d911      	bls.n	8000f3e <__udivmoddi4+0x296>
 8000f1a:	3902      	subs	r1, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	1ae4      	subs	r4, r4, r3
 8000f20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f24:	e739      	b.n	8000d9a <__udivmoddi4+0xf2>
 8000f26:	4604      	mov	r4, r0
 8000f28:	e6f0      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f2a:	4608      	mov	r0, r1
 8000f2c:	e706      	b.n	8000d3c <__udivmoddi4+0x94>
 8000f2e:	45c8      	cmp	r8, r9
 8000f30:	d2ae      	bcs.n	8000e90 <__udivmoddi4+0x1e8>
 8000f32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f3a:	3801      	subs	r0, #1
 8000f3c:	e7a8      	b.n	8000e90 <__udivmoddi4+0x1e8>
 8000f3e:	4631      	mov	r1, r6
 8000f40:	e7ed      	b.n	8000f1e <__udivmoddi4+0x276>
 8000f42:	4603      	mov	r3, r0
 8000f44:	e799      	b.n	8000e7a <__udivmoddi4+0x1d2>
 8000f46:	4630      	mov	r0, r6
 8000f48:	e7d4      	b.n	8000ef4 <__udivmoddi4+0x24c>
 8000f4a:	46d6      	mov	lr, sl
 8000f4c:	e77f      	b.n	8000e4e <__udivmoddi4+0x1a6>
 8000f4e:	4463      	add	r3, ip
 8000f50:	3802      	subs	r0, #2
 8000f52:	e74d      	b.n	8000df0 <__udivmoddi4+0x148>
 8000f54:	4606      	mov	r6, r0
 8000f56:	4623      	mov	r3, r4
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e70f      	b.n	8000d7c <__udivmoddi4+0xd4>
 8000f5c:	3e02      	subs	r6, #2
 8000f5e:	4463      	add	r3, ip
 8000f60:	e730      	b.n	8000dc4 <__udivmoddi4+0x11c>
 8000f62:	bf00      	nop

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <HMC5883L_Init>:
#define HMC5883L_4_NUCLEO_64_H_

#include "Drivers/HMC5883L_4_NUCLEO_64.h"
#include "main.h"

void HMC5883L_Init(I2C_HandleTypeDef huart){
 8000f68:	b084      	sub	sp, #16
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b086      	sub	sp, #24
 8000f6e:	af04      	add	r7, sp, #16
 8000f70:	f107 0c10 	add.w	ip, r7, #16
 8000f74:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	 uint8_t data = (COMPASS_SAMPLE8 | COMPASS_RATE15 | COMPASS_MEASURE_NORMAL);
 8000f78:	2370      	movs	r3, #112	@ 0x70
 8000f7a:	71fb      	strb	r3, [r7, #7]
	 uint8_t ScaleMode = COMPASS_SCALE_130;
 8000f7c:	2320      	movs	r3, #32
 8000f7e:	71bb      	strb	r3, [r7, #6]
	 uint8_t Measure = COMPASS_CONTINUOUS;
 8000f80:	2300      	movs	r3, #0
 8000f82:	717b      	strb	r3, [r7, #5]
	 HAL_I2C_Mem_Write(&huart, HMC5883L_ADDRESS, COMPASS_CONFIG_REGISTER_A, 1, &data , 1, 100);
 8000f84:	2364      	movs	r3, #100	@ 0x64
 8000f86:	9302      	str	r3, [sp, #8]
 8000f88:	2301      	movs	r3, #1
 8000f8a:	9301      	str	r3, [sp, #4]
 8000f8c:	1dfb      	adds	r3, r7, #7
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	2301      	movs	r3, #1
 8000f92:	2200      	movs	r2, #0
 8000f94:	213d      	movs	r1, #61	@ 0x3d
 8000f96:	f107 0010 	add.w	r0, r7, #16
 8000f9a:	f002 fb1b 	bl	80035d4 <HAL_I2C_Mem_Write>
	 HAL_I2C_Mem_Write(&huart, HMC5883L_ADDRESS, COMPASS_CONFIG_REGISTER_B, 1, &ScaleMode , 1, 100);
 8000f9e:	2364      	movs	r3, #100	@ 0x64
 8000fa0:	9302      	str	r3, [sp, #8]
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	9301      	str	r3, [sp, #4]
 8000fa6:	1dbb      	adds	r3, r7, #6
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	2301      	movs	r3, #1
 8000fac:	2201      	movs	r2, #1
 8000fae:	213d      	movs	r1, #61	@ 0x3d
 8000fb0:	f107 0010 	add.w	r0, r7, #16
 8000fb4:	f002 fb0e 	bl	80035d4 <HAL_I2C_Mem_Write>
	 HAL_I2C_Mem_Write(&huart, HMC5883L_ADDRESS, COMPASS_MODE_REGISTER, 1, &Measure , 1, 100);
 8000fb8:	2364      	movs	r3, #100	@ 0x64
 8000fba:	9302      	str	r3, [sp, #8]
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	9301      	str	r3, [sp, #4]
 8000fc0:	1d7b      	adds	r3, r7, #5
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	213d      	movs	r1, #61	@ 0x3d
 8000fca:	f107 0010 	add.w	r0, r7, #16
 8000fce:	f002 fb01 	bl	80035d4 <HAL_I2C_Mem_Write>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fdc:	b004      	add	sp, #16
 8000fde:	4770      	bx	lr

08000fe0 <meanData>:

int16_t meanData(int16_t* buffer) {
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	int16_t mean = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	81fb      	strh	r3, [r7, #14]
	for (int i=0;i<8;i++){
 8000fec:	2300      	movs	r3, #0
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	e00d      	b.n	800100e <meanData+0x2e>
		mean += buffer[i];
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	89fb      	ldrh	r3, [r7, #14]
 8001002:	4413      	add	r3, r2
 8001004:	b29b      	uxth	r3, r3
 8001006:	81fb      	strh	r3, [r7, #14]
	for (int i=0;i<8;i++){
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	3301      	adds	r3, #1
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	2b07      	cmp	r3, #7
 8001012:	ddee      	ble.n	8000ff2 <meanData+0x12>
	}
	return (mean / 8);
 8001014:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001018:	2b00      	cmp	r3, #0
 800101a:	da00      	bge.n	800101e <meanData+0x3e>
 800101c:	3307      	adds	r3, #7
 800101e:	10db      	asrs	r3, r3, #3
 8001020:	b21b      	sxth	r3, r3
}
 8001022:	4618      	mov	r0, r3
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <FilterData>:

int16_t FilterData(int16_t* buffer) {
 800102e:	b580      	push	{r7, lr}
 8001030:	b084      	sub	sp, #16
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
	uint8_t min = 200;
 8001036:	23c8      	movs	r3, #200	@ 0xc8
 8001038:	72fb      	strb	r3, [r7, #11]
	for (int i=1;i<8;i++){
 800103a:	2301      	movs	r3, #1
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	e028      	b.n	8001092 <FilterData+0x64>
		if((abs(buffer[i]-buffer[i-1])) > min ){
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	4413      	add	r3, r2
 8001048:	f9b3 3000 	ldrsh.w	r3, [r3]
 800104c:	4619      	mov	r1, r3
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8001054:	3b01      	subs	r3, #1
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	4413      	add	r3, r2
 800105c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001060:	1acb      	subs	r3, r1, r3
 8001062:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001066:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800106a:	7afb      	ldrb	r3, [r7, #11]
 800106c:	429a      	cmp	r2, r3
 800106e:	dd0d      	ble.n	800108c <FilterData+0x5e>
			buffer[i]=buffer[i-1];
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8001076:	3b01      	subs	r3, #1
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	441a      	add	r2, r3
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	440b      	add	r3, r1
 8001086:	f9b2 2000 	ldrsh.w	r2, [r2]
 800108a:	801a      	strh	r2, [r3, #0]
	for (int i=1;i<8;i++){
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	3301      	adds	r3, #1
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2b07      	cmp	r3, #7
 8001096:	ddd3      	ble.n	8001040 <FilterData+0x12>
		}
	}
	return meanData(buffer);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ffa1 	bl	8000fe0 <meanData>
 800109e:	4603      	mov	r3, r0
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <CompassReadAxis>:

void CompassReadAxis (I2C_HandleTypeDef huart, int16_t* buffer_t_x, int16_t* buffer_t_y){
 80010a8:	b084      	sub	sp, #16
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b088      	sub	sp, #32
 80010ae:	af04      	add	r7, sp, #16
 80010b0:	f107 0c18 	add.w	ip, r7, #24
 80010b4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t buffer[6];
	for (int i=0;i<8;i++){
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	e034      	b.n	8001128 <CompassReadAxis+0x80>
		HAL_I2C_Mem_Read(&huart, HMC5883L_ADDRESS, Data_Output_X_MSB, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&buffer, 6, 100);
 80010be:	2364      	movs	r3, #100	@ 0x64
 80010c0:	9302      	str	r3, [sp, #8]
 80010c2:	2306      	movs	r3, #6
 80010c4:	9301      	str	r3, [sp, #4]
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	2301      	movs	r3, #1
 80010cc:	2203      	movs	r2, #3
 80010ce:	213d      	movs	r1, #61	@ 0x3d
 80010d0:	f107 0018 	add.w	r0, r7, #24
 80010d4:	f002 fb78 	bl	80037c8 <HAL_I2C_Mem_Read>
		buffer_t_x[i] = ((buffer[0] << 8) | buffer[1]);
 80010d8:	793b      	ldrb	r3, [r7, #4]
 80010da:	021b      	lsls	r3, r3, #8
 80010dc:	b219      	sxth	r1, r3
 80010de:	797b      	ldrb	r3, [r7, #5]
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80010e8:	4403      	add	r3, r0
 80010ea:	430a      	orrs	r2, r1
 80010ec:	b212      	sxth	r2, r2
 80010ee:	801a      	strh	r2, [r3, #0]
		HAL_I2C_Mem_Read(&huart, HMC5883L_ADDRESS, Data_Output_Y_MSB, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&buffer, 6, 100);
 80010f0:	2364      	movs	r3, #100	@ 0x64
 80010f2:	9302      	str	r3, [sp, #8]
 80010f4:	2306      	movs	r3, #6
 80010f6:	9301      	str	r3, [sp, #4]
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2301      	movs	r3, #1
 80010fe:	2207      	movs	r2, #7
 8001100:	213d      	movs	r1, #61	@ 0x3d
 8001102:	f107 0018 	add.w	r0, r7, #24
 8001106:	f002 fb5f 	bl	80037c8 <HAL_I2C_Mem_Read>
		buffer_t_y[i] = ((buffer[0] << 8) | buffer[1]);
 800110a:	793b      	ldrb	r3, [r7, #4]
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	b219      	sxth	r1, r3
 8001110:	797b      	ldrb	r3, [r7, #5]
 8001112:	b21a      	sxth	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800111a:	4403      	add	r3, r0
 800111c:	430a      	orrs	r2, r1
 800111e:	b212      	sxth	r2, r2
 8001120:	801a      	strh	r2, [r3, #0]
	for (int i=0;i<8;i++){
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	3301      	adds	r3, #1
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2b07      	cmp	r3, #7
 800112c:	ddc7      	ble.n	80010be <CompassReadAxis+0x16>
	}
}
 800112e:	bf00      	nop
 8001130:	bf00      	nop
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800113a:	b004      	add	sp, #16
 800113c:	4770      	bx	lr
	...

08001140 <VectorToAngle>:

float VectorToAngle (int16_t* PosX, int16_t* PosY){
 8001140:	b5b0      	push	{r4, r5, r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
	return (float)atan2(*PosY, *PosX)*180/3.14;
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fa07 	bl	8000564 <__aeabi_i2d>
 8001156:	4604      	mov	r4, r0
 8001158:	460d      	mov	r5, r1
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff f9ff 	bl	8000564 <__aeabi_i2d>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	ec43 2b11 	vmov	d1, r2, r3
 800116e:	ec45 4b10 	vmov	d0, r4, r5
 8001172:	f006 f805 	bl	8007180 <atan2>
 8001176:	ec53 2b10 	vmov	r2, r3, d0
 800117a:	4610      	mov	r0, r2
 800117c:	4619      	mov	r1, r3
 800117e:	f7ff fd2b 	bl	8000bd8 <__aeabi_d2f>
 8001182:	ee07 0a10 	vmov	s14, r0
 8001186:	eddf 7a10 	vldr	s15, [pc, #64]	@ 80011c8 <VectorToAngle+0x88>
 800118a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800118e:	ee17 0a90 	vmov	r0, s15
 8001192:	f7ff f9f9 	bl	8000588 <__aeabi_f2d>
 8001196:	a30a      	add	r3, pc, #40	@ (adr r3, 80011c0 <VectorToAngle+0x80>)
 8001198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119c:	f7ff fb76 	bl	800088c <__aeabi_ddiv>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	4610      	mov	r0, r2
 80011a6:	4619      	mov	r1, r3
 80011a8:	f7ff fd16 	bl	8000bd8 <__aeabi_d2f>
 80011ac:	4603      	mov	r3, r0
 80011ae:	ee07 3a90 	vmov	s15, r3
}
 80011b2:	eeb0 0a67 	vmov.f32	s0, s15
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bdb0      	pop	{r4, r5, r7, pc}
 80011bc:	f3af 8000 	nop.w
 80011c0:	51eb851f 	.word	0x51eb851f
 80011c4:	40091eb8 	.word	0x40091eb8
 80011c8:	43340000 	.word	0x43340000

080011cc <getDirectionBoat>:

void getDirectionBoat (I2C_HandleTypeDef huart, int16_t* PosX, int16_t* PosY, float* AngleXY){
 80011cc:	b084      	sub	sp, #16
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b09c      	sub	sp, #112	@ 0x70
 80011d2:	af14      	add	r7, sp, #80	@ 0x50
 80011d4:	f107 0c28 	add.w	ip, r7, #40	@ 0x28
 80011d8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int16_t buffer_x[8]; int16_t buffer_y[8];
	CompassReadAxis(huart,buffer_x,buffer_y);
 80011dc:	463b      	mov	r3, r7
 80011de:	9312      	str	r3, [sp, #72]	@ 0x48
 80011e0:	f107 0310 	add.w	r3, r7, #16
 80011e4:	9311      	str	r3, [sp, #68]	@ 0x44
 80011e6:	4668      	mov	r0, sp
 80011e8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011ec:	2244      	movs	r2, #68	@ 0x44
 80011ee:	4619      	mov	r1, r3
 80011f0:	f005 fb7a 	bl	80068e8 <memcpy>
 80011f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011fa:	f7ff ff55 	bl	80010a8 <CompassReadAxis>
	*PosX = FilterData(buffer_x);
 80011fe:	f107 0310 	add.w	r3, r7, #16
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ff13 	bl	800102e <FilterData>
 8001208:	4603      	mov	r3, r0
 800120a:	461a      	mov	r2, r3
 800120c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800120e:	801a      	strh	r2, [r3, #0]
	*PosY = FilterData(buffer_y);
 8001210:	463b      	mov	r3, r7
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff ff0b 	bl	800102e <FilterData>
 8001218:	4603      	mov	r3, r0
 800121a:	461a      	mov	r2, r3
 800121c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001220:	801a      	strh	r2, [r3, #0]
    *AngleXY = VectorToAngle(PosY, PosX);
 8001222:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001224:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8001228:	f7ff ff8a 	bl	8001140 <VectorToAngle>
 800122c:	eef0 7a40 	vmov.f32	s15, s0
 8001230:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001234:	edc3 7a00 	vstr	s15, [r3]
}
 8001238:	bf00      	nop
 800123a:	3720      	adds	r7, #32
 800123c:	46bd      	mov	sp, r7
 800123e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001242:	b004      	add	sp, #16
 8001244:	4770      	bx	lr
	...

08001248 <JDY18Driver_Init>:
uint8_t uartBuffer[MAX_SIZE_UART_BUFFER];

scan_t gScan;

void JDY18Driver_Init(JDY18_HandleTypeDef* handler)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	JDY18Driver_SetName(handler->huart, handler->name);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	4619      	mov	r1, r3
 800125a:	4610      	mov	r0, r2
 800125c:	f000 f870 	bl	8001340 <JDY18Driver_SetName>
	JDY18Driver_SetRole(handler->huart, handler->role);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	7a5b      	ldrb	r3, [r3, #9]
 8001268:	4619      	mov	r1, r3
 800126a:	4610      	mov	r0, r2
 800126c:	f000 f8b2 	bl	80013d4 <JDY18Driver_SetRole>
	JDY18Driver_SetBaudRate(handler->huart, handler->baudRate);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	7a1b      	ldrb	r3, [r3, #8]
 8001278:	4619      	mov	r1, r3
 800127a:	4610      	mov	r0, r2
 800127c:	f000 f884 	bl	8001388 <JDY18Driver_SetBaudRate>
	JDY18Driver_SetParity(handler->huart, handler->parity);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	7a9b      	ldrb	r3, [r3, #10]
 8001288:	4619      	mov	r1, r3
 800128a:	4610      	mov	r0, r2
 800128c:	f000 f8c8 	bl	8001420 <JDY18Driver_SetParity>
	JDY18Driver_SetStopBit(handler->huart, handler->stopBit);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	7adb      	ldrb	r3, [r3, #11]
 8001298:	4619      	mov	r1, r3
 800129a:	4610      	mov	r0, r2
 800129c:	f000 f8e6 	bl	800146c <JDY18Driver_SetStopBit>

	HAL_Delay(200);
 80012a0:	20c8      	movs	r0, #200	@ 0xc8
 80012a2:	f001 fca5 	bl	8002bf0 <HAL_Delay>

	gScan.size = 0;
 80012a6:	4b10      	ldr	r3, [pc, #64]	@ (80012e8 <JDY18Driver_Init+0xa0>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
	memset(uartBuffer, 0, sizeof(uartBuffer));
 80012ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012b2:	2100      	movs	r1, #0
 80012b4:	480d      	ldr	r0, [pc, #52]	@ (80012ec <JDY18Driver_Init+0xa4>)
 80012b6:	f005 fabf 	bl	8006838 <memset>

	__HAL_UART_ENABLE_IT(handler->huart, UART_IT_IDLE);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	68da      	ldr	r2, [r3, #12]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f042 0210 	orr.w	r2, r2, #16
 80012cc:	60da      	str	r2, [r3, #12]
	HAL_UART_Receive_DMA(handler->huart, uartBuffer, sizeof(uartBuffer));
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012d6:	4905      	ldr	r1, [pc, #20]	@ (80012ec <JDY18Driver_Init+0xa4>)
 80012d8:	4618      	mov	r0, r3
 80012da:	f004 fc50 	bl	8005b7e <HAL_UART_Receive_DMA>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	200004a4 	.word	0x200004a4
 80012ec:	200000bc 	.word	0x200000bc

080012f0 <JDY18Driver_SendData>:

void JDY18Driver_SendData(UART_HandleTypeDef* huart, char *data)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08c      	sub	sp, #48	@ 0x30
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
	char package[MAX_SIZE_DATA + 4];
	memset(package, 0, MAX_SIZE_DATA + 4);
 80012fa:	f107 030c 	add.w	r3, r7, #12
 80012fe:	2222      	movs	r2, #34	@ 0x22
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f005 fa98 	bl	8006838 <memset>
	sprintf(package, "%s\r\n", data);
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	683a      	ldr	r2, [r7, #0]
 800130e:	490b      	ldr	r1, [pc, #44]	@ (800133c <JDY18Driver_SendData+0x4c>)
 8001310:	4618      	mov	r0, r3
 8001312:	f005 fa71 	bl	80067f8 <siprintf>
	HAL_UART_Transmit(huart, (uint8_t*)package, strlen(package), HAL_MAX_DELAY);
 8001316:	f107 030c 	add.w	r3, r7, #12
 800131a:	4618      	mov	r0, r3
 800131c:	f7fe ff78 	bl	8000210 <strlen>
 8001320:	4603      	mov	r3, r0
 8001322:	b29a      	uxth	r2, r3
 8001324:	f107 010c 	add.w	r1, r7, #12
 8001328:	f04f 33ff 	mov.w	r3, #4294967295
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f004 fb9b 	bl	8005a68 <HAL_UART_Transmit>
}
 8001332:	bf00      	nop
 8001334:	3730      	adds	r7, #48	@ 0x30
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	08008554 	.word	0x08008554

08001340 <JDY18Driver_SetName>:

void JDY18Driver_SetName(UART_HandleTypeDef* huart, char *name)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08c      	sub	sp, #48	@ 0x30
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
	char *instruction = atInstructions[SET_NAME];
 800134a:	4b0d      	ldr	r3, [pc, #52]	@ (8001380 <JDY18Driver_SetName+0x40>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	char data[MAX_SIZE_DATA];
	memset(data, 0, MAX_SIZE_DATA);
 8001350:	f107 030c 	add.w	r3, r7, #12
 8001354:	221e      	movs	r2, #30
 8001356:	2100      	movs	r1, #0
 8001358:	4618      	mov	r0, r3
 800135a:	f005 fa6d 	bl	8006838 <memset>
	sprintf(data, "%s%s", instruction, name);
 800135e:	f107 000c 	add.w	r0, r7, #12
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001366:	4907      	ldr	r1, [pc, #28]	@ (8001384 <JDY18Driver_SetName+0x44>)
 8001368:	f005 fa46 	bl	80067f8 <siprintf>
	JDY18Driver_SendData(huart, data);
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	4619      	mov	r1, r3
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ffbc 	bl	80012f0 <JDY18Driver_SendData>
}
 8001378:	bf00      	nop
 800137a:	3730      	adds	r7, #48	@ 0x30
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000000 	.word	0x20000000
 8001384:	0800855c 	.word	0x0800855c

08001388 <JDY18Driver_SetBaudRate>:

void JDY18Driver_SetBaudRate(UART_HandleTypeDef* huart, BaudRate_t baudRate)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08c      	sub	sp, #48	@ 0x30
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	70fb      	strb	r3, [r7, #3]
	char *instruction = atInstructions[SET_BAUD_RATE];
 8001394:	4b0d      	ldr	r3, [pc, #52]	@ (80013cc <JDY18Driver_SetBaudRate+0x44>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	62fb      	str	r3, [r7, #44]	@ 0x2c
	char data[MAX_SIZE_DATA];
	memset(data, 0, MAX_SIZE_DATA);
 800139a:	f107 030c 	add.w	r3, r7, #12
 800139e:	221e      	movs	r2, #30
 80013a0:	2100      	movs	r1, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f005 fa48 	bl	8006838 <memset>
	sprintf(data, "%s%d", instruction, baudRate);
 80013a8:	78fb      	ldrb	r3, [r7, #3]
 80013aa:	f107 000c 	add.w	r0, r7, #12
 80013ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013b0:	4907      	ldr	r1, [pc, #28]	@ (80013d0 <JDY18Driver_SetBaudRate+0x48>)
 80013b2:	f005 fa21 	bl	80067f8 <siprintf>
	JDY18Driver_SendData(huart, data);
 80013b6:	f107 030c 	add.w	r3, r7, #12
 80013ba:	4619      	mov	r1, r3
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff ff97 	bl	80012f0 <JDY18Driver_SendData>
}
 80013c2:	bf00      	nop
 80013c4:	3730      	adds	r7, #48	@ 0x30
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000000 	.word	0x20000000
 80013d0:	08008564 	.word	0x08008564

080013d4 <JDY18Driver_SetRole>:

void JDY18Driver_SetRole(UART_HandleTypeDef* huart, RoleParam_t role)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08c      	sub	sp, #48	@ 0x30
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	70fb      	strb	r3, [r7, #3]
	char *instruction = atInstructions[SET_ROLE];
 80013e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001418 <JDY18Driver_SetRole+0x44>)
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	char data[MAX_SIZE_DATA];
	memset(data, 0, MAX_SIZE_DATA);
 80013e6:	f107 030c 	add.w	r3, r7, #12
 80013ea:	221e      	movs	r2, #30
 80013ec:	2100      	movs	r1, #0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f005 fa22 	bl	8006838 <memset>
	sprintf(data, "%s%d", instruction, role);
 80013f4:	78fb      	ldrb	r3, [r7, #3]
 80013f6:	f107 000c 	add.w	r0, r7, #12
 80013fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013fc:	4907      	ldr	r1, [pc, #28]	@ (800141c <JDY18Driver_SetRole+0x48>)
 80013fe:	f005 f9fb 	bl	80067f8 <siprintf>
	JDY18Driver_SendData(huart, data);
 8001402:	f107 030c 	add.w	r3, r7, #12
 8001406:	4619      	mov	r1, r3
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff ff71 	bl	80012f0 <JDY18Driver_SendData>
}
 800140e:	bf00      	nop
 8001410:	3730      	adds	r7, #48	@ 0x30
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000000 	.word	0x20000000
 800141c:	08008564 	.word	0x08008564

08001420 <JDY18Driver_SetParity>:

void JDY18Driver_SetParity(UART_HandleTypeDef* huart, ParityParam_t parity)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08c      	sub	sp, #48	@ 0x30
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	70fb      	strb	r3, [r7, #3]
	char *instruction = atInstructions[SET_PARITY];
 800142c:	4b0d      	ldr	r3, [pc, #52]	@ (8001464 <JDY18Driver_SetParity+0x44>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	62fb      	str	r3, [r7, #44]	@ 0x2c
	char data[MAX_SIZE_DATA];
	memset(data, 0, MAX_SIZE_DATA);
 8001432:	f107 030c 	add.w	r3, r7, #12
 8001436:	221e      	movs	r2, #30
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f005 f9fc 	bl	8006838 <memset>
	sprintf(data, "%s%d", instruction, parity);
 8001440:	78fb      	ldrb	r3, [r7, #3]
 8001442:	f107 000c 	add.w	r0, r7, #12
 8001446:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001448:	4907      	ldr	r1, [pc, #28]	@ (8001468 <JDY18Driver_SetParity+0x48>)
 800144a:	f005 f9d5 	bl	80067f8 <siprintf>
	JDY18Driver_SendData(huart, data);
 800144e:	f107 030c 	add.w	r3, r7, #12
 8001452:	4619      	mov	r1, r3
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff ff4b 	bl	80012f0 <JDY18Driver_SendData>
}
 800145a:	bf00      	nop
 800145c:	3730      	adds	r7, #48	@ 0x30
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000000 	.word	0x20000000
 8001468:	08008564 	.word	0x08008564

0800146c <JDY18Driver_SetStopBit>:

void JDY18Driver_SetStopBit(UART_HandleTypeDef* huart, uint8_t stopBit)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08c      	sub	sp, #48	@ 0x30
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	460b      	mov	r3, r1
 8001476:	70fb      	strb	r3, [r7, #3]
	char *instruction = atInstructions[SET_STOP_BIT];
 8001478:	4b0d      	ldr	r3, [pc, #52]	@ (80014b0 <JDY18Driver_SetStopBit+0x44>)
 800147a:	691b      	ldr	r3, [r3, #16]
 800147c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	char data[MAX_SIZE_DATA];
	memset(data, 0, MAX_SIZE_DATA);
 800147e:	f107 030c 	add.w	r3, r7, #12
 8001482:	221e      	movs	r2, #30
 8001484:	2100      	movs	r1, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f005 f9d6 	bl	8006838 <memset>
	sprintf(data, "%s%d", instruction, stopBit);
 800148c:	78fb      	ldrb	r3, [r7, #3]
 800148e:	f107 000c 	add.w	r0, r7, #12
 8001492:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001494:	4907      	ldr	r1, [pc, #28]	@ (80014b4 <JDY18Driver_SetStopBit+0x48>)
 8001496:	f005 f9af 	bl	80067f8 <siprintf>
	JDY18Driver_SendData(huart, data);
 800149a:	f107 030c 	add.w	r3, r7, #12
 800149e:	4619      	mov	r1, r3
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff ff25 	bl	80012f0 <JDY18Driver_SendData>
}
 80014a6:	bf00      	nop
 80014a8:	3730      	adds	r7, #48	@ 0x30
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000000 	.word	0x20000000
 80014b4:	08008564 	.word	0x08008564

080014b8 <JDY18Driver_InquireDevices>:

void JDY18Driver_InquireDevices(UART_HandleTypeDef* huart)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08c      	sub	sp, #48	@ 0x30
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	char *instruction = atInstructions[MASTER_SCAN_SLAVE];
 80014c0:	4b0d      	ldr	r3, [pc, #52]	@ (80014f8 <JDY18Driver_InquireDevices+0x40>)
 80014c2:	695b      	ldr	r3, [r3, #20]
 80014c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	char data[MAX_SIZE_DATA];
	memset(data, 0, MAX_SIZE_DATA);
 80014c6:	f107 030c 	add.w	r3, r7, #12
 80014ca:	221e      	movs	r2, #30
 80014cc:	2100      	movs	r1, #0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f005 f9b2 	bl	8006838 <memset>
	sprintf(data, "%s", instruction);
 80014d4:	f107 030c 	add.w	r3, r7, #12
 80014d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80014da:	4908      	ldr	r1, [pc, #32]	@ (80014fc <JDY18Driver_InquireDevices+0x44>)
 80014dc:	4618      	mov	r0, r3
 80014de:	f005 f98b 	bl	80067f8 <siprintf>
	JDY18Driver_SendData(huart, data);
 80014e2:	f107 030c 	add.w	r3, r7, #12
 80014e6:	4619      	mov	r1, r3
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff ff01 	bl	80012f0 <JDY18Driver_SendData>
}
 80014ee:	bf00      	nop
 80014f0:	3730      	adds	r7, #48	@ 0x30
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000000 	.word	0x20000000
 80014fc:	0800856c 	.word	0x0800856c

08001500 <JDY18Driver_GetScannedDevices>:

void JDY18Driver_GetScannedDevices(scan_t* scan)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	*scan = gScan;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a06      	ldr	r2, [pc, #24]	@ (8001524 <JDY18Driver_GetScannedDevices+0x24>)
 800150c:	4618      	mov	r0, r3
 800150e:	4611      	mov	r1, r2
 8001510:	f44f 73f2 	mov.w	r3, #484	@ 0x1e4
 8001514:	461a      	mov	r2, r3
 8001516:	f005 f9e7 	bl	80068e8 <memcpy>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200004a4 	.word	0x200004a4

08001528 <JDY18Driver_LoadDeviceInfo>:

void JDY18Driver_LoadDeviceInfo(char* start, char* end, device_t* device)
{
 8001528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800152c:	b091      	sub	sp, #68	@ 0x44
 800152e:	af00      	add	r7, sp, #0
 8001530:	6178      	str	r0, [r7, #20]
 8001532:	6139      	str	r1, [r7, #16]
 8001534:	60fa      	str	r2, [r7, #12]
 8001536:	466b      	mov	r3, sp
 8001538:	461e      	mov	r6, r3
	size_t size = end - start;
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	63fb      	str	r3, [r7, #60]	@ 0x3c
	char temp[size];
 8001542:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001544:	460b      	mov	r3, r1
 8001546:	3b01      	subs	r3, #1
 8001548:	63bb      	str	r3, [r7, #56]	@ 0x38
 800154a:	2300      	movs	r3, #0
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	f04f 0300 	mov.w	r3, #0
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	00c3      	lsls	r3, r0, #3
 800155c:	6838      	ldr	r0, [r7, #0]
 800155e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001562:	6838      	ldr	r0, [r7, #0]
 8001564:	00c2      	lsls	r2, r0, #3
 8001566:	2300      	movs	r3, #0
 8001568:	468a      	mov	sl, r1
 800156a:	469b      	mov	fp, r3
 800156c:	f04f 0200 	mov.w	r2, #0
 8001570:	f04f 0300 	mov.w	r3, #0
 8001574:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001578:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800157c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001580:	1dcb      	adds	r3, r1, #7
 8001582:	08db      	lsrs	r3, r3, #3
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	ebad 0d03 	sub.w	sp, sp, r3
 800158a:	466b      	mov	r3, sp
 800158c:	3300      	adds	r3, #0
 800158e:	637b      	str	r3, [r7, #52]	@ 0x34
	memcpy(temp, start, size);
 8001590:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001592:	6979      	ldr	r1, [r7, #20]
 8001594:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001596:	f005 f9a7 	bl	80068e8 <memcpy>

	char* macAddressPointer = temp + 7;
 800159a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800159c:	3307      	adds	r3, #7
 800159e:	633b      	str	r3, [r7, #48]	@ 0x30
	char* rssiPointer = macAddressPointer + MAC_ADDRESS_SIZE + 1;
 80015a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015a2:	330d      	adds	r3, #13
 80015a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	char* namePointer = strstr(rssiPointer, ",") + 1;
 80015a6:	212c      	movs	r1, #44	@ 0x2c
 80015a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80015aa:	f005 f94d 	bl	8006848 <strchr>
 80015ae:	4603      	mov	r3, r0
 80015b0:	3301      	adds	r3, #1
 80015b2:	62bb      	str	r3, [r7, #40]	@ 0x28

	size_t rssiSize = namePointer - rssiPointer - 1;
 80015b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80015b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	3b01      	subs	r3, #1
 80015bc:	627b      	str	r3, [r7, #36]	@ 0x24
	char rssiStr[rssiSize];
 80015be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80015c0:	460b      	mov	r3, r1
 80015c2:	3b01      	subs	r3, #1
 80015c4:	623b      	str	r3, [r7, #32]
 80015c6:	2300      	movs	r3, #0
 80015c8:	4688      	mov	r8, r1
 80015ca:	4699      	mov	r9, r3
 80015cc:	f04f 0200 	mov.w	r2, #0
 80015d0:	f04f 0300 	mov.w	r3, #0
 80015d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80015d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80015dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80015e0:	2300      	movs	r3, #0
 80015e2:	460c      	mov	r4, r1
 80015e4:	461d      	mov	r5, r3
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	f04f 0300 	mov.w	r3, #0
 80015ee:	00eb      	lsls	r3, r5, #3
 80015f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80015f4:	00e2      	lsls	r2, r4, #3
 80015f6:	1dcb      	adds	r3, r1, #7
 80015f8:	08db      	lsrs	r3, r3, #3
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	ebad 0d03 	sub.w	sp, sp, r3
 8001600:	466b      	mov	r3, sp
 8001602:	3300      	adds	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
	memcpy(rssiStr, rssiPointer, rssiSize);
 8001606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001608:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800160a:	69f8      	ldr	r0, [r7, #28]
 800160c:	f005 f96c 	bl	80068e8 <memcpy>

	memcpy(device->mac, macAddressPointer, MAC_ADDRESS_SIZE);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	331e      	adds	r3, #30
 8001614:	220c      	movs	r2, #12
 8001616:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001618:	4618      	mov	r0, r3
 800161a:	f005 f965 	bl	80068e8 <memcpy>
	memcpy(device->name, namePointer, MAX_DEVICE_NAME_SIZE);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	221e      	movs	r2, #30
 8001622:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001624:	4618      	mov	r0, r3
 8001626:	f005 f95f 	bl	80068e8 <memcpy>
	device->rssi = atoi(rssiStr);
 800162a:	69f8      	ldr	r0, [r7, #28]
 800162c:	f005 f85c 	bl	80066e8 <atoi>
 8001630:	4602      	mov	r2, r0
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001636:	46b5      	mov	sp, r6
}
 8001638:	bf00      	nop
 800163a:	3744      	adds	r7, #68	@ 0x44
 800163c:	46bd      	mov	sp, r7
 800163e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001644 <JDY18Driver_ParseScanResponse>:

void JDY18Driver_ParseScanResponse(char* scanResponse, scan_t* scan)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
	char *start, *end;
	scan->size = 0;
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	2200      	movs	r2, #0
 8001652:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0

	if((start = strstr(scanResponse, INIT_MODULE_RESPONSE_SCAN))) {
 8001656:	4926      	ldr	r1, [pc, #152]	@ (80016f0 <JDY18Driver_ParseScanResponse+0xac>)
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f005 f902 	bl	8006862 <strstr>
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d040      	beq.n	80016e8 <JDY18Driver_ParseScanResponse+0xa4>
		while((end = strstr(start + 1, INIT_MODULE_RESPONSE_SCAN))) {
 8001666:	e016      	b.n	8001696 <JDY18Driver_ParseScanResponse+0x52>
			JDY18Driver_LoadDeviceInfo(start, end, &scan->devices[scan->size]);
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	f8d3 21e0 	ldr.w	r2, [r3, #480]	@ 0x1e0
 800166e:	4613      	mov	r3, r2
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	4413      	add	r3, r2
 8001674:	011b      	lsls	r3, r3, #4
 8001676:	683a      	ldr	r2, [r7, #0]
 8001678:	4413      	add	r3, r2
 800167a:	461a      	mov	r2, r3
 800167c:	68b9      	ldr	r1, [r7, #8]
 800167e:	68f8      	ldr	r0, [r7, #12]
 8001680:	f7ff ff52 	bl	8001528 <JDY18Driver_LoadDeviceInfo>
			start = end;
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	60fb      	str	r3, [r7, #12]
			scan->size++;
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 800168e:	1c5a      	adds	r2, r3, #1
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
		while((end = strstr(start + 1, INIT_MODULE_RESPONSE_SCAN))) {
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	3301      	adds	r3, #1
 800169a:	4915      	ldr	r1, [pc, #84]	@ (80016f0 <JDY18Driver_ParseScanResponse+0xac>)
 800169c:	4618      	mov	r0, r3
 800169e:	f005 f8e0 	bl	8006862 <strstr>
 80016a2:	60b8      	str	r0, [r7, #8]
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1de      	bne.n	8001668 <JDY18Driver_ParseScanResponse+0x24>
		}
		if((end = strstr(start + 1, END_RESPONSE_SCAN))) {
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	3301      	adds	r3, #1
 80016ae:	4911      	ldr	r1, [pc, #68]	@ (80016f4 <JDY18Driver_ParseScanResponse+0xb0>)
 80016b0:	4618      	mov	r0, r3
 80016b2:	f005 f8d6 	bl	8006862 <strstr>
 80016b6:	60b8      	str	r0, [r7, #8]
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d014      	beq.n	80016e8 <JDY18Driver_ParseScanResponse+0xa4>
			JDY18Driver_LoadDeviceInfo(start, end, &scan->devices[scan->size]);
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	f8d3 21e0 	ldr.w	r2, [r3, #480]	@ 0x1e0
 80016c4:	4613      	mov	r3, r2
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	4413      	add	r3, r2
 80016ca:	011b      	lsls	r3, r3, #4
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	461a      	mov	r2, r3
 80016d2:	68b9      	ldr	r1, [r7, #8]
 80016d4:	68f8      	ldr	r0, [r7, #12]
 80016d6:	f7ff ff27 	bl	8001528 <JDY18Driver_LoadDeviceInfo>
			scan->size++;
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 80016e0:	1c5a      	adds	r2, r3, #1
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
		}
	}
}
 80016e8:	bf00      	nop
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	08008570 	.word	0x08008570
 80016f4:	08008578 	.word	0x08008578

080016f8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0310 	and.w	r3, r3, #16
 800170a:	2b10      	cmp	r3, #16
 800170c:	d124      	bne.n	8001758 <HAL_UART_RxCpltCallback+0x60>
	{
		__HAL_UART_CLEAR_IDLEFLAG(huart);
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	68fb      	ldr	r3, [r7, #12]

		if(strstr((char*)uartBuffer, END_RESPONSE_SCAN)) {
 8001724:	490e      	ldr	r1, [pc, #56]	@ (8001760 <HAL_UART_RxCpltCallback+0x68>)
 8001726:	480f      	ldr	r0, [pc, #60]	@ (8001764 <HAL_UART_RxCpltCallback+0x6c>)
 8001728:	f005 f89b 	bl	8006862 <strstr>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d012      	beq.n	8001758 <HAL_UART_RxCpltCallback+0x60>
			HAL_UART_DMAStop(huart);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f004 fa48 	bl	8005bc8 <HAL_UART_DMAStop>

			JDY18Driver_ParseScanResponse((char*)uartBuffer, &gScan);
 8001738:	490b      	ldr	r1, [pc, #44]	@ (8001768 <HAL_UART_RxCpltCallback+0x70>)
 800173a:	480a      	ldr	r0, [pc, #40]	@ (8001764 <HAL_UART_RxCpltCallback+0x6c>)
 800173c:	f7ff ff82 	bl	8001644 <JDY18Driver_ParseScanResponse>

			memset(uartBuffer, 0, sizeof(uartBuffer));
 8001740:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001744:	2100      	movs	r1, #0
 8001746:	4807      	ldr	r0, [pc, #28]	@ (8001764 <HAL_UART_RxCpltCallback+0x6c>)
 8001748:	f005 f876 	bl	8006838 <memset>
			HAL_UART_Receive_DMA(huart, uartBuffer, sizeof(uartBuffer));
 800174c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001750:	4904      	ldr	r1, [pc, #16]	@ (8001764 <HAL_UART_RxCpltCallback+0x6c>)
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f004 fa13 	bl	8005b7e <HAL_UART_Receive_DMA>
		}
	}
}
 8001758:	bf00      	nop
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	08008578 	.word	0x08008578
 8001764:	200000bc 	.word	0x200000bc
 8001768:	200004a4 	.word	0x200004a4
 800176c:	00000000 	.word	0x00000000

08001770 <SG90_handlePulse>:

/*
 * É preciso tratar o pulso que é dado. O motor tem funcionamento de 0° a 180°.
 * Limitar o seu pulso no intervalo da largura de pulso de 0.7ms a 2.3ms.
 */
uint16_t SG90_handlePulse(uint16_t period, uint16_t pulse){
 8001770:	b5b0      	push	{r4, r5, r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	460a      	mov	r2, r1
 800177a:	80fb      	strh	r3, [r7, #6]
 800177c:	4613      	mov	r3, r2
 800177e:	80bb      	strh	r3, [r7, #4]
	/*
	 * Retorna o menor pulso se for inferior ao menor possível.
	 * Retorna o maior pulso se for superior ao maior possível.
	 * Retorna o pulso se estiver na faixa aceitável
	 */
	if(pulse < period*DUTY_CYCLE_MIN) pulse = period*DUTY_CYCLE_MIN;
 8001780:	88bb      	ldrh	r3, [r7, #4]
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe feee 	bl	8000564 <__aeabi_i2d>
 8001788:	4604      	mov	r4, r0
 800178a:	460d      	mov	r5, r1
 800178c:	88fb      	ldrh	r3, [r7, #6]
 800178e:	4618      	mov	r0, r3
 8001790:	f7fe fee8 	bl	8000564 <__aeabi_i2d>
 8001794:	a326      	add	r3, pc, #152	@ (adr r3, 8001830 <SG90_handlePulse+0xc0>)
 8001796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179a:	f7fe ff4d 	bl	8000638 <__aeabi_dmul>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4620      	mov	r0, r4
 80017a4:	4629      	mov	r1, r5
 80017a6:	f7ff f9b9 	bl	8000b1c <__aeabi_dcmplt>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d011      	beq.n	80017d4 <SG90_handlePulse+0x64>
 80017b0:	88fb      	ldrh	r3, [r7, #6]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7fe fed6 	bl	8000564 <__aeabi_i2d>
 80017b8:	a31d      	add	r3, pc, #116	@ (adr r3, 8001830 <SG90_handlePulse+0xc0>)
 80017ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017be:	f7fe ff3b 	bl	8000638 <__aeabi_dmul>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4610      	mov	r0, r2
 80017c8:	4619      	mov	r1, r3
 80017ca:	f7ff f9e5 	bl	8000b98 <__aeabi_d2uiz>
 80017ce:	4603      	mov	r3, r0
 80017d0:	80bb      	strh	r3, [r7, #4]
 80017d2:	e028      	b.n	8001826 <SG90_handlePulse+0xb6>
	else if(pulse > period*DUTY_CYCLE_MAX) pulse = period*DUTY_CYCLE_MAX;
 80017d4:	88bb      	ldrh	r3, [r7, #4]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7fe fec4 	bl	8000564 <__aeabi_i2d>
 80017dc:	4604      	mov	r4, r0
 80017de:	460d      	mov	r5, r1
 80017e0:	88fb      	ldrh	r3, [r7, #6]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe febe 	bl	8000564 <__aeabi_i2d>
 80017e8:	a313      	add	r3, pc, #76	@ (adr r3, 8001838 <SG90_handlePulse+0xc8>)
 80017ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ee:	f7fe ff23 	bl	8000638 <__aeabi_dmul>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4620      	mov	r0, r4
 80017f8:	4629      	mov	r1, r5
 80017fa:	f7ff f9ad 	bl	8000b58 <__aeabi_dcmpgt>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d010      	beq.n	8001826 <SG90_handlePulse+0xb6>
 8001804:	88fb      	ldrh	r3, [r7, #6]
 8001806:	4618      	mov	r0, r3
 8001808:	f7fe feac 	bl	8000564 <__aeabi_i2d>
 800180c:	a30a      	add	r3, pc, #40	@ (adr r3, 8001838 <SG90_handlePulse+0xc8>)
 800180e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001812:	f7fe ff11 	bl	8000638 <__aeabi_dmul>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	4610      	mov	r0, r2
 800181c:	4619      	mov	r1, r3
 800181e:	f7ff f9bb 	bl	8000b98 <__aeabi_d2uiz>
 8001822:	4603      	mov	r3, r0
 8001824:	80bb      	strh	r3, [r7, #4]
	return pulse;
 8001826:	88bb      	ldrh	r3, [r7, #4]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bdb0      	pop	{r4, r5, r7, pc}
 8001830:	1eb851ec 	.word	0x1eb851ec
 8001834:	3fa1eb85 	.word	0x3fa1eb85
 8001838:	d70a3d71 	.word	0xd70a3d71
 800183c:	3fbd70a3 	.word	0x3fbd70a3

08001840 <SG90_SetPWM>:

void SG90_SetPWM(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period, uint16_t pulse){
 8001840:	b084      	sub	sp, #16
 8001842:	b580      	push	{r7, lr}
 8001844:	b088      	sub	sp, #32
 8001846:	af00      	add	r7, sp, #0
 8001848:	f107 0c28 	add.w	ip, r7, #40	@ 0x28
 800184c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// Obtém pulso após tratamento de limites.
	pulse = SG90_handlePulse(period, pulse);
 8001850:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 8001854:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8001858:	4611      	mov	r1, r2
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff ff88 	bl	8001770 <SG90_handlePulse>
 8001860:	4603      	mov	r3, r0
 8001862:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
	// Configura registradores para uso do PWM
	HAL_TIM_PWM_Stop(&timer, channel);
 8001866:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001868:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800186c:	f003 fc7c 	bl	8005168 <HAL_TIM_PWM_Stop>
	TIM_OC_InitTypeDef sConfigOC;
	timer.Init.Period = period;
 8001870:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8001874:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_TIM_PWM_Init(&timer);
 8001876:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800187a:	f003 fb5d 	bl	8004f38 <HAL_TIM_PWM_Init>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800187e:	2360      	movs	r3, #96	@ 0x60
 8001880:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = pulse;
 8001882:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8001886:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
	HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001894:	4619      	mov	r1, r3
 8001896:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800189a:	f003 fcd5 	bl	8005248 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&timer, channel);
 800189e:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80018a0:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80018a4:	f003 fb98 	bl	8004fd8 <HAL_TIM_PWM_Start>
}
 80018a8:	bf00      	nop
 80018aa:	3720      	adds	r7, #32
 80018ac:	46bd      	mov	sp, r7
 80018ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80018b2:	b004      	add	sp, #16
 80018b4:	4770      	bx	lr
	...

080018b8 <SG90_handleAngle>:
/*
Função que irá tratar o ângulo recebibo para as faixas de 0 a 360°.
*/
uint16_t SG90_handleAngle(float angle)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	ed87 0a01 	vstr	s0, [r7, #4]
	// Converter ângulo de -180 a 180 para 0 a 360.
	angle += 180;
 80018c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80018c6:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001918 <SG90_handleAngle+0x60>
 80018ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018ce:	edc7 7a01 	vstr	s15, [r7, #4]
	if (angle > 360)
 80018d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80018d6:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800191c <SG90_handleAngle+0x64>
 80018da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e2:	dd01      	ble.n	80018e8 <SG90_handleAngle+0x30>
		angle = 360;
 80018e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001920 <SG90_handleAngle+0x68>)
 80018e6:	607b      	str	r3, [r7, #4]
	if (angle < 0)
 80018e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80018ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f4:	d502      	bpl.n	80018fc <SG90_handleAngle+0x44>
		angle = 0;
 80018f6:	f04f 0300 	mov.w	r3, #0
 80018fa:	607b      	str	r3, [r7, #4]
	return angle;
 80018fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001904:	ee17 3a90 	vmov	r3, s15
 8001908:	b29b      	uxth	r3, r3
}
 800190a:	4618      	mov	r0, r3
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	43340000 	.word	0x43340000
 800191c:	43b40000 	.word	0x43b40000
 8001920:	43b40000 	.word	0x43b40000
 8001924:	00000000 	.word	0x00000000

08001928 <SG90_angle2Pulse>:
/*
Função que receberá um ângulo e retornará o valor de pulso que o leme deve se movimentar para atender o ângulo.
*/
uint16_t SG90_angle2Pulse(float angle, uint16_t period)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001932:	4603      	mov	r3, r0
 8001934:	807b      	strh	r3, [r7, #2]
	float aux_angle;
	aux_angle = SG90_handleAngle(angle);
 8001936:	ed97 0a01 	vldr	s0, [r7, #4]
 800193a:	f7ff ffbd 	bl	80018b8 <SG90_handleAngle>
 800193e:	4603      	mov	r3, r0
 8001940:	ee07 3a90 	vmov	s15, r3
 8001944:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001948:	edc7 7a03 	vstr	s15, [r7, #12]
	return (44 + aux_angle/3.6);
 800194c:	68f8      	ldr	r0, [r7, #12]
 800194e:	f7fe fe1b 	bl	8000588 <__aeabi_f2d>
 8001952:	a30e      	add	r3, pc, #56	@ (adr r3, 800198c <SG90_angle2Pulse+0x64>)
 8001954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001958:	f7fe ff98 	bl	800088c <__aeabi_ddiv>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4610      	mov	r0, r2
 8001962:	4619      	mov	r1, r3
 8001964:	f04f 0200 	mov.w	r2, #0
 8001968:	4b07      	ldr	r3, [pc, #28]	@ (8001988 <SG90_angle2Pulse+0x60>)
 800196a:	f7fe fcaf 	bl	80002cc <__adddf3>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4610      	mov	r0, r2
 8001974:	4619      	mov	r1, r3
 8001976:	f7ff f90f 	bl	8000b98 <__aeabi_d2uiz>
 800197a:	4603      	mov	r3, r0
 800197c:	b29b      	uxth	r3, r3
}
 800197e:	4618      	mov	r0, r3
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40460000 	.word	0x40460000
 800198c:	cccccccd 	.word	0xcccccccd
 8001990:	400ccccc 	.word	0x400ccccc

08001994 <SG90_Update>:

void SG90_Update(TIM_HandleTypeDef timer, uint32_t channel, float* ActualAngle, float* DesireAngle){
 8001994:	b084      	sub	sp, #16
 8001996:	b5b0      	push	{r4, r5, r7, lr}
 8001998:	b094      	sub	sp, #80	@ 0x50
 800199a:	af12      	add	r7, sp, #72	@ 0x48
 800199c:	f107 0418 	add.w	r4, r7, #24
 80019a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int pulse;
	float DiffAngle = ActualAngle - DesireAngle;
 80019a4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80019a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	109b      	asrs	r3, r3, #2
 80019ac:	ee07 3a90 	vmov	s15, r3
 80019b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019b4:	edc7 7a01 	vstr	s15, [r7, #4]
	pulse = SG90_angle2Pulse(DiffAngle, 1250);
 80019b8:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 80019bc:	ed97 0a01 	vldr	s0, [r7, #4]
 80019c0:	f7ff ffb2 	bl	8001928 <SG90_angle2Pulse>
 80019c4:	4603      	mov	r3, r0
 80019c6:	603b      	str	r3, [r7, #0]
	SG90_SetPWM(timer, channel, 1250, pulse);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	9310      	str	r3, [sp, #64]	@ 0x40
 80019ce:	f240 43e2 	movw	r3, #1250	@ 0x4e2
 80019d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80019d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80019d6:	930e      	str	r3, [sp, #56]	@ 0x38
 80019d8:	466d      	mov	r5, sp
 80019da:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80019de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80019f2:	f107 0318 	add.w	r3, r7, #24
 80019f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019f8:	f7ff ff22 	bl	8001840 <SG90_SetPWM>
}
 80019fc:	bf00      	nop
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001a06:	b004      	add	sp, #16
 8001a08:	4770      	bx	lr
 8001a0a:	0000      	movs	r0, r0
 8001a0c:	0000      	movs	r0, r0
	...

08001a10 <LocationService_Init>:

float trilaterationCalcCPartial = 0;
float trilaterationCalcFPartial = 0;

void LocationService_Init(UART_HandleTypeDef *huart, TIM_HandleTypeDef* htim)
{
 8001a10:	b5b0      	push	{r4, r5, r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
	bleHandler.huart = huart;
 8001a1a:	4a71      	ldr	r2, [pc, #452]	@ (8001be0 <LocationService_Init+0x1d0>)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6013      	str	r3, [r2, #0]
	bleHandler.name = MASTER_BLE_NAME;
 8001a20:	4b6f      	ldr	r3, [pc, #444]	@ (8001be0 <LocationService_Init+0x1d0>)
 8001a22:	4a70      	ldr	r2, [pc, #448]	@ (8001be4 <LocationService_Init+0x1d4>)
 8001a24:	605a      	str	r2, [r3, #4]
	bleHandler.baudRate = BAUD_9600;
 8001a26:	4b6e      	ldr	r3, [pc, #440]	@ (8001be0 <LocationService_Init+0x1d0>)
 8001a28:	2204      	movs	r2, #4
 8001a2a:	721a      	strb	r2, [r3, #8]
	bleHandler.role = MASTER;
 8001a2c:	4b6c      	ldr	r3, [pc, #432]	@ (8001be0 <LocationService_Init+0x1d0>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	725a      	strb	r2, [r3, #9]
	bleHandler.parity = NO_PARITY;
 8001a32:	4b6b      	ldr	r3, [pc, #428]	@ (8001be0 <LocationService_Init+0x1d0>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	729a      	strb	r2, [r3, #10]
	bleHandler.stopBit = 0;
 8001a38:	4b69      	ldr	r3, [pc, #420]	@ (8001be0 <LocationService_Init+0x1d0>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	72da      	strb	r2, [r3, #11]
	JDY18Driver_Init(&bleHandler);
 8001a3e:	4868      	ldr	r0, [pc, #416]	@ (8001be0 <LocationService_Init+0x1d0>)
 8001a40:	f7ff fc02 	bl	8001248 <JDY18Driver_Init>

	DataFilterService_InitBuffer(&b1Buffer);
 8001a44:	4868      	ldr	r0, [pc, #416]	@ (8001be8 <LocationService_Init+0x1d8>)
 8001a46:	f000 fb43 	bl	80020d0 <DataFilterService_InitBuffer>
	DataFilterService_InitBuffer(&b2Buffer);
 8001a4a:	4868      	ldr	r0, [pc, #416]	@ (8001bec <LocationService_Init+0x1dc>)
 8001a4c:	f000 fb40 	bl	80020d0 <DataFilterService_InitBuffer>
	DataFilterService_InitBuffer(&b3Buffer);
 8001a50:	4867      	ldr	r0, [pc, #412]	@ (8001bf0 <LocationService_Init+0x1e0>)
 8001a52:	f000 fb3d 	bl	80020d0 <DataFilterService_InitBuffer>

	trilaterationCalcCPartial = - pow(slaveBeaconLocationB1.longitude, 2) + pow(slaveBeaconLocationB2.longitude, 2) - pow(slaveBeaconLocationB1.latitude, 2) + pow(slaveBeaconLocationB2.latitude, 2);
 8001a56:	4b67      	ldr	r3, [pc, #412]	@ (8001bf4 <LocationService_Init+0x1e4>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7fe fd94 	bl	8000588 <__aeabi_f2d>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	ed9f 1b5c 	vldr	d1, [pc, #368]	@ 8001bd8 <LocationService_Init+0x1c8>
 8001a68:	ec43 2b10 	vmov	d0, r2, r3
 8001a6c:	f005 fb8a 	bl	8007184 <pow>
 8001a70:	ec55 4b10 	vmov	r4, r5, d0
 8001a74:	4b60      	ldr	r3, [pc, #384]	@ (8001bf8 <LocationService_Init+0x1e8>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7fe fd85 	bl	8000588 <__aeabi_f2d>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	ed9f 1b55 	vldr	d1, [pc, #340]	@ 8001bd8 <LocationService_Init+0x1c8>
 8001a86:	ec43 2b10 	vmov	d0, r2, r3
 8001a8a:	f005 fb7b 	bl	8007184 <pow>
 8001a8e:	ec53 2b10 	vmov	r2, r3, d0
 8001a92:	4620      	mov	r0, r4
 8001a94:	4629      	mov	r1, r5
 8001a96:	f7fe fc17 	bl	80002c8 <__aeabi_dsub>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4614      	mov	r4, r2
 8001aa0:	461d      	mov	r5, r3
 8001aa2:	4b55      	ldr	r3, [pc, #340]	@ (8001bf8 <LocationService_Init+0x1e8>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7fe fd6e 	bl	8000588 <__aeabi_f2d>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	ed9f 1b49 	vldr	d1, [pc, #292]	@ 8001bd8 <LocationService_Init+0x1c8>
 8001ab4:	ec43 2b10 	vmov	d0, r2, r3
 8001ab8:	f005 fb64 	bl	8007184 <pow>
 8001abc:	ec53 2b10 	vmov	r2, r3, d0
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	4629      	mov	r1, r5
 8001ac4:	f7fe fc00 	bl	80002c8 <__aeabi_dsub>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4614      	mov	r4, r2
 8001ace:	461d      	mov	r5, r3
 8001ad0:	4b48      	ldr	r3, [pc, #288]	@ (8001bf4 <LocationService_Init+0x1e4>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe fd57 	bl	8000588 <__aeabi_f2d>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	ed9f 1b3e 	vldr	d1, [pc, #248]	@ 8001bd8 <LocationService_Init+0x1c8>
 8001ae2:	ec43 2b10 	vmov	d0, r2, r3
 8001ae6:	f005 fb4d 	bl	8007184 <pow>
 8001aea:	ec53 2b10 	vmov	r2, r3, d0
 8001aee:	4620      	mov	r0, r4
 8001af0:	4629      	mov	r1, r5
 8001af2:	f7fe fbeb 	bl	80002cc <__adddf3>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4610      	mov	r0, r2
 8001afc:	4619      	mov	r1, r3
 8001afe:	f7ff f86b 	bl	8000bd8 <__aeabi_d2f>
 8001b02:	4603      	mov	r3, r0
 8001b04:	4a3d      	ldr	r2, [pc, #244]	@ (8001bfc <LocationService_Init+0x1ec>)
 8001b06:	6013      	str	r3, [r2, #0]
	trilaterationCalcFPartial = - pow(slaveBeaconLocationB2.longitude, 2) + pow(slaveBeaconLocationB3.longitude, 2) - pow(slaveBeaconLocationB2.latitude, 2) + pow(slaveBeaconLocationB3.latitude, 2);
 8001b08:	4b3d      	ldr	r3, [pc, #244]	@ (8001c00 <LocationService_Init+0x1f0>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7fe fd3b 	bl	8000588 <__aeabi_f2d>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	ed9f 1b30 	vldr	d1, [pc, #192]	@ 8001bd8 <LocationService_Init+0x1c8>
 8001b1a:	ec43 2b10 	vmov	d0, r2, r3
 8001b1e:	f005 fb31 	bl	8007184 <pow>
 8001b22:	ec55 4b10 	vmov	r4, r5, d0
 8001b26:	4b33      	ldr	r3, [pc, #204]	@ (8001bf4 <LocationService_Init+0x1e4>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe fd2c 	bl	8000588 <__aeabi_f2d>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	ed9f 1b28 	vldr	d1, [pc, #160]	@ 8001bd8 <LocationService_Init+0x1c8>
 8001b38:	ec43 2b10 	vmov	d0, r2, r3
 8001b3c:	f005 fb22 	bl	8007184 <pow>
 8001b40:	ec53 2b10 	vmov	r2, r3, d0
 8001b44:	4620      	mov	r0, r4
 8001b46:	4629      	mov	r1, r5
 8001b48:	f7fe fbbe 	bl	80002c8 <__aeabi_dsub>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4614      	mov	r4, r2
 8001b52:	461d      	mov	r5, r3
 8001b54:	4b27      	ldr	r3, [pc, #156]	@ (8001bf4 <LocationService_Init+0x1e4>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7fe fd15 	bl	8000588 <__aeabi_f2d>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	ed9f 1b1d 	vldr	d1, [pc, #116]	@ 8001bd8 <LocationService_Init+0x1c8>
 8001b66:	ec43 2b10 	vmov	d0, r2, r3
 8001b6a:	f005 fb0b 	bl	8007184 <pow>
 8001b6e:	ec53 2b10 	vmov	r2, r3, d0
 8001b72:	4620      	mov	r0, r4
 8001b74:	4629      	mov	r1, r5
 8001b76:	f7fe fba7 	bl	80002c8 <__aeabi_dsub>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4614      	mov	r4, r2
 8001b80:	461d      	mov	r5, r3
 8001b82:	4b1f      	ldr	r3, [pc, #124]	@ (8001c00 <LocationService_Init+0x1f0>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe fcfe 	bl	8000588 <__aeabi_f2d>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	ed9f 1b11 	vldr	d1, [pc, #68]	@ 8001bd8 <LocationService_Init+0x1c8>
 8001b94:	ec43 2b10 	vmov	d0, r2, r3
 8001b98:	f005 faf4 	bl	8007184 <pow>
 8001b9c:	ec53 2b10 	vmov	r2, r3, d0
 8001ba0:	4620      	mov	r0, r4
 8001ba2:	4629      	mov	r1, r5
 8001ba4:	f7fe fb92 	bl	80002cc <__adddf3>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4610      	mov	r0, r2
 8001bae:	4619      	mov	r1, r3
 8001bb0:	f7ff f812 	bl	8000bd8 <__aeabi_d2f>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	4a13      	ldr	r2, [pc, #76]	@ (8001c04 <LocationService_Init+0x1f4>)
 8001bb8:	6013      	str	r3, [r2, #0]

	JDY18Driver_InquireDevices(bleHandler.huart);
 8001bba:	4b09      	ldr	r3, [pc, #36]	@ (8001be0 <LocationService_Init+0x1d0>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff fc7a 	bl	80014b8 <JDY18Driver_InquireDevices>

	HAL_TIM_Base_Start_IT(htim);
 8001bc4:	6838      	ldr	r0, [r7, #0]
 8001bc6:	f003 f947 	bl	8004e58 <HAL_TIM_Base_Start_IT>
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	f3af 8000 	nop.w
 8001bd8:	00000000 	.word	0x00000000
 8001bdc:	40000000 	.word	0x40000000
 8001be0:	20000688 	.word	0x20000688
 8001be4:	08008584 	.word	0x08008584
 8001be8:	20000694 	.word	0x20000694
 8001bec:	200006c8 	.word	0x200006c8
 8001bf0:	200006fc 	.word	0x200006fc
 8001bf4:	20000020 	.word	0x20000020
 8001bf8:	20000018 	.word	0x20000018
 8001bfc:	20000738 	.word	0x20000738
 8001c00:	20000028 	.word	0x20000028
 8001c04:	2000073c 	.word	0x2000073c

08001c08 <LocationService_CalculateDistance>:

float LocationService_CalculateDistance(int rssi)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
	return pow(10, ((MEASURED_POWER - rssi) / 20));
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	f06f 0351 	mvn.w	r3, #81	@ 0x51
 8001c16:	1a9b      	subs	r3, r3, r2
 8001c18:	4a11      	ldr	r2, [pc, #68]	@ (8001c60 <LocationService_CalculateDistance+0x58>)
 8001c1a:	fb82 1203 	smull	r1, r2, r2, r3
 8001c1e:	10d2      	asrs	r2, r2, #3
 8001c20:	17db      	asrs	r3, r3, #31
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7fe fc9d 	bl	8000564 <__aeabi_i2d>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	ec43 2b11 	vmov	d1, r2, r3
 8001c32:	ed9f 0b09 	vldr	d0, [pc, #36]	@ 8001c58 <LocationService_CalculateDistance+0x50>
 8001c36:	f005 faa5 	bl	8007184 <pow>
 8001c3a:	ec53 2b10 	vmov	r2, r3, d0
 8001c3e:	4610      	mov	r0, r2
 8001c40:	4619      	mov	r1, r3
 8001c42:	f7fe ffc9 	bl	8000bd8 <__aeabi_d2f>
 8001c46:	4603      	mov	r3, r0
 8001c48:	ee07 3a90 	vmov	s15, r3
}
 8001c4c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	00000000 	.word	0x00000000
 8001c5c:	40240000 	.word	0x40240000
 8001c60:	66666667 	.word	0x66666667
 8001c64:	00000000 	.word	0x00000000

08001c68 <LocationService_UpdateLocation>:

void LocationService_UpdateLocation()
{
 8001c68:	b5b0      	push	{r4, r5, r7, lr}
 8001c6a:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8001c6e:	af00      	add	r7, sp, #0
	scan_t scannedDevices;
	float b1Distance = -1, b2Distance = -1, b3Distance = -1;
 8001c70:	4bcb      	ldr	r3, [pc, #812]	@ (8001fa0 <LocationService_UpdateLocation+0x338>)
 8001c72:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8001c76:	4bca      	ldr	r3, [pc, #808]	@ (8001fa0 <LocationService_UpdateLocation+0x338>)
 8001c78:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8001c7c:	4bc8      	ldr	r3, [pc, #800]	@ (8001fa0 <LocationService_UpdateLocation+0x338>)
 8001c7e:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c

	JDY18Driver_GetScannedDevices(&scannedDevices);
 8001c82:	1d3b      	adds	r3, r7, #4
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff fc3b 	bl	8001500 <JDY18Driver_GetScannedDevices>

	for(size_t i = 0; i < scannedDevices.size; i++) {
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 8001c90:	e05e      	b.n	8001d50 <LocationService_UpdateLocation+0xe8>
		char* deviceName = scannedDevices.devices[i].name;
 8001c92:	1d39      	adds	r1, r7, #4
 8001c94:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8001c98:	4613      	mov	r3, r2
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	4413      	add	r3, r2
 8001c9e:	011b      	lsls	r3, r3, #4
 8001ca0:	440b      	add	r3, r1
 8001ca2:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
		int rssi = scannedDevices.devices[i].rssi;
 8001ca6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001caa:	f5a3 7105 	sub.w	r1, r3, #532	@ 0x214
 8001cae:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	4413      	add	r3, r2
 8001cb8:	011b      	lsls	r3, r3, #4
 8001cba:	440b      	add	r3, r1
 8001cbc:	332c      	adds	r3, #44	@ 0x2c
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8

		if(strstr(deviceName, SLAVE_BEACON_NAME_B1) != NULL) {
 8001cc4:	49b7      	ldr	r1, [pc, #732]	@ (8001fa4 <LocationService_UpdateLocation+0x33c>)
 8001cc6:	f8d7 01ec 	ldr.w	r0, [r7, #492]	@ 0x1ec
 8001cca:	f004 fdca 	bl	8006862 <strstr>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00d      	beq.n	8001cf0 <LocationService_UpdateLocation+0x88>
			b1Distance = DataFilterService_MovingAverage(&b1Buffer, LocationService_CalculateDistance(rssi));
 8001cd4:	f8d7 01e8 	ldr.w	r0, [r7, #488]	@ 0x1e8
 8001cd8:	f7ff ff96 	bl	8001c08 <LocationService_CalculateDistance>
 8001cdc:	eef0 7a40 	vmov.f32	s15, s0
 8001ce0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ce4:	48b0      	ldr	r0, [pc, #704]	@ (8001fa8 <LocationService_UpdateLocation+0x340>)
 8001ce6:	f000 fa07 	bl	80020f8 <DataFilterService_MovingAverage>
 8001cea:	ed87 0a85 	vstr	s0, [r7, #532]	@ 0x214
 8001cee:	e02a      	b.n	8001d46 <LocationService_UpdateLocation+0xde>
		} else if(strstr(deviceName, SLAVE_BEACON_NAME_B2) != NULL) {
 8001cf0:	49ae      	ldr	r1, [pc, #696]	@ (8001fac <LocationService_UpdateLocation+0x344>)
 8001cf2:	f8d7 01ec 	ldr.w	r0, [r7, #492]	@ 0x1ec
 8001cf6:	f004 fdb4 	bl	8006862 <strstr>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d00d      	beq.n	8001d1c <LocationService_UpdateLocation+0xb4>
			b2Distance = DataFilterService_MovingAverage(&b2Buffer, LocationService_CalculateDistance(rssi));
 8001d00:	f8d7 01e8 	ldr.w	r0, [r7, #488]	@ 0x1e8
 8001d04:	f7ff ff80 	bl	8001c08 <LocationService_CalculateDistance>
 8001d08:	eef0 7a40 	vmov.f32	s15, s0
 8001d0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d10:	48a7      	ldr	r0, [pc, #668]	@ (8001fb0 <LocationService_UpdateLocation+0x348>)
 8001d12:	f000 f9f1 	bl	80020f8 <DataFilterService_MovingAverage>
 8001d16:	ed87 0a84 	vstr	s0, [r7, #528]	@ 0x210
 8001d1a:	e014      	b.n	8001d46 <LocationService_UpdateLocation+0xde>
		} else if(strstr(deviceName, SLAVE_BEACON_NAME_B3) != NULL) {
 8001d1c:	49a5      	ldr	r1, [pc, #660]	@ (8001fb4 <LocationService_UpdateLocation+0x34c>)
 8001d1e:	f8d7 01ec 	ldr.w	r0, [r7, #492]	@ 0x1ec
 8001d22:	f004 fd9e 	bl	8006862 <strstr>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d00c      	beq.n	8001d46 <LocationService_UpdateLocation+0xde>
			b3Distance = DataFilterService_MovingAverage(&b3Buffer, LocationService_CalculateDistance(rssi));
 8001d2c:	f8d7 01e8 	ldr.w	r0, [r7, #488]	@ 0x1e8
 8001d30:	f7ff ff6a 	bl	8001c08 <LocationService_CalculateDistance>
 8001d34:	eef0 7a40 	vmov.f32	s15, s0
 8001d38:	eeb0 0a67 	vmov.f32	s0, s15
 8001d3c:	489e      	ldr	r0, [pc, #632]	@ (8001fb8 <LocationService_UpdateLocation+0x350>)
 8001d3e:	f000 f9db 	bl	80020f8 <DataFilterService_MovingAverage>
 8001d42:	ed87 0a83 	vstr	s0, [r7, #524]	@ 0x20c
	for(size_t i = 0; i < scannedDevices.size; i++) {
 8001d46:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 8001d50:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001d54:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001d58:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 8001d5c:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d396      	bcc.n	8001c92 <LocationService_UpdateLocation+0x2a>
		}
	}

	if (b1Distance != -1 && b2Distance != -1 && b3Distance != -1) {
 8001d64:	edd7 7a85 	vldr	s15, [r7, #532]	@ 0x214
 8001d68:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001d6c:	eef4 7a47 	vcmp.f32	s15, s14
 8001d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d74:	f000 8106 	beq.w	8001f84 <LocationService_UpdateLocation+0x31c>
 8001d78:	edd7 7a84 	vldr	s15, [r7, #528]	@ 0x210
 8001d7c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001d80:	eef4 7a47 	vcmp.f32	s15, s14
 8001d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d88:	f000 80fc 	beq.w	8001f84 <LocationService_UpdateLocation+0x31c>
 8001d8c:	edd7 7a83 	vldr	s15, [r7, #524]	@ 0x20c
 8001d90:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001d94:	eef4 7a47 	vcmp.f32	s15, s14
 8001d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d9c:	f000 80f2 	beq.w	8001f84 <LocationService_UpdateLocation+0x31c>
		float trilaterationCalcA = -2*slaveBeaconLocationB1.longitude + 2*slaveBeaconLocationB2.longitude;
 8001da0:	4b86      	ldr	r3, [pc, #536]	@ (8001fbc <LocationService_UpdateLocation+0x354>)
 8001da2:	edd3 7a01 	vldr	s15, [r3, #4]
 8001da6:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001daa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001dae:	4b84      	ldr	r3, [pc, #528]	@ (8001fc0 <LocationService_UpdateLocation+0x358>)
 8001db0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001db4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001db8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dbc:	edc7 7a81 	vstr	s15, [r7, #516]	@ 0x204
		float trilaterationCalcB = -2*slaveBeaconLocationB1.latitude + 2*slaveBeaconLocationB2.latitude;
 8001dc0:	4b7e      	ldr	r3, [pc, #504]	@ (8001fbc <LocationService_UpdateLocation+0x354>)
 8001dc2:	edd3 7a00 	vldr	s15, [r3]
 8001dc6:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001dca:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001dce:	4b7c      	ldr	r3, [pc, #496]	@ (8001fc0 <LocationService_UpdateLocation+0x358>)
 8001dd0:	edd3 7a00 	vldr	s15, [r3]
 8001dd4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001dd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ddc:	edc7 7a80 	vstr	s15, [r7, #512]	@ 0x200
		float trilaterationCalcC = pow(b1Distance, 2) - pow(b2Distance, 2) + trilaterationCalcCPartial;
 8001de0:	f8d7 0214 	ldr.w	r0, [r7, #532]	@ 0x214
 8001de4:	f7fe fbd0 	bl	8000588 <__aeabi_f2d>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	ed9f 1b6a 	vldr	d1, [pc, #424]	@ 8001f98 <LocationService_UpdateLocation+0x330>
 8001df0:	ec43 2b10 	vmov	d0, r2, r3
 8001df4:	f005 f9c6 	bl	8007184 <pow>
 8001df8:	ec55 4b10 	vmov	r4, r5, d0
 8001dfc:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8001e00:	f7fe fbc2 	bl	8000588 <__aeabi_f2d>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	ed9f 1b63 	vldr	d1, [pc, #396]	@ 8001f98 <LocationService_UpdateLocation+0x330>
 8001e0c:	ec43 2b10 	vmov	d0, r2, r3
 8001e10:	f005 f9b8 	bl	8007184 <pow>
 8001e14:	ec53 2b10 	vmov	r2, r3, d0
 8001e18:	4620      	mov	r0, r4
 8001e1a:	4629      	mov	r1, r5
 8001e1c:	f7fe fa54 	bl	80002c8 <__aeabi_dsub>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4614      	mov	r4, r2
 8001e26:	461d      	mov	r5, r3
 8001e28:	4b66      	ldr	r3, [pc, #408]	@ (8001fc4 <LocationService_UpdateLocation+0x35c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe fbab 	bl	8000588 <__aeabi_f2d>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	4620      	mov	r0, r4
 8001e38:	4629      	mov	r1, r5
 8001e3a:	f7fe fa47 	bl	80002cc <__adddf3>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	4610      	mov	r0, r2
 8001e44:	4619      	mov	r1, r3
 8001e46:	f7fe fec7 	bl	8000bd8 <__aeabi_d2f>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
		float trilaterationCalcD = -2*slaveBeaconLocationB2.longitude + 2*slaveBeaconLocationB3.longitude;
 8001e50:	4b5b      	ldr	r3, [pc, #364]	@ (8001fc0 <LocationService_UpdateLocation+0x358>)
 8001e52:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e56:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001e5a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e5e:	4b5a      	ldr	r3, [pc, #360]	@ (8001fc8 <LocationService_UpdateLocation+0x360>)
 8001e60:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e64:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e6c:	edc7 7a7e 	vstr	s15, [r7, #504]	@ 0x1f8
		float trilaterationCalcE = -2*slaveBeaconLocationB2.latitude + 2*slaveBeaconLocationB3.latitude;
 8001e70:	4b53      	ldr	r3, [pc, #332]	@ (8001fc0 <LocationService_UpdateLocation+0x358>)
 8001e72:	edd3 7a00 	vldr	s15, [r3]
 8001e76:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001e7a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e7e:	4b52      	ldr	r3, [pc, #328]	@ (8001fc8 <LocationService_UpdateLocation+0x360>)
 8001e80:	edd3 7a00 	vldr	s15, [r3]
 8001e84:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e8c:	edc7 7a7d 	vstr	s15, [r7, #500]	@ 0x1f4
		float trilaterationCalcF = pow(b2Distance, 2) - pow(b3Distance, 2) + trilaterationCalcFPartial;
 8001e90:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8001e94:	f7fe fb78 	bl	8000588 <__aeabi_f2d>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	ed9f 1b3e 	vldr	d1, [pc, #248]	@ 8001f98 <LocationService_UpdateLocation+0x330>
 8001ea0:	ec43 2b10 	vmov	d0, r2, r3
 8001ea4:	f005 f96e 	bl	8007184 <pow>
 8001ea8:	ec55 4b10 	vmov	r4, r5, d0
 8001eac:	f8d7 020c 	ldr.w	r0, [r7, #524]	@ 0x20c
 8001eb0:	f7fe fb6a 	bl	8000588 <__aeabi_f2d>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	ed9f 1b37 	vldr	d1, [pc, #220]	@ 8001f98 <LocationService_UpdateLocation+0x330>
 8001ebc:	ec43 2b10 	vmov	d0, r2, r3
 8001ec0:	f005 f960 	bl	8007184 <pow>
 8001ec4:	ec53 2b10 	vmov	r2, r3, d0
 8001ec8:	4620      	mov	r0, r4
 8001eca:	4629      	mov	r1, r5
 8001ecc:	f7fe f9fc 	bl	80002c8 <__aeabi_dsub>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4614      	mov	r4, r2
 8001ed6:	461d      	mov	r5, r3
 8001ed8:	4b3c      	ldr	r3, [pc, #240]	@ (8001fcc <LocationService_UpdateLocation+0x364>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7fe fb53 	bl	8000588 <__aeabi_f2d>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4620      	mov	r0, r4
 8001ee8:	4629      	mov	r1, r5
 8001eea:	f7fe f9ef 	bl	80002cc <__adddf3>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f7fe fe6f 	bl	8000bd8 <__aeabi_d2f>
 8001efa:	4603      	mov	r3, r0
 8001efc:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0

		masterLocation.longitude = (trilaterationCalcC*trilaterationCalcE - trilaterationCalcF*trilaterationCalcB)/(trilaterationCalcE*trilaterationCalcA - trilaterationCalcB*trilaterationCalcD);
 8001f00:	ed97 7a7f 	vldr	s14, [r7, #508]	@ 0x1fc
 8001f04:	edd7 7a7d 	vldr	s15, [r7, #500]	@ 0x1f4
 8001f08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f0c:	edd7 6a7c 	vldr	s13, [r7, #496]	@ 0x1f0
 8001f10:	edd7 7a80 	vldr	s15, [r7, #512]	@ 0x200
 8001f14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f18:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f1c:	ed97 7a7d 	vldr	s14, [r7, #500]	@ 0x1f4
 8001f20:	edd7 7a81 	vldr	s15, [r7, #516]	@ 0x204
 8001f24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f28:	ed97 6a80 	vldr	s12, [r7, #512]	@ 0x200
 8001f2c:	edd7 7a7e 	vldr	s15, [r7, #504]	@ 0x1f8
 8001f30:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f3c:	4b24      	ldr	r3, [pc, #144]	@ (8001fd0 <LocationService_UpdateLocation+0x368>)
 8001f3e:	edc3 7a01 	vstr	s15, [r3, #4]
		masterLocation.latitude= (trilaterationCalcC*trilaterationCalcD - trilaterationCalcA*trilaterationCalcF)/(trilaterationCalcB*trilaterationCalcD - trilaterationCalcA*trilaterationCalcE);
 8001f42:	ed97 7a7f 	vldr	s14, [r7, #508]	@ 0x1fc
 8001f46:	edd7 7a7e 	vldr	s15, [r7, #504]	@ 0x1f8
 8001f4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f4e:	edd7 6a81 	vldr	s13, [r7, #516]	@ 0x204
 8001f52:	edd7 7a7c 	vldr	s15, [r7, #496]	@ 0x1f0
 8001f56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f5a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f5e:	ed97 7a80 	vldr	s14, [r7, #512]	@ 0x200
 8001f62:	edd7 7a7e 	vldr	s15, [r7, #504]	@ 0x1f8
 8001f66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f6a:	ed97 6a81 	vldr	s12, [r7, #516]	@ 0x204
 8001f6e:	edd7 7a7d 	vldr	s15, [r7, #500]	@ 0x1f4
 8001f72:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f76:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f7e:	4b14      	ldr	r3, [pc, #80]	@ (8001fd0 <LocationService_UpdateLocation+0x368>)
 8001f80:	edc3 7a00 	vstr	s15, [r3]
	}

	JDY18Driver_InquireDevices(bleHandler.huart);
 8001f84:	4b13      	ldr	r3, [pc, #76]	@ (8001fd4 <LocationService_UpdateLocation+0x36c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff fa95 	bl	80014b8 <JDY18Driver_InquireDevices>
}
 8001f8e:	bf00      	nop
 8001f90:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bdb0      	pop	{r4, r5, r7, pc}
 8001f98:	00000000 	.word	0x00000000
 8001f9c:	40000000 	.word	0x40000000
 8001fa0:	bf800000 	.word	0xbf800000
 8001fa4:	08008590 	.word	0x08008590
 8001fa8:	20000694 	.word	0x20000694
 8001fac:	0800859c 	.word	0x0800859c
 8001fb0:	200006c8 	.word	0x200006c8
 8001fb4:	080085a8 	.word	0x080085a8
 8001fb8:	200006fc 	.word	0x200006fc
 8001fbc:	20000018 	.word	0x20000018
 8001fc0:	20000020 	.word	0x20000020
 8001fc4:	20000738 	.word	0x20000738
 8001fc8:	20000028 	.word	0x20000028
 8001fcc:	2000073c 	.word	0x2000073c
 8001fd0:	20000730 	.word	0x20000730
 8001fd4:	20000688 	.word	0x20000688

08001fd8 <LocationService_GetArrivalAngle>:
{
	return masterLocation;
}

float LocationService_GetArrivalAngle()
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
	return atan((masterLocation.longitude - slaveBeaconLocationB2.longitude) / (masterLocation.latitude - slaveBeaconLocationB2.latitude)) * 180 / 3.14159265359 + 180;
 8001fdc:	4b22      	ldr	r3, [pc, #136]	@ (8002068 <LocationService_GetArrivalAngle+0x90>)
 8001fde:	ed93 7a01 	vldr	s14, [r3, #4]
 8001fe2:	4b22      	ldr	r3, [pc, #136]	@ (800206c <LocationService_GetArrivalAngle+0x94>)
 8001fe4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001fe8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fec:	4b1e      	ldr	r3, [pc, #120]	@ (8002068 <LocationService_GetArrivalAngle+0x90>)
 8001fee:	edd3 6a00 	vldr	s13, [r3]
 8001ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800206c <LocationService_GetArrivalAngle+0x94>)
 8001ff4:	edd3 7a00 	vldr	s15, [r3]
 8001ff8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ffc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002000:	ee16 0a90 	vmov	r0, s13
 8002004:	f7fe fac0 	bl	8000588 <__aeabi_f2d>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	ec43 2b10 	vmov	d0, r2, r3
 8002010:	f005 f92a 	bl	8007268 <atan>
 8002014:	ec51 0b10 	vmov	r0, r1, d0
 8002018:	f04f 0200 	mov.w	r2, #0
 800201c:	4b14      	ldr	r3, [pc, #80]	@ (8002070 <LocationService_GetArrivalAngle+0x98>)
 800201e:	f7fe fb0b 	bl	8000638 <__aeabi_dmul>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	4610      	mov	r0, r2
 8002028:	4619      	mov	r1, r3
 800202a:	a30d      	add	r3, pc, #52	@ (adr r3, 8002060 <LocationService_GetArrivalAngle+0x88>)
 800202c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002030:	f7fe fc2c 	bl	800088c <__aeabi_ddiv>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	4610      	mov	r0, r2
 800203a:	4619      	mov	r1, r3
 800203c:	f04f 0200 	mov.w	r2, #0
 8002040:	4b0b      	ldr	r3, [pc, #44]	@ (8002070 <LocationService_GetArrivalAngle+0x98>)
 8002042:	f7fe f943 	bl	80002cc <__adddf3>
 8002046:	4602      	mov	r2, r0
 8002048:	460b      	mov	r3, r1
 800204a:	4610      	mov	r0, r2
 800204c:	4619      	mov	r1, r3
 800204e:	f7fe fdc3 	bl	8000bd8 <__aeabi_d2f>
 8002052:	4603      	mov	r3, r0
 8002054:	ee07 3a90 	vmov	s15, r3
}
 8002058:	eeb0 0a67 	vmov.f32	s0, s15
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	54442eea 	.word	0x54442eea
 8002064:	400921fb 	.word	0x400921fb
 8002068:	20000730 	.word	0x20000730
 800206c:	20000020 	.word	0x20000020
 8002070:	40668000 	.word	0x40668000

08002074 <LocationService_IsInDestiny>:

uint8_t LocationService_IsInDestiny()
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
	return ((masterLocation.longitude - slaveBeaconLocationB2.longitude) < PRECISION_BLE_METERS) && ((masterLocation.latitude - slaveBeaconLocationB2.latitude) < PRECISION_BLE_METERS) ? 1 : 0;
 8002078:	4b13      	ldr	r3, [pc, #76]	@ (80020c8 <LocationService_IsInDestiny+0x54>)
 800207a:	ed93 7a01 	vldr	s14, [r3, #4]
 800207e:	4b13      	ldr	r3, [pc, #76]	@ (80020cc <LocationService_IsInDestiny+0x58>)
 8002080:	edd3 7a01 	vldr	s15, [r3, #4]
 8002084:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002088:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800208c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002094:	d510      	bpl.n	80020b8 <LocationService_IsInDestiny+0x44>
 8002096:	4b0c      	ldr	r3, [pc, #48]	@ (80020c8 <LocationService_IsInDestiny+0x54>)
 8002098:	ed93 7a00 	vldr	s14, [r3]
 800209c:	4b0b      	ldr	r3, [pc, #44]	@ (80020cc <LocationService_IsInDestiny+0x58>)
 800209e:	edd3 7a00 	vldr	s15, [r3]
 80020a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020a6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80020aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b2:	d501      	bpl.n	80020b8 <LocationService_IsInDestiny+0x44>
 80020b4:	2301      	movs	r3, #1
 80020b6:	e000      	b.n	80020ba <LocationService_IsInDestiny+0x46>
 80020b8:	2300      	movs	r3, #0
 80020ba:	b2db      	uxtb	r3, r3
}
 80020bc:	4618      	mov	r0, r3
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	20000730 	.word	0x20000730
 80020cc:	20000020 	.word	0x20000020

080020d0 <DataFilterService_InitBuffer>:
 */

#include <Utils/Position_filter.h>

void DataFilterService_InitBuffer(buffer_t* buffer)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
	buffer->size = 0;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	62da      	str	r2, [r3, #44]	@ 0x2c
	buffer->sum = 0;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	629a      	str	r2, [r3, #40]	@ 0x28
	buffer->position = 0;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <DataFilterService_MovingAverage>:

float DataFilterService_MovingAverage(buffer_t* buffer, float newValue) {
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	ed87 0a00 	vstr	s0, [r7]
	if (buffer->size <= MAX_BUFFER_SIZE) buffer->size++;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002108:	2b0a      	cmp	r3, #10
 800210a:	d804      	bhi.n	8002116 <DataFilterService_MovingAverage+0x1e>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002110:	1c5a      	adds	r2, r3, #1
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	62da      	str	r2, [r3, #44]	@ 0x2c
  buffer->sum += newValue - buffer->data[buffer->position];
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	edd3 7a00 	vldr	s15, [r3]
 800212a:	edd7 6a00 	vldr	s13, [r7]
 800212e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002132:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
  buffer->data[buffer->position] = newValue;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	601a      	str	r2, [r3, #0]
  buffer->position = (buffer->position + 1) % MAX_BUFFER_SIZE;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214e:	1c59      	adds	r1, r3, #1
 8002150:	4b0f      	ldr	r3, [pc, #60]	@ (8002190 <DataFilterService_MovingAverage+0x98>)
 8002152:	fba3 2301 	umull	r2, r3, r3, r1
 8002156:	08da      	lsrs	r2, r3, #3
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	1aca      	subs	r2, r1, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	631a      	str	r2, [r3, #48]	@ 0x30
  return (float)buffer->sum / buffer->size;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002170:	ee07 3a90 	vmov	s15, r3
 8002174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002178:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800217c:	eef0 7a66 	vmov.f32	s15, s13
}
 8002180:	eeb0 0a67 	vmov.f32	s0, s15
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	cccccccd 	.word	0xcccccccd

08002194 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002196:	b095      	sub	sp, #84	@ 0x54
 8002198:	af14      	add	r7, sp, #80	@ 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800219a:	f000 fcb7 	bl	8002b0c <HAL_Init>

  /* USER CODE BEGIN Init */
  LocationService_Init(&huart3, &htim3);
 800219e:	492b      	ldr	r1, [pc, #172]	@ (800224c <main+0xb8>)
 80021a0:	482b      	ldr	r0, [pc, #172]	@ (8002250 <main+0xbc>)
 80021a2:	f7ff fc35 	bl	8001a10 <LocationService_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021a6:	f000 f863 	bl	8002270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021aa:	f000 f9f7 	bl	800259c <MX_GPIO_Init>
  MX_I2C1_Init();
 80021ae:	f000 f8bf 	bl	8002330 <MX_I2C1_Init>
  MX_TIM4_Init();
 80021b2:	f000 f945 	bl	8002440 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80021b6:	f000 f99d 	bl	80024f4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80021ba:	f000 f9c5 	bl	8002548 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80021be:	f000 f8e5 	bl	800238c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HMC5883L_Init(hi2c1);
 80021c2:	4c24      	ldr	r4, [pc, #144]	@ (8002254 <main+0xc0>)
 80021c4:	4668      	mov	r0, sp
 80021c6:	f104 0310 	add.w	r3, r4, #16
 80021ca:	2244      	movs	r2, #68	@ 0x44
 80021cc:	4619      	mov	r1, r3
 80021ce:	f004 fb8b 	bl	80068e8 <memcpy>
 80021d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80021d6:	f7fe fec7 	bl	8000f68 <HMC5883L_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  // Enquanto o barco não chegar no destino é preciso atuar controle sobre ele
	  if(LocationService_IsInDestiny() != 1){
 80021da:	f7ff ff4b 	bl	8002074 <LocationService_IsInDestiny>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d0fa      	beq.n	80021da <main+0x46>
		  // Atualiza magnetômetro
		  getDirectionBoat (hi2c1, &PosBoat.x,&PosBoat.y,&PosBoat.angle);
 80021e4:	4c1b      	ldr	r4, [pc, #108]	@ (8002254 <main+0xc0>)
 80021e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002258 <main+0xc4>)
 80021e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80021ea:	4b1c      	ldr	r3, [pc, #112]	@ (800225c <main+0xc8>)
 80021ec:	9312      	str	r3, [sp, #72]	@ 0x48
 80021ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002260 <main+0xcc>)
 80021f0:	9311      	str	r3, [sp, #68]	@ 0x44
 80021f2:	4668      	mov	r0, sp
 80021f4:	f104 0310 	add.w	r3, r4, #16
 80021f8:	2244      	movs	r2, #68	@ 0x44
 80021fa:	4619      	mov	r1, r3
 80021fc:	f004 fb74 	bl	80068e8 <memcpy>
 8002200:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002204:	f7fe ffe2 	bl	80011cc <getDirectionBoat>
		  // Atualiza beacon
		  LocationService_UpdateLocation();
 8002208:	f7ff fd2e 	bl	8001c68 <LocationService_UpdateLocation>
		  DesirePos.angle = LocationService_GetArrivalAngle();
 800220c:	f7ff fee4 	bl	8001fd8 <LocationService_GetArrivalAngle>
 8002210:	eef0 7a40 	vmov.f32	s15, s0
 8002214:	4b13      	ldr	r3, [pc, #76]	@ (8002264 <main+0xd0>)
 8002216:	edc3 7a01 	vstr	s15, [r3, #4]
		  SG90_Update(htim4, TIM_CHANNEL_1, &PosBoat.angle,&DesirePos.angle);
 800221a:	4e13      	ldr	r6, [pc, #76]	@ (8002268 <main+0xd4>)
 800221c:	4b13      	ldr	r3, [pc, #76]	@ (800226c <main+0xd8>)
 800221e:	9310      	str	r3, [sp, #64]	@ 0x40
 8002220:	4b0d      	ldr	r3, [pc, #52]	@ (8002258 <main+0xc4>)
 8002222:	930f      	str	r3, [sp, #60]	@ 0x3c
 8002224:	2300      	movs	r3, #0
 8002226:	930e      	str	r3, [sp, #56]	@ 0x38
 8002228:	466d      	mov	r5, sp
 800222a:	f106 0410 	add.w	r4, r6, #16
 800222e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002230:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002232:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002234:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002236:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002238:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800223a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800223e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002242:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002246:	f7ff fba5 	bl	8001994 <SG90_Update>
	  if(LocationService_IsInDestiny() != 1){
 800224a:	e7c6      	b.n	80021da <main+0x46>
 800224c:	20000794 	.word	0x20000794
 8002250:	2000086c 	.word	0x2000086c
 8002254:	20000740 	.word	0x20000740
 8002258:	200008b8 	.word	0x200008b8
 800225c:	200008b6 	.word	0x200008b6
 8002260:	200008b4 	.word	0x200008b4
 8002264:	200008bc 	.word	0x200008bc
 8002268:	200007dc 	.word	0x200007dc
 800226c:	200008c0 	.word	0x200008c0

08002270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b094      	sub	sp, #80	@ 0x50
 8002274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002276:	f107 031c 	add.w	r3, r7, #28
 800227a:	2234      	movs	r2, #52	@ 0x34
 800227c:	2100      	movs	r1, #0
 800227e:	4618      	mov	r0, r3
 8002280:	f004 fada 	bl	8006838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002284:	f107 0308 	add.w	r3, r7, #8
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002294:	2300      	movs	r3, #0
 8002296:	607b      	str	r3, [r7, #4]
 8002298:	4b23      	ldr	r3, [pc, #140]	@ (8002328 <SystemClock_Config+0xb8>)
 800229a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229c:	4a22      	ldr	r2, [pc, #136]	@ (8002328 <SystemClock_Config+0xb8>)
 800229e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80022a4:	4b20      	ldr	r3, [pc, #128]	@ (8002328 <SystemClock_Config+0xb8>)
 80022a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ac:	607b      	str	r3, [r7, #4]
 80022ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80022b0:	2300      	movs	r3, #0
 80022b2:	603b      	str	r3, [r7, #0]
 80022b4:	4b1d      	ldr	r3, [pc, #116]	@ (800232c <SystemClock_Config+0xbc>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80022bc:	4a1b      	ldr	r2, [pc, #108]	@ (800232c <SystemClock_Config+0xbc>)
 80022be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022c2:	6013      	str	r3, [r2, #0]
 80022c4:	4b19      	ldr	r3, [pc, #100]	@ (800232c <SystemClock_Config+0xbc>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80022cc:	603b      	str	r3, [r7, #0]
 80022ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022d0:	2302      	movs	r3, #2
 80022d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022d4:	2301      	movs	r3, #1
 80022d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022d8:	2310      	movs	r3, #16
 80022da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80022dc:	2300      	movs	r3, #0
 80022de:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022e0:	f107 031c 	add.w	r3, r7, #28
 80022e4:	4618      	mov	r0, r3
 80022e6:	f002 fb19 	bl	800491c <HAL_RCC_OscConfig>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80022f0:	f000 f9bc 	bl	800266c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022f4:	230f      	movs	r3, #15
 80022f6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80022f8:	2300      	movs	r3, #0
 80022fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022fc:	2300      	movs	r3, #0
 80022fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8002300:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002304:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002306:	2300      	movs	r3, #0
 8002308:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800230a:	f107 0308 	add.w	r3, r7, #8
 800230e:	2100      	movs	r1, #0
 8002310:	4618      	mov	r0, r3
 8002312:	f002 f83f 	bl	8004394 <HAL_RCC_ClockConfig>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800231c:	f000 f9a6 	bl	800266c <Error_Handler>
  }
}
 8002320:	bf00      	nop
 8002322:	3750      	adds	r7, #80	@ 0x50
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40023800 	.word	0x40023800
 800232c:	40007000 	.word	0x40007000

08002330 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002334:	4b12      	ldr	r3, [pc, #72]	@ (8002380 <MX_I2C1_Init+0x50>)
 8002336:	4a13      	ldr	r2, [pc, #76]	@ (8002384 <MX_I2C1_Init+0x54>)
 8002338:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800233a:	4b11      	ldr	r3, [pc, #68]	@ (8002380 <MX_I2C1_Init+0x50>)
 800233c:	4a12      	ldr	r2, [pc, #72]	@ (8002388 <MX_I2C1_Init+0x58>)
 800233e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002340:	4b0f      	ldr	r3, [pc, #60]	@ (8002380 <MX_I2C1_Init+0x50>)
 8002342:	2200      	movs	r2, #0
 8002344:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002346:	4b0e      	ldr	r3, [pc, #56]	@ (8002380 <MX_I2C1_Init+0x50>)
 8002348:	2200      	movs	r2, #0
 800234a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800234c:	4b0c      	ldr	r3, [pc, #48]	@ (8002380 <MX_I2C1_Init+0x50>)
 800234e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002352:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002354:	4b0a      	ldr	r3, [pc, #40]	@ (8002380 <MX_I2C1_Init+0x50>)
 8002356:	2200      	movs	r2, #0
 8002358:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800235a:	4b09      	ldr	r3, [pc, #36]	@ (8002380 <MX_I2C1_Init+0x50>)
 800235c:	2200      	movs	r2, #0
 800235e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002360:	4b07      	ldr	r3, [pc, #28]	@ (8002380 <MX_I2C1_Init+0x50>)
 8002362:	2200      	movs	r2, #0
 8002364:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002366:	4b06      	ldr	r3, [pc, #24]	@ (8002380 <MX_I2C1_Init+0x50>)
 8002368:	2200      	movs	r2, #0
 800236a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800236c:	4804      	ldr	r0, [pc, #16]	@ (8002380 <MX_I2C1_Init+0x50>)
 800236e:	f000 ffed 	bl	800334c <HAL_I2C_Init>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002378:	f000 f978 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800237c:	bf00      	nop
 800237e:	bd80      	pop	{r7, pc}
 8002380:	20000740 	.word	0x20000740
 8002384:	40005400 	.word	0x40005400
 8002388:	000186a0 	.word	0x000186a0

0800238c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08a      	sub	sp, #40	@ 0x28
 8002390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002392:	f107 0320 	add.w	r3, r7, #32
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800239c:	1d3b      	adds	r3, r7, #4
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	605a      	str	r2, [r3, #4]
 80023a4:	609a      	str	r2, [r3, #8]
 80023a6:	60da      	str	r2, [r3, #12]
 80023a8:	611a      	str	r2, [r3, #16]
 80023aa:	615a      	str	r2, [r3, #20]
 80023ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023ae:	4b22      	ldr	r3, [pc, #136]	@ (8002438 <MX_TIM3_Init+0xac>)
 80023b0:	4a22      	ldr	r2, [pc, #136]	@ (800243c <MX_TIM3_Init+0xb0>)
 80023b2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 80023b4:	4b20      	ldr	r3, [pc, #128]	@ (8002438 <MX_TIM3_Init+0xac>)
 80023b6:	223f      	movs	r2, #63	@ 0x3f
 80023b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002438 <MX_TIM3_Init+0xac>)
 80023bc:	2200      	movs	r2, #0
 80023be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1250;
 80023c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002438 <MX_TIM3_Init+0xac>)
 80023c2:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 80023c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002438 <MX_TIM3_Init+0xac>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002438 <MX_TIM3_Init+0xac>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80023d4:	4818      	ldr	r0, [pc, #96]	@ (8002438 <MX_TIM3_Init+0xac>)
 80023d6:	f002 fdaf 	bl	8004f38 <HAL_TIM_PWM_Init>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80023e0:	f000 f944 	bl	800266c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023e4:	2300      	movs	r3, #0
 80023e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023e8:	2300      	movs	r3, #0
 80023ea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023ec:	f107 0320 	add.w	r3, r7, #32
 80023f0:	4619      	mov	r1, r3
 80023f2:	4811      	ldr	r0, [pc, #68]	@ (8002438 <MX_TIM3_Init+0xac>)
 80023f4:	f003 fa6c 	bl	80058d0 <HAL_TIMEx_MasterConfigSynchronization>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80023fe:	f000 f935 	bl	800266c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002402:	2360      	movs	r3, #96	@ 0x60
 8002404:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002406:	2300      	movs	r3, #0
 8002408:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800240a:	2300      	movs	r3, #0
 800240c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002412:	1d3b      	adds	r3, r7, #4
 8002414:	2204      	movs	r2, #4
 8002416:	4619      	mov	r1, r3
 8002418:	4807      	ldr	r0, [pc, #28]	@ (8002438 <MX_TIM3_Init+0xac>)
 800241a:	f002 ff15 	bl	8005248 <HAL_TIM_PWM_ConfigChannel>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002424:	f000 f922 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002428:	4803      	ldr	r0, [pc, #12]	@ (8002438 <MX_TIM3_Init+0xac>)
 800242a:	f000 f9cd 	bl	80027c8 <HAL_TIM_MspPostInit>

}
 800242e:	bf00      	nop
 8002430:	3728      	adds	r7, #40	@ 0x28
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20000794 	.word	0x20000794
 800243c:	40000400 	.word	0x40000400

08002440 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08a      	sub	sp, #40	@ 0x28
 8002444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002446:	f107 0320 	add.w	r3, r7, #32
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002450:	1d3b      	adds	r3, r7, #4
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	605a      	str	r2, [r3, #4]
 8002458:	609a      	str	r2, [r3, #8]
 800245a:	60da      	str	r2, [r3, #12]
 800245c:	611a      	str	r2, [r3, #16]
 800245e:	615a      	str	r2, [r3, #20]
 8002460:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002462:	4b22      	ldr	r3, [pc, #136]	@ (80024ec <MX_TIM4_Init+0xac>)
 8002464:	4a22      	ldr	r2, [pc, #136]	@ (80024f0 <MX_TIM4_Init+0xb0>)
 8002466:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64-1;
 8002468:	4b20      	ldr	r3, [pc, #128]	@ (80024ec <MX_TIM4_Init+0xac>)
 800246a:	223f      	movs	r2, #63	@ 0x3f
 800246c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800246e:	4b1f      	ldr	r3, [pc, #124]	@ (80024ec <MX_TIM4_Init+0xac>)
 8002470:	2200      	movs	r2, #0
 8002472:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1250;
 8002474:	4b1d      	ldr	r3, [pc, #116]	@ (80024ec <MX_TIM4_Init+0xac>)
 8002476:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 800247a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800247c:	4b1b      	ldr	r3, [pc, #108]	@ (80024ec <MX_TIM4_Init+0xac>)
 800247e:	2200      	movs	r2, #0
 8002480:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002482:	4b1a      	ldr	r3, [pc, #104]	@ (80024ec <MX_TIM4_Init+0xac>)
 8002484:	2200      	movs	r2, #0
 8002486:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002488:	4818      	ldr	r0, [pc, #96]	@ (80024ec <MX_TIM4_Init+0xac>)
 800248a:	f002 fd55 	bl	8004f38 <HAL_TIM_PWM_Init>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002494:	f000 f8ea 	bl	800266c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002498:	2300      	movs	r3, #0
 800249a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800249c:	2300      	movs	r3, #0
 800249e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80024a0:	f107 0320 	add.w	r3, r7, #32
 80024a4:	4619      	mov	r1, r3
 80024a6:	4811      	ldr	r0, [pc, #68]	@ (80024ec <MX_TIM4_Init+0xac>)
 80024a8:	f003 fa12 	bl	80058d0 <HAL_TIMEx_MasterConfigSynchronization>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80024b2:	f000 f8db 	bl	800266c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024b6:	2360      	movs	r3, #96	@ 0x60
 80024b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024be:	2300      	movs	r3, #0
 80024c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024c6:	1d3b      	adds	r3, r7, #4
 80024c8:	2200      	movs	r2, #0
 80024ca:	4619      	mov	r1, r3
 80024cc:	4807      	ldr	r0, [pc, #28]	@ (80024ec <MX_TIM4_Init+0xac>)
 80024ce:	f002 febb 	bl	8005248 <HAL_TIM_PWM_ConfigChannel>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80024d8:	f000 f8c8 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80024dc:	4803      	ldr	r0, [pc, #12]	@ (80024ec <MX_TIM4_Init+0xac>)
 80024de:	f000 f973 	bl	80027c8 <HAL_TIM_MspPostInit>

}
 80024e2:	bf00      	nop
 80024e4:	3728      	adds	r7, #40	@ 0x28
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	200007dc 	.word	0x200007dc
 80024f0:	40000800 	.word	0x40000800

080024f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024f8:	4b11      	ldr	r3, [pc, #68]	@ (8002540 <MX_USART2_UART_Init+0x4c>)
 80024fa:	4a12      	ldr	r2, [pc, #72]	@ (8002544 <MX_USART2_UART_Init+0x50>)
 80024fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80024fe:	4b10      	ldr	r3, [pc, #64]	@ (8002540 <MX_USART2_UART_Init+0x4c>)
 8002500:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002504:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002506:	4b0e      	ldr	r3, [pc, #56]	@ (8002540 <MX_USART2_UART_Init+0x4c>)
 8002508:	2200      	movs	r2, #0
 800250a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800250c:	4b0c      	ldr	r3, [pc, #48]	@ (8002540 <MX_USART2_UART_Init+0x4c>)
 800250e:	2200      	movs	r2, #0
 8002510:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002512:	4b0b      	ldr	r3, [pc, #44]	@ (8002540 <MX_USART2_UART_Init+0x4c>)
 8002514:	2200      	movs	r2, #0
 8002516:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002518:	4b09      	ldr	r3, [pc, #36]	@ (8002540 <MX_USART2_UART_Init+0x4c>)
 800251a:	220c      	movs	r2, #12
 800251c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800251e:	4b08      	ldr	r3, [pc, #32]	@ (8002540 <MX_USART2_UART_Init+0x4c>)
 8002520:	2200      	movs	r2, #0
 8002522:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002524:	4b06      	ldr	r3, [pc, #24]	@ (8002540 <MX_USART2_UART_Init+0x4c>)
 8002526:	2200      	movs	r2, #0
 8002528:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800252a:	4805      	ldr	r0, [pc, #20]	@ (8002540 <MX_USART2_UART_Init+0x4c>)
 800252c:	f003 fa4c 	bl	80059c8 <HAL_UART_Init>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002536:	f000 f899 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	20000824 	.word	0x20000824
 8002544:	40004400 	.word	0x40004400

08002548 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800254c:	4b11      	ldr	r3, [pc, #68]	@ (8002594 <MX_USART3_UART_Init+0x4c>)
 800254e:	4a12      	ldr	r2, [pc, #72]	@ (8002598 <MX_USART3_UART_Init+0x50>)
 8002550:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002552:	4b10      	ldr	r3, [pc, #64]	@ (8002594 <MX_USART3_UART_Init+0x4c>)
 8002554:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002558:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800255a:	4b0e      	ldr	r3, [pc, #56]	@ (8002594 <MX_USART3_UART_Init+0x4c>)
 800255c:	2200      	movs	r2, #0
 800255e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002560:	4b0c      	ldr	r3, [pc, #48]	@ (8002594 <MX_USART3_UART_Init+0x4c>)
 8002562:	2200      	movs	r2, #0
 8002564:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002566:	4b0b      	ldr	r3, [pc, #44]	@ (8002594 <MX_USART3_UART_Init+0x4c>)
 8002568:	2200      	movs	r2, #0
 800256a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800256c:	4b09      	ldr	r3, [pc, #36]	@ (8002594 <MX_USART3_UART_Init+0x4c>)
 800256e:	220c      	movs	r2, #12
 8002570:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002572:	4b08      	ldr	r3, [pc, #32]	@ (8002594 <MX_USART3_UART_Init+0x4c>)
 8002574:	2200      	movs	r2, #0
 8002576:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002578:	4b06      	ldr	r3, [pc, #24]	@ (8002594 <MX_USART3_UART_Init+0x4c>)
 800257a:	2200      	movs	r2, #0
 800257c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800257e:	4805      	ldr	r0, [pc, #20]	@ (8002594 <MX_USART3_UART_Init+0x4c>)
 8002580:	f003 fa22 	bl	80059c8 <HAL_UART_Init>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800258a:	f000 f86f 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	2000086c 	.word	0x2000086c
 8002598:	40004800 	.word	0x40004800

0800259c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b088      	sub	sp, #32
 80025a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a2:	f107 030c 	add.w	r3, r7, #12
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	605a      	str	r2, [r3, #4]
 80025ac:	609a      	str	r2, [r3, #8]
 80025ae:	60da      	str	r2, [r3, #12]
 80025b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	60bb      	str	r3, [r7, #8]
 80025b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002660 <MX_GPIO_Init+0xc4>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ba:	4a29      	ldr	r2, [pc, #164]	@ (8002660 <MX_GPIO_Init+0xc4>)
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025c2:	4b27      	ldr	r3, [pc, #156]	@ (8002660 <MX_GPIO_Init+0xc4>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	60bb      	str	r3, [r7, #8]
 80025cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	607b      	str	r3, [r7, #4]
 80025d2:	4b23      	ldr	r3, [pc, #140]	@ (8002660 <MX_GPIO_Init+0xc4>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d6:	4a22      	ldr	r2, [pc, #136]	@ (8002660 <MX_GPIO_Init+0xc4>)
 80025d8:	f043 0304 	orr.w	r3, r3, #4
 80025dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80025de:	4b20      	ldr	r3, [pc, #128]	@ (8002660 <MX_GPIO_Init+0xc4>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e2:	f003 0304 	and.w	r3, r3, #4
 80025e6:	607b      	str	r3, [r7, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	603b      	str	r3, [r7, #0]
 80025ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002660 <MX_GPIO_Init+0xc4>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f2:	4a1b      	ldr	r2, [pc, #108]	@ (8002660 <MX_GPIO_Init+0xc4>)
 80025f4:	f043 0302 	orr.w	r3, r3, #2
 80025f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025fa:	4b19      	ldr	r3, [pc, #100]	@ (8002660 <MX_GPIO_Init+0xc4>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	603b      	str	r3, [r7, #0]
 8002604:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, L293D_LATCH_Pin|L293D_EN_Pin|L293D_SER_Pin, GPIO_PIN_RESET);
 8002606:	2200      	movs	r2, #0
 8002608:	f44f 7150 	mov.w	r1, #832	@ 0x340
 800260c:	4815      	ldr	r0, [pc, #84]	@ (8002664 <MX_GPIO_Init+0xc8>)
 800260e:	f000 fe83 	bl	8003318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L293D_CLK_GPIO_Port, L293D_CLK_Pin, GPIO_PIN_RESET);
 8002612:	2200      	movs	r2, #0
 8002614:	2120      	movs	r1, #32
 8002616:	4814      	ldr	r0, [pc, #80]	@ (8002668 <MX_GPIO_Init+0xcc>)
 8002618:	f000 fe7e 	bl	8003318 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : L293D_LATCH_Pin L293D_EN_Pin L293D_SER_Pin */
  GPIO_InitStruct.Pin = L293D_LATCH_Pin|L293D_EN_Pin|L293D_SER_Pin;
 800261c:	f44f 7350 	mov.w	r3, #832	@ 0x340
 8002620:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002622:	2301      	movs	r3, #1
 8002624:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002626:	2300      	movs	r3, #0
 8002628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262a:	2300      	movs	r3, #0
 800262c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800262e:	f107 030c 	add.w	r3, r7, #12
 8002632:	4619      	mov	r1, r3
 8002634:	480b      	ldr	r0, [pc, #44]	@ (8002664 <MX_GPIO_Init+0xc8>)
 8002636:	f000 fcdb 	bl	8002ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : L293D_CLK_Pin */
  GPIO_InitStruct.Pin = L293D_CLK_Pin;
 800263a:	2320      	movs	r3, #32
 800263c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800263e:	2301      	movs	r3, #1
 8002640:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002642:	2300      	movs	r3, #0
 8002644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002646:	2300      	movs	r3, #0
 8002648:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(L293D_CLK_GPIO_Port, &GPIO_InitStruct);
 800264a:	f107 030c 	add.w	r3, r7, #12
 800264e:	4619      	mov	r1, r3
 8002650:	4805      	ldr	r0, [pc, #20]	@ (8002668 <MX_GPIO_Init+0xcc>)
 8002652:	f000 fccd 	bl	8002ff0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002656:	bf00      	nop
 8002658:	3720      	adds	r7, #32
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40023800 	.word	0x40023800
 8002664:	40020000 	.word	0x40020000
 8002668:	40020400 	.word	0x40020400

0800266c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002670:	b672      	cpsid	i
}
 8002672:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002674:	bf00      	nop
 8002676:	e7fd      	b.n	8002674 <Error_Handler+0x8>

08002678 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	607b      	str	r3, [r7, #4]
 8002682:	4b10      	ldr	r3, [pc, #64]	@ (80026c4 <HAL_MspInit+0x4c>)
 8002684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002686:	4a0f      	ldr	r2, [pc, #60]	@ (80026c4 <HAL_MspInit+0x4c>)
 8002688:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800268c:	6453      	str	r3, [r2, #68]	@ 0x44
 800268e:	4b0d      	ldr	r3, [pc, #52]	@ (80026c4 <HAL_MspInit+0x4c>)
 8002690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002692:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002696:	607b      	str	r3, [r7, #4]
 8002698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	603b      	str	r3, [r7, #0]
 800269e:	4b09      	ldr	r3, [pc, #36]	@ (80026c4 <HAL_MspInit+0x4c>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a2:	4a08      	ldr	r2, [pc, #32]	@ (80026c4 <HAL_MspInit+0x4c>)
 80026a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80026aa:	4b06      	ldr	r3, [pc, #24]	@ (80026c4 <HAL_MspInit+0x4c>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026b2:	603b      	str	r3, [r7, #0]
 80026b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	40023800 	.word	0x40023800

080026c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b08a      	sub	sp, #40	@ 0x28
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d0:	f107 0314 	add.w	r3, r7, #20
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	605a      	str	r2, [r3, #4]
 80026da:	609a      	str	r2, [r3, #8]
 80026dc:	60da      	str	r2, [r3, #12]
 80026de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a19      	ldr	r2, [pc, #100]	@ (800274c <HAL_I2C_MspInit+0x84>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d12c      	bne.n	8002744 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	613b      	str	r3, [r7, #16]
 80026ee:	4b18      	ldr	r3, [pc, #96]	@ (8002750 <HAL_I2C_MspInit+0x88>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f2:	4a17      	ldr	r2, [pc, #92]	@ (8002750 <HAL_I2C_MspInit+0x88>)
 80026f4:	f043 0302 	orr.w	r3, r3, #2
 80026f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026fa:	4b15      	ldr	r3, [pc, #84]	@ (8002750 <HAL_I2C_MspInit+0x88>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	613b      	str	r3, [r7, #16]
 8002704:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = MAG_SDA_Pin|MAG_SCL_Pin;
 8002706:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800270a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800270c:	2312      	movs	r3, #18
 800270e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002710:	2300      	movs	r3, #0
 8002712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002714:	2303      	movs	r3, #3
 8002716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002718:	2304      	movs	r3, #4
 800271a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800271c:	f107 0314 	add.w	r3, r7, #20
 8002720:	4619      	mov	r1, r3
 8002722:	480c      	ldr	r0, [pc, #48]	@ (8002754 <HAL_I2C_MspInit+0x8c>)
 8002724:	f000 fc64 	bl	8002ff0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002728:	2300      	movs	r3, #0
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	4b08      	ldr	r3, [pc, #32]	@ (8002750 <HAL_I2C_MspInit+0x88>)
 800272e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002730:	4a07      	ldr	r2, [pc, #28]	@ (8002750 <HAL_I2C_MspInit+0x88>)
 8002732:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002736:	6413      	str	r3, [r2, #64]	@ 0x40
 8002738:	4b05      	ldr	r3, [pc, #20]	@ (8002750 <HAL_I2C_MspInit+0x88>)
 800273a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002744:	bf00      	nop
 8002746:	3728      	adds	r7, #40	@ 0x28
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40005400 	.word	0x40005400
 8002750:	40023800 	.word	0x40023800
 8002754:	40020400 	.word	0x40020400

08002758 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a15      	ldr	r2, [pc, #84]	@ (80027bc <HAL_TIM_PWM_MspInit+0x64>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d10e      	bne.n	8002788 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	4b14      	ldr	r3, [pc, #80]	@ (80027c0 <HAL_TIM_PWM_MspInit+0x68>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002772:	4a13      	ldr	r2, [pc, #76]	@ (80027c0 <HAL_TIM_PWM_MspInit+0x68>)
 8002774:	f043 0302 	orr.w	r3, r3, #2
 8002778:	6413      	str	r3, [r2, #64]	@ 0x40
 800277a:	4b11      	ldr	r3, [pc, #68]	@ (80027c0 <HAL_TIM_PWM_MspInit+0x68>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002786:	e012      	b.n	80027ae <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a0d      	ldr	r2, [pc, #52]	@ (80027c4 <HAL_TIM_PWM_MspInit+0x6c>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d10d      	bne.n	80027ae <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	4b0a      	ldr	r3, [pc, #40]	@ (80027c0 <HAL_TIM_PWM_MspInit+0x68>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279a:	4a09      	ldr	r2, [pc, #36]	@ (80027c0 <HAL_TIM_PWM_MspInit+0x68>)
 800279c:	f043 0304 	orr.w	r3, r3, #4
 80027a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80027a2:	4b07      	ldr	r3, [pc, #28]	@ (80027c0 <HAL_TIM_PWM_MspInit+0x68>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	60bb      	str	r3, [r7, #8]
 80027ac:	68bb      	ldr	r3, [r7, #8]
}
 80027ae:	bf00      	nop
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	40000400 	.word	0x40000400
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40000800 	.word	0x40000800

080027c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08a      	sub	sp, #40	@ 0x28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d0:	f107 0314 	add.w	r3, r7, #20
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	60da      	str	r2, [r3, #12]
 80027de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a24      	ldr	r2, [pc, #144]	@ (8002878 <HAL_TIM_MspPostInit+0xb0>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d11e      	bne.n	8002828 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	613b      	str	r3, [r7, #16]
 80027ee:	4b23      	ldr	r3, [pc, #140]	@ (800287c <HAL_TIM_MspPostInit+0xb4>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f2:	4a22      	ldr	r2, [pc, #136]	@ (800287c <HAL_TIM_MspPostInit+0xb4>)
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027fa:	4b20      	ldr	r3, [pc, #128]	@ (800287c <HAL_TIM_MspPostInit+0xb4>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = L293D_PWM_Pin;
 8002806:	2380      	movs	r3, #128	@ 0x80
 8002808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280a:	2302      	movs	r3, #2
 800280c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280e:	2300      	movs	r3, #0
 8002810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002812:	2300      	movs	r3, #0
 8002814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002816:	2302      	movs	r3, #2
 8002818:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(L293D_PWM_GPIO_Port, &GPIO_InitStruct);
 800281a:	f107 0314 	add.w	r3, r7, #20
 800281e:	4619      	mov	r1, r3
 8002820:	4817      	ldr	r0, [pc, #92]	@ (8002880 <HAL_TIM_MspPostInit+0xb8>)
 8002822:	f000 fbe5 	bl	8002ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002826:	e022      	b.n	800286e <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a15      	ldr	r2, [pc, #84]	@ (8002884 <HAL_TIM_MspPostInit+0xbc>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d11d      	bne.n	800286e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	4b11      	ldr	r3, [pc, #68]	@ (800287c <HAL_TIM_MspPostInit+0xb4>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283a:	4a10      	ldr	r2, [pc, #64]	@ (800287c <HAL_TIM_MspPostInit+0xb4>)
 800283c:	f043 0302 	orr.w	r3, r3, #2
 8002840:	6313      	str	r3, [r2, #48]	@ 0x30
 8002842:	4b0e      	ldr	r3, [pc, #56]	@ (800287c <HAL_TIM_MspPostInit+0xb4>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SG90_PWM_Pin;
 800284e:	2340      	movs	r3, #64	@ 0x40
 8002850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002852:	2302      	movs	r3, #2
 8002854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002856:	2300      	movs	r3, #0
 8002858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800285a:	2300      	movs	r3, #0
 800285c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800285e:	2302      	movs	r3, #2
 8002860:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SG90_PWM_GPIO_Port, &GPIO_InitStruct);
 8002862:	f107 0314 	add.w	r3, r7, #20
 8002866:	4619      	mov	r1, r3
 8002868:	4807      	ldr	r0, [pc, #28]	@ (8002888 <HAL_TIM_MspPostInit+0xc0>)
 800286a:	f000 fbc1 	bl	8002ff0 <HAL_GPIO_Init>
}
 800286e:	bf00      	nop
 8002870:	3728      	adds	r7, #40	@ 0x28
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40000400 	.word	0x40000400
 800287c:	40023800 	.word	0x40023800
 8002880:	40020000 	.word	0x40020000
 8002884:	40000800 	.word	0x40000800
 8002888:	40020400 	.word	0x40020400

0800288c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b08c      	sub	sp, #48	@ 0x30
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002894:	f107 031c 	add.w	r3, r7, #28
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	609a      	str	r2, [r3, #8]
 80028a0:	60da      	str	r2, [r3, #12]
 80028a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a41      	ldr	r2, [pc, #260]	@ (80029b0 <HAL_UART_MspInit+0x124>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d12c      	bne.n	8002908 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	61bb      	str	r3, [r7, #24]
 80028b2:	4b40      	ldr	r3, [pc, #256]	@ (80029b4 <HAL_UART_MspInit+0x128>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b6:	4a3f      	ldr	r2, [pc, #252]	@ (80029b4 <HAL_UART_MspInit+0x128>)
 80028b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80028be:	4b3d      	ldr	r3, [pc, #244]	@ (80029b4 <HAL_UART_MspInit+0x128>)
 80028c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028c6:	61bb      	str	r3, [r7, #24]
 80028c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	617b      	str	r3, [r7, #20]
 80028ce:	4b39      	ldr	r3, [pc, #228]	@ (80029b4 <HAL_UART_MspInit+0x128>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d2:	4a38      	ldr	r2, [pc, #224]	@ (80029b4 <HAL_UART_MspInit+0x128>)
 80028d4:	f043 0301 	orr.w	r3, r3, #1
 80028d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028da:	4b36      	ldr	r3, [pc, #216]	@ (80029b4 <HAL_UART_MspInit+0x128>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80028e6:	230c      	movs	r3, #12
 80028e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ea:	2302      	movs	r3, #2
 80028ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ee:	2300      	movs	r3, #0
 80028f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f2:	2303      	movs	r3, #3
 80028f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028f6:	2307      	movs	r3, #7
 80028f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028fa:	f107 031c 	add.w	r3, r7, #28
 80028fe:	4619      	mov	r1, r3
 8002900:	482d      	ldr	r0, [pc, #180]	@ (80029b8 <HAL_UART_MspInit+0x12c>)
 8002902:	f000 fb75 	bl	8002ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002906:	e04f      	b.n	80029a8 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART3)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a2b      	ldr	r2, [pc, #172]	@ (80029bc <HAL_UART_MspInit+0x130>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d14a      	bne.n	80029a8 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	613b      	str	r3, [r7, #16]
 8002916:	4b27      	ldr	r3, [pc, #156]	@ (80029b4 <HAL_UART_MspInit+0x128>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291a:	4a26      	ldr	r2, [pc, #152]	@ (80029b4 <HAL_UART_MspInit+0x128>)
 800291c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002920:	6413      	str	r3, [r2, #64]	@ 0x40
 8002922:	4b24      	ldr	r3, [pc, #144]	@ (80029b4 <HAL_UART_MspInit+0x128>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002926:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800292a:	613b      	str	r3, [r7, #16]
 800292c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	4b20      	ldr	r3, [pc, #128]	@ (80029b4 <HAL_UART_MspInit+0x128>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002936:	4a1f      	ldr	r2, [pc, #124]	@ (80029b4 <HAL_UART_MspInit+0x128>)
 8002938:	f043 0304 	orr.w	r3, r3, #4
 800293c:	6313      	str	r3, [r2, #48]	@ 0x30
 800293e:	4b1d      	ldr	r3, [pc, #116]	@ (80029b4 <HAL_UART_MspInit+0x128>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002942:	f003 0304 	and.w	r3, r3, #4
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	4b19      	ldr	r3, [pc, #100]	@ (80029b4 <HAL_UART_MspInit+0x128>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002952:	4a18      	ldr	r2, [pc, #96]	@ (80029b4 <HAL_UART_MspInit+0x128>)
 8002954:	f043 0302 	orr.w	r3, r3, #2
 8002958:	6313      	str	r3, [r2, #48]	@ 0x30
 800295a:	4b16      	ldr	r3, [pc, #88]	@ (80029b4 <HAL_UART_MspInit+0x128>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	60bb      	str	r3, [r7, #8]
 8002964:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BLE_RX_Pin;
 8002966:	2320      	movs	r3, #32
 8002968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296a:	2302      	movs	r3, #2
 800296c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296e:	2300      	movs	r3, #0
 8002970:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002972:	2303      	movs	r3, #3
 8002974:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002976:	2307      	movs	r3, #7
 8002978:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BLE_RX_GPIO_Port, &GPIO_InitStruct);
 800297a:	f107 031c 	add.w	r3, r7, #28
 800297e:	4619      	mov	r1, r3
 8002980:	480f      	ldr	r0, [pc, #60]	@ (80029c0 <HAL_UART_MspInit+0x134>)
 8002982:	f000 fb35 	bl	8002ff0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BLE_TX_Pin;
 8002986:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800298a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298c:	2302      	movs	r3, #2
 800298e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002990:	2300      	movs	r3, #0
 8002992:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002994:	2303      	movs	r3, #3
 8002996:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002998:	2307      	movs	r3, #7
 800299a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BLE_TX_GPIO_Port, &GPIO_InitStruct);
 800299c:	f107 031c 	add.w	r3, r7, #28
 80029a0:	4619      	mov	r1, r3
 80029a2:	4808      	ldr	r0, [pc, #32]	@ (80029c4 <HAL_UART_MspInit+0x138>)
 80029a4:	f000 fb24 	bl	8002ff0 <HAL_GPIO_Init>
}
 80029a8:	bf00      	nop
 80029aa:	3730      	adds	r7, #48	@ 0x30
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40004400 	.word	0x40004400
 80029b4:	40023800 	.word	0x40023800
 80029b8:	40020000 	.word	0x40020000
 80029bc:	40004800 	.word	0x40004800
 80029c0:	40020800 	.word	0x40020800
 80029c4:	40020400 	.word	0x40020400

080029c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029cc:	bf00      	nop
 80029ce:	e7fd      	b.n	80029cc <NMI_Handler+0x4>

080029d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029d4:	bf00      	nop
 80029d6:	e7fd      	b.n	80029d4 <HardFault_Handler+0x4>

080029d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029dc:	bf00      	nop
 80029de:	e7fd      	b.n	80029dc <MemManage_Handler+0x4>

080029e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029e4:	bf00      	nop
 80029e6:	e7fd      	b.n	80029e4 <BusFault_Handler+0x4>

080029e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029ec:	bf00      	nop
 80029ee:	e7fd      	b.n	80029ec <UsageFault_Handler+0x4>

080029f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029f4:	bf00      	nop
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029fe:	b480      	push	{r7}
 8002a00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a02:	bf00      	nop
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a10:	bf00      	nop
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a1e:	f000 f8c7 	bl	8002bb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a22:	bf00      	nop
 8002a24:	bd80      	pop	{r7, pc}
	...

08002a28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a30:	4a14      	ldr	r2, [pc, #80]	@ (8002a84 <_sbrk+0x5c>)
 8002a32:	4b15      	ldr	r3, [pc, #84]	@ (8002a88 <_sbrk+0x60>)
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a3c:	4b13      	ldr	r3, [pc, #76]	@ (8002a8c <_sbrk+0x64>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d102      	bne.n	8002a4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a44:	4b11      	ldr	r3, [pc, #68]	@ (8002a8c <_sbrk+0x64>)
 8002a46:	4a12      	ldr	r2, [pc, #72]	@ (8002a90 <_sbrk+0x68>)
 8002a48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a4a:	4b10      	ldr	r3, [pc, #64]	@ (8002a8c <_sbrk+0x64>)
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4413      	add	r3, r2
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d207      	bcs.n	8002a68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a58:	f003 ff1a 	bl	8006890 <__errno>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	220c      	movs	r2, #12
 8002a60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a62:	f04f 33ff 	mov.w	r3, #4294967295
 8002a66:	e009      	b.n	8002a7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a68:	4b08      	ldr	r3, [pc, #32]	@ (8002a8c <_sbrk+0x64>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a6e:	4b07      	ldr	r3, [pc, #28]	@ (8002a8c <_sbrk+0x64>)
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4413      	add	r3, r2
 8002a76:	4a05      	ldr	r2, [pc, #20]	@ (8002a8c <_sbrk+0x64>)
 8002a78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3718      	adds	r7, #24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	20020000 	.word	0x20020000
 8002a88:	00000400 	.word	0x00000400
 8002a8c:	200008c4 	.word	0x200008c4
 8002a90:	20000a18 	.word	0x20000a18

08002a94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a98:	4b06      	ldr	r3, [pc, #24]	@ (8002ab4 <SystemInit+0x20>)
 8002a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a9e:	4a05      	ldr	r2, [pc, #20]	@ (8002ab4 <SystemInit+0x20>)
 8002aa0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002aa4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002aa8:	bf00      	nop
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	e000ed00 	.word	0xe000ed00

08002ab8 <Reset_Handler>:
 8002ab8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002af0 <LoopFillZerobss+0xe>
 8002abc:	f7ff ffea 	bl	8002a94 <SystemInit>
 8002ac0:	480c      	ldr	r0, [pc, #48]	@ (8002af4 <LoopFillZerobss+0x12>)
 8002ac2:	490d      	ldr	r1, [pc, #52]	@ (8002af8 <LoopFillZerobss+0x16>)
 8002ac4:	4a0d      	ldr	r2, [pc, #52]	@ (8002afc <LoopFillZerobss+0x1a>)
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	e002      	b.n	8002ad0 <LoopCopyDataInit>

08002aca <CopyDataInit>:
 8002aca:	58d4      	ldr	r4, [r2, r3]
 8002acc:	50c4      	str	r4, [r0, r3]
 8002ace:	3304      	adds	r3, #4

08002ad0 <LoopCopyDataInit>:
 8002ad0:	18c4      	adds	r4, r0, r3
 8002ad2:	428c      	cmp	r4, r1
 8002ad4:	d3f9      	bcc.n	8002aca <CopyDataInit>
 8002ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8002b00 <LoopFillZerobss+0x1e>)
 8002ad8:	4c0a      	ldr	r4, [pc, #40]	@ (8002b04 <LoopFillZerobss+0x22>)
 8002ada:	2300      	movs	r3, #0
 8002adc:	e001      	b.n	8002ae2 <LoopFillZerobss>

08002ade <FillZerobss>:
 8002ade:	6013      	str	r3, [r2, #0]
 8002ae0:	3204      	adds	r2, #4

08002ae2 <LoopFillZerobss>:
 8002ae2:	42a2      	cmp	r2, r4
 8002ae4:	d3fb      	bcc.n	8002ade <FillZerobss>
 8002ae6:	f003 fed9 	bl	800689c <__libc_init_array>
 8002aea:	f7ff fb53 	bl	8002194 <main>
 8002aee:	4770      	bx	lr
 8002af0:	20020000 	.word	0x20020000
 8002af4:	20000000 	.word	0x20000000
 8002af8:	200000a0 	.word	0x200000a0
 8002afc:	080087b0 	.word	0x080087b0
 8002b00:	200000a0 	.word	0x200000a0
 8002b04:	20000a14 	.word	0x20000a14

08002b08 <ADC_IRQHandler>:
 8002b08:	e7fe      	b.n	8002b08 <ADC_IRQHandler>
	...

08002b0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b10:	4b0e      	ldr	r3, [pc, #56]	@ (8002b4c <HAL_Init+0x40>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a0d      	ldr	r2, [pc, #52]	@ (8002b4c <HAL_Init+0x40>)
 8002b16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b4c <HAL_Init+0x40>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a0a      	ldr	r2, [pc, #40]	@ (8002b4c <HAL_Init+0x40>)
 8002b22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b28:	4b08      	ldr	r3, [pc, #32]	@ (8002b4c <HAL_Init+0x40>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a07      	ldr	r2, [pc, #28]	@ (8002b4c <HAL_Init+0x40>)
 8002b2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b34:	2003      	movs	r0, #3
 8002b36:	f000 f931 	bl	8002d9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b3a:	200f      	movs	r0, #15
 8002b3c:	f000 f808 	bl	8002b50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b40:	f7ff fd9a 	bl	8002678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40023c00 	.word	0x40023c00

08002b50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b58:	4b12      	ldr	r3, [pc, #72]	@ (8002ba4 <HAL_InitTick+0x54>)
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	4b12      	ldr	r3, [pc, #72]	@ (8002ba8 <HAL_InitTick+0x58>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	4619      	mov	r1, r3
 8002b62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b66:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f000 f93b 	bl	8002dea <HAL_SYSTICK_Config>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e00e      	b.n	8002b9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b0f      	cmp	r3, #15
 8002b82:	d80a      	bhi.n	8002b9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b84:	2200      	movs	r2, #0
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	f04f 30ff 	mov.w	r0, #4294967295
 8002b8c:	f000 f911 	bl	8002db2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b90:	4a06      	ldr	r2, [pc, #24]	@ (8002bac <HAL_InitTick+0x5c>)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
 8002b98:	e000      	b.n	8002b9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	20000030 	.word	0x20000030
 8002ba8:	20000038 	.word	0x20000038
 8002bac:	20000034 	.word	0x20000034

08002bb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bb4:	4b06      	ldr	r3, [pc, #24]	@ (8002bd0 <HAL_IncTick+0x20>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4b06      	ldr	r3, [pc, #24]	@ (8002bd4 <HAL_IncTick+0x24>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	4a04      	ldr	r2, [pc, #16]	@ (8002bd4 <HAL_IncTick+0x24>)
 8002bc2:	6013      	str	r3, [r2, #0]
}
 8002bc4:	bf00      	nop
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	20000038 	.word	0x20000038
 8002bd4:	200008c8 	.word	0x200008c8

08002bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  return uwTick;
 8002bdc:	4b03      	ldr	r3, [pc, #12]	@ (8002bec <HAL_GetTick+0x14>)
 8002bde:	681b      	ldr	r3, [r3, #0]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	200008c8 	.word	0x200008c8

08002bf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bf8:	f7ff ffee 	bl	8002bd8 <HAL_GetTick>
 8002bfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c08:	d005      	beq.n	8002c16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c34 <HAL_Delay+0x44>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	4413      	add	r3, r2
 8002c14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c16:	bf00      	nop
 8002c18:	f7ff ffde 	bl	8002bd8 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d8f7      	bhi.n	8002c18 <HAL_Delay+0x28>
  {
  }
}
 8002c28:	bf00      	nop
 8002c2a:	bf00      	nop
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20000038 	.word	0x20000038

08002c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c48:	4b0c      	ldr	r3, [pc, #48]	@ (8002c7c <__NVIC_SetPriorityGrouping+0x44>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c4e:	68ba      	ldr	r2, [r7, #8]
 8002c50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c54:	4013      	ands	r3, r2
 8002c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c6a:	4a04      	ldr	r2, [pc, #16]	@ (8002c7c <__NVIC_SetPriorityGrouping+0x44>)
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	60d3      	str	r3, [r2, #12]
}
 8002c70:	bf00      	nop
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr
 8002c7c:	e000ed00 	.word	0xe000ed00

08002c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c84:	4b04      	ldr	r3, [pc, #16]	@ (8002c98 <__NVIC_GetPriorityGrouping+0x18>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	0a1b      	lsrs	r3, r3, #8
 8002c8a:	f003 0307 	and.w	r3, r3, #7
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	e000ed00 	.word	0xe000ed00

08002c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	6039      	str	r1, [r7, #0]
 8002ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	db0a      	blt.n	8002cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	490c      	ldr	r1, [pc, #48]	@ (8002ce8 <__NVIC_SetPriority+0x4c>)
 8002cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cba:	0112      	lsls	r2, r2, #4
 8002cbc:	b2d2      	uxtb	r2, r2
 8002cbe:	440b      	add	r3, r1
 8002cc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cc4:	e00a      	b.n	8002cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	4908      	ldr	r1, [pc, #32]	@ (8002cec <__NVIC_SetPriority+0x50>)
 8002ccc:	79fb      	ldrb	r3, [r7, #7]
 8002cce:	f003 030f 	and.w	r3, r3, #15
 8002cd2:	3b04      	subs	r3, #4
 8002cd4:	0112      	lsls	r2, r2, #4
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	440b      	add	r3, r1
 8002cda:	761a      	strb	r2, [r3, #24]
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	e000e100 	.word	0xe000e100
 8002cec:	e000ed00 	.word	0xe000ed00

08002cf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b089      	sub	sp, #36	@ 0x24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f1c3 0307 	rsb	r3, r3, #7
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	bf28      	it	cs
 8002d0e:	2304      	movcs	r3, #4
 8002d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	3304      	adds	r3, #4
 8002d16:	2b06      	cmp	r3, #6
 8002d18:	d902      	bls.n	8002d20 <NVIC_EncodePriority+0x30>
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	3b03      	subs	r3, #3
 8002d1e:	e000      	b.n	8002d22 <NVIC_EncodePriority+0x32>
 8002d20:	2300      	movs	r3, #0
 8002d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d24:	f04f 32ff 	mov.w	r2, #4294967295
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	43da      	mvns	r2, r3
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	401a      	ands	r2, r3
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d38:	f04f 31ff 	mov.w	r1, #4294967295
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d42:	43d9      	mvns	r1, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d48:	4313      	orrs	r3, r2
         );
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3724      	adds	r7, #36	@ 0x24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
	...

08002d58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	3b01      	subs	r3, #1
 8002d64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d68:	d301      	bcc.n	8002d6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e00f      	b.n	8002d8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d6e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d98 <SysTick_Config+0x40>)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3b01      	subs	r3, #1
 8002d74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d76:	210f      	movs	r1, #15
 8002d78:	f04f 30ff 	mov.w	r0, #4294967295
 8002d7c:	f7ff ff8e 	bl	8002c9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d80:	4b05      	ldr	r3, [pc, #20]	@ (8002d98 <SysTick_Config+0x40>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d86:	4b04      	ldr	r3, [pc, #16]	@ (8002d98 <SysTick_Config+0x40>)
 8002d88:	2207      	movs	r2, #7
 8002d8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	e000e010 	.word	0xe000e010

08002d9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f7ff ff47 	bl	8002c38 <__NVIC_SetPriorityGrouping>
}
 8002daa:	bf00      	nop
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b086      	sub	sp, #24
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	4603      	mov	r3, r0
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	607a      	str	r2, [r7, #4]
 8002dbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dc4:	f7ff ff5c 	bl	8002c80 <__NVIC_GetPriorityGrouping>
 8002dc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	68b9      	ldr	r1, [r7, #8]
 8002dce:	6978      	ldr	r0, [r7, #20]
 8002dd0:	f7ff ff8e 	bl	8002cf0 <NVIC_EncodePriority>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dda:	4611      	mov	r1, r2
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff ff5d 	bl	8002c9c <__NVIC_SetPriority>
}
 8002de2:	bf00      	nop
 8002de4:	3718      	adds	r7, #24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b082      	sub	sp, #8
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7ff ffb0 	bl	8002d58 <SysTick_Config>
 8002df8:	4603      	mov	r3, r0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b086      	sub	sp, #24
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	60f8      	str	r0, [r7, #12]
 8002e0a:	60b9      	str	r1, [r7, #8]
 8002e0c:	607a      	str	r2, [r7, #4]
 8002e0e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e10:	2300      	movs	r3, #0
 8002e12:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e18:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d101      	bne.n	8002e28 <HAL_DMA_Start_IT+0x26>
 8002e24:	2302      	movs	r3, #2
 8002e26:	e040      	b.n	8002eaa <HAL_DMA_Start_IT+0xa8>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d12f      	bne.n	8002e9c <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2202      	movs	r2, #2
 8002e40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	68b9      	ldr	r1, [r7, #8]
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 f89e 	bl	8002f92 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e5a:	223f      	movs	r2, #63	@ 0x3f
 8002e5c:	409a      	lsls	r2, r3
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f042 0216 	orr.w	r2, r2, #22
 8002e70:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d007      	beq.n	8002e8a <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f042 0208 	orr.w	r2, r2, #8
 8002e88:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f042 0201 	orr.w	r2, r2, #1
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	e005      	b.n	8002ea8 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ea8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b084      	sub	sp, #16
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ebe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ec0:	f7ff fe8a 	bl	8002bd8 <HAL_GetTick>
 8002ec4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d008      	beq.n	8002ee4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2280      	movs	r2, #128	@ 0x80
 8002ed6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e052      	b.n	8002f8a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0216 	bic.w	r2, r2, #22
 8002ef2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	695a      	ldr	r2, [r3, #20]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f02:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d103      	bne.n	8002f14 <HAL_DMA_Abort+0x62>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d007      	beq.n	8002f24 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0208 	bic.w	r2, r2, #8
 8002f22:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 0201 	bic.w	r2, r2, #1
 8002f32:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f34:	e013      	b.n	8002f5e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f36:	f7ff fe4f 	bl	8002bd8 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b05      	cmp	r3, #5
 8002f42:	d90c      	bls.n	8002f5e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2220      	movs	r2, #32
 8002f48:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2203      	movs	r2, #3
 8002f4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e015      	b.n	8002f8a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1e4      	bne.n	8002f36 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f70:	223f      	movs	r2, #63	@ 0x3f
 8002f72:	409a      	lsls	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b085      	sub	sp, #20
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	60f8      	str	r0, [r7, #12]
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	607a      	str	r2, [r7, #4]
 8002f9e:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002fae:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	2b40      	cmp	r3, #64	@ 0x40
 8002fbe:	d108      	bne.n	8002fd2 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002fd0:	e007      	b.n	8002fe2 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	60da      	str	r2, [r3, #12]
}
 8002fe2:	bf00      	nop
 8002fe4:	3714      	adds	r7, #20
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
	...

08002ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b089      	sub	sp, #36	@ 0x24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003002:	2300      	movs	r3, #0
 8003004:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003006:	2300      	movs	r3, #0
 8003008:	61fb      	str	r3, [r7, #28]
 800300a:	e165      	b.n	80032d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800300c:	2201      	movs	r2, #1
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	4013      	ands	r3, r2
 800301e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	429a      	cmp	r2, r3
 8003026:	f040 8154 	bne.w	80032d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	2b01      	cmp	r3, #1
 8003034:	d005      	beq.n	8003042 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800303e:	2b02      	cmp	r3, #2
 8003040:	d130      	bne.n	80030a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	2203      	movs	r2, #3
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	43db      	mvns	r3, r3
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4013      	ands	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	fa02 f303 	lsl.w	r3, r2, r3
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	4313      	orrs	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003078:	2201      	movs	r2, #1
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	43db      	mvns	r3, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4013      	ands	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	091b      	lsrs	r3, r3, #4
 800308e:	f003 0201 	and.w	r2, r3, #1
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	4313      	orrs	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f003 0303 	and.w	r3, r3, #3
 80030ac:	2b03      	cmp	r3, #3
 80030ae:	d017      	beq.n	80030e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	2203      	movs	r2, #3
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	43db      	mvns	r3, r3
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4013      	ands	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f003 0303 	and.w	r3, r3, #3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d123      	bne.n	8003134 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	08da      	lsrs	r2, r3, #3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3208      	adds	r2, #8
 80030f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	220f      	movs	r2, #15
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	43db      	mvns	r3, r3
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	4013      	ands	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	691a      	ldr	r2, [r3, #16]
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	4313      	orrs	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	08da      	lsrs	r2, r3, #3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	3208      	adds	r2, #8
 800312e:	69b9      	ldr	r1, [r7, #24]
 8003130:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	2203      	movs	r2, #3
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	43db      	mvns	r3, r3
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4013      	ands	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f003 0203 	and.w	r2, r3, #3
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	4313      	orrs	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 80ae 	beq.w	80032d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003176:	2300      	movs	r3, #0
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	4b5d      	ldr	r3, [pc, #372]	@ (80032f0 <HAL_GPIO_Init+0x300>)
 800317c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800317e:	4a5c      	ldr	r2, [pc, #368]	@ (80032f0 <HAL_GPIO_Init+0x300>)
 8003180:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003184:	6453      	str	r3, [r2, #68]	@ 0x44
 8003186:	4b5a      	ldr	r3, [pc, #360]	@ (80032f0 <HAL_GPIO_Init+0x300>)
 8003188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800318a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800318e:	60fb      	str	r3, [r7, #12]
 8003190:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003192:	4a58      	ldr	r2, [pc, #352]	@ (80032f4 <HAL_GPIO_Init+0x304>)
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	089b      	lsrs	r3, r3, #2
 8003198:	3302      	adds	r3, #2
 800319a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800319e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	220f      	movs	r2, #15
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	43db      	mvns	r3, r3
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	4013      	ands	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a4f      	ldr	r2, [pc, #316]	@ (80032f8 <HAL_GPIO_Init+0x308>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d025      	beq.n	800320a <HAL_GPIO_Init+0x21a>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a4e      	ldr	r2, [pc, #312]	@ (80032fc <HAL_GPIO_Init+0x30c>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d01f      	beq.n	8003206 <HAL_GPIO_Init+0x216>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a4d      	ldr	r2, [pc, #308]	@ (8003300 <HAL_GPIO_Init+0x310>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d019      	beq.n	8003202 <HAL_GPIO_Init+0x212>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a4c      	ldr	r2, [pc, #304]	@ (8003304 <HAL_GPIO_Init+0x314>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d013      	beq.n	80031fe <HAL_GPIO_Init+0x20e>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a4b      	ldr	r2, [pc, #300]	@ (8003308 <HAL_GPIO_Init+0x318>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d00d      	beq.n	80031fa <HAL_GPIO_Init+0x20a>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a4a      	ldr	r2, [pc, #296]	@ (800330c <HAL_GPIO_Init+0x31c>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d007      	beq.n	80031f6 <HAL_GPIO_Init+0x206>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a49      	ldr	r2, [pc, #292]	@ (8003310 <HAL_GPIO_Init+0x320>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d101      	bne.n	80031f2 <HAL_GPIO_Init+0x202>
 80031ee:	2306      	movs	r3, #6
 80031f0:	e00c      	b.n	800320c <HAL_GPIO_Init+0x21c>
 80031f2:	2307      	movs	r3, #7
 80031f4:	e00a      	b.n	800320c <HAL_GPIO_Init+0x21c>
 80031f6:	2305      	movs	r3, #5
 80031f8:	e008      	b.n	800320c <HAL_GPIO_Init+0x21c>
 80031fa:	2304      	movs	r3, #4
 80031fc:	e006      	b.n	800320c <HAL_GPIO_Init+0x21c>
 80031fe:	2303      	movs	r3, #3
 8003200:	e004      	b.n	800320c <HAL_GPIO_Init+0x21c>
 8003202:	2302      	movs	r3, #2
 8003204:	e002      	b.n	800320c <HAL_GPIO_Init+0x21c>
 8003206:	2301      	movs	r3, #1
 8003208:	e000      	b.n	800320c <HAL_GPIO_Init+0x21c>
 800320a:	2300      	movs	r3, #0
 800320c:	69fa      	ldr	r2, [r7, #28]
 800320e:	f002 0203 	and.w	r2, r2, #3
 8003212:	0092      	lsls	r2, r2, #2
 8003214:	4093      	lsls	r3, r2
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	4313      	orrs	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800321c:	4935      	ldr	r1, [pc, #212]	@ (80032f4 <HAL_GPIO_Init+0x304>)
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	089b      	lsrs	r3, r3, #2
 8003222:	3302      	adds	r3, #2
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800322a:	4b3a      	ldr	r3, [pc, #232]	@ (8003314 <HAL_GPIO_Init+0x324>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	43db      	mvns	r3, r3
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	4013      	ands	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	4313      	orrs	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800324e:	4a31      	ldr	r2, [pc, #196]	@ (8003314 <HAL_GPIO_Init+0x324>)
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003254:	4b2f      	ldr	r3, [pc, #188]	@ (8003314 <HAL_GPIO_Init+0x324>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	43db      	mvns	r3, r3
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	4013      	ands	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d003      	beq.n	8003278 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	4313      	orrs	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003278:	4a26      	ldr	r2, [pc, #152]	@ (8003314 <HAL_GPIO_Init+0x324>)
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800327e:	4b25      	ldr	r3, [pc, #148]	@ (8003314 <HAL_GPIO_Init+0x324>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	43db      	mvns	r3, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4013      	ands	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	4313      	orrs	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032a2:	4a1c      	ldr	r2, [pc, #112]	@ (8003314 <HAL_GPIO_Init+0x324>)
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003314 <HAL_GPIO_Init+0x324>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	43db      	mvns	r3, r3
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4013      	ands	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032cc:	4a11      	ldr	r2, [pc, #68]	@ (8003314 <HAL_GPIO_Init+0x324>)
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	3301      	adds	r3, #1
 80032d6:	61fb      	str	r3, [r7, #28]
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	2b0f      	cmp	r3, #15
 80032dc:	f67f ae96 	bls.w	800300c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032e0:	bf00      	nop
 80032e2:	bf00      	nop
 80032e4:	3724      	adds	r7, #36	@ 0x24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	40023800 	.word	0x40023800
 80032f4:	40013800 	.word	0x40013800
 80032f8:	40020000 	.word	0x40020000
 80032fc:	40020400 	.word	0x40020400
 8003300:	40020800 	.word	0x40020800
 8003304:	40020c00 	.word	0x40020c00
 8003308:	40021000 	.word	0x40021000
 800330c:	40021400 	.word	0x40021400
 8003310:	40021800 	.word	0x40021800
 8003314:	40013c00 	.word	0x40013c00

08003318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	460b      	mov	r3, r1
 8003322:	807b      	strh	r3, [r7, #2]
 8003324:	4613      	mov	r3, r2
 8003326:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003328:	787b      	ldrb	r3, [r7, #1]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800332e:	887a      	ldrh	r2, [r7, #2]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003334:	e003      	b.n	800333e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003336:	887b      	ldrh	r3, [r7, #2]
 8003338:	041a      	lsls	r2, r3, #16
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	619a      	str	r2, [r3, #24]
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
	...

0800334c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e12b      	b.n	80035b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d106      	bne.n	8003378 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7ff f9a8 	bl	80026c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2224      	movs	r2, #36	@ 0x24
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 0201 	bic.w	r2, r2, #1
 800338e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800339e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033b0:	f001 f8e2 	bl	8004578 <HAL_RCC_GetPCLK1Freq>
 80033b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	4a81      	ldr	r2, [pc, #516]	@ (80035c0 <HAL_I2C_Init+0x274>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d807      	bhi.n	80033d0 <HAL_I2C_Init+0x84>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4a80      	ldr	r2, [pc, #512]	@ (80035c4 <HAL_I2C_Init+0x278>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	bf94      	ite	ls
 80033c8:	2301      	movls	r3, #1
 80033ca:	2300      	movhi	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	e006      	b.n	80033de <HAL_I2C_Init+0x92>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4a7d      	ldr	r2, [pc, #500]	@ (80035c8 <HAL_I2C_Init+0x27c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	bf94      	ite	ls
 80033d8:	2301      	movls	r3, #1
 80033da:	2300      	movhi	r3, #0
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e0e7      	b.n	80035b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4a78      	ldr	r2, [pc, #480]	@ (80035cc <HAL_I2C_Init+0x280>)
 80033ea:	fba2 2303 	umull	r2, r3, r2, r3
 80033ee:	0c9b      	lsrs	r3, r3, #18
 80033f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	430a      	orrs	r2, r1
 8003404:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	4a6a      	ldr	r2, [pc, #424]	@ (80035c0 <HAL_I2C_Init+0x274>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d802      	bhi.n	8003420 <HAL_I2C_Init+0xd4>
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	3301      	adds	r3, #1
 800341e:	e009      	b.n	8003434 <HAL_I2C_Init+0xe8>
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003426:	fb02 f303 	mul.w	r3, r2, r3
 800342a:	4a69      	ldr	r2, [pc, #420]	@ (80035d0 <HAL_I2C_Init+0x284>)
 800342c:	fba2 2303 	umull	r2, r3, r2, r3
 8003430:	099b      	lsrs	r3, r3, #6
 8003432:	3301      	adds	r3, #1
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6812      	ldr	r2, [r2, #0]
 8003438:	430b      	orrs	r3, r1
 800343a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003446:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	495c      	ldr	r1, [pc, #368]	@ (80035c0 <HAL_I2C_Init+0x274>)
 8003450:	428b      	cmp	r3, r1
 8003452:	d819      	bhi.n	8003488 <HAL_I2C_Init+0x13c>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	1e59      	subs	r1, r3, #1
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003462:	1c59      	adds	r1, r3, #1
 8003464:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003468:	400b      	ands	r3, r1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00a      	beq.n	8003484 <HAL_I2C_Init+0x138>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	1e59      	subs	r1, r3, #1
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	fbb1 f3f3 	udiv	r3, r1, r3
 800347c:	3301      	adds	r3, #1
 800347e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003482:	e051      	b.n	8003528 <HAL_I2C_Init+0x1dc>
 8003484:	2304      	movs	r3, #4
 8003486:	e04f      	b.n	8003528 <HAL_I2C_Init+0x1dc>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d111      	bne.n	80034b4 <HAL_I2C_Init+0x168>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	1e58      	subs	r0, r3, #1
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6859      	ldr	r1, [r3, #4]
 8003498:	460b      	mov	r3, r1
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	440b      	add	r3, r1
 800349e:	fbb0 f3f3 	udiv	r3, r0, r3
 80034a2:	3301      	adds	r3, #1
 80034a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	bf0c      	ite	eq
 80034ac:	2301      	moveq	r3, #1
 80034ae:	2300      	movne	r3, #0
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	e012      	b.n	80034da <HAL_I2C_Init+0x18e>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	1e58      	subs	r0, r3, #1
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6859      	ldr	r1, [r3, #4]
 80034bc:	460b      	mov	r3, r1
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	0099      	lsls	r1, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ca:	3301      	adds	r3, #1
 80034cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	bf0c      	ite	eq
 80034d4:	2301      	moveq	r3, #1
 80034d6:	2300      	movne	r3, #0
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <HAL_I2C_Init+0x196>
 80034de:	2301      	movs	r3, #1
 80034e0:	e022      	b.n	8003528 <HAL_I2C_Init+0x1dc>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10e      	bne.n	8003508 <HAL_I2C_Init+0x1bc>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	1e58      	subs	r0, r3, #1
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6859      	ldr	r1, [r3, #4]
 80034f2:	460b      	mov	r3, r1
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	440b      	add	r3, r1
 80034f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80034fc:	3301      	adds	r3, #1
 80034fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003502:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003506:	e00f      	b.n	8003528 <HAL_I2C_Init+0x1dc>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	1e58      	subs	r0, r3, #1
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6859      	ldr	r1, [r3, #4]
 8003510:	460b      	mov	r3, r1
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	0099      	lsls	r1, r3, #2
 8003518:	440b      	add	r3, r1
 800351a:	fbb0 f3f3 	udiv	r3, r0, r3
 800351e:	3301      	adds	r3, #1
 8003520:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003524:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	6809      	ldr	r1, [r1, #0]
 800352c:	4313      	orrs	r3, r2
 800352e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	69da      	ldr	r2, [r3, #28]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	431a      	orrs	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	430a      	orrs	r2, r1
 800354a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003556:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6911      	ldr	r1, [r2, #16]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	68d2      	ldr	r2, [r2, #12]
 8003562:	4311      	orrs	r1, r2
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6812      	ldr	r2, [r2, #0]
 8003568:	430b      	orrs	r3, r1
 800356a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	695a      	ldr	r2, [r3, #20]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	431a      	orrs	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	430a      	orrs	r2, r1
 8003586:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f042 0201 	orr.w	r2, r2, #1
 8003596:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2220      	movs	r2, #32
 80035a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	000186a0 	.word	0x000186a0
 80035c4:	001e847f 	.word	0x001e847f
 80035c8:	003d08ff 	.word	0x003d08ff
 80035cc:	431bde83 	.word	0x431bde83
 80035d0:	10624dd3 	.word	0x10624dd3

080035d4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b088      	sub	sp, #32
 80035d8:	af02      	add	r7, sp, #8
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	4608      	mov	r0, r1
 80035de:	4611      	mov	r1, r2
 80035e0:	461a      	mov	r2, r3
 80035e2:	4603      	mov	r3, r0
 80035e4:	817b      	strh	r3, [r7, #10]
 80035e6:	460b      	mov	r3, r1
 80035e8:	813b      	strh	r3, [r7, #8]
 80035ea:	4613      	mov	r3, r2
 80035ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035ee:	f7ff faf3 	bl	8002bd8 <HAL_GetTick>
 80035f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b20      	cmp	r3, #32
 80035fe:	f040 80d9 	bne.w	80037b4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	2319      	movs	r3, #25
 8003608:	2201      	movs	r2, #1
 800360a:	496d      	ldr	r1, [pc, #436]	@ (80037c0 <HAL_I2C_Mem_Write+0x1ec>)
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f000 fc8b 	bl	8003f28 <I2C_WaitOnFlagUntilTimeout>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003618:	2302      	movs	r3, #2
 800361a:	e0cc      	b.n	80037b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003622:	2b01      	cmp	r3, #1
 8003624:	d101      	bne.n	800362a <HAL_I2C_Mem_Write+0x56>
 8003626:	2302      	movs	r3, #2
 8003628:	e0c5      	b.n	80037b6 <HAL_I2C_Mem_Write+0x1e2>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b01      	cmp	r3, #1
 800363e:	d007      	beq.n	8003650 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0201 	orr.w	r2, r2, #1
 800364e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800365e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2221      	movs	r2, #33	@ 0x21
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2240      	movs	r2, #64	@ 0x40
 800366c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6a3a      	ldr	r2, [r7, #32]
 800367a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003680:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003686:	b29a      	uxth	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4a4d      	ldr	r2, [pc, #308]	@ (80037c4 <HAL_I2C_Mem_Write+0x1f0>)
 8003690:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003692:	88f8      	ldrh	r0, [r7, #6]
 8003694:	893a      	ldrh	r2, [r7, #8]
 8003696:	8979      	ldrh	r1, [r7, #10]
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	9301      	str	r3, [sp, #4]
 800369c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	4603      	mov	r3, r0
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 fac2 	bl	8003c2c <I2C_RequestMemoryWrite>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d052      	beq.n	8003754 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e081      	b.n	80037b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f000 fd50 	bl	800415c <I2C_WaitOnTXEFlagUntilTimeout>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00d      	beq.n	80036de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c6:	2b04      	cmp	r3, #4
 80036c8:	d107      	bne.n	80036da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e06b      	b.n	80037b6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e2:	781a      	ldrb	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ee:	1c5a      	adds	r2, r3, #1
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036f8:	3b01      	subs	r3, #1
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003704:	b29b      	uxth	r3, r3
 8003706:	3b01      	subs	r3, #1
 8003708:	b29a      	uxth	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b04      	cmp	r3, #4
 800371a:	d11b      	bne.n	8003754 <HAL_I2C_Mem_Write+0x180>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003720:	2b00      	cmp	r3, #0
 8003722:	d017      	beq.n	8003754 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003728:	781a      	ldrb	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003734:	1c5a      	adds	r2, r3, #1
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800373e:	3b01      	subs	r3, #1
 8003740:	b29a      	uxth	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800374a:	b29b      	uxth	r3, r3
 800374c:	3b01      	subs	r3, #1
 800374e:	b29a      	uxth	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1aa      	bne.n	80036b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f000 fd43 	bl	80041ec <I2C_WaitOnBTFFlagUntilTimeout>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00d      	beq.n	8003788 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003770:	2b04      	cmp	r3, #4
 8003772:	d107      	bne.n	8003784 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003782:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e016      	b.n	80037b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003796:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2220      	movs	r2, #32
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80037b0:	2300      	movs	r3, #0
 80037b2:	e000      	b.n	80037b6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80037b4:	2302      	movs	r3, #2
  }
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3718      	adds	r7, #24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	00100002 	.word	0x00100002
 80037c4:	ffff0000 	.word	0xffff0000

080037c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08c      	sub	sp, #48	@ 0x30
 80037cc:	af02      	add	r7, sp, #8
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	4608      	mov	r0, r1
 80037d2:	4611      	mov	r1, r2
 80037d4:	461a      	mov	r2, r3
 80037d6:	4603      	mov	r3, r0
 80037d8:	817b      	strh	r3, [r7, #10]
 80037da:	460b      	mov	r3, r1
 80037dc:	813b      	strh	r3, [r7, #8]
 80037de:	4613      	mov	r3, r2
 80037e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037e2:	f7ff f9f9 	bl	8002bd8 <HAL_GetTick>
 80037e6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b20      	cmp	r3, #32
 80037f2:	f040 8214 	bne.w	8003c1e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	2319      	movs	r3, #25
 80037fc:	2201      	movs	r2, #1
 80037fe:	497b      	ldr	r1, [pc, #492]	@ (80039ec <HAL_I2C_Mem_Read+0x224>)
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 fb91 	bl	8003f28 <I2C_WaitOnFlagUntilTimeout>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800380c:	2302      	movs	r3, #2
 800380e:	e207      	b.n	8003c20 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003816:	2b01      	cmp	r3, #1
 8003818:	d101      	bne.n	800381e <HAL_I2C_Mem_Read+0x56>
 800381a:	2302      	movs	r3, #2
 800381c:	e200      	b.n	8003c20 <HAL_I2C_Mem_Read+0x458>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b01      	cmp	r3, #1
 8003832:	d007      	beq.n	8003844 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0201 	orr.w	r2, r2, #1
 8003842:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003852:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2222      	movs	r2, #34	@ 0x22
 8003858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2240      	movs	r2, #64	@ 0x40
 8003860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800386e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003874:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800387a:	b29a      	uxth	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4a5b      	ldr	r2, [pc, #364]	@ (80039f0 <HAL_I2C_Mem_Read+0x228>)
 8003884:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003886:	88f8      	ldrh	r0, [r7, #6]
 8003888:	893a      	ldrh	r2, [r7, #8]
 800388a:	8979      	ldrh	r1, [r7, #10]
 800388c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388e:	9301      	str	r3, [sp, #4]
 8003890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003892:	9300      	str	r3, [sp, #0]
 8003894:	4603      	mov	r3, r0
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 fa5e 	bl	8003d58 <I2C_RequestMemoryRead>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e1bc      	b.n	8003c20 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d113      	bne.n	80038d6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ae:	2300      	movs	r3, #0
 80038b0:	623b      	str	r3, [r7, #32]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	623b      	str	r3, [r7, #32]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	623b      	str	r3, [r7, #32]
 80038c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	e190      	b.n	8003bf8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d11b      	bne.n	8003916 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ee:	2300      	movs	r3, #0
 80038f0:	61fb      	str	r3, [r7, #28]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	61fb      	str	r3, [r7, #28]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	61fb      	str	r3, [r7, #28]
 8003902:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	e170      	b.n	8003bf8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800391a:	2b02      	cmp	r3, #2
 800391c:	d11b      	bne.n	8003956 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800392c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800393c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800393e:	2300      	movs	r3, #0
 8003940:	61bb      	str	r3, [r7, #24]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	61bb      	str	r3, [r7, #24]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	61bb      	str	r3, [r7, #24]
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	e150      	b.n	8003bf8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003956:	2300      	movs	r3, #0
 8003958:	617b      	str	r3, [r7, #20]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	617b      	str	r3, [r7, #20]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	617b      	str	r3, [r7, #20]
 800396a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800396c:	e144      	b.n	8003bf8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003972:	2b03      	cmp	r3, #3
 8003974:	f200 80f1 	bhi.w	8003b5a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800397c:	2b01      	cmp	r3, #1
 800397e:	d123      	bne.n	80039c8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003980:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003982:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f000 fc79 	bl	800427c <I2C_WaitOnRXNEFlagUntilTimeout>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e145      	b.n	8003c20 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	691a      	ldr	r2, [r3, #16]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800399e:	b2d2      	uxtb	r2, r2
 80039a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a6:	1c5a      	adds	r2, r3, #1
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039bc:	b29b      	uxth	r3, r3
 80039be:	3b01      	subs	r3, #1
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80039c6:	e117      	b.n	8003bf8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d14e      	bne.n	8003a6e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d2:	9300      	str	r3, [sp, #0]
 80039d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039d6:	2200      	movs	r2, #0
 80039d8:	4906      	ldr	r1, [pc, #24]	@ (80039f4 <HAL_I2C_Mem_Read+0x22c>)
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f000 faa4 	bl	8003f28 <I2C_WaitOnFlagUntilTimeout>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d008      	beq.n	80039f8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e11a      	b.n	8003c20 <HAL_I2C_Mem_Read+0x458>
 80039ea:	bf00      	nop
 80039ec:	00100002 	.word	0x00100002
 80039f0:	ffff0000 	.word	0xffff0000
 80039f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	691a      	ldr	r2, [r3, #16]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a12:	b2d2      	uxtb	r2, r2
 8003a14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1a:	1c5a      	adds	r2, r3, #1
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a24:	3b01      	subs	r3, #1
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	3b01      	subs	r3, #1
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	691a      	ldr	r2, [r3, #16]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a44:	b2d2      	uxtb	r2, r2
 8003a46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4c:	1c5a      	adds	r2, r3, #1
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a56:	3b01      	subs	r3, #1
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	3b01      	subs	r3, #1
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a6c:	e0c4      	b.n	8003bf8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a70:	9300      	str	r3, [sp, #0]
 8003a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a74:	2200      	movs	r2, #0
 8003a76:	496c      	ldr	r1, [pc, #432]	@ (8003c28 <HAL_I2C_Mem_Read+0x460>)
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f000 fa55 	bl	8003f28 <I2C_WaitOnFlagUntilTimeout>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e0cb      	b.n	8003c20 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	691a      	ldr	r2, [r3, #16]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa2:	b2d2      	uxtb	r2, r2
 8003aa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aaa:	1c5a      	adds	r2, r3, #1
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	4955      	ldr	r1, [pc, #340]	@ (8003c28 <HAL_I2C_Mem_Read+0x460>)
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 fa27 	bl	8003f28 <I2C_WaitOnFlagUntilTimeout>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e09d      	b.n	8003c20 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003af2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	691a      	ldr	r2, [r3, #16]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afe:	b2d2      	uxtb	r2, r2
 8003b00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b06:	1c5a      	adds	r2, r3, #1
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b10:	3b01      	subs	r3, #1
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	691a      	ldr	r2, [r3, #16]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b30:	b2d2      	uxtb	r2, r2
 8003b32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b38:	1c5a      	adds	r2, r3, #1
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b42:	3b01      	subs	r3, #1
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	3b01      	subs	r3, #1
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b58:	e04e      	b.n	8003bf8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b5c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f000 fb8c 	bl	800427c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e058      	b.n	8003c20 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	691a      	ldr	r2, [r3, #16]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b78:	b2d2      	uxtb	r2, r2
 8003b7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b80:	1c5a      	adds	r2, r3, #1
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	f003 0304 	and.w	r3, r3, #4
 8003baa:	2b04      	cmp	r3, #4
 8003bac:	d124      	bne.n	8003bf8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bb2:	2b03      	cmp	r3, #3
 8003bb4:	d107      	bne.n	8003bc6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bc4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	691a      	ldr	r2, [r3, #16]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd0:	b2d2      	uxtb	r2, r2
 8003bd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd8:	1c5a      	adds	r2, r3, #1
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003be2:	3b01      	subs	r3, #1
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f47f aeb6 	bne.w	800396e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2220      	movs	r2, #32
 8003c06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	e000      	b.n	8003c20 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003c1e:	2302      	movs	r3, #2
  }
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3728      	adds	r7, #40	@ 0x28
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	00010004 	.word	0x00010004

08003c2c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b088      	sub	sp, #32
 8003c30:	af02      	add	r7, sp, #8
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	4608      	mov	r0, r1
 8003c36:	4611      	mov	r1, r2
 8003c38:	461a      	mov	r2, r3
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	817b      	strh	r3, [r7, #10]
 8003c3e:	460b      	mov	r3, r1
 8003c40:	813b      	strh	r3, [r7, #8]
 8003c42:	4613      	mov	r3, r2
 8003c44:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c58:	9300      	str	r3, [sp, #0]
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 f960 	bl	8003f28 <I2C_WaitOnFlagUntilTimeout>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00d      	beq.n	8003c8a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c7c:	d103      	bne.n	8003c86 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c84:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e05f      	b.n	8003d4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c8a:	897b      	ldrh	r3, [r7, #10]
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	461a      	mov	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9c:	6a3a      	ldr	r2, [r7, #32]
 8003c9e:	492d      	ldr	r1, [pc, #180]	@ (8003d54 <I2C_RequestMemoryWrite+0x128>)
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 f9bb 	bl	800401c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e04c      	b.n	8003d4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	617b      	str	r3, [r7, #20]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	617b      	str	r3, [r7, #20]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	617b      	str	r3, [r7, #20]
 8003cc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cc8:	6a39      	ldr	r1, [r7, #32]
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 fa46 	bl	800415c <I2C_WaitOnTXEFlagUntilTimeout>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00d      	beq.n	8003cf2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	d107      	bne.n	8003cee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e02b      	b.n	8003d4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cf2:	88fb      	ldrh	r3, [r7, #6]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d105      	bne.n	8003d04 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cf8:	893b      	ldrh	r3, [r7, #8]
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	611a      	str	r2, [r3, #16]
 8003d02:	e021      	b.n	8003d48 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d04:	893b      	ldrh	r3, [r7, #8]
 8003d06:	0a1b      	lsrs	r3, r3, #8
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	b2da      	uxtb	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d14:	6a39      	ldr	r1, [r7, #32]
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 fa20 	bl	800415c <I2C_WaitOnTXEFlagUntilTimeout>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00d      	beq.n	8003d3e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d107      	bne.n	8003d3a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e005      	b.n	8003d4a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d3e:	893b      	ldrh	r3, [r7, #8]
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	00010002 	.word	0x00010002

08003d58 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b088      	sub	sp, #32
 8003d5c:	af02      	add	r7, sp, #8
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	4608      	mov	r0, r1
 8003d62:	4611      	mov	r1, r2
 8003d64:	461a      	mov	r2, r3
 8003d66:	4603      	mov	r3, r0
 8003d68:	817b      	strh	r3, [r7, #10]
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	813b      	strh	r3, [r7, #8]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d80:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	6a3b      	ldr	r3, [r7, #32]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 f8c2 	bl	8003f28 <I2C_WaitOnFlagUntilTimeout>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00d      	beq.n	8003dc6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003db4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003db8:	d103      	bne.n	8003dc2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dc0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e0aa      	b.n	8003f1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003dc6:	897b      	ldrh	r3, [r7, #10]
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	461a      	mov	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003dd4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd8:	6a3a      	ldr	r2, [r7, #32]
 8003dda:	4952      	ldr	r1, [pc, #328]	@ (8003f24 <I2C_RequestMemoryRead+0x1cc>)
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 f91d 	bl	800401c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e097      	b.n	8003f1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dec:	2300      	movs	r3, #0
 8003dee:	617b      	str	r3, [r7, #20]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	617b      	str	r3, [r7, #20]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	617b      	str	r3, [r7, #20]
 8003e00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e04:	6a39      	ldr	r1, [r7, #32]
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f000 f9a8 	bl	800415c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00d      	beq.n	8003e2e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e16:	2b04      	cmp	r3, #4
 8003e18:	d107      	bne.n	8003e2a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e076      	b.n	8003f1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e2e:	88fb      	ldrh	r3, [r7, #6]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d105      	bne.n	8003e40 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e34:	893b      	ldrh	r3, [r7, #8]
 8003e36:	b2da      	uxtb	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	611a      	str	r2, [r3, #16]
 8003e3e:	e021      	b.n	8003e84 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e40:	893b      	ldrh	r3, [r7, #8]
 8003e42:	0a1b      	lsrs	r3, r3, #8
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	b2da      	uxtb	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e50:	6a39      	ldr	r1, [r7, #32]
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f000 f982 	bl	800415c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00d      	beq.n	8003e7a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e62:	2b04      	cmp	r3, #4
 8003e64:	d107      	bne.n	8003e76 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e050      	b.n	8003f1c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e7a:	893b      	ldrh	r3, [r7, #8]
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e86:	6a39      	ldr	r1, [r7, #32]
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f000 f967 	bl	800415c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00d      	beq.n	8003eb0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e98:	2b04      	cmp	r3, #4
 8003e9a:	d107      	bne.n	8003eac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eaa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e035      	b.n	8003f1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ebe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	6a3b      	ldr	r3, [r7, #32]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f000 f82b 	bl	8003f28 <I2C_WaitOnFlagUntilTimeout>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00d      	beq.n	8003ef4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ee2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ee6:	d103      	bne.n	8003ef0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003eee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e013      	b.n	8003f1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ef4:	897b      	ldrh	r3, [r7, #10]
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	f043 0301 	orr.w	r3, r3, #1
 8003efc:	b2da      	uxtb	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f06:	6a3a      	ldr	r2, [r7, #32]
 8003f08:	4906      	ldr	r1, [pc, #24]	@ (8003f24 <I2C_RequestMemoryRead+0x1cc>)
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f000 f886 	bl	800401c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e000      	b.n	8003f1c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3718      	adds	r7, #24
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	00010002 	.word	0x00010002

08003f28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	603b      	str	r3, [r7, #0]
 8003f34:	4613      	mov	r3, r2
 8003f36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f38:	e048      	b.n	8003fcc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f40:	d044      	beq.n	8003fcc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f42:	f7fe fe49 	bl	8002bd8 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d302      	bcc.n	8003f58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d139      	bne.n	8003fcc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	0c1b      	lsrs	r3, r3, #16
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d10d      	bne.n	8003f7e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	43da      	mvns	r2, r3
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	bf0c      	ite	eq
 8003f74:	2301      	moveq	r3, #1
 8003f76:	2300      	movne	r3, #0
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	e00c      	b.n	8003f98 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	43da      	mvns	r2, r3
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	bf0c      	ite	eq
 8003f90:	2301      	moveq	r3, #1
 8003f92:	2300      	movne	r3, #0
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	461a      	mov	r2, r3
 8003f98:	79fb      	ldrb	r3, [r7, #7]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d116      	bne.n	8003fcc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb8:	f043 0220 	orr.w	r2, r3, #32
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e023      	b.n	8004014 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	0c1b      	lsrs	r3, r3, #16
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d10d      	bne.n	8003ff2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	43da      	mvns	r2, r3
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	bf0c      	ite	eq
 8003fe8:	2301      	moveq	r3, #1
 8003fea:	2300      	movne	r3, #0
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	461a      	mov	r2, r3
 8003ff0:	e00c      	b.n	800400c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	43da      	mvns	r2, r3
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	2b00      	cmp	r3, #0
 8004002:	bf0c      	ite	eq
 8004004:	2301      	moveq	r3, #1
 8004006:	2300      	movne	r3, #0
 8004008:	b2db      	uxtb	r3, r3
 800400a:	461a      	mov	r2, r3
 800400c:	79fb      	ldrb	r3, [r7, #7]
 800400e:	429a      	cmp	r2, r3
 8004010:	d093      	beq.n	8003f3a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
 8004028:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800402a:	e071      	b.n	8004110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004036:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800403a:	d123      	bne.n	8004084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800404a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004054:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2220      	movs	r2, #32
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004070:	f043 0204 	orr.w	r2, r3, #4
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e067      	b.n	8004154 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800408a:	d041      	beq.n	8004110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800408c:	f7fe fda4 	bl	8002bd8 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	429a      	cmp	r2, r3
 800409a:	d302      	bcc.n	80040a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d136      	bne.n	8004110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	0c1b      	lsrs	r3, r3, #16
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d10c      	bne.n	80040c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	43da      	mvns	r2, r3
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	4013      	ands	r3, r2
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	bf14      	ite	ne
 80040be:	2301      	movne	r3, #1
 80040c0:	2300      	moveq	r3, #0
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	e00b      	b.n	80040de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	43da      	mvns	r2, r3
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	4013      	ands	r3, r2
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	bf14      	ite	ne
 80040d8:	2301      	movne	r3, #1
 80040da:	2300      	moveq	r3, #0
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d016      	beq.n	8004110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2220      	movs	r2, #32
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fc:	f043 0220 	orr.w	r2, r3, #32
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e021      	b.n	8004154 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	0c1b      	lsrs	r3, r3, #16
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b01      	cmp	r3, #1
 8004118:	d10c      	bne.n	8004134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	43da      	mvns	r2, r3
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	4013      	ands	r3, r2
 8004126:	b29b      	uxth	r3, r3
 8004128:	2b00      	cmp	r3, #0
 800412a:	bf14      	ite	ne
 800412c:	2301      	movne	r3, #1
 800412e:	2300      	moveq	r3, #0
 8004130:	b2db      	uxtb	r3, r3
 8004132:	e00b      	b.n	800414c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	43da      	mvns	r2, r3
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	4013      	ands	r3, r2
 8004140:	b29b      	uxth	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	bf14      	ite	ne
 8004146:	2301      	movne	r3, #1
 8004148:	2300      	moveq	r3, #0
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b00      	cmp	r3, #0
 800414e:	f47f af6d 	bne.w	800402c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004168:	e034      	b.n	80041d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f000 f8e3 	bl	8004336 <I2C_IsAcknowledgeFailed>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e034      	b.n	80041e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004180:	d028      	beq.n	80041d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004182:	f7fe fd29 	bl	8002bd8 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	429a      	cmp	r2, r3
 8004190:	d302      	bcc.n	8004198 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d11d      	bne.n	80041d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041a2:	2b80      	cmp	r3, #128	@ 0x80
 80041a4:	d016      	beq.n	80041d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2220      	movs	r2, #32
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c0:	f043 0220 	orr.w	r2, r3, #32
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e007      	b.n	80041e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041de:	2b80      	cmp	r3, #128	@ 0x80
 80041e0:	d1c3      	bne.n	800416a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041f8:	e034      	b.n	8004264 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f000 f89b 	bl	8004336 <I2C_IsAcknowledgeFailed>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e034      	b.n	8004274 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004210:	d028      	beq.n	8004264 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004212:	f7fe fce1 	bl	8002bd8 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	429a      	cmp	r2, r3
 8004220:	d302      	bcc.n	8004228 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d11d      	bne.n	8004264 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	f003 0304 	and.w	r3, r3, #4
 8004232:	2b04      	cmp	r3, #4
 8004234:	d016      	beq.n	8004264 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2220      	movs	r2, #32
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004250:	f043 0220 	orr.w	r2, r3, #32
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e007      	b.n	8004274 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	f003 0304 	and.w	r3, r3, #4
 800426e:	2b04      	cmp	r3, #4
 8004270:	d1c3      	bne.n	80041fa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004288:	e049      	b.n	800431e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	f003 0310 	and.w	r3, r3, #16
 8004294:	2b10      	cmp	r3, #16
 8004296:	d119      	bne.n	80042cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f06f 0210 	mvn.w	r2, #16
 80042a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2220      	movs	r2, #32
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e030      	b.n	800432e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042cc:	f7fe fc84 	bl	8002bd8 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d302      	bcc.n	80042e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d11d      	bne.n	800431e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042ec:	2b40      	cmp	r3, #64	@ 0x40
 80042ee:	d016      	beq.n	800431e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2220      	movs	r2, #32
 80042fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430a:	f043 0220 	orr.w	r2, r3, #32
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e007      	b.n	800432e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004328:	2b40      	cmp	r3, #64	@ 0x40
 800432a:	d1ae      	bne.n	800428a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004336:	b480      	push	{r7}
 8004338:	b083      	sub	sp, #12
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004348:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800434c:	d11b      	bne.n	8004386 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004356:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2220      	movs	r2, #32
 8004362:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004372:	f043 0204 	orr.w	r2, r3, #4
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e000      	b.n	8004388 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e0cc      	b.n	8004542 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043a8:	4b68      	ldr	r3, [pc, #416]	@ (800454c <HAL_RCC_ClockConfig+0x1b8>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 030f 	and.w	r3, r3, #15
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d90c      	bls.n	80043d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043b6:	4b65      	ldr	r3, [pc, #404]	@ (800454c <HAL_RCC_ClockConfig+0x1b8>)
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043be:	4b63      	ldr	r3, [pc, #396]	@ (800454c <HAL_RCC_ClockConfig+0x1b8>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 030f 	and.w	r3, r3, #15
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d001      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e0b8      	b.n	8004542 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d020      	beq.n	800441e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0304 	and.w	r3, r3, #4
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d005      	beq.n	80043f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043e8:	4b59      	ldr	r3, [pc, #356]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	4a58      	ldr	r2, [pc, #352]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 80043ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80043f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0308 	and.w	r3, r3, #8
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d005      	beq.n	800440c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004400:	4b53      	ldr	r3, [pc, #332]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	4a52      	ldr	r2, [pc, #328]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004406:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800440a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800440c:	4b50      	ldr	r3, [pc, #320]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	494d      	ldr	r1, [pc, #308]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 800441a:	4313      	orrs	r3, r2
 800441c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d044      	beq.n	80044b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d107      	bne.n	8004442 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004432:	4b47      	ldr	r3, [pc, #284]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d119      	bne.n	8004472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e07f      	b.n	8004542 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	2b02      	cmp	r3, #2
 8004448:	d003      	beq.n	8004452 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800444e:	2b03      	cmp	r3, #3
 8004450:	d107      	bne.n	8004462 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004452:	4b3f      	ldr	r3, [pc, #252]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d109      	bne.n	8004472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e06f      	b.n	8004542 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004462:	4b3b      	ldr	r3, [pc, #236]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e067      	b.n	8004542 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004472:	4b37      	ldr	r3, [pc, #220]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f023 0203 	bic.w	r2, r3, #3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	4934      	ldr	r1, [pc, #208]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004480:	4313      	orrs	r3, r2
 8004482:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004484:	f7fe fba8 	bl	8002bd8 <HAL_GetTick>
 8004488:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800448a:	e00a      	b.n	80044a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800448c:	f7fe fba4 	bl	8002bd8 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	f241 3288 	movw	r2, #5000	@ 0x1388
 800449a:	4293      	cmp	r3, r2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e04f      	b.n	8004542 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044a2:	4b2b      	ldr	r3, [pc, #172]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f003 020c 	and.w	r2, r3, #12
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d1eb      	bne.n	800448c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044b4:	4b25      	ldr	r3, [pc, #148]	@ (800454c <HAL_RCC_ClockConfig+0x1b8>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 030f 	and.w	r3, r3, #15
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d20c      	bcs.n	80044dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044c2:	4b22      	ldr	r3, [pc, #136]	@ (800454c <HAL_RCC_ClockConfig+0x1b8>)
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	b2d2      	uxtb	r2, r2
 80044c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ca:	4b20      	ldr	r3, [pc, #128]	@ (800454c <HAL_RCC_ClockConfig+0x1b8>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d001      	beq.n	80044dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e032      	b.n	8004542 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d008      	beq.n	80044fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044e8:	4b19      	ldr	r3, [pc, #100]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	4916      	ldr	r1, [pc, #88]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0308 	and.w	r3, r3, #8
 8004502:	2b00      	cmp	r3, #0
 8004504:	d009      	beq.n	800451a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004506:	4b12      	ldr	r3, [pc, #72]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	490e      	ldr	r1, [pc, #56]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004516:	4313      	orrs	r3, r2
 8004518:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800451a:	f000 f855 	bl	80045c8 <HAL_RCC_GetSysClockFreq>
 800451e:	4602      	mov	r2, r0
 8004520:	4b0b      	ldr	r3, [pc, #44]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	091b      	lsrs	r3, r3, #4
 8004526:	f003 030f 	and.w	r3, r3, #15
 800452a:	490a      	ldr	r1, [pc, #40]	@ (8004554 <HAL_RCC_ClockConfig+0x1c0>)
 800452c:	5ccb      	ldrb	r3, [r1, r3]
 800452e:	fa22 f303 	lsr.w	r3, r2, r3
 8004532:	4a09      	ldr	r2, [pc, #36]	@ (8004558 <HAL_RCC_ClockConfig+0x1c4>)
 8004534:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004536:	4b09      	ldr	r3, [pc, #36]	@ (800455c <HAL_RCC_ClockConfig+0x1c8>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4618      	mov	r0, r3
 800453c:	f7fe fb08 	bl	8002b50 <HAL_InitTick>

  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	40023c00 	.word	0x40023c00
 8004550:	40023800 	.word	0x40023800
 8004554:	080085b4 	.word	0x080085b4
 8004558:	20000030 	.word	0x20000030
 800455c:	20000034 	.word	0x20000034

08004560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004564:	4b03      	ldr	r3, [pc, #12]	@ (8004574 <HAL_RCC_GetHCLKFreq+0x14>)
 8004566:	681b      	ldr	r3, [r3, #0]
}
 8004568:	4618      	mov	r0, r3
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	20000030 	.word	0x20000030

08004578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800457c:	f7ff fff0 	bl	8004560 <HAL_RCC_GetHCLKFreq>
 8004580:	4602      	mov	r2, r0
 8004582:	4b05      	ldr	r3, [pc, #20]	@ (8004598 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	0a9b      	lsrs	r3, r3, #10
 8004588:	f003 0307 	and.w	r3, r3, #7
 800458c:	4903      	ldr	r1, [pc, #12]	@ (800459c <HAL_RCC_GetPCLK1Freq+0x24>)
 800458e:	5ccb      	ldrb	r3, [r1, r3]
 8004590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004594:	4618      	mov	r0, r3
 8004596:	bd80      	pop	{r7, pc}
 8004598:	40023800 	.word	0x40023800
 800459c:	080085c4 	.word	0x080085c4

080045a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045a4:	f7ff ffdc 	bl	8004560 <HAL_RCC_GetHCLKFreq>
 80045a8:	4602      	mov	r2, r0
 80045aa:	4b05      	ldr	r3, [pc, #20]	@ (80045c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	0b5b      	lsrs	r3, r3, #13
 80045b0:	f003 0307 	and.w	r3, r3, #7
 80045b4:	4903      	ldr	r1, [pc, #12]	@ (80045c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045b6:	5ccb      	ldrb	r3, [r1, r3]
 80045b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045bc:	4618      	mov	r0, r3
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40023800 	.word	0x40023800
 80045c4:	080085c4 	.word	0x080085c4

080045c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045cc:	b0a6      	sub	sp, #152	@ 0x98
 80045ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80045dc:	2300      	movs	r3, #0
 80045de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80045e2:	2300      	movs	r3, #0
 80045e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80045e8:	2300      	movs	r3, #0
 80045ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045ee:	4bc8      	ldr	r3, [pc, #800]	@ (8004910 <HAL_RCC_GetSysClockFreq+0x348>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 030c 	and.w	r3, r3, #12
 80045f6:	2b0c      	cmp	r3, #12
 80045f8:	f200 817e 	bhi.w	80048f8 <HAL_RCC_GetSysClockFreq+0x330>
 80045fc:	a201      	add	r2, pc, #4	@ (adr r2, 8004604 <HAL_RCC_GetSysClockFreq+0x3c>)
 80045fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004602:	bf00      	nop
 8004604:	08004639 	.word	0x08004639
 8004608:	080048f9 	.word	0x080048f9
 800460c:	080048f9 	.word	0x080048f9
 8004610:	080048f9 	.word	0x080048f9
 8004614:	08004641 	.word	0x08004641
 8004618:	080048f9 	.word	0x080048f9
 800461c:	080048f9 	.word	0x080048f9
 8004620:	080048f9 	.word	0x080048f9
 8004624:	08004649 	.word	0x08004649
 8004628:	080048f9 	.word	0x080048f9
 800462c:	080048f9 	.word	0x080048f9
 8004630:	080048f9 	.word	0x080048f9
 8004634:	080047b3 	.word	0x080047b3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004638:	4bb6      	ldr	r3, [pc, #728]	@ (8004914 <HAL_RCC_GetSysClockFreq+0x34c>)
 800463a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800463e:	e15f      	b.n	8004900 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004640:	4bb5      	ldr	r3, [pc, #724]	@ (8004918 <HAL_RCC_GetSysClockFreq+0x350>)
 8004642:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004646:	e15b      	b.n	8004900 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004648:	4bb1      	ldr	r3, [pc, #708]	@ (8004910 <HAL_RCC_GetSysClockFreq+0x348>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004650:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004654:	4bae      	ldr	r3, [pc, #696]	@ (8004910 <HAL_RCC_GetSysClockFreq+0x348>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d031      	beq.n	80046c4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004660:	4bab      	ldr	r3, [pc, #684]	@ (8004910 <HAL_RCC_GetSysClockFreq+0x348>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	099b      	lsrs	r3, r3, #6
 8004666:	2200      	movs	r2, #0
 8004668:	66bb      	str	r3, [r7, #104]	@ 0x68
 800466a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800466c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800466e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004672:	663b      	str	r3, [r7, #96]	@ 0x60
 8004674:	2300      	movs	r3, #0
 8004676:	667b      	str	r3, [r7, #100]	@ 0x64
 8004678:	4ba7      	ldr	r3, [pc, #668]	@ (8004918 <HAL_RCC_GetSysClockFreq+0x350>)
 800467a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800467e:	462a      	mov	r2, r5
 8004680:	fb03 f202 	mul.w	r2, r3, r2
 8004684:	2300      	movs	r3, #0
 8004686:	4621      	mov	r1, r4
 8004688:	fb01 f303 	mul.w	r3, r1, r3
 800468c:	4413      	add	r3, r2
 800468e:	4aa2      	ldr	r2, [pc, #648]	@ (8004918 <HAL_RCC_GetSysClockFreq+0x350>)
 8004690:	4621      	mov	r1, r4
 8004692:	fba1 1202 	umull	r1, r2, r1, r2
 8004696:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004698:	460a      	mov	r2, r1
 800469a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800469c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800469e:	4413      	add	r3, r2
 80046a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80046a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046a6:	2200      	movs	r2, #0
 80046a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046aa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80046ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80046b0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80046b4:	f7fc fae0 	bl	8000c78 <__aeabi_uldivmod>
 80046b8:	4602      	mov	r2, r0
 80046ba:	460b      	mov	r3, r1
 80046bc:	4613      	mov	r3, r2
 80046be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80046c2:	e064      	b.n	800478e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046c4:	4b92      	ldr	r3, [pc, #584]	@ (8004910 <HAL_RCC_GetSysClockFreq+0x348>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	099b      	lsrs	r3, r3, #6
 80046ca:	2200      	movs	r2, #0
 80046cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80046ce:	657a      	str	r2, [r7, #84]	@ 0x54
 80046d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046d8:	2300      	movs	r3, #0
 80046da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046dc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80046e0:	4622      	mov	r2, r4
 80046e2:	462b      	mov	r3, r5
 80046e4:	f04f 0000 	mov.w	r0, #0
 80046e8:	f04f 0100 	mov.w	r1, #0
 80046ec:	0159      	lsls	r1, r3, #5
 80046ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046f2:	0150      	lsls	r0, r2, #5
 80046f4:	4602      	mov	r2, r0
 80046f6:	460b      	mov	r3, r1
 80046f8:	4621      	mov	r1, r4
 80046fa:	1a51      	subs	r1, r2, r1
 80046fc:	6139      	str	r1, [r7, #16]
 80046fe:	4629      	mov	r1, r5
 8004700:	eb63 0301 	sbc.w	r3, r3, r1
 8004704:	617b      	str	r3, [r7, #20]
 8004706:	f04f 0200 	mov.w	r2, #0
 800470a:	f04f 0300 	mov.w	r3, #0
 800470e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004712:	4659      	mov	r1, fp
 8004714:	018b      	lsls	r3, r1, #6
 8004716:	4651      	mov	r1, sl
 8004718:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800471c:	4651      	mov	r1, sl
 800471e:	018a      	lsls	r2, r1, #6
 8004720:	4651      	mov	r1, sl
 8004722:	ebb2 0801 	subs.w	r8, r2, r1
 8004726:	4659      	mov	r1, fp
 8004728:	eb63 0901 	sbc.w	r9, r3, r1
 800472c:	f04f 0200 	mov.w	r2, #0
 8004730:	f04f 0300 	mov.w	r3, #0
 8004734:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004738:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800473c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004740:	4690      	mov	r8, r2
 8004742:	4699      	mov	r9, r3
 8004744:	4623      	mov	r3, r4
 8004746:	eb18 0303 	adds.w	r3, r8, r3
 800474a:	60bb      	str	r3, [r7, #8]
 800474c:	462b      	mov	r3, r5
 800474e:	eb49 0303 	adc.w	r3, r9, r3
 8004752:	60fb      	str	r3, [r7, #12]
 8004754:	f04f 0200 	mov.w	r2, #0
 8004758:	f04f 0300 	mov.w	r3, #0
 800475c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004760:	4629      	mov	r1, r5
 8004762:	028b      	lsls	r3, r1, #10
 8004764:	4621      	mov	r1, r4
 8004766:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800476a:	4621      	mov	r1, r4
 800476c:	028a      	lsls	r2, r1, #10
 800476e:	4610      	mov	r0, r2
 8004770:	4619      	mov	r1, r3
 8004772:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004776:	2200      	movs	r2, #0
 8004778:	643b      	str	r3, [r7, #64]	@ 0x40
 800477a:	647a      	str	r2, [r7, #68]	@ 0x44
 800477c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004780:	f7fc fa7a 	bl	8000c78 <__aeabi_uldivmod>
 8004784:	4602      	mov	r2, r0
 8004786:	460b      	mov	r3, r1
 8004788:	4613      	mov	r3, r2
 800478a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800478e:	4b60      	ldr	r3, [pc, #384]	@ (8004910 <HAL_RCC_GetSysClockFreq+0x348>)
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	0c1b      	lsrs	r3, r3, #16
 8004794:	f003 0303 	and.w	r3, r3, #3
 8004798:	3301      	adds	r3, #1
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80047a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80047a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80047a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80047b0:	e0a6      	b.n	8004900 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047b2:	4b57      	ldr	r3, [pc, #348]	@ (8004910 <HAL_RCC_GetSysClockFreq+0x348>)
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047be:	4b54      	ldr	r3, [pc, #336]	@ (8004910 <HAL_RCC_GetSysClockFreq+0x348>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d02a      	beq.n	8004820 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047ca:	4b51      	ldr	r3, [pc, #324]	@ (8004910 <HAL_RCC_GetSysClockFreq+0x348>)
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	099b      	lsrs	r3, r3, #6
 80047d0:	2200      	movs	r2, #0
 80047d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80047d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80047dc:	2100      	movs	r1, #0
 80047de:	4b4e      	ldr	r3, [pc, #312]	@ (8004918 <HAL_RCC_GetSysClockFreq+0x350>)
 80047e0:	fb03 f201 	mul.w	r2, r3, r1
 80047e4:	2300      	movs	r3, #0
 80047e6:	fb00 f303 	mul.w	r3, r0, r3
 80047ea:	4413      	add	r3, r2
 80047ec:	4a4a      	ldr	r2, [pc, #296]	@ (8004918 <HAL_RCC_GetSysClockFreq+0x350>)
 80047ee:	fba0 1202 	umull	r1, r2, r0, r2
 80047f2:	677a      	str	r2, [r7, #116]	@ 0x74
 80047f4:	460a      	mov	r2, r1
 80047f6:	673a      	str	r2, [r7, #112]	@ 0x70
 80047f8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80047fa:	4413      	add	r3, r2
 80047fc:	677b      	str	r3, [r7, #116]	@ 0x74
 80047fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004802:	2200      	movs	r2, #0
 8004804:	633b      	str	r3, [r7, #48]	@ 0x30
 8004806:	637a      	str	r2, [r7, #52]	@ 0x34
 8004808:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800480c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8004810:	f7fc fa32 	bl	8000c78 <__aeabi_uldivmod>
 8004814:	4602      	mov	r2, r0
 8004816:	460b      	mov	r3, r1
 8004818:	4613      	mov	r3, r2
 800481a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800481e:	e05b      	b.n	80048d8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004820:	4b3b      	ldr	r3, [pc, #236]	@ (8004910 <HAL_RCC_GetSysClockFreq+0x348>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	099b      	lsrs	r3, r3, #6
 8004826:	2200      	movs	r2, #0
 8004828:	62bb      	str	r3, [r7, #40]	@ 0x28
 800482a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800482c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800482e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004832:	623b      	str	r3, [r7, #32]
 8004834:	2300      	movs	r3, #0
 8004836:	627b      	str	r3, [r7, #36]	@ 0x24
 8004838:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800483c:	4642      	mov	r2, r8
 800483e:	464b      	mov	r3, r9
 8004840:	f04f 0000 	mov.w	r0, #0
 8004844:	f04f 0100 	mov.w	r1, #0
 8004848:	0159      	lsls	r1, r3, #5
 800484a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800484e:	0150      	lsls	r0, r2, #5
 8004850:	4602      	mov	r2, r0
 8004852:	460b      	mov	r3, r1
 8004854:	4641      	mov	r1, r8
 8004856:	ebb2 0a01 	subs.w	sl, r2, r1
 800485a:	4649      	mov	r1, r9
 800485c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004860:	f04f 0200 	mov.w	r2, #0
 8004864:	f04f 0300 	mov.w	r3, #0
 8004868:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800486c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004870:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004874:	ebb2 040a 	subs.w	r4, r2, sl
 8004878:	eb63 050b 	sbc.w	r5, r3, fp
 800487c:	f04f 0200 	mov.w	r2, #0
 8004880:	f04f 0300 	mov.w	r3, #0
 8004884:	00eb      	lsls	r3, r5, #3
 8004886:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800488a:	00e2      	lsls	r2, r4, #3
 800488c:	4614      	mov	r4, r2
 800488e:	461d      	mov	r5, r3
 8004890:	4643      	mov	r3, r8
 8004892:	18e3      	adds	r3, r4, r3
 8004894:	603b      	str	r3, [r7, #0]
 8004896:	464b      	mov	r3, r9
 8004898:	eb45 0303 	adc.w	r3, r5, r3
 800489c:	607b      	str	r3, [r7, #4]
 800489e:	f04f 0200 	mov.w	r2, #0
 80048a2:	f04f 0300 	mov.w	r3, #0
 80048a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048aa:	4629      	mov	r1, r5
 80048ac:	028b      	lsls	r3, r1, #10
 80048ae:	4621      	mov	r1, r4
 80048b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048b4:	4621      	mov	r1, r4
 80048b6:	028a      	lsls	r2, r1, #10
 80048b8:	4610      	mov	r0, r2
 80048ba:	4619      	mov	r1, r3
 80048bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048c0:	2200      	movs	r2, #0
 80048c2:	61bb      	str	r3, [r7, #24]
 80048c4:	61fa      	str	r2, [r7, #28]
 80048c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048ca:	f7fc f9d5 	bl	8000c78 <__aeabi_uldivmod>
 80048ce:	4602      	mov	r2, r0
 80048d0:	460b      	mov	r3, r1
 80048d2:	4613      	mov	r3, r2
 80048d4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80048d8:	4b0d      	ldr	r3, [pc, #52]	@ (8004910 <HAL_RCC_GetSysClockFreq+0x348>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	0f1b      	lsrs	r3, r3, #28
 80048de:	f003 0307 	and.w	r3, r3, #7
 80048e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80048e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80048ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80048ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80048f6:	e003      	b.n	8004900 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048f8:	4b06      	ldr	r3, [pc, #24]	@ (8004914 <HAL_RCC_GetSysClockFreq+0x34c>)
 80048fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80048fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004900:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8004904:	4618      	mov	r0, r3
 8004906:	3798      	adds	r7, #152	@ 0x98
 8004908:	46bd      	mov	sp, r7
 800490a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800490e:	bf00      	nop
 8004910:	40023800 	.word	0x40023800
 8004914:	00f42400 	.word	0x00f42400
 8004918:	017d7840 	.word	0x017d7840

0800491c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e28d      	b.n	8004e4a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	f000 8083 	beq.w	8004a42 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800493c:	4b94      	ldr	r3, [pc, #592]	@ (8004b90 <HAL_RCC_OscConfig+0x274>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f003 030c 	and.w	r3, r3, #12
 8004944:	2b04      	cmp	r3, #4
 8004946:	d019      	beq.n	800497c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004948:	4b91      	ldr	r3, [pc, #580]	@ (8004b90 <HAL_RCC_OscConfig+0x274>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f003 030c 	and.w	r3, r3, #12
        || \
 8004950:	2b08      	cmp	r3, #8
 8004952:	d106      	bne.n	8004962 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004954:	4b8e      	ldr	r3, [pc, #568]	@ (8004b90 <HAL_RCC_OscConfig+0x274>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800495c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004960:	d00c      	beq.n	800497c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004962:	4b8b      	ldr	r3, [pc, #556]	@ (8004b90 <HAL_RCC_OscConfig+0x274>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800496a:	2b0c      	cmp	r3, #12
 800496c:	d112      	bne.n	8004994 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800496e:	4b88      	ldr	r3, [pc, #544]	@ (8004b90 <HAL_RCC_OscConfig+0x274>)
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004976:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800497a:	d10b      	bne.n	8004994 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800497c:	4b84      	ldr	r3, [pc, #528]	@ (8004b90 <HAL_RCC_OscConfig+0x274>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d05b      	beq.n	8004a40 <HAL_RCC_OscConfig+0x124>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d157      	bne.n	8004a40 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e25a      	b.n	8004e4a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800499c:	d106      	bne.n	80049ac <HAL_RCC_OscConfig+0x90>
 800499e:	4b7c      	ldr	r3, [pc, #496]	@ (8004b90 <HAL_RCC_OscConfig+0x274>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a7b      	ldr	r2, [pc, #492]	@ (8004b90 <HAL_RCC_OscConfig+0x274>)
 80049a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049a8:	6013      	str	r3, [r2, #0]
 80049aa:	e01d      	b.n	80049e8 <HAL_RCC_OscConfig+0xcc>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049b4:	d10c      	bne.n	80049d0 <HAL_RCC_OscConfig+0xb4>
 80049b6:	4b76      	ldr	r3, [pc, #472]	@ (8004b90 <HAL_RCC_OscConfig+0x274>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a75      	ldr	r2, [pc, #468]	@ (8004b90 <HAL_RCC_OscConfig+0x274>)
 80049bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049c0:	6013      	str	r3, [r2, #0]
 80049c2:	4b73      	ldr	r3, [pc, #460]	@ (8004b90 <HAL_RCC_OscConfig+0x274>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a72      	ldr	r2, [pc, #456]	@ (8004b90 <HAL_RCC_OscConfig+0x274>)
 80049c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049cc:	6013      	str	r3, [r2, #0]
 80049ce:	e00b      	b.n	80049e8 <HAL_RCC_OscConfig+0xcc>
 80049d0:	4b6f      	ldr	r3, [pc, #444]	@ (8004b90 <HAL_RCC_OscConfig+0x274>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a6e      	ldr	r2, [pc, #440]	@ (8004b90 <HAL_RCC_OscConfig+0x274>)
 80049d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049da:	6013      	str	r3, [r2, #0]
 80049dc:	4b6c      	ldr	r3, [pc, #432]	@ (8004b90 <HAL_RCC_OscConfig+0x274>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a6b      	ldr	r2, [pc, #428]	@ (8004b90 <HAL_RCC_OscConfig+0x274>)
 80049e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d013      	beq.n	8004a18 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f0:	f7fe f8f2 	bl	8002bd8 <HAL_GetTick>
 80049f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049f6:	e008      	b.n	8004a0a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049f8:	f7fe f8ee 	bl	8002bd8 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b64      	cmp	r3, #100	@ 0x64
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e21f      	b.n	8004e4a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a0a:	4b61      	ldr	r3, [pc, #388]	@ (8004b90 <HAL_RCC_OscConfig+0x274>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d0f0      	beq.n	80049f8 <HAL_RCC_OscConfig+0xdc>
 8004a16:	e014      	b.n	8004a42 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a18:	f7fe f8de 	bl	8002bd8 <HAL_GetTick>
 8004a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a1e:	e008      	b.n	8004a32 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a20:	f7fe f8da 	bl	8002bd8 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b64      	cmp	r3, #100	@ 0x64
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e20b      	b.n	8004e4a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a32:	4b57      	ldr	r3, [pc, #348]	@ (8004b90 <HAL_RCC_OscConfig+0x274>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1f0      	bne.n	8004a20 <HAL_RCC_OscConfig+0x104>
 8004a3e:	e000      	b.n	8004a42 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d06f      	beq.n	8004b2e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004a4e:	4b50      	ldr	r3, [pc, #320]	@ (8004b90 <HAL_RCC_OscConfig+0x274>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f003 030c 	and.w	r3, r3, #12
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d017      	beq.n	8004a8a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004a5a:	4b4d      	ldr	r3, [pc, #308]	@ (8004b90 <HAL_RCC_OscConfig+0x274>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f003 030c 	and.w	r3, r3, #12
        || \
 8004a62:	2b08      	cmp	r3, #8
 8004a64:	d105      	bne.n	8004a72 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004a66:	4b4a      	ldr	r3, [pc, #296]	@ (8004b90 <HAL_RCC_OscConfig+0x274>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00b      	beq.n	8004a8a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a72:	4b47      	ldr	r3, [pc, #284]	@ (8004b90 <HAL_RCC_OscConfig+0x274>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004a7a:	2b0c      	cmp	r3, #12
 8004a7c:	d11c      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a7e:	4b44      	ldr	r3, [pc, #272]	@ (8004b90 <HAL_RCC_OscConfig+0x274>)
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d116      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a8a:	4b41      	ldr	r3, [pc, #260]	@ (8004b90 <HAL_RCC_OscConfig+0x274>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d005      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x186>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d001      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e1d3      	b.n	8004e4a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aa2:	4b3b      	ldr	r3, [pc, #236]	@ (8004b90 <HAL_RCC_OscConfig+0x274>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	4937      	ldr	r1, [pc, #220]	@ (8004b90 <HAL_RCC_OscConfig+0x274>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ab6:	e03a      	b.n	8004b2e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d020      	beq.n	8004b02 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ac0:	4b34      	ldr	r3, [pc, #208]	@ (8004b94 <HAL_RCC_OscConfig+0x278>)
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac6:	f7fe f887 	bl	8002bd8 <HAL_GetTick>
 8004aca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004acc:	e008      	b.n	8004ae0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ace:	f7fe f883 	bl	8002bd8 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e1b4      	b.n	8004e4a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ae0:	4b2b      	ldr	r3, [pc, #172]	@ (8004b90 <HAL_RCC_OscConfig+0x274>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d0f0      	beq.n	8004ace <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aec:	4b28      	ldr	r3, [pc, #160]	@ (8004b90 <HAL_RCC_OscConfig+0x274>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	00db      	lsls	r3, r3, #3
 8004afa:	4925      	ldr	r1, [pc, #148]	@ (8004b90 <HAL_RCC_OscConfig+0x274>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	600b      	str	r3, [r1, #0]
 8004b00:	e015      	b.n	8004b2e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b02:	4b24      	ldr	r3, [pc, #144]	@ (8004b94 <HAL_RCC_OscConfig+0x278>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b08:	f7fe f866 	bl	8002bd8 <HAL_GetTick>
 8004b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b10:	f7fe f862 	bl	8002bd8 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e193      	b.n	8004e4a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b22:	4b1b      	ldr	r3, [pc, #108]	@ (8004b90 <HAL_RCC_OscConfig+0x274>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1f0      	bne.n	8004b10 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0308 	and.w	r3, r3, #8
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d036      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d016      	beq.n	8004b70 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b42:	4b15      	ldr	r3, [pc, #84]	@ (8004b98 <HAL_RCC_OscConfig+0x27c>)
 8004b44:	2201      	movs	r2, #1
 8004b46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b48:	f7fe f846 	bl	8002bd8 <HAL_GetTick>
 8004b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b50:	f7fe f842 	bl	8002bd8 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e173      	b.n	8004e4a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b62:	4b0b      	ldr	r3, [pc, #44]	@ (8004b90 <HAL_RCC_OscConfig+0x274>)
 8004b64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d0f0      	beq.n	8004b50 <HAL_RCC_OscConfig+0x234>
 8004b6e:	e01b      	b.n	8004ba8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b70:	4b09      	ldr	r3, [pc, #36]	@ (8004b98 <HAL_RCC_OscConfig+0x27c>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b76:	f7fe f82f 	bl	8002bd8 <HAL_GetTick>
 8004b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b7c:	e00e      	b.n	8004b9c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b7e:	f7fe f82b 	bl	8002bd8 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d907      	bls.n	8004b9c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e15c      	b.n	8004e4a <HAL_RCC_OscConfig+0x52e>
 8004b90:	40023800 	.word	0x40023800
 8004b94:	42470000 	.word	0x42470000
 8004b98:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b9c:	4b8a      	ldr	r3, [pc, #552]	@ (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004b9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1ea      	bne.n	8004b7e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0304 	and.w	r3, r3, #4
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f000 8097 	beq.w	8004ce4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bba:	4b83      	ldr	r3, [pc, #524]	@ (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10f      	bne.n	8004be6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60bb      	str	r3, [r7, #8]
 8004bca:	4b7f      	ldr	r3, [pc, #508]	@ (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bce:	4a7e      	ldr	r2, [pc, #504]	@ (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004bd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bd6:	4b7c      	ldr	r3, [pc, #496]	@ (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bde:	60bb      	str	r3, [r7, #8]
 8004be0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004be2:	2301      	movs	r3, #1
 8004be4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be6:	4b79      	ldr	r3, [pc, #484]	@ (8004dcc <HAL_RCC_OscConfig+0x4b0>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d118      	bne.n	8004c24 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bf2:	4b76      	ldr	r3, [pc, #472]	@ (8004dcc <HAL_RCC_OscConfig+0x4b0>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a75      	ldr	r2, [pc, #468]	@ (8004dcc <HAL_RCC_OscConfig+0x4b0>)
 8004bf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bfe:	f7fd ffeb 	bl	8002bd8 <HAL_GetTick>
 8004c02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c04:	e008      	b.n	8004c18 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c06:	f7fd ffe7 	bl	8002bd8 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d901      	bls.n	8004c18 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e118      	b.n	8004e4a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c18:	4b6c      	ldr	r3, [pc, #432]	@ (8004dcc <HAL_RCC_OscConfig+0x4b0>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d0f0      	beq.n	8004c06 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d106      	bne.n	8004c3a <HAL_RCC_OscConfig+0x31e>
 8004c2c:	4b66      	ldr	r3, [pc, #408]	@ (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004c2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c30:	4a65      	ldr	r2, [pc, #404]	@ (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004c32:	f043 0301 	orr.w	r3, r3, #1
 8004c36:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c38:	e01c      	b.n	8004c74 <HAL_RCC_OscConfig+0x358>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	2b05      	cmp	r3, #5
 8004c40:	d10c      	bne.n	8004c5c <HAL_RCC_OscConfig+0x340>
 8004c42:	4b61      	ldr	r3, [pc, #388]	@ (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c46:	4a60      	ldr	r2, [pc, #384]	@ (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004c48:	f043 0304 	orr.w	r3, r3, #4
 8004c4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c4e:	4b5e      	ldr	r3, [pc, #376]	@ (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c52:	4a5d      	ldr	r2, [pc, #372]	@ (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004c54:	f043 0301 	orr.w	r3, r3, #1
 8004c58:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c5a:	e00b      	b.n	8004c74 <HAL_RCC_OscConfig+0x358>
 8004c5c:	4b5a      	ldr	r3, [pc, #360]	@ (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004c5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c60:	4a59      	ldr	r2, [pc, #356]	@ (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004c62:	f023 0301 	bic.w	r3, r3, #1
 8004c66:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c68:	4b57      	ldr	r3, [pc, #348]	@ (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c6c:	4a56      	ldr	r2, [pc, #344]	@ (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004c6e:	f023 0304 	bic.w	r3, r3, #4
 8004c72:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d015      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c7c:	f7fd ffac 	bl	8002bd8 <HAL_GetTick>
 8004c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c82:	e00a      	b.n	8004c9a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c84:	f7fd ffa8 	bl	8002bd8 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e0d7      	b.n	8004e4a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c9a:	4b4b      	ldr	r3, [pc, #300]	@ (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d0ee      	beq.n	8004c84 <HAL_RCC_OscConfig+0x368>
 8004ca6:	e014      	b.n	8004cd2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca8:	f7fd ff96 	bl	8002bd8 <HAL_GetTick>
 8004cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cae:	e00a      	b.n	8004cc6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cb0:	f7fd ff92 	bl	8002bd8 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e0c1      	b.n	8004e4a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cc6:	4b40      	ldr	r3, [pc, #256]	@ (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1ee      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004cd2:	7dfb      	ldrb	r3, [r7, #23]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d105      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cd8:	4b3b      	ldr	r3, [pc, #236]	@ (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cdc:	4a3a      	ldr	r2, [pc, #232]	@ (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004cde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ce2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 80ad 	beq.w	8004e48 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cee:	4b36      	ldr	r3, [pc, #216]	@ (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f003 030c 	and.w	r3, r3, #12
 8004cf6:	2b08      	cmp	r3, #8
 8004cf8:	d060      	beq.n	8004dbc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d145      	bne.n	8004d8e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d02:	4b33      	ldr	r3, [pc, #204]	@ (8004dd0 <HAL_RCC_OscConfig+0x4b4>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d08:	f7fd ff66 	bl	8002bd8 <HAL_GetTick>
 8004d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d0e:	e008      	b.n	8004d22 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d10:	f7fd ff62 	bl	8002bd8 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e093      	b.n	8004e4a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d22:	4b29      	ldr	r3, [pc, #164]	@ (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1f0      	bne.n	8004d10 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	69da      	ldr	r2, [r3, #28]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	431a      	orrs	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3c:	019b      	lsls	r3, r3, #6
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d44:	085b      	lsrs	r3, r3, #1
 8004d46:	3b01      	subs	r3, #1
 8004d48:	041b      	lsls	r3, r3, #16
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d50:	061b      	lsls	r3, r3, #24
 8004d52:	431a      	orrs	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d58:	071b      	lsls	r3, r3, #28
 8004d5a:	491b      	ldr	r1, [pc, #108]	@ (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d60:	4b1b      	ldr	r3, [pc, #108]	@ (8004dd0 <HAL_RCC_OscConfig+0x4b4>)
 8004d62:	2201      	movs	r2, #1
 8004d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d66:	f7fd ff37 	bl	8002bd8 <HAL_GetTick>
 8004d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d6c:	e008      	b.n	8004d80 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d6e:	f7fd ff33 	bl	8002bd8 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e064      	b.n	8004e4a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d80:	4b11      	ldr	r3, [pc, #68]	@ (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d0f0      	beq.n	8004d6e <HAL_RCC_OscConfig+0x452>
 8004d8c:	e05c      	b.n	8004e48 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d8e:	4b10      	ldr	r3, [pc, #64]	@ (8004dd0 <HAL_RCC_OscConfig+0x4b4>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d94:	f7fd ff20 	bl	8002bd8 <HAL_GetTick>
 8004d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d9a:	e008      	b.n	8004dae <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d9c:	f7fd ff1c 	bl	8002bd8 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e04d      	b.n	8004e4a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dae:	4b06      	ldr	r3, [pc, #24]	@ (8004dc8 <HAL_RCC_OscConfig+0x4ac>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1f0      	bne.n	8004d9c <HAL_RCC_OscConfig+0x480>
 8004dba:	e045      	b.n	8004e48 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d107      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e040      	b.n	8004e4a <HAL_RCC_OscConfig+0x52e>
 8004dc8:	40023800 	.word	0x40023800
 8004dcc:	40007000 	.word	0x40007000
 8004dd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004dd4:	4b1f      	ldr	r3, [pc, #124]	@ (8004e54 <HAL_RCC_OscConfig+0x538>)
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d030      	beq.n	8004e44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d129      	bne.n	8004e44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d122      	bne.n	8004e44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004e04:	4013      	ands	r3, r2
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d119      	bne.n	8004e44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e1a:	085b      	lsrs	r3, r3, #1
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d10f      	bne.n	8004e44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d107      	bne.n	8004e44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e3e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d001      	beq.n	8004e48 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e000      	b.n	8004e4a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3718      	adds	r7, #24
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	40023800 	.word	0x40023800

08004e58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d001      	beq.n	8004e70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e04e      	b.n	8004f0e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2202      	movs	r2, #2
 8004e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68da      	ldr	r2, [r3, #12]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f042 0201 	orr.w	r2, r2, #1
 8004e86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a23      	ldr	r2, [pc, #140]	@ (8004f1c <HAL_TIM_Base_Start_IT+0xc4>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d022      	beq.n	8004ed8 <HAL_TIM_Base_Start_IT+0x80>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e9a:	d01d      	beq.n	8004ed8 <HAL_TIM_Base_Start_IT+0x80>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a1f      	ldr	r2, [pc, #124]	@ (8004f20 <HAL_TIM_Base_Start_IT+0xc8>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d018      	beq.n	8004ed8 <HAL_TIM_Base_Start_IT+0x80>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a1e      	ldr	r2, [pc, #120]	@ (8004f24 <HAL_TIM_Base_Start_IT+0xcc>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d013      	beq.n	8004ed8 <HAL_TIM_Base_Start_IT+0x80>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a1c      	ldr	r2, [pc, #112]	@ (8004f28 <HAL_TIM_Base_Start_IT+0xd0>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d00e      	beq.n	8004ed8 <HAL_TIM_Base_Start_IT+0x80>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a1b      	ldr	r2, [pc, #108]	@ (8004f2c <HAL_TIM_Base_Start_IT+0xd4>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d009      	beq.n	8004ed8 <HAL_TIM_Base_Start_IT+0x80>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a19      	ldr	r2, [pc, #100]	@ (8004f30 <HAL_TIM_Base_Start_IT+0xd8>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d004      	beq.n	8004ed8 <HAL_TIM_Base_Start_IT+0x80>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a18      	ldr	r2, [pc, #96]	@ (8004f34 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d111      	bne.n	8004efc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f003 0307 	and.w	r3, r3, #7
 8004ee2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2b06      	cmp	r3, #6
 8004ee8:	d010      	beq.n	8004f0c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f042 0201 	orr.w	r2, r2, #1
 8004ef8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004efa:	e007      	b.n	8004f0c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f042 0201 	orr.w	r2, r2, #1
 8004f0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3714      	adds	r7, #20
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	40010000 	.word	0x40010000
 8004f20:	40000400 	.word	0x40000400
 8004f24:	40000800 	.word	0x40000800
 8004f28:	40000c00 	.word	0x40000c00
 8004f2c:	40010400 	.word	0x40010400
 8004f30:	40014000 	.word	0x40014000
 8004f34:	40001800 	.word	0x40001800

08004f38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e041      	b.n	8004fce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d106      	bne.n	8004f64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f7fd fbfa 	bl	8002758 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	3304      	adds	r3, #4
 8004f74:	4619      	mov	r1, r3
 8004f76:	4610      	mov	r0, r2
 8004f78:	f000 fa28 	bl	80053cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
	...

08004fd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d109      	bne.n	8004ffc <HAL_TIM_PWM_Start+0x24>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	bf14      	ite	ne
 8004ff4:	2301      	movne	r3, #1
 8004ff6:	2300      	moveq	r3, #0
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	e022      	b.n	8005042 <HAL_TIM_PWM_Start+0x6a>
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	2b04      	cmp	r3, #4
 8005000:	d109      	bne.n	8005016 <HAL_TIM_PWM_Start+0x3e>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b01      	cmp	r3, #1
 800500c:	bf14      	ite	ne
 800500e:	2301      	movne	r3, #1
 8005010:	2300      	moveq	r3, #0
 8005012:	b2db      	uxtb	r3, r3
 8005014:	e015      	b.n	8005042 <HAL_TIM_PWM_Start+0x6a>
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b08      	cmp	r3, #8
 800501a:	d109      	bne.n	8005030 <HAL_TIM_PWM_Start+0x58>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b01      	cmp	r3, #1
 8005026:	bf14      	ite	ne
 8005028:	2301      	movne	r3, #1
 800502a:	2300      	moveq	r3, #0
 800502c:	b2db      	uxtb	r3, r3
 800502e:	e008      	b.n	8005042 <HAL_TIM_PWM_Start+0x6a>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b01      	cmp	r3, #1
 800503a:	bf14      	ite	ne
 800503c:	2301      	movne	r3, #1
 800503e:	2300      	moveq	r3, #0
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e07c      	b.n	8005144 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d104      	bne.n	800505a <HAL_TIM_PWM_Start+0x82>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2202      	movs	r2, #2
 8005054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005058:	e013      	b.n	8005082 <HAL_TIM_PWM_Start+0xaa>
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	2b04      	cmp	r3, #4
 800505e:	d104      	bne.n	800506a <HAL_TIM_PWM_Start+0x92>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2202      	movs	r2, #2
 8005064:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005068:	e00b      	b.n	8005082 <HAL_TIM_PWM_Start+0xaa>
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	2b08      	cmp	r3, #8
 800506e:	d104      	bne.n	800507a <HAL_TIM_PWM_Start+0xa2>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2202      	movs	r2, #2
 8005074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005078:	e003      	b.n	8005082 <HAL_TIM_PWM_Start+0xaa>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2202      	movs	r2, #2
 800507e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2201      	movs	r2, #1
 8005088:	6839      	ldr	r1, [r7, #0]
 800508a:	4618      	mov	r0, r3
 800508c:	f000 fbfa 	bl	8005884 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a2d      	ldr	r2, [pc, #180]	@ (800514c <HAL_TIM_PWM_Start+0x174>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d004      	beq.n	80050a4 <HAL_TIM_PWM_Start+0xcc>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a2c      	ldr	r2, [pc, #176]	@ (8005150 <HAL_TIM_PWM_Start+0x178>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d101      	bne.n	80050a8 <HAL_TIM_PWM_Start+0xd0>
 80050a4:	2301      	movs	r3, #1
 80050a6:	e000      	b.n	80050aa <HAL_TIM_PWM_Start+0xd2>
 80050a8:	2300      	movs	r3, #0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d007      	beq.n	80050be <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80050bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a22      	ldr	r2, [pc, #136]	@ (800514c <HAL_TIM_PWM_Start+0x174>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d022      	beq.n	800510e <HAL_TIM_PWM_Start+0x136>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050d0:	d01d      	beq.n	800510e <HAL_TIM_PWM_Start+0x136>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a1f      	ldr	r2, [pc, #124]	@ (8005154 <HAL_TIM_PWM_Start+0x17c>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d018      	beq.n	800510e <HAL_TIM_PWM_Start+0x136>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a1d      	ldr	r2, [pc, #116]	@ (8005158 <HAL_TIM_PWM_Start+0x180>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d013      	beq.n	800510e <HAL_TIM_PWM_Start+0x136>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a1c      	ldr	r2, [pc, #112]	@ (800515c <HAL_TIM_PWM_Start+0x184>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d00e      	beq.n	800510e <HAL_TIM_PWM_Start+0x136>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a16      	ldr	r2, [pc, #88]	@ (8005150 <HAL_TIM_PWM_Start+0x178>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d009      	beq.n	800510e <HAL_TIM_PWM_Start+0x136>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a18      	ldr	r2, [pc, #96]	@ (8005160 <HAL_TIM_PWM_Start+0x188>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d004      	beq.n	800510e <HAL_TIM_PWM_Start+0x136>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a16      	ldr	r2, [pc, #88]	@ (8005164 <HAL_TIM_PWM_Start+0x18c>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d111      	bne.n	8005132 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2b06      	cmp	r3, #6
 800511e:	d010      	beq.n	8005142 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f042 0201 	orr.w	r2, r2, #1
 800512e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005130:	e007      	b.n	8005142 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f042 0201 	orr.w	r2, r2, #1
 8005140:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3710      	adds	r7, #16
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	40010000 	.word	0x40010000
 8005150:	40010400 	.word	0x40010400
 8005154:	40000400 	.word	0x40000400
 8005158:	40000800 	.word	0x40000800
 800515c:	40000c00 	.word	0x40000c00
 8005160:	40014000 	.word	0x40014000
 8005164:	40001800 	.word	0x40001800

08005168 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2200      	movs	r2, #0
 8005178:	6839      	ldr	r1, [r7, #0]
 800517a:	4618      	mov	r0, r3
 800517c:	f000 fb82 	bl	8005884 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a2e      	ldr	r2, [pc, #184]	@ (8005240 <HAL_TIM_PWM_Stop+0xd8>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d004      	beq.n	8005194 <HAL_TIM_PWM_Stop+0x2c>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a2d      	ldr	r2, [pc, #180]	@ (8005244 <HAL_TIM_PWM_Stop+0xdc>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d101      	bne.n	8005198 <HAL_TIM_PWM_Stop+0x30>
 8005194:	2301      	movs	r3, #1
 8005196:	e000      	b.n	800519a <HAL_TIM_PWM_Stop+0x32>
 8005198:	2300      	movs	r3, #0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d017      	beq.n	80051ce <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	6a1a      	ldr	r2, [r3, #32]
 80051a4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80051a8:	4013      	ands	r3, r2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10f      	bne.n	80051ce <HAL_TIM_PWM_Stop+0x66>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	6a1a      	ldr	r2, [r3, #32]
 80051b4:	f240 4344 	movw	r3, #1092	@ 0x444
 80051b8:	4013      	ands	r3, r2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d107      	bne.n	80051ce <HAL_TIM_PWM_Stop+0x66>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80051cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6a1a      	ldr	r2, [r3, #32]
 80051d4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80051d8:	4013      	ands	r3, r2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10f      	bne.n	80051fe <HAL_TIM_PWM_Stop+0x96>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	6a1a      	ldr	r2, [r3, #32]
 80051e4:	f240 4344 	movw	r3, #1092	@ 0x444
 80051e8:	4013      	ands	r3, r2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d107      	bne.n	80051fe <HAL_TIM_PWM_Stop+0x96>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 0201 	bic.w	r2, r2, #1
 80051fc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d104      	bne.n	800520e <HAL_TIM_PWM_Stop+0xa6>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800520c:	e013      	b.n	8005236 <HAL_TIM_PWM_Stop+0xce>
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	2b04      	cmp	r3, #4
 8005212:	d104      	bne.n	800521e <HAL_TIM_PWM_Stop+0xb6>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800521c:	e00b      	b.n	8005236 <HAL_TIM_PWM_Stop+0xce>
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	2b08      	cmp	r3, #8
 8005222:	d104      	bne.n	800522e <HAL_TIM_PWM_Stop+0xc6>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800522c:	e003      	b.n	8005236 <HAL_TIM_PWM_Stop+0xce>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3708      	adds	r7, #8
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	40010000 	.word	0x40010000
 8005244:	40010400 	.word	0x40010400

08005248 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005254:	2300      	movs	r3, #0
 8005256:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800525e:	2b01      	cmp	r3, #1
 8005260:	d101      	bne.n	8005266 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005262:	2302      	movs	r3, #2
 8005264:	e0ae      	b.n	80053c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2b0c      	cmp	r3, #12
 8005272:	f200 809f 	bhi.w	80053b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005276:	a201      	add	r2, pc, #4	@ (adr r2, 800527c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527c:	080052b1 	.word	0x080052b1
 8005280:	080053b5 	.word	0x080053b5
 8005284:	080053b5 	.word	0x080053b5
 8005288:	080053b5 	.word	0x080053b5
 800528c:	080052f1 	.word	0x080052f1
 8005290:	080053b5 	.word	0x080053b5
 8005294:	080053b5 	.word	0x080053b5
 8005298:	080053b5 	.word	0x080053b5
 800529c:	08005333 	.word	0x08005333
 80052a0:	080053b5 	.word	0x080053b5
 80052a4:	080053b5 	.word	0x080053b5
 80052a8:	080053b5 	.word	0x080053b5
 80052ac:	08005373 	.word	0x08005373
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68b9      	ldr	r1, [r7, #8]
 80052b6:	4618      	mov	r0, r3
 80052b8:	f000 f934 	bl	8005524 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	699a      	ldr	r2, [r3, #24]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f042 0208 	orr.w	r2, r2, #8
 80052ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	699a      	ldr	r2, [r3, #24]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f022 0204 	bic.w	r2, r2, #4
 80052da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	6999      	ldr	r1, [r3, #24]
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	691a      	ldr	r2, [r3, #16]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	619a      	str	r2, [r3, #24]
      break;
 80052ee:	e064      	b.n	80053ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68b9      	ldr	r1, [r7, #8]
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 f984 	bl	8005604 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	699a      	ldr	r2, [r3, #24]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800530a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	699a      	ldr	r2, [r3, #24]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800531a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6999      	ldr	r1, [r3, #24]
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	021a      	lsls	r2, r3, #8
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	430a      	orrs	r2, r1
 800532e:	619a      	str	r2, [r3, #24]
      break;
 8005330:	e043      	b.n	80053ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68b9      	ldr	r1, [r7, #8]
 8005338:	4618      	mov	r0, r3
 800533a:	f000 f9d9 	bl	80056f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	69da      	ldr	r2, [r3, #28]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f042 0208 	orr.w	r2, r2, #8
 800534c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	69da      	ldr	r2, [r3, #28]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f022 0204 	bic.w	r2, r2, #4
 800535c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	69d9      	ldr	r1, [r3, #28]
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	691a      	ldr	r2, [r3, #16]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	430a      	orrs	r2, r1
 800536e:	61da      	str	r2, [r3, #28]
      break;
 8005370:	e023      	b.n	80053ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68b9      	ldr	r1, [r7, #8]
 8005378:	4618      	mov	r0, r3
 800537a:	f000 fa2d 	bl	80057d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	69da      	ldr	r2, [r3, #28]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800538c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	69da      	ldr	r2, [r3, #28]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800539c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	69d9      	ldr	r1, [r3, #28]
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	021a      	lsls	r2, r3, #8
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	430a      	orrs	r2, r1
 80053b0:	61da      	str	r2, [r3, #28]
      break;
 80053b2:	e002      	b.n	80053ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	75fb      	strb	r3, [r7, #23]
      break;
 80053b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80053c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3718      	adds	r7, #24
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a46      	ldr	r2, [pc, #280]	@ (80054f8 <TIM_Base_SetConfig+0x12c>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d013      	beq.n	800540c <TIM_Base_SetConfig+0x40>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053ea:	d00f      	beq.n	800540c <TIM_Base_SetConfig+0x40>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a43      	ldr	r2, [pc, #268]	@ (80054fc <TIM_Base_SetConfig+0x130>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d00b      	beq.n	800540c <TIM_Base_SetConfig+0x40>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a42      	ldr	r2, [pc, #264]	@ (8005500 <TIM_Base_SetConfig+0x134>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d007      	beq.n	800540c <TIM_Base_SetConfig+0x40>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a41      	ldr	r2, [pc, #260]	@ (8005504 <TIM_Base_SetConfig+0x138>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d003      	beq.n	800540c <TIM_Base_SetConfig+0x40>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a40      	ldr	r2, [pc, #256]	@ (8005508 <TIM_Base_SetConfig+0x13c>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d108      	bne.n	800541e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005412:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	4313      	orrs	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a35      	ldr	r2, [pc, #212]	@ (80054f8 <TIM_Base_SetConfig+0x12c>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d02b      	beq.n	800547e <TIM_Base_SetConfig+0xb2>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800542c:	d027      	beq.n	800547e <TIM_Base_SetConfig+0xb2>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a32      	ldr	r2, [pc, #200]	@ (80054fc <TIM_Base_SetConfig+0x130>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d023      	beq.n	800547e <TIM_Base_SetConfig+0xb2>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a31      	ldr	r2, [pc, #196]	@ (8005500 <TIM_Base_SetConfig+0x134>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d01f      	beq.n	800547e <TIM_Base_SetConfig+0xb2>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a30      	ldr	r2, [pc, #192]	@ (8005504 <TIM_Base_SetConfig+0x138>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d01b      	beq.n	800547e <TIM_Base_SetConfig+0xb2>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a2f      	ldr	r2, [pc, #188]	@ (8005508 <TIM_Base_SetConfig+0x13c>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d017      	beq.n	800547e <TIM_Base_SetConfig+0xb2>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a2e      	ldr	r2, [pc, #184]	@ (800550c <TIM_Base_SetConfig+0x140>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d013      	beq.n	800547e <TIM_Base_SetConfig+0xb2>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a2d      	ldr	r2, [pc, #180]	@ (8005510 <TIM_Base_SetConfig+0x144>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d00f      	beq.n	800547e <TIM_Base_SetConfig+0xb2>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a2c      	ldr	r2, [pc, #176]	@ (8005514 <TIM_Base_SetConfig+0x148>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d00b      	beq.n	800547e <TIM_Base_SetConfig+0xb2>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a2b      	ldr	r2, [pc, #172]	@ (8005518 <TIM_Base_SetConfig+0x14c>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d007      	beq.n	800547e <TIM_Base_SetConfig+0xb2>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a2a      	ldr	r2, [pc, #168]	@ (800551c <TIM_Base_SetConfig+0x150>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d003      	beq.n	800547e <TIM_Base_SetConfig+0xb2>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a29      	ldr	r2, [pc, #164]	@ (8005520 <TIM_Base_SetConfig+0x154>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d108      	bne.n	8005490 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005484:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	4313      	orrs	r3, r2
 800548e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	4313      	orrs	r3, r2
 800549c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	689a      	ldr	r2, [r3, #8]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a10      	ldr	r2, [pc, #64]	@ (80054f8 <TIM_Base_SetConfig+0x12c>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d003      	beq.n	80054c4 <TIM_Base_SetConfig+0xf8>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a12      	ldr	r2, [pc, #72]	@ (8005508 <TIM_Base_SetConfig+0x13c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d103      	bne.n	80054cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	691a      	ldr	r2, [r3, #16]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d105      	bne.n	80054ea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	f023 0201 	bic.w	r2, r3, #1
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	611a      	str	r2, [r3, #16]
  }
}
 80054ea:	bf00      	nop
 80054ec:	3714      	adds	r7, #20
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	40010000 	.word	0x40010000
 80054fc:	40000400 	.word	0x40000400
 8005500:	40000800 	.word	0x40000800
 8005504:	40000c00 	.word	0x40000c00
 8005508:	40010400 	.word	0x40010400
 800550c:	40014000 	.word	0x40014000
 8005510:	40014400 	.word	0x40014400
 8005514:	40014800 	.word	0x40014800
 8005518:	40001800 	.word	0x40001800
 800551c:	40001c00 	.word	0x40001c00
 8005520:	40002000 	.word	0x40002000

08005524 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005524:	b480      	push	{r7}
 8005526:	b087      	sub	sp, #28
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	f023 0201 	bic.w	r2, r3, #1
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f023 0303 	bic.w	r3, r3, #3
 800555a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	4313      	orrs	r3, r2
 8005564:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f023 0302 	bic.w	r3, r3, #2
 800556c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	4313      	orrs	r3, r2
 8005576:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a20      	ldr	r2, [pc, #128]	@ (80055fc <TIM_OC1_SetConfig+0xd8>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d003      	beq.n	8005588 <TIM_OC1_SetConfig+0x64>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a1f      	ldr	r2, [pc, #124]	@ (8005600 <TIM_OC1_SetConfig+0xdc>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d10c      	bne.n	80055a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	f023 0308 	bic.w	r3, r3, #8
 800558e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	4313      	orrs	r3, r2
 8005598:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f023 0304 	bic.w	r3, r3, #4
 80055a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a15      	ldr	r2, [pc, #84]	@ (80055fc <TIM_OC1_SetConfig+0xd8>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d003      	beq.n	80055b2 <TIM_OC1_SetConfig+0x8e>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a14      	ldr	r2, [pc, #80]	@ (8005600 <TIM_OC1_SetConfig+0xdc>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d111      	bne.n	80055d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80055c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	621a      	str	r2, [r3, #32]
}
 80055f0:	bf00      	nop
 80055f2:	371c      	adds	r7, #28
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr
 80055fc:	40010000 	.word	0x40010000
 8005600:	40010400 	.word	0x40010400

08005604 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005604:	b480      	push	{r7}
 8005606:	b087      	sub	sp, #28
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a1b      	ldr	r3, [r3, #32]
 8005618:	f023 0210 	bic.w	r2, r3, #16
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800563a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	021b      	lsls	r3, r3, #8
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	4313      	orrs	r3, r2
 8005646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	f023 0320 	bic.w	r3, r3, #32
 800564e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	011b      	lsls	r3, r3, #4
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	4313      	orrs	r3, r2
 800565a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a22      	ldr	r2, [pc, #136]	@ (80056e8 <TIM_OC2_SetConfig+0xe4>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d003      	beq.n	800566c <TIM_OC2_SetConfig+0x68>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a21      	ldr	r2, [pc, #132]	@ (80056ec <TIM_OC2_SetConfig+0xe8>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d10d      	bne.n	8005688 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005672:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	011b      	lsls	r3, r3, #4
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	4313      	orrs	r3, r2
 800567e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005686:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a17      	ldr	r2, [pc, #92]	@ (80056e8 <TIM_OC2_SetConfig+0xe4>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d003      	beq.n	8005698 <TIM_OC2_SetConfig+0x94>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a16      	ldr	r2, [pc, #88]	@ (80056ec <TIM_OC2_SetConfig+0xe8>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d113      	bne.n	80056c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800569e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80056a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	695b      	ldr	r3, [r3, #20]
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	4313      	orrs	r3, r2
 80056be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	621a      	str	r2, [r3, #32]
}
 80056da:	bf00      	nop
 80056dc:	371c      	adds	r7, #28
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	40010000 	.word	0x40010000
 80056ec:	40010400 	.word	0x40010400

080056f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b087      	sub	sp, #28
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a1b      	ldr	r3, [r3, #32]
 8005704:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800571e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f023 0303 	bic.w	r3, r3, #3
 8005726:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	4313      	orrs	r3, r2
 8005730:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005738:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	021b      	lsls	r3, r3, #8
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	4313      	orrs	r3, r2
 8005744:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a21      	ldr	r2, [pc, #132]	@ (80057d0 <TIM_OC3_SetConfig+0xe0>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d003      	beq.n	8005756 <TIM_OC3_SetConfig+0x66>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a20      	ldr	r2, [pc, #128]	@ (80057d4 <TIM_OC3_SetConfig+0xe4>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d10d      	bne.n	8005772 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800575c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	021b      	lsls	r3, r3, #8
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	4313      	orrs	r3, r2
 8005768:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005770:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a16      	ldr	r2, [pc, #88]	@ (80057d0 <TIM_OC3_SetConfig+0xe0>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d003      	beq.n	8005782 <TIM_OC3_SetConfig+0x92>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a15      	ldr	r2, [pc, #84]	@ (80057d4 <TIM_OC3_SetConfig+0xe4>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d113      	bne.n	80057aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005788:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005790:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	011b      	lsls	r3, r3, #4
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	4313      	orrs	r3, r2
 800579c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	011b      	lsls	r3, r3, #4
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	685a      	ldr	r2, [r3, #4]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	621a      	str	r2, [r3, #32]
}
 80057c4:	bf00      	nop
 80057c6:	371c      	adds	r7, #28
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr
 80057d0:	40010000 	.word	0x40010000
 80057d4:	40010400 	.word	0x40010400

080057d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057d8:	b480      	push	{r7}
 80057da:	b087      	sub	sp, #28
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a1b      	ldr	r3, [r3, #32]
 80057e6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a1b      	ldr	r3, [r3, #32]
 80057ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	69db      	ldr	r3, [r3, #28]
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800580e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	021b      	lsls	r3, r3, #8
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	4313      	orrs	r3, r2
 800581a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005822:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	031b      	lsls	r3, r3, #12
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	4313      	orrs	r3, r2
 800582e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a12      	ldr	r2, [pc, #72]	@ (800587c <TIM_OC4_SetConfig+0xa4>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d003      	beq.n	8005840 <TIM_OC4_SetConfig+0x68>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a11      	ldr	r2, [pc, #68]	@ (8005880 <TIM_OC4_SetConfig+0xa8>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d109      	bne.n	8005854 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005846:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	695b      	ldr	r3, [r3, #20]
 800584c:	019b      	lsls	r3, r3, #6
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	4313      	orrs	r3, r2
 8005852:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685a      	ldr	r2, [r3, #4]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	621a      	str	r2, [r3, #32]
}
 800586e:	bf00      	nop
 8005870:	371c      	adds	r7, #28
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	40010000 	.word	0x40010000
 8005880:	40010400 	.word	0x40010400

08005884 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005884:	b480      	push	{r7}
 8005886:	b087      	sub	sp, #28
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	f003 031f 	and.w	r3, r3, #31
 8005896:	2201      	movs	r2, #1
 8005898:	fa02 f303 	lsl.w	r3, r2, r3
 800589c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6a1a      	ldr	r2, [r3, #32]
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	43db      	mvns	r3, r3
 80058a6:	401a      	ands	r2, r3
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6a1a      	ldr	r2, [r3, #32]
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	f003 031f 	and.w	r3, r3, #31
 80058b6:	6879      	ldr	r1, [r7, #4]
 80058b8:	fa01 f303 	lsl.w	r3, r1, r3
 80058bc:	431a      	orrs	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	621a      	str	r2, [r3, #32]
}
 80058c2:	bf00      	nop
 80058c4:	371c      	adds	r7, #28
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
	...

080058d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d101      	bne.n	80058e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058e4:	2302      	movs	r3, #2
 80058e6:	e05a      	b.n	800599e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2202      	movs	r2, #2
 80058f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800590e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	4313      	orrs	r3, r2
 8005918:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a21      	ldr	r2, [pc, #132]	@ (80059ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d022      	beq.n	8005972 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005934:	d01d      	beq.n	8005972 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a1d      	ldr	r2, [pc, #116]	@ (80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d018      	beq.n	8005972 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a1b      	ldr	r2, [pc, #108]	@ (80059b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d013      	beq.n	8005972 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a1a      	ldr	r2, [pc, #104]	@ (80059b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d00e      	beq.n	8005972 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a18      	ldr	r2, [pc, #96]	@ (80059bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d009      	beq.n	8005972 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a17      	ldr	r2, [pc, #92]	@ (80059c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d004      	beq.n	8005972 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a15      	ldr	r2, [pc, #84]	@ (80059c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d10c      	bne.n	800598c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005978:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	4313      	orrs	r3, r2
 8005982:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3714      	adds	r7, #20
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	40010000 	.word	0x40010000
 80059b0:	40000400 	.word	0x40000400
 80059b4:	40000800 	.word	0x40000800
 80059b8:	40000c00 	.word	0x40000c00
 80059bc:	40010400 	.word	0x40010400
 80059c0:	40014000 	.word	0x40014000
 80059c4:	40001800 	.word	0x40001800

080059c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e042      	b.n	8005a60 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d106      	bne.n	80059f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f7fc ff4c 	bl	800288c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2224      	movs	r2, #36	@ 0x24
 80059f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68da      	ldr	r2, [r3, #12]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 fbf7 	bl	8006200 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	691a      	ldr	r2, [r3, #16]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	695a      	ldr	r2, [r3, #20]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68da      	ldr	r2, [r3, #12]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2220      	movs	r2, #32
 8005a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2220      	movs	r2, #32
 8005a54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3708      	adds	r7, #8
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b08a      	sub	sp, #40	@ 0x28
 8005a6c:	af02      	add	r7, sp, #8
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	603b      	str	r3, [r7, #0]
 8005a74:	4613      	mov	r3, r2
 8005a76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	2b20      	cmp	r3, #32
 8005a86:	d175      	bne.n	8005b74 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d002      	beq.n	8005a94 <HAL_UART_Transmit+0x2c>
 8005a8e:	88fb      	ldrh	r3, [r7, #6]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d101      	bne.n	8005a98 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e06e      	b.n	8005b76 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2221      	movs	r2, #33	@ 0x21
 8005aa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005aa6:	f7fd f897 	bl	8002bd8 <HAL_GetTick>
 8005aaa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	88fa      	ldrh	r2, [r7, #6]
 8005ab0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	88fa      	ldrh	r2, [r7, #6]
 8005ab6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ac0:	d108      	bne.n	8005ad4 <HAL_UART_Transmit+0x6c>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d104      	bne.n	8005ad4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005aca:	2300      	movs	r3, #0
 8005acc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	61bb      	str	r3, [r7, #24]
 8005ad2:	e003      	b.n	8005adc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005adc:	e02e      	b.n	8005b3c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	9300      	str	r3, [sp, #0]
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	2180      	movs	r1, #128	@ 0x80
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f000 fa0a 	bl	8005f02 <UART_WaitOnFlagUntilTimeout>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d005      	beq.n	8005b00 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2220      	movs	r2, #32
 8005af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e03a      	b.n	8005b76 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10b      	bne.n	8005b1e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	881b      	ldrh	r3, [r3, #0]
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	3302      	adds	r3, #2
 8005b1a:	61bb      	str	r3, [r7, #24]
 8005b1c:	e007      	b.n	8005b2e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	781a      	ldrb	r2, [r3, #0]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	3b01      	subs	r3, #1
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1cb      	bne.n	8005ade <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	9300      	str	r3, [sp, #0]
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	2140      	movs	r1, #64	@ 0x40
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f000 f9d6 	bl	8005f02 <UART_WaitOnFlagUntilTimeout>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d005      	beq.n	8005b68 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2220      	movs	r2, #32
 8005b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e006      	b.n	8005b76 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2220      	movs	r2, #32
 8005b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005b70:	2300      	movs	r3, #0
 8005b72:	e000      	b.n	8005b76 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005b74:	2302      	movs	r3, #2
  }
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3720      	adds	r7, #32
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b084      	sub	sp, #16
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	60f8      	str	r0, [r7, #12]
 8005b86:	60b9      	str	r1, [r7, #8]
 8005b88:	4613      	mov	r3, r2
 8005b8a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2b20      	cmp	r3, #32
 8005b96:	d112      	bne.n	8005bbe <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d002      	beq.n	8005ba4 <HAL_UART_Receive_DMA+0x26>
 8005b9e:	88fb      	ldrh	r3, [r7, #6]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d101      	bne.n	8005ba8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e00b      	b.n	8005bc0 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005bae:	88fb      	ldrh	r3, [r7, #6]
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	68b9      	ldr	r1, [r7, #8]
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f000 f9fd 	bl	8005fb4 <UART_Start_Receive_DMA>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	e000      	b.n	8005bc0 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005bbe:	2302      	movs	r3, #2
  }
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b090      	sub	sp, #64	@ 0x40
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bde:	2b80      	cmp	r3, #128	@ 0x80
 8005be0:	bf0c      	ite	eq
 8005be2:	2301      	moveq	r3, #1
 8005be4:	2300      	movne	r3, #0
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	2b21      	cmp	r3, #33	@ 0x21
 8005bf4:	d128      	bne.n	8005c48 <HAL_UART_DMAStop+0x80>
 8005bf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d025      	beq.n	8005c48 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	3314      	adds	r3, #20
 8005c02:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c06:	e853 3f00 	ldrex	r3, [r3]
 8005c0a:	623b      	str	r3, [r7, #32]
   return(result);
 8005c0c:	6a3b      	ldr	r3, [r7, #32]
 8005c0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	3314      	adds	r3, #20
 8005c1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c1c:	633a      	str	r2, [r7, #48]	@ 0x30
 8005c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c24:	e841 2300 	strex	r3, r2, [r1]
 8005c28:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1e5      	bne.n	8005bfc <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d004      	beq.n	8005c42 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f7fd f938 	bl	8002eb2 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 fa50 	bl	80060e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c52:	2b40      	cmp	r3, #64	@ 0x40
 8005c54:	bf0c      	ite	eq
 8005c56:	2301      	moveq	r3, #1
 8005c58:	2300      	movne	r3, #0
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b22      	cmp	r3, #34	@ 0x22
 8005c68:	d128      	bne.n	8005cbc <HAL_UART_DMAStop+0xf4>
 8005c6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d025      	beq.n	8005cbc <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	3314      	adds	r3, #20
 8005c76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	e853 3f00 	ldrex	r3, [r3]
 8005c7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c86:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	3314      	adds	r3, #20
 8005c8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c90:	61fa      	str	r2, [r7, #28]
 8005c92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c94:	69b9      	ldr	r1, [r7, #24]
 8005c96:	69fa      	ldr	r2, [r7, #28]
 8005c98:	e841 2300 	strex	r3, r2, [r1]
 8005c9c:	617b      	str	r3, [r7, #20]
   return(result);
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1e5      	bne.n	8005c70 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d004      	beq.n	8005cb6 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7fd f8fe 	bl	8002eb2 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 fa3e 	bl	8006138 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3740      	adds	r7, #64	@ 0x40
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b083      	sub	sp, #12
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005cce:	bf00      	nop
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b083      	sub	sp, #12
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ce2:	bf00      	nop
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b083      	sub	sp, #12
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005cfa:	bf00      	nop
 8005cfc:	370c      	adds	r7, #12
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr

08005d06 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b09c      	sub	sp, #112	@ 0x70
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d12:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d172      	bne.n	8005e08 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005d22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d24:	2200      	movs	r2, #0
 8005d26:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	330c      	adds	r3, #12
 8005d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d32:	e853 3f00 	ldrex	r3, [r3]
 8005d36:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005d38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d3a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d3e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	330c      	adds	r3, #12
 8005d46:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005d48:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005d4a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005d4e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005d50:	e841 2300 	strex	r3, r2, [r1]
 8005d54:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005d56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1e5      	bne.n	8005d28 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	3314      	adds	r3, #20
 8005d62:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d66:	e853 3f00 	ldrex	r3, [r3]
 8005d6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d6e:	f023 0301 	bic.w	r3, r3, #1
 8005d72:	667b      	str	r3, [r7, #100]	@ 0x64
 8005d74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	3314      	adds	r3, #20
 8005d7a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005d7c:	647a      	str	r2, [r7, #68]	@ 0x44
 8005d7e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d84:	e841 2300 	strex	r3, r2, [r1]
 8005d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d1e5      	bne.n	8005d5c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	3314      	adds	r3, #20
 8005d96:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9a:	e853 3f00 	ldrex	r3, [r3]
 8005d9e:	623b      	str	r3, [r7, #32]
   return(result);
 8005da0:	6a3b      	ldr	r3, [r7, #32]
 8005da2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005da6:	663b      	str	r3, [r7, #96]	@ 0x60
 8005da8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	3314      	adds	r3, #20
 8005dae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005db0:	633a      	str	r2, [r7, #48]	@ 0x30
 8005db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005db6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005db8:	e841 2300 	strex	r3, r2, [r1]
 8005dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d1e5      	bne.n	8005d90 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005dc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005dc6:	2220      	movs	r2, #32
 8005dc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d119      	bne.n	8005e08 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	330c      	adds	r3, #12
 8005dda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	e853 3f00 	ldrex	r3, [r3]
 8005de2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f023 0310 	bic.w	r3, r3, #16
 8005dea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005dec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	330c      	adds	r3, #12
 8005df2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005df4:	61fa      	str	r2, [r7, #28]
 8005df6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df8:	69b9      	ldr	r1, [r7, #24]
 8005dfa:	69fa      	ldr	r2, [r7, #28]
 8005dfc:	e841 2300 	strex	r3, r2, [r1]
 8005e00:	617b      	str	r3, [r7, #20]
   return(result);
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1e5      	bne.n	8005dd4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d106      	bne.n	8005e24 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e18:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005e1e:	f7ff ff66 	bl	8005cee <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e22:	e002      	b.n	8005e2a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005e24:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005e26:	f7fb fc67 	bl	80016f8 <HAL_UART_RxCpltCallback>
}
 8005e2a:	bf00      	nop
 8005e2c:	3770      	adds	r7, #112	@ 0x70
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b084      	sub	sp, #16
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e3e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2201      	movs	r2, #1
 8005e44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d108      	bne.n	8005e60 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e52:	085b      	lsrs	r3, r3, #1
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	4619      	mov	r1, r3
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f7ff ff48 	bl	8005cee <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e5e:	e002      	b.n	8005e66 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f7ff ff30 	bl	8005cc6 <HAL_UART_RxHalfCpltCallback>
}
 8005e66:	bf00      	nop
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b084      	sub	sp, #16
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005e76:	2300      	movs	r3, #0
 8005e78:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e7e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e8a:	2b80      	cmp	r3, #128	@ 0x80
 8005e8c:	bf0c      	ite	eq
 8005e8e:	2301      	moveq	r3, #1
 8005e90:	2300      	movne	r3, #0
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b21      	cmp	r3, #33	@ 0x21
 8005ea0:	d108      	bne.n	8005eb4 <UART_DMAError+0x46>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d005      	beq.n	8005eb4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005eae:	68b8      	ldr	r0, [r7, #8]
 8005eb0:	f000 f91a 	bl	80060e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ebe:	2b40      	cmp	r3, #64	@ 0x40
 8005ec0:	bf0c      	ite	eq
 8005ec2:	2301      	moveq	r3, #1
 8005ec4:	2300      	movne	r3, #0
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b22      	cmp	r3, #34	@ 0x22
 8005ed4:	d108      	bne.n	8005ee8 <UART_DMAError+0x7a>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d005      	beq.n	8005ee8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005ee2:	68b8      	ldr	r0, [r7, #8]
 8005ee4:	f000 f928 	bl	8006138 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eec:	f043 0210 	orr.w	r2, r3, #16
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ef4:	68b8      	ldr	r0, [r7, #8]
 8005ef6:	f7ff fef0 	bl	8005cda <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005efa:	bf00      	nop
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b086      	sub	sp, #24
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	60f8      	str	r0, [r7, #12]
 8005f0a:	60b9      	str	r1, [r7, #8]
 8005f0c:	603b      	str	r3, [r7, #0]
 8005f0e:	4613      	mov	r3, r2
 8005f10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f12:	e03b      	b.n	8005f8c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f14:	6a3b      	ldr	r3, [r7, #32]
 8005f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f1a:	d037      	beq.n	8005f8c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f1c:	f7fc fe5c 	bl	8002bd8 <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	6a3a      	ldr	r2, [r7, #32]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d302      	bcc.n	8005f32 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f2c:	6a3b      	ldr	r3, [r7, #32]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d101      	bne.n	8005f36 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e03a      	b.n	8005fac <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	f003 0304 	and.w	r3, r3, #4
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d023      	beq.n	8005f8c <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	2b80      	cmp	r3, #128	@ 0x80
 8005f48:	d020      	beq.n	8005f8c <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	2b40      	cmp	r3, #64	@ 0x40
 8005f4e:	d01d      	beq.n	8005f8c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0308 	and.w	r3, r3, #8
 8005f5a:	2b08      	cmp	r3, #8
 8005f5c:	d116      	bne.n	8005f8c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005f5e:	2300      	movs	r3, #0
 8005f60:	617b      	str	r3, [r7, #20]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	617b      	str	r3, [r7, #20]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	617b      	str	r3, [r7, #20]
 8005f72:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f000 f8df 	bl	8006138 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2208      	movs	r2, #8
 8005f7e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e00f      	b.n	8005fac <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	4013      	ands	r3, r2
 8005f96:	68ba      	ldr	r2, [r7, #8]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	bf0c      	ite	eq
 8005f9c:	2301      	moveq	r3, #1
 8005f9e:	2300      	movne	r3, #0
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	79fb      	ldrb	r3, [r7, #7]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d0b4      	beq.n	8005f14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3718      	adds	r7, #24
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b098      	sub	sp, #96	@ 0x60
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	88fa      	ldrh	r2, [r7, #6]
 8005fcc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2222      	movs	r2, #34	@ 0x22
 8005fd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fe0:	4a3e      	ldr	r2, [pc, #248]	@ (80060dc <UART_Start_Receive_DMA+0x128>)
 8005fe2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fe8:	4a3d      	ldr	r2, [pc, #244]	@ (80060e0 <UART_Start_Receive_DMA+0x12c>)
 8005fea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ff0:	4a3c      	ldr	r2, [pc, #240]	@ (80060e4 <UART_Start_Receive_DMA+0x130>)
 8005ff2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005ffc:	f107 0308 	add.w	r3, r7, #8
 8006000:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	3304      	adds	r3, #4
 800600c:	4619      	mov	r1, r3
 800600e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	88fb      	ldrh	r3, [r7, #6]
 8006014:	f7fc fef5 	bl	8002e02 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006018:	2300      	movs	r3, #0
 800601a:	613b      	str	r3, [r7, #16]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	613b      	str	r3, [r7, #16]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	613b      	str	r3, [r7, #16]
 800602c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d019      	beq.n	800606a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	330c      	adds	r3, #12
 800603c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006040:	e853 3f00 	ldrex	r3, [r3]
 8006044:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006046:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006048:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800604c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	330c      	adds	r3, #12
 8006054:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006056:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006058:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800605c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800605e:	e841 2300 	strex	r3, r2, [r1]
 8006062:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006064:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1e5      	bne.n	8006036 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	3314      	adds	r3, #20
 8006070:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006074:	e853 3f00 	ldrex	r3, [r3]
 8006078:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800607a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800607c:	f043 0301 	orr.w	r3, r3, #1
 8006080:	657b      	str	r3, [r7, #84]	@ 0x54
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	3314      	adds	r3, #20
 8006088:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800608a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800608c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006090:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006092:	e841 2300 	strex	r3, r2, [r1]
 8006096:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1e5      	bne.n	800606a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	3314      	adds	r3, #20
 80060a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	e853 3f00 	ldrex	r3, [r3]
 80060ac:	617b      	str	r3, [r7, #20]
   return(result);
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	3314      	adds	r3, #20
 80060bc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80060be:	627a      	str	r2, [r7, #36]	@ 0x24
 80060c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c2:	6a39      	ldr	r1, [r7, #32]
 80060c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060c6:	e841 2300 	strex	r3, r2, [r1]
 80060ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1e5      	bne.n	800609e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3760      	adds	r7, #96	@ 0x60
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	08005d07 	.word	0x08005d07
 80060e0:	08005e33 	.word	0x08005e33
 80060e4:	08005e6f 	.word	0x08005e6f

080060e8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b089      	sub	sp, #36	@ 0x24
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	330c      	adds	r3, #12
 80060f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	e853 3f00 	ldrex	r3, [r3]
 80060fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006106:	61fb      	str	r3, [r7, #28]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	330c      	adds	r3, #12
 800610e:	69fa      	ldr	r2, [r7, #28]
 8006110:	61ba      	str	r2, [r7, #24]
 8006112:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006114:	6979      	ldr	r1, [r7, #20]
 8006116:	69ba      	ldr	r2, [r7, #24]
 8006118:	e841 2300 	strex	r3, r2, [r1]
 800611c:	613b      	str	r3, [r7, #16]
   return(result);
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d1e5      	bne.n	80060f0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2220      	movs	r2, #32
 8006128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800612c:	bf00      	nop
 800612e:	3724      	adds	r7, #36	@ 0x24
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006138:	b480      	push	{r7}
 800613a:	b095      	sub	sp, #84	@ 0x54
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	330c      	adds	r3, #12
 8006146:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800614a:	e853 3f00 	ldrex	r3, [r3]
 800614e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006152:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006156:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	330c      	adds	r3, #12
 800615e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006160:	643a      	str	r2, [r7, #64]	@ 0x40
 8006162:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006164:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006166:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006168:	e841 2300 	strex	r3, r2, [r1]
 800616c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800616e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1e5      	bne.n	8006140 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	3314      	adds	r3, #20
 800617a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617c:	6a3b      	ldr	r3, [r7, #32]
 800617e:	e853 3f00 	ldrex	r3, [r3]
 8006182:	61fb      	str	r3, [r7, #28]
   return(result);
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	f023 0301 	bic.w	r3, r3, #1
 800618a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	3314      	adds	r3, #20
 8006192:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006194:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006196:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006198:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800619a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800619c:	e841 2300 	strex	r3, r2, [r1]
 80061a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80061a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1e5      	bne.n	8006174 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d119      	bne.n	80061e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	330c      	adds	r3, #12
 80061b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	e853 3f00 	ldrex	r3, [r3]
 80061be:	60bb      	str	r3, [r7, #8]
   return(result);
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	f023 0310 	bic.w	r3, r3, #16
 80061c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	330c      	adds	r3, #12
 80061ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061d0:	61ba      	str	r2, [r7, #24]
 80061d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d4:	6979      	ldr	r1, [r7, #20]
 80061d6:	69ba      	ldr	r2, [r7, #24]
 80061d8:	e841 2300 	strex	r3, r2, [r1]
 80061dc:	613b      	str	r3, [r7, #16]
   return(result);
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1e5      	bne.n	80061b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2220      	movs	r2, #32
 80061e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80061f2:	bf00      	nop
 80061f4:	3754      	adds	r7, #84	@ 0x54
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
	...

08006200 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006204:	b0c0      	sub	sp, #256	@ 0x100
 8006206:	af00      	add	r7, sp, #0
 8006208:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800620c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800621c:	68d9      	ldr	r1, [r3, #12]
 800621e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	ea40 0301 	orr.w	r3, r0, r1
 8006228:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800622a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800622e:	689a      	ldr	r2, [r3, #8]
 8006230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	431a      	orrs	r2, r3
 8006238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	431a      	orrs	r2, r3
 8006240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006244:	69db      	ldr	r3, [r3, #28]
 8006246:	4313      	orrs	r3, r2
 8006248:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800624c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006258:	f021 010c 	bic.w	r1, r1, #12
 800625c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006266:	430b      	orrs	r3, r1
 8006268:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800626a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800627a:	6999      	ldr	r1, [r3, #24]
 800627c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	ea40 0301 	orr.w	r3, r0, r1
 8006286:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	4b8f      	ldr	r3, [pc, #572]	@ (80064cc <UART_SetConfig+0x2cc>)
 8006290:	429a      	cmp	r2, r3
 8006292:	d005      	beq.n	80062a0 <UART_SetConfig+0xa0>
 8006294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	4b8d      	ldr	r3, [pc, #564]	@ (80064d0 <UART_SetConfig+0x2d0>)
 800629c:	429a      	cmp	r2, r3
 800629e:	d104      	bne.n	80062aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062a0:	f7fe f97e 	bl	80045a0 <HAL_RCC_GetPCLK2Freq>
 80062a4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80062a8:	e003      	b.n	80062b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062aa:	f7fe f965 	bl	8004578 <HAL_RCC_GetPCLK1Freq>
 80062ae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062b6:	69db      	ldr	r3, [r3, #28]
 80062b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062bc:	f040 810c 	bne.w	80064d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062c4:	2200      	movs	r2, #0
 80062c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80062ca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80062ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80062d2:	4622      	mov	r2, r4
 80062d4:	462b      	mov	r3, r5
 80062d6:	1891      	adds	r1, r2, r2
 80062d8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80062da:	415b      	adcs	r3, r3
 80062dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80062de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80062e2:	4621      	mov	r1, r4
 80062e4:	eb12 0801 	adds.w	r8, r2, r1
 80062e8:	4629      	mov	r1, r5
 80062ea:	eb43 0901 	adc.w	r9, r3, r1
 80062ee:	f04f 0200 	mov.w	r2, #0
 80062f2:	f04f 0300 	mov.w	r3, #0
 80062f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80062fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006302:	4690      	mov	r8, r2
 8006304:	4699      	mov	r9, r3
 8006306:	4623      	mov	r3, r4
 8006308:	eb18 0303 	adds.w	r3, r8, r3
 800630c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006310:	462b      	mov	r3, r5
 8006312:	eb49 0303 	adc.w	r3, r9, r3
 8006316:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800631a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006326:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800632a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800632e:	460b      	mov	r3, r1
 8006330:	18db      	adds	r3, r3, r3
 8006332:	653b      	str	r3, [r7, #80]	@ 0x50
 8006334:	4613      	mov	r3, r2
 8006336:	eb42 0303 	adc.w	r3, r2, r3
 800633a:	657b      	str	r3, [r7, #84]	@ 0x54
 800633c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006340:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006344:	f7fa fc98 	bl	8000c78 <__aeabi_uldivmod>
 8006348:	4602      	mov	r2, r0
 800634a:	460b      	mov	r3, r1
 800634c:	4b61      	ldr	r3, [pc, #388]	@ (80064d4 <UART_SetConfig+0x2d4>)
 800634e:	fba3 2302 	umull	r2, r3, r3, r2
 8006352:	095b      	lsrs	r3, r3, #5
 8006354:	011c      	lsls	r4, r3, #4
 8006356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800635a:	2200      	movs	r2, #0
 800635c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006360:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006364:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006368:	4642      	mov	r2, r8
 800636a:	464b      	mov	r3, r9
 800636c:	1891      	adds	r1, r2, r2
 800636e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006370:	415b      	adcs	r3, r3
 8006372:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006374:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006378:	4641      	mov	r1, r8
 800637a:	eb12 0a01 	adds.w	sl, r2, r1
 800637e:	4649      	mov	r1, r9
 8006380:	eb43 0b01 	adc.w	fp, r3, r1
 8006384:	f04f 0200 	mov.w	r2, #0
 8006388:	f04f 0300 	mov.w	r3, #0
 800638c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006390:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006394:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006398:	4692      	mov	sl, r2
 800639a:	469b      	mov	fp, r3
 800639c:	4643      	mov	r3, r8
 800639e:	eb1a 0303 	adds.w	r3, sl, r3
 80063a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80063a6:	464b      	mov	r3, r9
 80063a8:	eb4b 0303 	adc.w	r3, fp, r3
 80063ac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80063b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80063bc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80063c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80063c4:	460b      	mov	r3, r1
 80063c6:	18db      	adds	r3, r3, r3
 80063c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80063ca:	4613      	mov	r3, r2
 80063cc:	eb42 0303 	adc.w	r3, r2, r3
 80063d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80063d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80063d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80063da:	f7fa fc4d 	bl	8000c78 <__aeabi_uldivmod>
 80063de:	4602      	mov	r2, r0
 80063e0:	460b      	mov	r3, r1
 80063e2:	4611      	mov	r1, r2
 80063e4:	4b3b      	ldr	r3, [pc, #236]	@ (80064d4 <UART_SetConfig+0x2d4>)
 80063e6:	fba3 2301 	umull	r2, r3, r3, r1
 80063ea:	095b      	lsrs	r3, r3, #5
 80063ec:	2264      	movs	r2, #100	@ 0x64
 80063ee:	fb02 f303 	mul.w	r3, r2, r3
 80063f2:	1acb      	subs	r3, r1, r3
 80063f4:	00db      	lsls	r3, r3, #3
 80063f6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80063fa:	4b36      	ldr	r3, [pc, #216]	@ (80064d4 <UART_SetConfig+0x2d4>)
 80063fc:	fba3 2302 	umull	r2, r3, r3, r2
 8006400:	095b      	lsrs	r3, r3, #5
 8006402:	005b      	lsls	r3, r3, #1
 8006404:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006408:	441c      	add	r4, r3
 800640a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800640e:	2200      	movs	r2, #0
 8006410:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006414:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006418:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800641c:	4642      	mov	r2, r8
 800641e:	464b      	mov	r3, r9
 8006420:	1891      	adds	r1, r2, r2
 8006422:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006424:	415b      	adcs	r3, r3
 8006426:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006428:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800642c:	4641      	mov	r1, r8
 800642e:	1851      	adds	r1, r2, r1
 8006430:	6339      	str	r1, [r7, #48]	@ 0x30
 8006432:	4649      	mov	r1, r9
 8006434:	414b      	adcs	r3, r1
 8006436:	637b      	str	r3, [r7, #52]	@ 0x34
 8006438:	f04f 0200 	mov.w	r2, #0
 800643c:	f04f 0300 	mov.w	r3, #0
 8006440:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006444:	4659      	mov	r1, fp
 8006446:	00cb      	lsls	r3, r1, #3
 8006448:	4651      	mov	r1, sl
 800644a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800644e:	4651      	mov	r1, sl
 8006450:	00ca      	lsls	r2, r1, #3
 8006452:	4610      	mov	r0, r2
 8006454:	4619      	mov	r1, r3
 8006456:	4603      	mov	r3, r0
 8006458:	4642      	mov	r2, r8
 800645a:	189b      	adds	r3, r3, r2
 800645c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006460:	464b      	mov	r3, r9
 8006462:	460a      	mov	r2, r1
 8006464:	eb42 0303 	adc.w	r3, r2, r3
 8006468:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800646c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006478:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800647c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006480:	460b      	mov	r3, r1
 8006482:	18db      	adds	r3, r3, r3
 8006484:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006486:	4613      	mov	r3, r2
 8006488:	eb42 0303 	adc.w	r3, r2, r3
 800648c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800648e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006492:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006496:	f7fa fbef 	bl	8000c78 <__aeabi_uldivmod>
 800649a:	4602      	mov	r2, r0
 800649c:	460b      	mov	r3, r1
 800649e:	4b0d      	ldr	r3, [pc, #52]	@ (80064d4 <UART_SetConfig+0x2d4>)
 80064a0:	fba3 1302 	umull	r1, r3, r3, r2
 80064a4:	095b      	lsrs	r3, r3, #5
 80064a6:	2164      	movs	r1, #100	@ 0x64
 80064a8:	fb01 f303 	mul.w	r3, r1, r3
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	00db      	lsls	r3, r3, #3
 80064b0:	3332      	adds	r3, #50	@ 0x32
 80064b2:	4a08      	ldr	r2, [pc, #32]	@ (80064d4 <UART_SetConfig+0x2d4>)
 80064b4:	fba2 2303 	umull	r2, r3, r2, r3
 80064b8:	095b      	lsrs	r3, r3, #5
 80064ba:	f003 0207 	and.w	r2, r3, #7
 80064be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4422      	add	r2, r4
 80064c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80064c8:	e106      	b.n	80066d8 <UART_SetConfig+0x4d8>
 80064ca:	bf00      	nop
 80064cc:	40011000 	.word	0x40011000
 80064d0:	40011400 	.word	0x40011400
 80064d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064dc:	2200      	movs	r2, #0
 80064de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80064e2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80064e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80064ea:	4642      	mov	r2, r8
 80064ec:	464b      	mov	r3, r9
 80064ee:	1891      	adds	r1, r2, r2
 80064f0:	6239      	str	r1, [r7, #32]
 80064f2:	415b      	adcs	r3, r3
 80064f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80064f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80064fa:	4641      	mov	r1, r8
 80064fc:	1854      	adds	r4, r2, r1
 80064fe:	4649      	mov	r1, r9
 8006500:	eb43 0501 	adc.w	r5, r3, r1
 8006504:	f04f 0200 	mov.w	r2, #0
 8006508:	f04f 0300 	mov.w	r3, #0
 800650c:	00eb      	lsls	r3, r5, #3
 800650e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006512:	00e2      	lsls	r2, r4, #3
 8006514:	4614      	mov	r4, r2
 8006516:	461d      	mov	r5, r3
 8006518:	4643      	mov	r3, r8
 800651a:	18e3      	adds	r3, r4, r3
 800651c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006520:	464b      	mov	r3, r9
 8006522:	eb45 0303 	adc.w	r3, r5, r3
 8006526:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800652a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006536:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800653a:	f04f 0200 	mov.w	r2, #0
 800653e:	f04f 0300 	mov.w	r3, #0
 8006542:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006546:	4629      	mov	r1, r5
 8006548:	008b      	lsls	r3, r1, #2
 800654a:	4621      	mov	r1, r4
 800654c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006550:	4621      	mov	r1, r4
 8006552:	008a      	lsls	r2, r1, #2
 8006554:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006558:	f7fa fb8e 	bl	8000c78 <__aeabi_uldivmod>
 800655c:	4602      	mov	r2, r0
 800655e:	460b      	mov	r3, r1
 8006560:	4b60      	ldr	r3, [pc, #384]	@ (80066e4 <UART_SetConfig+0x4e4>)
 8006562:	fba3 2302 	umull	r2, r3, r3, r2
 8006566:	095b      	lsrs	r3, r3, #5
 8006568:	011c      	lsls	r4, r3, #4
 800656a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800656e:	2200      	movs	r2, #0
 8006570:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006574:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006578:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800657c:	4642      	mov	r2, r8
 800657e:	464b      	mov	r3, r9
 8006580:	1891      	adds	r1, r2, r2
 8006582:	61b9      	str	r1, [r7, #24]
 8006584:	415b      	adcs	r3, r3
 8006586:	61fb      	str	r3, [r7, #28]
 8006588:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800658c:	4641      	mov	r1, r8
 800658e:	1851      	adds	r1, r2, r1
 8006590:	6139      	str	r1, [r7, #16]
 8006592:	4649      	mov	r1, r9
 8006594:	414b      	adcs	r3, r1
 8006596:	617b      	str	r3, [r7, #20]
 8006598:	f04f 0200 	mov.w	r2, #0
 800659c:	f04f 0300 	mov.w	r3, #0
 80065a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065a4:	4659      	mov	r1, fp
 80065a6:	00cb      	lsls	r3, r1, #3
 80065a8:	4651      	mov	r1, sl
 80065aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065ae:	4651      	mov	r1, sl
 80065b0:	00ca      	lsls	r2, r1, #3
 80065b2:	4610      	mov	r0, r2
 80065b4:	4619      	mov	r1, r3
 80065b6:	4603      	mov	r3, r0
 80065b8:	4642      	mov	r2, r8
 80065ba:	189b      	adds	r3, r3, r2
 80065bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80065c0:	464b      	mov	r3, r9
 80065c2:	460a      	mov	r2, r1
 80065c4:	eb42 0303 	adc.w	r3, r2, r3
 80065c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80065cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80065d6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80065d8:	f04f 0200 	mov.w	r2, #0
 80065dc:	f04f 0300 	mov.w	r3, #0
 80065e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80065e4:	4649      	mov	r1, r9
 80065e6:	008b      	lsls	r3, r1, #2
 80065e8:	4641      	mov	r1, r8
 80065ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065ee:	4641      	mov	r1, r8
 80065f0:	008a      	lsls	r2, r1, #2
 80065f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80065f6:	f7fa fb3f 	bl	8000c78 <__aeabi_uldivmod>
 80065fa:	4602      	mov	r2, r0
 80065fc:	460b      	mov	r3, r1
 80065fe:	4611      	mov	r1, r2
 8006600:	4b38      	ldr	r3, [pc, #224]	@ (80066e4 <UART_SetConfig+0x4e4>)
 8006602:	fba3 2301 	umull	r2, r3, r3, r1
 8006606:	095b      	lsrs	r3, r3, #5
 8006608:	2264      	movs	r2, #100	@ 0x64
 800660a:	fb02 f303 	mul.w	r3, r2, r3
 800660e:	1acb      	subs	r3, r1, r3
 8006610:	011b      	lsls	r3, r3, #4
 8006612:	3332      	adds	r3, #50	@ 0x32
 8006614:	4a33      	ldr	r2, [pc, #204]	@ (80066e4 <UART_SetConfig+0x4e4>)
 8006616:	fba2 2303 	umull	r2, r3, r2, r3
 800661a:	095b      	lsrs	r3, r3, #5
 800661c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006620:	441c      	add	r4, r3
 8006622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006626:	2200      	movs	r2, #0
 8006628:	673b      	str	r3, [r7, #112]	@ 0x70
 800662a:	677a      	str	r2, [r7, #116]	@ 0x74
 800662c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006630:	4642      	mov	r2, r8
 8006632:	464b      	mov	r3, r9
 8006634:	1891      	adds	r1, r2, r2
 8006636:	60b9      	str	r1, [r7, #8]
 8006638:	415b      	adcs	r3, r3
 800663a:	60fb      	str	r3, [r7, #12]
 800663c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006640:	4641      	mov	r1, r8
 8006642:	1851      	adds	r1, r2, r1
 8006644:	6039      	str	r1, [r7, #0]
 8006646:	4649      	mov	r1, r9
 8006648:	414b      	adcs	r3, r1
 800664a:	607b      	str	r3, [r7, #4]
 800664c:	f04f 0200 	mov.w	r2, #0
 8006650:	f04f 0300 	mov.w	r3, #0
 8006654:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006658:	4659      	mov	r1, fp
 800665a:	00cb      	lsls	r3, r1, #3
 800665c:	4651      	mov	r1, sl
 800665e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006662:	4651      	mov	r1, sl
 8006664:	00ca      	lsls	r2, r1, #3
 8006666:	4610      	mov	r0, r2
 8006668:	4619      	mov	r1, r3
 800666a:	4603      	mov	r3, r0
 800666c:	4642      	mov	r2, r8
 800666e:	189b      	adds	r3, r3, r2
 8006670:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006672:	464b      	mov	r3, r9
 8006674:	460a      	mov	r2, r1
 8006676:	eb42 0303 	adc.w	r3, r2, r3
 800667a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800667c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	663b      	str	r3, [r7, #96]	@ 0x60
 8006686:	667a      	str	r2, [r7, #100]	@ 0x64
 8006688:	f04f 0200 	mov.w	r2, #0
 800668c:	f04f 0300 	mov.w	r3, #0
 8006690:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006694:	4649      	mov	r1, r9
 8006696:	008b      	lsls	r3, r1, #2
 8006698:	4641      	mov	r1, r8
 800669a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800669e:	4641      	mov	r1, r8
 80066a0:	008a      	lsls	r2, r1, #2
 80066a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80066a6:	f7fa fae7 	bl	8000c78 <__aeabi_uldivmod>
 80066aa:	4602      	mov	r2, r0
 80066ac:	460b      	mov	r3, r1
 80066ae:	4b0d      	ldr	r3, [pc, #52]	@ (80066e4 <UART_SetConfig+0x4e4>)
 80066b0:	fba3 1302 	umull	r1, r3, r3, r2
 80066b4:	095b      	lsrs	r3, r3, #5
 80066b6:	2164      	movs	r1, #100	@ 0x64
 80066b8:	fb01 f303 	mul.w	r3, r1, r3
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	011b      	lsls	r3, r3, #4
 80066c0:	3332      	adds	r3, #50	@ 0x32
 80066c2:	4a08      	ldr	r2, [pc, #32]	@ (80066e4 <UART_SetConfig+0x4e4>)
 80066c4:	fba2 2303 	umull	r2, r3, r2, r3
 80066c8:	095b      	lsrs	r3, r3, #5
 80066ca:	f003 020f 	and.w	r2, r3, #15
 80066ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4422      	add	r2, r4
 80066d6:	609a      	str	r2, [r3, #8]
}
 80066d8:	bf00      	nop
 80066da:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80066de:	46bd      	mov	sp, r7
 80066e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066e4:	51eb851f 	.word	0x51eb851f

080066e8 <atoi>:
 80066e8:	220a      	movs	r2, #10
 80066ea:	2100      	movs	r1, #0
 80066ec:	f000 b87a 	b.w	80067e4 <strtol>

080066f0 <_strtol_l.constprop.0>:
 80066f0:	2b24      	cmp	r3, #36	@ 0x24
 80066f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066f6:	4686      	mov	lr, r0
 80066f8:	4690      	mov	r8, r2
 80066fa:	d801      	bhi.n	8006700 <_strtol_l.constprop.0+0x10>
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d106      	bne.n	800670e <_strtol_l.constprop.0+0x1e>
 8006700:	f000 f8c6 	bl	8006890 <__errno>
 8006704:	2316      	movs	r3, #22
 8006706:	6003      	str	r3, [r0, #0]
 8006708:	2000      	movs	r0, #0
 800670a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800670e:	4834      	ldr	r0, [pc, #208]	@ (80067e0 <_strtol_l.constprop.0+0xf0>)
 8006710:	460d      	mov	r5, r1
 8006712:	462a      	mov	r2, r5
 8006714:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006718:	5d06      	ldrb	r6, [r0, r4]
 800671a:	f016 0608 	ands.w	r6, r6, #8
 800671e:	d1f8      	bne.n	8006712 <_strtol_l.constprop.0+0x22>
 8006720:	2c2d      	cmp	r4, #45	@ 0x2d
 8006722:	d12d      	bne.n	8006780 <_strtol_l.constprop.0+0x90>
 8006724:	782c      	ldrb	r4, [r5, #0]
 8006726:	2601      	movs	r6, #1
 8006728:	1c95      	adds	r5, r2, #2
 800672a:	f033 0210 	bics.w	r2, r3, #16
 800672e:	d109      	bne.n	8006744 <_strtol_l.constprop.0+0x54>
 8006730:	2c30      	cmp	r4, #48	@ 0x30
 8006732:	d12a      	bne.n	800678a <_strtol_l.constprop.0+0x9a>
 8006734:	782a      	ldrb	r2, [r5, #0]
 8006736:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800673a:	2a58      	cmp	r2, #88	@ 0x58
 800673c:	d125      	bne.n	800678a <_strtol_l.constprop.0+0x9a>
 800673e:	786c      	ldrb	r4, [r5, #1]
 8006740:	2310      	movs	r3, #16
 8006742:	3502      	adds	r5, #2
 8006744:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006748:	f10c 3cff 	add.w	ip, ip, #4294967295
 800674c:	2200      	movs	r2, #0
 800674e:	fbbc f9f3 	udiv	r9, ip, r3
 8006752:	4610      	mov	r0, r2
 8006754:	fb03 ca19 	mls	sl, r3, r9, ip
 8006758:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800675c:	2f09      	cmp	r7, #9
 800675e:	d81b      	bhi.n	8006798 <_strtol_l.constprop.0+0xa8>
 8006760:	463c      	mov	r4, r7
 8006762:	42a3      	cmp	r3, r4
 8006764:	dd27      	ble.n	80067b6 <_strtol_l.constprop.0+0xc6>
 8006766:	1c57      	adds	r7, r2, #1
 8006768:	d007      	beq.n	800677a <_strtol_l.constprop.0+0x8a>
 800676a:	4581      	cmp	r9, r0
 800676c:	d320      	bcc.n	80067b0 <_strtol_l.constprop.0+0xc0>
 800676e:	d101      	bne.n	8006774 <_strtol_l.constprop.0+0x84>
 8006770:	45a2      	cmp	sl, r4
 8006772:	db1d      	blt.n	80067b0 <_strtol_l.constprop.0+0xc0>
 8006774:	fb00 4003 	mla	r0, r0, r3, r4
 8006778:	2201      	movs	r2, #1
 800677a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800677e:	e7eb      	b.n	8006758 <_strtol_l.constprop.0+0x68>
 8006780:	2c2b      	cmp	r4, #43	@ 0x2b
 8006782:	bf04      	itt	eq
 8006784:	782c      	ldrbeq	r4, [r5, #0]
 8006786:	1c95      	addeq	r5, r2, #2
 8006788:	e7cf      	b.n	800672a <_strtol_l.constprop.0+0x3a>
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1da      	bne.n	8006744 <_strtol_l.constprop.0+0x54>
 800678e:	2c30      	cmp	r4, #48	@ 0x30
 8006790:	bf0c      	ite	eq
 8006792:	2308      	moveq	r3, #8
 8006794:	230a      	movne	r3, #10
 8006796:	e7d5      	b.n	8006744 <_strtol_l.constprop.0+0x54>
 8006798:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800679c:	2f19      	cmp	r7, #25
 800679e:	d801      	bhi.n	80067a4 <_strtol_l.constprop.0+0xb4>
 80067a0:	3c37      	subs	r4, #55	@ 0x37
 80067a2:	e7de      	b.n	8006762 <_strtol_l.constprop.0+0x72>
 80067a4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80067a8:	2f19      	cmp	r7, #25
 80067aa:	d804      	bhi.n	80067b6 <_strtol_l.constprop.0+0xc6>
 80067ac:	3c57      	subs	r4, #87	@ 0x57
 80067ae:	e7d8      	b.n	8006762 <_strtol_l.constprop.0+0x72>
 80067b0:	f04f 32ff 	mov.w	r2, #4294967295
 80067b4:	e7e1      	b.n	800677a <_strtol_l.constprop.0+0x8a>
 80067b6:	1c53      	adds	r3, r2, #1
 80067b8:	d108      	bne.n	80067cc <_strtol_l.constprop.0+0xdc>
 80067ba:	2322      	movs	r3, #34	@ 0x22
 80067bc:	f8ce 3000 	str.w	r3, [lr]
 80067c0:	4660      	mov	r0, ip
 80067c2:	f1b8 0f00 	cmp.w	r8, #0
 80067c6:	d0a0      	beq.n	800670a <_strtol_l.constprop.0+0x1a>
 80067c8:	1e69      	subs	r1, r5, #1
 80067ca:	e006      	b.n	80067da <_strtol_l.constprop.0+0xea>
 80067cc:	b106      	cbz	r6, 80067d0 <_strtol_l.constprop.0+0xe0>
 80067ce:	4240      	negs	r0, r0
 80067d0:	f1b8 0f00 	cmp.w	r8, #0
 80067d4:	d099      	beq.n	800670a <_strtol_l.constprop.0+0x1a>
 80067d6:	2a00      	cmp	r2, #0
 80067d8:	d1f6      	bne.n	80067c8 <_strtol_l.constprop.0+0xd8>
 80067da:	f8c8 1000 	str.w	r1, [r8]
 80067de:	e794      	b.n	800670a <_strtol_l.constprop.0+0x1a>
 80067e0:	080085cd 	.word	0x080085cd

080067e4 <strtol>:
 80067e4:	4613      	mov	r3, r2
 80067e6:	460a      	mov	r2, r1
 80067e8:	4601      	mov	r1, r0
 80067ea:	4802      	ldr	r0, [pc, #8]	@ (80067f4 <strtol+0x10>)
 80067ec:	6800      	ldr	r0, [r0, #0]
 80067ee:	f7ff bf7f 	b.w	80066f0 <_strtol_l.constprop.0>
 80067f2:	bf00      	nop
 80067f4:	2000003c 	.word	0x2000003c

080067f8 <siprintf>:
 80067f8:	b40e      	push	{r1, r2, r3}
 80067fa:	b500      	push	{lr}
 80067fc:	b09c      	sub	sp, #112	@ 0x70
 80067fe:	ab1d      	add	r3, sp, #116	@ 0x74
 8006800:	9002      	str	r0, [sp, #8]
 8006802:	9006      	str	r0, [sp, #24]
 8006804:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006808:	4809      	ldr	r0, [pc, #36]	@ (8006830 <siprintf+0x38>)
 800680a:	9107      	str	r1, [sp, #28]
 800680c:	9104      	str	r1, [sp, #16]
 800680e:	4909      	ldr	r1, [pc, #36]	@ (8006834 <siprintf+0x3c>)
 8006810:	f853 2b04 	ldr.w	r2, [r3], #4
 8006814:	9105      	str	r1, [sp, #20]
 8006816:	6800      	ldr	r0, [r0, #0]
 8006818:	9301      	str	r3, [sp, #4]
 800681a:	a902      	add	r1, sp, #8
 800681c:	f000 f9c6 	bl	8006bac <_svfiprintf_r>
 8006820:	9b02      	ldr	r3, [sp, #8]
 8006822:	2200      	movs	r2, #0
 8006824:	701a      	strb	r2, [r3, #0]
 8006826:	b01c      	add	sp, #112	@ 0x70
 8006828:	f85d eb04 	ldr.w	lr, [sp], #4
 800682c:	b003      	add	sp, #12
 800682e:	4770      	bx	lr
 8006830:	2000003c 	.word	0x2000003c
 8006834:	ffff0208 	.word	0xffff0208

08006838 <memset>:
 8006838:	4402      	add	r2, r0
 800683a:	4603      	mov	r3, r0
 800683c:	4293      	cmp	r3, r2
 800683e:	d100      	bne.n	8006842 <memset+0xa>
 8006840:	4770      	bx	lr
 8006842:	f803 1b01 	strb.w	r1, [r3], #1
 8006846:	e7f9      	b.n	800683c <memset+0x4>

08006848 <strchr>:
 8006848:	b2c9      	uxtb	r1, r1
 800684a:	4603      	mov	r3, r0
 800684c:	4618      	mov	r0, r3
 800684e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006852:	b112      	cbz	r2, 800685a <strchr+0x12>
 8006854:	428a      	cmp	r2, r1
 8006856:	d1f9      	bne.n	800684c <strchr+0x4>
 8006858:	4770      	bx	lr
 800685a:	2900      	cmp	r1, #0
 800685c:	bf18      	it	ne
 800685e:	2000      	movne	r0, #0
 8006860:	4770      	bx	lr

08006862 <strstr>:
 8006862:	780a      	ldrb	r2, [r1, #0]
 8006864:	b570      	push	{r4, r5, r6, lr}
 8006866:	b96a      	cbnz	r2, 8006884 <strstr+0x22>
 8006868:	bd70      	pop	{r4, r5, r6, pc}
 800686a:	429a      	cmp	r2, r3
 800686c:	d109      	bne.n	8006882 <strstr+0x20>
 800686e:	460c      	mov	r4, r1
 8006870:	4605      	mov	r5, r0
 8006872:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006876:	2b00      	cmp	r3, #0
 8006878:	d0f6      	beq.n	8006868 <strstr+0x6>
 800687a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800687e:	429e      	cmp	r6, r3
 8006880:	d0f7      	beq.n	8006872 <strstr+0x10>
 8006882:	3001      	adds	r0, #1
 8006884:	7803      	ldrb	r3, [r0, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1ef      	bne.n	800686a <strstr+0x8>
 800688a:	4618      	mov	r0, r3
 800688c:	e7ec      	b.n	8006868 <strstr+0x6>
	...

08006890 <__errno>:
 8006890:	4b01      	ldr	r3, [pc, #4]	@ (8006898 <__errno+0x8>)
 8006892:	6818      	ldr	r0, [r3, #0]
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop
 8006898:	2000003c 	.word	0x2000003c

0800689c <__libc_init_array>:
 800689c:	b570      	push	{r4, r5, r6, lr}
 800689e:	4d0d      	ldr	r5, [pc, #52]	@ (80068d4 <__libc_init_array+0x38>)
 80068a0:	4c0d      	ldr	r4, [pc, #52]	@ (80068d8 <__libc_init_array+0x3c>)
 80068a2:	1b64      	subs	r4, r4, r5
 80068a4:	10a4      	asrs	r4, r4, #2
 80068a6:	2600      	movs	r6, #0
 80068a8:	42a6      	cmp	r6, r4
 80068aa:	d109      	bne.n	80068c0 <__libc_init_array+0x24>
 80068ac:	4d0b      	ldr	r5, [pc, #44]	@ (80068dc <__libc_init_array+0x40>)
 80068ae:	4c0c      	ldr	r4, [pc, #48]	@ (80068e0 <__libc_init_array+0x44>)
 80068b0:	f001 fe28 	bl	8008504 <_init>
 80068b4:	1b64      	subs	r4, r4, r5
 80068b6:	10a4      	asrs	r4, r4, #2
 80068b8:	2600      	movs	r6, #0
 80068ba:	42a6      	cmp	r6, r4
 80068bc:	d105      	bne.n	80068ca <__libc_init_array+0x2e>
 80068be:	bd70      	pop	{r4, r5, r6, pc}
 80068c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80068c4:	4798      	blx	r3
 80068c6:	3601      	adds	r6, #1
 80068c8:	e7ee      	b.n	80068a8 <__libc_init_array+0xc>
 80068ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80068ce:	4798      	blx	r3
 80068d0:	3601      	adds	r6, #1
 80068d2:	e7f2      	b.n	80068ba <__libc_init_array+0x1e>
 80068d4:	080087a8 	.word	0x080087a8
 80068d8:	080087a8 	.word	0x080087a8
 80068dc:	080087a8 	.word	0x080087a8
 80068e0:	080087ac 	.word	0x080087ac

080068e4 <__retarget_lock_acquire_recursive>:
 80068e4:	4770      	bx	lr

080068e6 <__retarget_lock_release_recursive>:
 80068e6:	4770      	bx	lr

080068e8 <memcpy>:
 80068e8:	440a      	add	r2, r1
 80068ea:	4291      	cmp	r1, r2
 80068ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80068f0:	d100      	bne.n	80068f4 <memcpy+0xc>
 80068f2:	4770      	bx	lr
 80068f4:	b510      	push	{r4, lr}
 80068f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068fe:	4291      	cmp	r1, r2
 8006900:	d1f9      	bne.n	80068f6 <memcpy+0xe>
 8006902:	bd10      	pop	{r4, pc}

08006904 <_free_r>:
 8006904:	b538      	push	{r3, r4, r5, lr}
 8006906:	4605      	mov	r5, r0
 8006908:	2900      	cmp	r1, #0
 800690a:	d041      	beq.n	8006990 <_free_r+0x8c>
 800690c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006910:	1f0c      	subs	r4, r1, #4
 8006912:	2b00      	cmp	r3, #0
 8006914:	bfb8      	it	lt
 8006916:	18e4      	addlt	r4, r4, r3
 8006918:	f000 f8e0 	bl	8006adc <__malloc_lock>
 800691c:	4a1d      	ldr	r2, [pc, #116]	@ (8006994 <_free_r+0x90>)
 800691e:	6813      	ldr	r3, [r2, #0]
 8006920:	b933      	cbnz	r3, 8006930 <_free_r+0x2c>
 8006922:	6063      	str	r3, [r4, #4]
 8006924:	6014      	str	r4, [r2, #0]
 8006926:	4628      	mov	r0, r5
 8006928:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800692c:	f000 b8dc 	b.w	8006ae8 <__malloc_unlock>
 8006930:	42a3      	cmp	r3, r4
 8006932:	d908      	bls.n	8006946 <_free_r+0x42>
 8006934:	6820      	ldr	r0, [r4, #0]
 8006936:	1821      	adds	r1, r4, r0
 8006938:	428b      	cmp	r3, r1
 800693a:	bf01      	itttt	eq
 800693c:	6819      	ldreq	r1, [r3, #0]
 800693e:	685b      	ldreq	r3, [r3, #4]
 8006940:	1809      	addeq	r1, r1, r0
 8006942:	6021      	streq	r1, [r4, #0]
 8006944:	e7ed      	b.n	8006922 <_free_r+0x1e>
 8006946:	461a      	mov	r2, r3
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	b10b      	cbz	r3, 8006950 <_free_r+0x4c>
 800694c:	42a3      	cmp	r3, r4
 800694e:	d9fa      	bls.n	8006946 <_free_r+0x42>
 8006950:	6811      	ldr	r1, [r2, #0]
 8006952:	1850      	adds	r0, r2, r1
 8006954:	42a0      	cmp	r0, r4
 8006956:	d10b      	bne.n	8006970 <_free_r+0x6c>
 8006958:	6820      	ldr	r0, [r4, #0]
 800695a:	4401      	add	r1, r0
 800695c:	1850      	adds	r0, r2, r1
 800695e:	4283      	cmp	r3, r0
 8006960:	6011      	str	r1, [r2, #0]
 8006962:	d1e0      	bne.n	8006926 <_free_r+0x22>
 8006964:	6818      	ldr	r0, [r3, #0]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	6053      	str	r3, [r2, #4]
 800696a:	4408      	add	r0, r1
 800696c:	6010      	str	r0, [r2, #0]
 800696e:	e7da      	b.n	8006926 <_free_r+0x22>
 8006970:	d902      	bls.n	8006978 <_free_r+0x74>
 8006972:	230c      	movs	r3, #12
 8006974:	602b      	str	r3, [r5, #0]
 8006976:	e7d6      	b.n	8006926 <_free_r+0x22>
 8006978:	6820      	ldr	r0, [r4, #0]
 800697a:	1821      	adds	r1, r4, r0
 800697c:	428b      	cmp	r3, r1
 800697e:	bf04      	itt	eq
 8006980:	6819      	ldreq	r1, [r3, #0]
 8006982:	685b      	ldreq	r3, [r3, #4]
 8006984:	6063      	str	r3, [r4, #4]
 8006986:	bf04      	itt	eq
 8006988:	1809      	addeq	r1, r1, r0
 800698a:	6021      	streq	r1, [r4, #0]
 800698c:	6054      	str	r4, [r2, #4]
 800698e:	e7ca      	b.n	8006926 <_free_r+0x22>
 8006990:	bd38      	pop	{r3, r4, r5, pc}
 8006992:	bf00      	nop
 8006994:	20000a10 	.word	0x20000a10

08006998 <sbrk_aligned>:
 8006998:	b570      	push	{r4, r5, r6, lr}
 800699a:	4e0f      	ldr	r6, [pc, #60]	@ (80069d8 <sbrk_aligned+0x40>)
 800699c:	460c      	mov	r4, r1
 800699e:	6831      	ldr	r1, [r6, #0]
 80069a0:	4605      	mov	r5, r0
 80069a2:	b911      	cbnz	r1, 80069aa <sbrk_aligned+0x12>
 80069a4:	f000 fba6 	bl	80070f4 <_sbrk_r>
 80069a8:	6030      	str	r0, [r6, #0]
 80069aa:	4621      	mov	r1, r4
 80069ac:	4628      	mov	r0, r5
 80069ae:	f000 fba1 	bl	80070f4 <_sbrk_r>
 80069b2:	1c43      	adds	r3, r0, #1
 80069b4:	d103      	bne.n	80069be <sbrk_aligned+0x26>
 80069b6:	f04f 34ff 	mov.w	r4, #4294967295
 80069ba:	4620      	mov	r0, r4
 80069bc:	bd70      	pop	{r4, r5, r6, pc}
 80069be:	1cc4      	adds	r4, r0, #3
 80069c0:	f024 0403 	bic.w	r4, r4, #3
 80069c4:	42a0      	cmp	r0, r4
 80069c6:	d0f8      	beq.n	80069ba <sbrk_aligned+0x22>
 80069c8:	1a21      	subs	r1, r4, r0
 80069ca:	4628      	mov	r0, r5
 80069cc:	f000 fb92 	bl	80070f4 <_sbrk_r>
 80069d0:	3001      	adds	r0, #1
 80069d2:	d1f2      	bne.n	80069ba <sbrk_aligned+0x22>
 80069d4:	e7ef      	b.n	80069b6 <sbrk_aligned+0x1e>
 80069d6:	bf00      	nop
 80069d8:	20000a0c 	.word	0x20000a0c

080069dc <_malloc_r>:
 80069dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069e0:	1ccd      	adds	r5, r1, #3
 80069e2:	f025 0503 	bic.w	r5, r5, #3
 80069e6:	3508      	adds	r5, #8
 80069e8:	2d0c      	cmp	r5, #12
 80069ea:	bf38      	it	cc
 80069ec:	250c      	movcc	r5, #12
 80069ee:	2d00      	cmp	r5, #0
 80069f0:	4606      	mov	r6, r0
 80069f2:	db01      	blt.n	80069f8 <_malloc_r+0x1c>
 80069f4:	42a9      	cmp	r1, r5
 80069f6:	d904      	bls.n	8006a02 <_malloc_r+0x26>
 80069f8:	230c      	movs	r3, #12
 80069fa:	6033      	str	r3, [r6, #0]
 80069fc:	2000      	movs	r0, #0
 80069fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006ad8 <_malloc_r+0xfc>
 8006a06:	f000 f869 	bl	8006adc <__malloc_lock>
 8006a0a:	f8d8 3000 	ldr.w	r3, [r8]
 8006a0e:	461c      	mov	r4, r3
 8006a10:	bb44      	cbnz	r4, 8006a64 <_malloc_r+0x88>
 8006a12:	4629      	mov	r1, r5
 8006a14:	4630      	mov	r0, r6
 8006a16:	f7ff ffbf 	bl	8006998 <sbrk_aligned>
 8006a1a:	1c43      	adds	r3, r0, #1
 8006a1c:	4604      	mov	r4, r0
 8006a1e:	d158      	bne.n	8006ad2 <_malloc_r+0xf6>
 8006a20:	f8d8 4000 	ldr.w	r4, [r8]
 8006a24:	4627      	mov	r7, r4
 8006a26:	2f00      	cmp	r7, #0
 8006a28:	d143      	bne.n	8006ab2 <_malloc_r+0xd6>
 8006a2a:	2c00      	cmp	r4, #0
 8006a2c:	d04b      	beq.n	8006ac6 <_malloc_r+0xea>
 8006a2e:	6823      	ldr	r3, [r4, #0]
 8006a30:	4639      	mov	r1, r7
 8006a32:	4630      	mov	r0, r6
 8006a34:	eb04 0903 	add.w	r9, r4, r3
 8006a38:	f000 fb5c 	bl	80070f4 <_sbrk_r>
 8006a3c:	4581      	cmp	r9, r0
 8006a3e:	d142      	bne.n	8006ac6 <_malloc_r+0xea>
 8006a40:	6821      	ldr	r1, [r4, #0]
 8006a42:	1a6d      	subs	r5, r5, r1
 8006a44:	4629      	mov	r1, r5
 8006a46:	4630      	mov	r0, r6
 8006a48:	f7ff ffa6 	bl	8006998 <sbrk_aligned>
 8006a4c:	3001      	adds	r0, #1
 8006a4e:	d03a      	beq.n	8006ac6 <_malloc_r+0xea>
 8006a50:	6823      	ldr	r3, [r4, #0]
 8006a52:	442b      	add	r3, r5
 8006a54:	6023      	str	r3, [r4, #0]
 8006a56:	f8d8 3000 	ldr.w	r3, [r8]
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	bb62      	cbnz	r2, 8006ab8 <_malloc_r+0xdc>
 8006a5e:	f8c8 7000 	str.w	r7, [r8]
 8006a62:	e00f      	b.n	8006a84 <_malloc_r+0xa8>
 8006a64:	6822      	ldr	r2, [r4, #0]
 8006a66:	1b52      	subs	r2, r2, r5
 8006a68:	d420      	bmi.n	8006aac <_malloc_r+0xd0>
 8006a6a:	2a0b      	cmp	r2, #11
 8006a6c:	d917      	bls.n	8006a9e <_malloc_r+0xc2>
 8006a6e:	1961      	adds	r1, r4, r5
 8006a70:	42a3      	cmp	r3, r4
 8006a72:	6025      	str	r5, [r4, #0]
 8006a74:	bf18      	it	ne
 8006a76:	6059      	strne	r1, [r3, #4]
 8006a78:	6863      	ldr	r3, [r4, #4]
 8006a7a:	bf08      	it	eq
 8006a7c:	f8c8 1000 	streq.w	r1, [r8]
 8006a80:	5162      	str	r2, [r4, r5]
 8006a82:	604b      	str	r3, [r1, #4]
 8006a84:	4630      	mov	r0, r6
 8006a86:	f000 f82f 	bl	8006ae8 <__malloc_unlock>
 8006a8a:	f104 000b 	add.w	r0, r4, #11
 8006a8e:	1d23      	adds	r3, r4, #4
 8006a90:	f020 0007 	bic.w	r0, r0, #7
 8006a94:	1ac2      	subs	r2, r0, r3
 8006a96:	bf1c      	itt	ne
 8006a98:	1a1b      	subne	r3, r3, r0
 8006a9a:	50a3      	strne	r3, [r4, r2]
 8006a9c:	e7af      	b.n	80069fe <_malloc_r+0x22>
 8006a9e:	6862      	ldr	r2, [r4, #4]
 8006aa0:	42a3      	cmp	r3, r4
 8006aa2:	bf0c      	ite	eq
 8006aa4:	f8c8 2000 	streq.w	r2, [r8]
 8006aa8:	605a      	strne	r2, [r3, #4]
 8006aaa:	e7eb      	b.n	8006a84 <_malloc_r+0xa8>
 8006aac:	4623      	mov	r3, r4
 8006aae:	6864      	ldr	r4, [r4, #4]
 8006ab0:	e7ae      	b.n	8006a10 <_malloc_r+0x34>
 8006ab2:	463c      	mov	r4, r7
 8006ab4:	687f      	ldr	r7, [r7, #4]
 8006ab6:	e7b6      	b.n	8006a26 <_malloc_r+0x4a>
 8006ab8:	461a      	mov	r2, r3
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	42a3      	cmp	r3, r4
 8006abe:	d1fb      	bne.n	8006ab8 <_malloc_r+0xdc>
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	6053      	str	r3, [r2, #4]
 8006ac4:	e7de      	b.n	8006a84 <_malloc_r+0xa8>
 8006ac6:	230c      	movs	r3, #12
 8006ac8:	6033      	str	r3, [r6, #0]
 8006aca:	4630      	mov	r0, r6
 8006acc:	f000 f80c 	bl	8006ae8 <__malloc_unlock>
 8006ad0:	e794      	b.n	80069fc <_malloc_r+0x20>
 8006ad2:	6005      	str	r5, [r0, #0]
 8006ad4:	e7d6      	b.n	8006a84 <_malloc_r+0xa8>
 8006ad6:	bf00      	nop
 8006ad8:	20000a10 	.word	0x20000a10

08006adc <__malloc_lock>:
 8006adc:	4801      	ldr	r0, [pc, #4]	@ (8006ae4 <__malloc_lock+0x8>)
 8006ade:	f7ff bf01 	b.w	80068e4 <__retarget_lock_acquire_recursive>
 8006ae2:	bf00      	nop
 8006ae4:	20000a08 	.word	0x20000a08

08006ae8 <__malloc_unlock>:
 8006ae8:	4801      	ldr	r0, [pc, #4]	@ (8006af0 <__malloc_unlock+0x8>)
 8006aea:	f7ff befc 	b.w	80068e6 <__retarget_lock_release_recursive>
 8006aee:	bf00      	nop
 8006af0:	20000a08 	.word	0x20000a08

08006af4 <__ssputs_r>:
 8006af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006af8:	688e      	ldr	r6, [r1, #8]
 8006afa:	461f      	mov	r7, r3
 8006afc:	42be      	cmp	r6, r7
 8006afe:	680b      	ldr	r3, [r1, #0]
 8006b00:	4682      	mov	sl, r0
 8006b02:	460c      	mov	r4, r1
 8006b04:	4690      	mov	r8, r2
 8006b06:	d82d      	bhi.n	8006b64 <__ssputs_r+0x70>
 8006b08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006b10:	d026      	beq.n	8006b60 <__ssputs_r+0x6c>
 8006b12:	6965      	ldr	r5, [r4, #20]
 8006b14:	6909      	ldr	r1, [r1, #16]
 8006b16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b1a:	eba3 0901 	sub.w	r9, r3, r1
 8006b1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b22:	1c7b      	adds	r3, r7, #1
 8006b24:	444b      	add	r3, r9
 8006b26:	106d      	asrs	r5, r5, #1
 8006b28:	429d      	cmp	r5, r3
 8006b2a:	bf38      	it	cc
 8006b2c:	461d      	movcc	r5, r3
 8006b2e:	0553      	lsls	r3, r2, #21
 8006b30:	d527      	bpl.n	8006b82 <__ssputs_r+0x8e>
 8006b32:	4629      	mov	r1, r5
 8006b34:	f7ff ff52 	bl	80069dc <_malloc_r>
 8006b38:	4606      	mov	r6, r0
 8006b3a:	b360      	cbz	r0, 8006b96 <__ssputs_r+0xa2>
 8006b3c:	6921      	ldr	r1, [r4, #16]
 8006b3e:	464a      	mov	r2, r9
 8006b40:	f7ff fed2 	bl	80068e8 <memcpy>
 8006b44:	89a3      	ldrh	r3, [r4, #12]
 8006b46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006b4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b4e:	81a3      	strh	r3, [r4, #12]
 8006b50:	6126      	str	r6, [r4, #16]
 8006b52:	6165      	str	r5, [r4, #20]
 8006b54:	444e      	add	r6, r9
 8006b56:	eba5 0509 	sub.w	r5, r5, r9
 8006b5a:	6026      	str	r6, [r4, #0]
 8006b5c:	60a5      	str	r5, [r4, #8]
 8006b5e:	463e      	mov	r6, r7
 8006b60:	42be      	cmp	r6, r7
 8006b62:	d900      	bls.n	8006b66 <__ssputs_r+0x72>
 8006b64:	463e      	mov	r6, r7
 8006b66:	6820      	ldr	r0, [r4, #0]
 8006b68:	4632      	mov	r2, r6
 8006b6a:	4641      	mov	r1, r8
 8006b6c:	f000 faa8 	bl	80070c0 <memmove>
 8006b70:	68a3      	ldr	r3, [r4, #8]
 8006b72:	1b9b      	subs	r3, r3, r6
 8006b74:	60a3      	str	r3, [r4, #8]
 8006b76:	6823      	ldr	r3, [r4, #0]
 8006b78:	4433      	add	r3, r6
 8006b7a:	6023      	str	r3, [r4, #0]
 8006b7c:	2000      	movs	r0, #0
 8006b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b82:	462a      	mov	r2, r5
 8006b84:	f000 fac6 	bl	8007114 <_realloc_r>
 8006b88:	4606      	mov	r6, r0
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	d1e0      	bne.n	8006b50 <__ssputs_r+0x5c>
 8006b8e:	6921      	ldr	r1, [r4, #16]
 8006b90:	4650      	mov	r0, sl
 8006b92:	f7ff feb7 	bl	8006904 <_free_r>
 8006b96:	230c      	movs	r3, #12
 8006b98:	f8ca 3000 	str.w	r3, [sl]
 8006b9c:	89a3      	ldrh	r3, [r4, #12]
 8006b9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ba2:	81a3      	strh	r3, [r4, #12]
 8006ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba8:	e7e9      	b.n	8006b7e <__ssputs_r+0x8a>
	...

08006bac <_svfiprintf_r>:
 8006bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb0:	4698      	mov	r8, r3
 8006bb2:	898b      	ldrh	r3, [r1, #12]
 8006bb4:	061b      	lsls	r3, r3, #24
 8006bb6:	b09d      	sub	sp, #116	@ 0x74
 8006bb8:	4607      	mov	r7, r0
 8006bba:	460d      	mov	r5, r1
 8006bbc:	4614      	mov	r4, r2
 8006bbe:	d510      	bpl.n	8006be2 <_svfiprintf_r+0x36>
 8006bc0:	690b      	ldr	r3, [r1, #16]
 8006bc2:	b973      	cbnz	r3, 8006be2 <_svfiprintf_r+0x36>
 8006bc4:	2140      	movs	r1, #64	@ 0x40
 8006bc6:	f7ff ff09 	bl	80069dc <_malloc_r>
 8006bca:	6028      	str	r0, [r5, #0]
 8006bcc:	6128      	str	r0, [r5, #16]
 8006bce:	b930      	cbnz	r0, 8006bde <_svfiprintf_r+0x32>
 8006bd0:	230c      	movs	r3, #12
 8006bd2:	603b      	str	r3, [r7, #0]
 8006bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd8:	b01d      	add	sp, #116	@ 0x74
 8006bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bde:	2340      	movs	r3, #64	@ 0x40
 8006be0:	616b      	str	r3, [r5, #20]
 8006be2:	2300      	movs	r3, #0
 8006be4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006be6:	2320      	movs	r3, #32
 8006be8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006bec:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bf0:	2330      	movs	r3, #48	@ 0x30
 8006bf2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006d90 <_svfiprintf_r+0x1e4>
 8006bf6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006bfa:	f04f 0901 	mov.w	r9, #1
 8006bfe:	4623      	mov	r3, r4
 8006c00:	469a      	mov	sl, r3
 8006c02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c06:	b10a      	cbz	r2, 8006c0c <_svfiprintf_r+0x60>
 8006c08:	2a25      	cmp	r2, #37	@ 0x25
 8006c0a:	d1f9      	bne.n	8006c00 <_svfiprintf_r+0x54>
 8006c0c:	ebba 0b04 	subs.w	fp, sl, r4
 8006c10:	d00b      	beq.n	8006c2a <_svfiprintf_r+0x7e>
 8006c12:	465b      	mov	r3, fp
 8006c14:	4622      	mov	r2, r4
 8006c16:	4629      	mov	r1, r5
 8006c18:	4638      	mov	r0, r7
 8006c1a:	f7ff ff6b 	bl	8006af4 <__ssputs_r>
 8006c1e:	3001      	adds	r0, #1
 8006c20:	f000 80a7 	beq.w	8006d72 <_svfiprintf_r+0x1c6>
 8006c24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c26:	445a      	add	r2, fp
 8006c28:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c2a:	f89a 3000 	ldrb.w	r3, [sl]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f000 809f 	beq.w	8006d72 <_svfiprintf_r+0x1c6>
 8006c34:	2300      	movs	r3, #0
 8006c36:	f04f 32ff 	mov.w	r2, #4294967295
 8006c3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c3e:	f10a 0a01 	add.w	sl, sl, #1
 8006c42:	9304      	str	r3, [sp, #16]
 8006c44:	9307      	str	r3, [sp, #28]
 8006c46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006c4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c4c:	4654      	mov	r4, sl
 8006c4e:	2205      	movs	r2, #5
 8006c50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c54:	484e      	ldr	r0, [pc, #312]	@ (8006d90 <_svfiprintf_r+0x1e4>)
 8006c56:	f7f9 fae3 	bl	8000220 <memchr>
 8006c5a:	9a04      	ldr	r2, [sp, #16]
 8006c5c:	b9d8      	cbnz	r0, 8006c96 <_svfiprintf_r+0xea>
 8006c5e:	06d0      	lsls	r0, r2, #27
 8006c60:	bf44      	itt	mi
 8006c62:	2320      	movmi	r3, #32
 8006c64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c68:	0711      	lsls	r1, r2, #28
 8006c6a:	bf44      	itt	mi
 8006c6c:	232b      	movmi	r3, #43	@ 0x2b
 8006c6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c72:	f89a 3000 	ldrb.w	r3, [sl]
 8006c76:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c78:	d015      	beq.n	8006ca6 <_svfiprintf_r+0xfa>
 8006c7a:	9a07      	ldr	r2, [sp, #28]
 8006c7c:	4654      	mov	r4, sl
 8006c7e:	2000      	movs	r0, #0
 8006c80:	f04f 0c0a 	mov.w	ip, #10
 8006c84:	4621      	mov	r1, r4
 8006c86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c8a:	3b30      	subs	r3, #48	@ 0x30
 8006c8c:	2b09      	cmp	r3, #9
 8006c8e:	d94b      	bls.n	8006d28 <_svfiprintf_r+0x17c>
 8006c90:	b1b0      	cbz	r0, 8006cc0 <_svfiprintf_r+0x114>
 8006c92:	9207      	str	r2, [sp, #28]
 8006c94:	e014      	b.n	8006cc0 <_svfiprintf_r+0x114>
 8006c96:	eba0 0308 	sub.w	r3, r0, r8
 8006c9a:	fa09 f303 	lsl.w	r3, r9, r3
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	9304      	str	r3, [sp, #16]
 8006ca2:	46a2      	mov	sl, r4
 8006ca4:	e7d2      	b.n	8006c4c <_svfiprintf_r+0xa0>
 8006ca6:	9b03      	ldr	r3, [sp, #12]
 8006ca8:	1d19      	adds	r1, r3, #4
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	9103      	str	r1, [sp, #12]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	bfbb      	ittet	lt
 8006cb2:	425b      	neglt	r3, r3
 8006cb4:	f042 0202 	orrlt.w	r2, r2, #2
 8006cb8:	9307      	strge	r3, [sp, #28]
 8006cba:	9307      	strlt	r3, [sp, #28]
 8006cbc:	bfb8      	it	lt
 8006cbe:	9204      	strlt	r2, [sp, #16]
 8006cc0:	7823      	ldrb	r3, [r4, #0]
 8006cc2:	2b2e      	cmp	r3, #46	@ 0x2e
 8006cc4:	d10a      	bne.n	8006cdc <_svfiprintf_r+0x130>
 8006cc6:	7863      	ldrb	r3, [r4, #1]
 8006cc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cca:	d132      	bne.n	8006d32 <_svfiprintf_r+0x186>
 8006ccc:	9b03      	ldr	r3, [sp, #12]
 8006cce:	1d1a      	adds	r2, r3, #4
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	9203      	str	r2, [sp, #12]
 8006cd4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006cd8:	3402      	adds	r4, #2
 8006cda:	9305      	str	r3, [sp, #20]
 8006cdc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006da0 <_svfiprintf_r+0x1f4>
 8006ce0:	7821      	ldrb	r1, [r4, #0]
 8006ce2:	2203      	movs	r2, #3
 8006ce4:	4650      	mov	r0, sl
 8006ce6:	f7f9 fa9b 	bl	8000220 <memchr>
 8006cea:	b138      	cbz	r0, 8006cfc <_svfiprintf_r+0x150>
 8006cec:	9b04      	ldr	r3, [sp, #16]
 8006cee:	eba0 000a 	sub.w	r0, r0, sl
 8006cf2:	2240      	movs	r2, #64	@ 0x40
 8006cf4:	4082      	lsls	r2, r0
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	3401      	adds	r4, #1
 8006cfa:	9304      	str	r3, [sp, #16]
 8006cfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d00:	4824      	ldr	r0, [pc, #144]	@ (8006d94 <_svfiprintf_r+0x1e8>)
 8006d02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d06:	2206      	movs	r2, #6
 8006d08:	f7f9 fa8a 	bl	8000220 <memchr>
 8006d0c:	2800      	cmp	r0, #0
 8006d0e:	d036      	beq.n	8006d7e <_svfiprintf_r+0x1d2>
 8006d10:	4b21      	ldr	r3, [pc, #132]	@ (8006d98 <_svfiprintf_r+0x1ec>)
 8006d12:	bb1b      	cbnz	r3, 8006d5c <_svfiprintf_r+0x1b0>
 8006d14:	9b03      	ldr	r3, [sp, #12]
 8006d16:	3307      	adds	r3, #7
 8006d18:	f023 0307 	bic.w	r3, r3, #7
 8006d1c:	3308      	adds	r3, #8
 8006d1e:	9303      	str	r3, [sp, #12]
 8006d20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d22:	4433      	add	r3, r6
 8006d24:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d26:	e76a      	b.n	8006bfe <_svfiprintf_r+0x52>
 8006d28:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d2c:	460c      	mov	r4, r1
 8006d2e:	2001      	movs	r0, #1
 8006d30:	e7a8      	b.n	8006c84 <_svfiprintf_r+0xd8>
 8006d32:	2300      	movs	r3, #0
 8006d34:	3401      	adds	r4, #1
 8006d36:	9305      	str	r3, [sp, #20]
 8006d38:	4619      	mov	r1, r3
 8006d3a:	f04f 0c0a 	mov.w	ip, #10
 8006d3e:	4620      	mov	r0, r4
 8006d40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d44:	3a30      	subs	r2, #48	@ 0x30
 8006d46:	2a09      	cmp	r2, #9
 8006d48:	d903      	bls.n	8006d52 <_svfiprintf_r+0x1a6>
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d0c6      	beq.n	8006cdc <_svfiprintf_r+0x130>
 8006d4e:	9105      	str	r1, [sp, #20]
 8006d50:	e7c4      	b.n	8006cdc <_svfiprintf_r+0x130>
 8006d52:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d56:	4604      	mov	r4, r0
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e7f0      	b.n	8006d3e <_svfiprintf_r+0x192>
 8006d5c:	ab03      	add	r3, sp, #12
 8006d5e:	9300      	str	r3, [sp, #0]
 8006d60:	462a      	mov	r2, r5
 8006d62:	4b0e      	ldr	r3, [pc, #56]	@ (8006d9c <_svfiprintf_r+0x1f0>)
 8006d64:	a904      	add	r1, sp, #16
 8006d66:	4638      	mov	r0, r7
 8006d68:	f3af 8000 	nop.w
 8006d6c:	1c42      	adds	r2, r0, #1
 8006d6e:	4606      	mov	r6, r0
 8006d70:	d1d6      	bne.n	8006d20 <_svfiprintf_r+0x174>
 8006d72:	89ab      	ldrh	r3, [r5, #12]
 8006d74:	065b      	lsls	r3, r3, #25
 8006d76:	f53f af2d 	bmi.w	8006bd4 <_svfiprintf_r+0x28>
 8006d7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d7c:	e72c      	b.n	8006bd8 <_svfiprintf_r+0x2c>
 8006d7e:	ab03      	add	r3, sp, #12
 8006d80:	9300      	str	r3, [sp, #0]
 8006d82:	462a      	mov	r2, r5
 8006d84:	4b05      	ldr	r3, [pc, #20]	@ (8006d9c <_svfiprintf_r+0x1f0>)
 8006d86:	a904      	add	r1, sp, #16
 8006d88:	4638      	mov	r0, r7
 8006d8a:	f000 f879 	bl	8006e80 <_printf_i>
 8006d8e:	e7ed      	b.n	8006d6c <_svfiprintf_r+0x1c0>
 8006d90:	080086cd 	.word	0x080086cd
 8006d94:	080086d7 	.word	0x080086d7
 8006d98:	00000000 	.word	0x00000000
 8006d9c:	08006af5 	.word	0x08006af5
 8006da0:	080086d3 	.word	0x080086d3

08006da4 <_printf_common>:
 8006da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006da8:	4616      	mov	r6, r2
 8006daa:	4698      	mov	r8, r3
 8006dac:	688a      	ldr	r2, [r1, #8]
 8006dae:	690b      	ldr	r3, [r1, #16]
 8006db0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006db4:	4293      	cmp	r3, r2
 8006db6:	bfb8      	it	lt
 8006db8:	4613      	movlt	r3, r2
 8006dba:	6033      	str	r3, [r6, #0]
 8006dbc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006dc0:	4607      	mov	r7, r0
 8006dc2:	460c      	mov	r4, r1
 8006dc4:	b10a      	cbz	r2, 8006dca <_printf_common+0x26>
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	6033      	str	r3, [r6, #0]
 8006dca:	6823      	ldr	r3, [r4, #0]
 8006dcc:	0699      	lsls	r1, r3, #26
 8006dce:	bf42      	ittt	mi
 8006dd0:	6833      	ldrmi	r3, [r6, #0]
 8006dd2:	3302      	addmi	r3, #2
 8006dd4:	6033      	strmi	r3, [r6, #0]
 8006dd6:	6825      	ldr	r5, [r4, #0]
 8006dd8:	f015 0506 	ands.w	r5, r5, #6
 8006ddc:	d106      	bne.n	8006dec <_printf_common+0x48>
 8006dde:	f104 0a19 	add.w	sl, r4, #25
 8006de2:	68e3      	ldr	r3, [r4, #12]
 8006de4:	6832      	ldr	r2, [r6, #0]
 8006de6:	1a9b      	subs	r3, r3, r2
 8006de8:	42ab      	cmp	r3, r5
 8006dea:	dc26      	bgt.n	8006e3a <_printf_common+0x96>
 8006dec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006df0:	6822      	ldr	r2, [r4, #0]
 8006df2:	3b00      	subs	r3, #0
 8006df4:	bf18      	it	ne
 8006df6:	2301      	movne	r3, #1
 8006df8:	0692      	lsls	r2, r2, #26
 8006dfa:	d42b      	bmi.n	8006e54 <_printf_common+0xb0>
 8006dfc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006e00:	4641      	mov	r1, r8
 8006e02:	4638      	mov	r0, r7
 8006e04:	47c8      	blx	r9
 8006e06:	3001      	adds	r0, #1
 8006e08:	d01e      	beq.n	8006e48 <_printf_common+0xa4>
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	6922      	ldr	r2, [r4, #16]
 8006e0e:	f003 0306 	and.w	r3, r3, #6
 8006e12:	2b04      	cmp	r3, #4
 8006e14:	bf02      	ittt	eq
 8006e16:	68e5      	ldreq	r5, [r4, #12]
 8006e18:	6833      	ldreq	r3, [r6, #0]
 8006e1a:	1aed      	subeq	r5, r5, r3
 8006e1c:	68a3      	ldr	r3, [r4, #8]
 8006e1e:	bf0c      	ite	eq
 8006e20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e24:	2500      	movne	r5, #0
 8006e26:	4293      	cmp	r3, r2
 8006e28:	bfc4      	itt	gt
 8006e2a:	1a9b      	subgt	r3, r3, r2
 8006e2c:	18ed      	addgt	r5, r5, r3
 8006e2e:	2600      	movs	r6, #0
 8006e30:	341a      	adds	r4, #26
 8006e32:	42b5      	cmp	r5, r6
 8006e34:	d11a      	bne.n	8006e6c <_printf_common+0xc8>
 8006e36:	2000      	movs	r0, #0
 8006e38:	e008      	b.n	8006e4c <_printf_common+0xa8>
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	4652      	mov	r2, sl
 8006e3e:	4641      	mov	r1, r8
 8006e40:	4638      	mov	r0, r7
 8006e42:	47c8      	blx	r9
 8006e44:	3001      	adds	r0, #1
 8006e46:	d103      	bne.n	8006e50 <_printf_common+0xac>
 8006e48:	f04f 30ff 	mov.w	r0, #4294967295
 8006e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e50:	3501      	adds	r5, #1
 8006e52:	e7c6      	b.n	8006de2 <_printf_common+0x3e>
 8006e54:	18e1      	adds	r1, r4, r3
 8006e56:	1c5a      	adds	r2, r3, #1
 8006e58:	2030      	movs	r0, #48	@ 0x30
 8006e5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006e5e:	4422      	add	r2, r4
 8006e60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006e64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006e68:	3302      	adds	r3, #2
 8006e6a:	e7c7      	b.n	8006dfc <_printf_common+0x58>
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	4622      	mov	r2, r4
 8006e70:	4641      	mov	r1, r8
 8006e72:	4638      	mov	r0, r7
 8006e74:	47c8      	blx	r9
 8006e76:	3001      	adds	r0, #1
 8006e78:	d0e6      	beq.n	8006e48 <_printf_common+0xa4>
 8006e7a:	3601      	adds	r6, #1
 8006e7c:	e7d9      	b.n	8006e32 <_printf_common+0x8e>
	...

08006e80 <_printf_i>:
 8006e80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e84:	7e0f      	ldrb	r7, [r1, #24]
 8006e86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006e88:	2f78      	cmp	r7, #120	@ 0x78
 8006e8a:	4691      	mov	r9, r2
 8006e8c:	4680      	mov	r8, r0
 8006e8e:	460c      	mov	r4, r1
 8006e90:	469a      	mov	sl, r3
 8006e92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006e96:	d807      	bhi.n	8006ea8 <_printf_i+0x28>
 8006e98:	2f62      	cmp	r7, #98	@ 0x62
 8006e9a:	d80a      	bhi.n	8006eb2 <_printf_i+0x32>
 8006e9c:	2f00      	cmp	r7, #0
 8006e9e:	f000 80d2 	beq.w	8007046 <_printf_i+0x1c6>
 8006ea2:	2f58      	cmp	r7, #88	@ 0x58
 8006ea4:	f000 80b9 	beq.w	800701a <_printf_i+0x19a>
 8006ea8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006eac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006eb0:	e03a      	b.n	8006f28 <_printf_i+0xa8>
 8006eb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006eb6:	2b15      	cmp	r3, #21
 8006eb8:	d8f6      	bhi.n	8006ea8 <_printf_i+0x28>
 8006eba:	a101      	add	r1, pc, #4	@ (adr r1, 8006ec0 <_printf_i+0x40>)
 8006ebc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ec0:	08006f19 	.word	0x08006f19
 8006ec4:	08006f2d 	.word	0x08006f2d
 8006ec8:	08006ea9 	.word	0x08006ea9
 8006ecc:	08006ea9 	.word	0x08006ea9
 8006ed0:	08006ea9 	.word	0x08006ea9
 8006ed4:	08006ea9 	.word	0x08006ea9
 8006ed8:	08006f2d 	.word	0x08006f2d
 8006edc:	08006ea9 	.word	0x08006ea9
 8006ee0:	08006ea9 	.word	0x08006ea9
 8006ee4:	08006ea9 	.word	0x08006ea9
 8006ee8:	08006ea9 	.word	0x08006ea9
 8006eec:	0800702d 	.word	0x0800702d
 8006ef0:	08006f57 	.word	0x08006f57
 8006ef4:	08006fe7 	.word	0x08006fe7
 8006ef8:	08006ea9 	.word	0x08006ea9
 8006efc:	08006ea9 	.word	0x08006ea9
 8006f00:	0800704f 	.word	0x0800704f
 8006f04:	08006ea9 	.word	0x08006ea9
 8006f08:	08006f57 	.word	0x08006f57
 8006f0c:	08006ea9 	.word	0x08006ea9
 8006f10:	08006ea9 	.word	0x08006ea9
 8006f14:	08006fef 	.word	0x08006fef
 8006f18:	6833      	ldr	r3, [r6, #0]
 8006f1a:	1d1a      	adds	r2, r3, #4
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	6032      	str	r2, [r6, #0]
 8006f20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e09d      	b.n	8007068 <_printf_i+0x1e8>
 8006f2c:	6833      	ldr	r3, [r6, #0]
 8006f2e:	6820      	ldr	r0, [r4, #0]
 8006f30:	1d19      	adds	r1, r3, #4
 8006f32:	6031      	str	r1, [r6, #0]
 8006f34:	0606      	lsls	r6, r0, #24
 8006f36:	d501      	bpl.n	8006f3c <_printf_i+0xbc>
 8006f38:	681d      	ldr	r5, [r3, #0]
 8006f3a:	e003      	b.n	8006f44 <_printf_i+0xc4>
 8006f3c:	0645      	lsls	r5, r0, #25
 8006f3e:	d5fb      	bpl.n	8006f38 <_printf_i+0xb8>
 8006f40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006f44:	2d00      	cmp	r5, #0
 8006f46:	da03      	bge.n	8006f50 <_printf_i+0xd0>
 8006f48:	232d      	movs	r3, #45	@ 0x2d
 8006f4a:	426d      	negs	r5, r5
 8006f4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f50:	4859      	ldr	r0, [pc, #356]	@ (80070b8 <_printf_i+0x238>)
 8006f52:	230a      	movs	r3, #10
 8006f54:	e011      	b.n	8006f7a <_printf_i+0xfa>
 8006f56:	6821      	ldr	r1, [r4, #0]
 8006f58:	6833      	ldr	r3, [r6, #0]
 8006f5a:	0608      	lsls	r0, r1, #24
 8006f5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006f60:	d402      	bmi.n	8006f68 <_printf_i+0xe8>
 8006f62:	0649      	lsls	r1, r1, #25
 8006f64:	bf48      	it	mi
 8006f66:	b2ad      	uxthmi	r5, r5
 8006f68:	2f6f      	cmp	r7, #111	@ 0x6f
 8006f6a:	4853      	ldr	r0, [pc, #332]	@ (80070b8 <_printf_i+0x238>)
 8006f6c:	6033      	str	r3, [r6, #0]
 8006f6e:	bf14      	ite	ne
 8006f70:	230a      	movne	r3, #10
 8006f72:	2308      	moveq	r3, #8
 8006f74:	2100      	movs	r1, #0
 8006f76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006f7a:	6866      	ldr	r6, [r4, #4]
 8006f7c:	60a6      	str	r6, [r4, #8]
 8006f7e:	2e00      	cmp	r6, #0
 8006f80:	bfa2      	ittt	ge
 8006f82:	6821      	ldrge	r1, [r4, #0]
 8006f84:	f021 0104 	bicge.w	r1, r1, #4
 8006f88:	6021      	strge	r1, [r4, #0]
 8006f8a:	b90d      	cbnz	r5, 8006f90 <_printf_i+0x110>
 8006f8c:	2e00      	cmp	r6, #0
 8006f8e:	d04b      	beq.n	8007028 <_printf_i+0x1a8>
 8006f90:	4616      	mov	r6, r2
 8006f92:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f96:	fb03 5711 	mls	r7, r3, r1, r5
 8006f9a:	5dc7      	ldrb	r7, [r0, r7]
 8006f9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006fa0:	462f      	mov	r7, r5
 8006fa2:	42bb      	cmp	r3, r7
 8006fa4:	460d      	mov	r5, r1
 8006fa6:	d9f4      	bls.n	8006f92 <_printf_i+0x112>
 8006fa8:	2b08      	cmp	r3, #8
 8006faa:	d10b      	bne.n	8006fc4 <_printf_i+0x144>
 8006fac:	6823      	ldr	r3, [r4, #0]
 8006fae:	07df      	lsls	r7, r3, #31
 8006fb0:	d508      	bpl.n	8006fc4 <_printf_i+0x144>
 8006fb2:	6923      	ldr	r3, [r4, #16]
 8006fb4:	6861      	ldr	r1, [r4, #4]
 8006fb6:	4299      	cmp	r1, r3
 8006fb8:	bfde      	ittt	le
 8006fba:	2330      	movle	r3, #48	@ 0x30
 8006fbc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006fc0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006fc4:	1b92      	subs	r2, r2, r6
 8006fc6:	6122      	str	r2, [r4, #16]
 8006fc8:	f8cd a000 	str.w	sl, [sp]
 8006fcc:	464b      	mov	r3, r9
 8006fce:	aa03      	add	r2, sp, #12
 8006fd0:	4621      	mov	r1, r4
 8006fd2:	4640      	mov	r0, r8
 8006fd4:	f7ff fee6 	bl	8006da4 <_printf_common>
 8006fd8:	3001      	adds	r0, #1
 8006fda:	d14a      	bne.n	8007072 <_printf_i+0x1f2>
 8006fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe0:	b004      	add	sp, #16
 8006fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fe6:	6823      	ldr	r3, [r4, #0]
 8006fe8:	f043 0320 	orr.w	r3, r3, #32
 8006fec:	6023      	str	r3, [r4, #0]
 8006fee:	4833      	ldr	r0, [pc, #204]	@ (80070bc <_printf_i+0x23c>)
 8006ff0:	2778      	movs	r7, #120	@ 0x78
 8006ff2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006ff6:	6823      	ldr	r3, [r4, #0]
 8006ff8:	6831      	ldr	r1, [r6, #0]
 8006ffa:	061f      	lsls	r7, r3, #24
 8006ffc:	f851 5b04 	ldr.w	r5, [r1], #4
 8007000:	d402      	bmi.n	8007008 <_printf_i+0x188>
 8007002:	065f      	lsls	r7, r3, #25
 8007004:	bf48      	it	mi
 8007006:	b2ad      	uxthmi	r5, r5
 8007008:	6031      	str	r1, [r6, #0]
 800700a:	07d9      	lsls	r1, r3, #31
 800700c:	bf44      	itt	mi
 800700e:	f043 0320 	orrmi.w	r3, r3, #32
 8007012:	6023      	strmi	r3, [r4, #0]
 8007014:	b11d      	cbz	r5, 800701e <_printf_i+0x19e>
 8007016:	2310      	movs	r3, #16
 8007018:	e7ac      	b.n	8006f74 <_printf_i+0xf4>
 800701a:	4827      	ldr	r0, [pc, #156]	@ (80070b8 <_printf_i+0x238>)
 800701c:	e7e9      	b.n	8006ff2 <_printf_i+0x172>
 800701e:	6823      	ldr	r3, [r4, #0]
 8007020:	f023 0320 	bic.w	r3, r3, #32
 8007024:	6023      	str	r3, [r4, #0]
 8007026:	e7f6      	b.n	8007016 <_printf_i+0x196>
 8007028:	4616      	mov	r6, r2
 800702a:	e7bd      	b.n	8006fa8 <_printf_i+0x128>
 800702c:	6833      	ldr	r3, [r6, #0]
 800702e:	6825      	ldr	r5, [r4, #0]
 8007030:	6961      	ldr	r1, [r4, #20]
 8007032:	1d18      	adds	r0, r3, #4
 8007034:	6030      	str	r0, [r6, #0]
 8007036:	062e      	lsls	r6, r5, #24
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	d501      	bpl.n	8007040 <_printf_i+0x1c0>
 800703c:	6019      	str	r1, [r3, #0]
 800703e:	e002      	b.n	8007046 <_printf_i+0x1c6>
 8007040:	0668      	lsls	r0, r5, #25
 8007042:	d5fb      	bpl.n	800703c <_printf_i+0x1bc>
 8007044:	8019      	strh	r1, [r3, #0]
 8007046:	2300      	movs	r3, #0
 8007048:	6123      	str	r3, [r4, #16]
 800704a:	4616      	mov	r6, r2
 800704c:	e7bc      	b.n	8006fc8 <_printf_i+0x148>
 800704e:	6833      	ldr	r3, [r6, #0]
 8007050:	1d1a      	adds	r2, r3, #4
 8007052:	6032      	str	r2, [r6, #0]
 8007054:	681e      	ldr	r6, [r3, #0]
 8007056:	6862      	ldr	r2, [r4, #4]
 8007058:	2100      	movs	r1, #0
 800705a:	4630      	mov	r0, r6
 800705c:	f7f9 f8e0 	bl	8000220 <memchr>
 8007060:	b108      	cbz	r0, 8007066 <_printf_i+0x1e6>
 8007062:	1b80      	subs	r0, r0, r6
 8007064:	6060      	str	r0, [r4, #4]
 8007066:	6863      	ldr	r3, [r4, #4]
 8007068:	6123      	str	r3, [r4, #16]
 800706a:	2300      	movs	r3, #0
 800706c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007070:	e7aa      	b.n	8006fc8 <_printf_i+0x148>
 8007072:	6923      	ldr	r3, [r4, #16]
 8007074:	4632      	mov	r2, r6
 8007076:	4649      	mov	r1, r9
 8007078:	4640      	mov	r0, r8
 800707a:	47d0      	blx	sl
 800707c:	3001      	adds	r0, #1
 800707e:	d0ad      	beq.n	8006fdc <_printf_i+0x15c>
 8007080:	6823      	ldr	r3, [r4, #0]
 8007082:	079b      	lsls	r3, r3, #30
 8007084:	d413      	bmi.n	80070ae <_printf_i+0x22e>
 8007086:	68e0      	ldr	r0, [r4, #12]
 8007088:	9b03      	ldr	r3, [sp, #12]
 800708a:	4298      	cmp	r0, r3
 800708c:	bfb8      	it	lt
 800708e:	4618      	movlt	r0, r3
 8007090:	e7a6      	b.n	8006fe0 <_printf_i+0x160>
 8007092:	2301      	movs	r3, #1
 8007094:	4632      	mov	r2, r6
 8007096:	4649      	mov	r1, r9
 8007098:	4640      	mov	r0, r8
 800709a:	47d0      	blx	sl
 800709c:	3001      	adds	r0, #1
 800709e:	d09d      	beq.n	8006fdc <_printf_i+0x15c>
 80070a0:	3501      	adds	r5, #1
 80070a2:	68e3      	ldr	r3, [r4, #12]
 80070a4:	9903      	ldr	r1, [sp, #12]
 80070a6:	1a5b      	subs	r3, r3, r1
 80070a8:	42ab      	cmp	r3, r5
 80070aa:	dcf2      	bgt.n	8007092 <_printf_i+0x212>
 80070ac:	e7eb      	b.n	8007086 <_printf_i+0x206>
 80070ae:	2500      	movs	r5, #0
 80070b0:	f104 0619 	add.w	r6, r4, #25
 80070b4:	e7f5      	b.n	80070a2 <_printf_i+0x222>
 80070b6:	bf00      	nop
 80070b8:	080086de 	.word	0x080086de
 80070bc:	080086ef 	.word	0x080086ef

080070c0 <memmove>:
 80070c0:	4288      	cmp	r0, r1
 80070c2:	b510      	push	{r4, lr}
 80070c4:	eb01 0402 	add.w	r4, r1, r2
 80070c8:	d902      	bls.n	80070d0 <memmove+0x10>
 80070ca:	4284      	cmp	r4, r0
 80070cc:	4623      	mov	r3, r4
 80070ce:	d807      	bhi.n	80070e0 <memmove+0x20>
 80070d0:	1e43      	subs	r3, r0, #1
 80070d2:	42a1      	cmp	r1, r4
 80070d4:	d008      	beq.n	80070e8 <memmove+0x28>
 80070d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80070de:	e7f8      	b.n	80070d2 <memmove+0x12>
 80070e0:	4402      	add	r2, r0
 80070e2:	4601      	mov	r1, r0
 80070e4:	428a      	cmp	r2, r1
 80070e6:	d100      	bne.n	80070ea <memmove+0x2a>
 80070e8:	bd10      	pop	{r4, pc}
 80070ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80070ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80070f2:	e7f7      	b.n	80070e4 <memmove+0x24>

080070f4 <_sbrk_r>:
 80070f4:	b538      	push	{r3, r4, r5, lr}
 80070f6:	4d06      	ldr	r5, [pc, #24]	@ (8007110 <_sbrk_r+0x1c>)
 80070f8:	2300      	movs	r3, #0
 80070fa:	4604      	mov	r4, r0
 80070fc:	4608      	mov	r0, r1
 80070fe:	602b      	str	r3, [r5, #0]
 8007100:	f7fb fc92 	bl	8002a28 <_sbrk>
 8007104:	1c43      	adds	r3, r0, #1
 8007106:	d102      	bne.n	800710e <_sbrk_r+0x1a>
 8007108:	682b      	ldr	r3, [r5, #0]
 800710a:	b103      	cbz	r3, 800710e <_sbrk_r+0x1a>
 800710c:	6023      	str	r3, [r4, #0]
 800710e:	bd38      	pop	{r3, r4, r5, pc}
 8007110:	20000a04 	.word	0x20000a04

08007114 <_realloc_r>:
 8007114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007118:	4680      	mov	r8, r0
 800711a:	4615      	mov	r5, r2
 800711c:	460c      	mov	r4, r1
 800711e:	b921      	cbnz	r1, 800712a <_realloc_r+0x16>
 8007120:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007124:	4611      	mov	r1, r2
 8007126:	f7ff bc59 	b.w	80069dc <_malloc_r>
 800712a:	b92a      	cbnz	r2, 8007138 <_realloc_r+0x24>
 800712c:	f7ff fbea 	bl	8006904 <_free_r>
 8007130:	2400      	movs	r4, #0
 8007132:	4620      	mov	r0, r4
 8007134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007138:	f000 f81a 	bl	8007170 <_malloc_usable_size_r>
 800713c:	4285      	cmp	r5, r0
 800713e:	4606      	mov	r6, r0
 8007140:	d802      	bhi.n	8007148 <_realloc_r+0x34>
 8007142:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007146:	d8f4      	bhi.n	8007132 <_realloc_r+0x1e>
 8007148:	4629      	mov	r1, r5
 800714a:	4640      	mov	r0, r8
 800714c:	f7ff fc46 	bl	80069dc <_malloc_r>
 8007150:	4607      	mov	r7, r0
 8007152:	2800      	cmp	r0, #0
 8007154:	d0ec      	beq.n	8007130 <_realloc_r+0x1c>
 8007156:	42b5      	cmp	r5, r6
 8007158:	462a      	mov	r2, r5
 800715a:	4621      	mov	r1, r4
 800715c:	bf28      	it	cs
 800715e:	4632      	movcs	r2, r6
 8007160:	f7ff fbc2 	bl	80068e8 <memcpy>
 8007164:	4621      	mov	r1, r4
 8007166:	4640      	mov	r0, r8
 8007168:	f7ff fbcc 	bl	8006904 <_free_r>
 800716c:	463c      	mov	r4, r7
 800716e:	e7e0      	b.n	8007132 <_realloc_r+0x1e>

08007170 <_malloc_usable_size_r>:
 8007170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007174:	1f18      	subs	r0, r3, #4
 8007176:	2b00      	cmp	r3, #0
 8007178:	bfbc      	itt	lt
 800717a:	580b      	ldrlt	r3, [r1, r0]
 800717c:	18c0      	addlt	r0, r0, r3
 800717e:	4770      	bx	lr

08007180 <atan2>:
 8007180:	f000 ba1e 	b.w	80075c0 <__ieee754_atan2>

08007184 <pow>:
 8007184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007186:	ed2d 8b02 	vpush	{d8}
 800718a:	eeb0 8a40 	vmov.f32	s16, s0
 800718e:	eef0 8a60 	vmov.f32	s17, s1
 8007192:	ec55 4b11 	vmov	r4, r5, d1
 8007196:	f000 fadb 	bl	8007750 <__ieee754_pow>
 800719a:	4622      	mov	r2, r4
 800719c:	462b      	mov	r3, r5
 800719e:	4620      	mov	r0, r4
 80071a0:	4629      	mov	r1, r5
 80071a2:	ec57 6b10 	vmov	r6, r7, d0
 80071a6:	f7f9 fce1 	bl	8000b6c <__aeabi_dcmpun>
 80071aa:	2800      	cmp	r0, #0
 80071ac:	d13b      	bne.n	8007226 <pow+0xa2>
 80071ae:	ec51 0b18 	vmov	r0, r1, d8
 80071b2:	2200      	movs	r2, #0
 80071b4:	2300      	movs	r3, #0
 80071b6:	f7f9 fca7 	bl	8000b08 <__aeabi_dcmpeq>
 80071ba:	b1b8      	cbz	r0, 80071ec <pow+0x68>
 80071bc:	2200      	movs	r2, #0
 80071be:	2300      	movs	r3, #0
 80071c0:	4620      	mov	r0, r4
 80071c2:	4629      	mov	r1, r5
 80071c4:	f7f9 fca0 	bl	8000b08 <__aeabi_dcmpeq>
 80071c8:	2800      	cmp	r0, #0
 80071ca:	d146      	bne.n	800725a <pow+0xd6>
 80071cc:	ec45 4b10 	vmov	d0, r4, r5
 80071d0:	f000 f9ea 	bl	80075a8 <finite>
 80071d4:	b338      	cbz	r0, 8007226 <pow+0xa2>
 80071d6:	2200      	movs	r2, #0
 80071d8:	2300      	movs	r3, #0
 80071da:	4620      	mov	r0, r4
 80071dc:	4629      	mov	r1, r5
 80071de:	f7f9 fc9d 	bl	8000b1c <__aeabi_dcmplt>
 80071e2:	b300      	cbz	r0, 8007226 <pow+0xa2>
 80071e4:	f7ff fb54 	bl	8006890 <__errno>
 80071e8:	2322      	movs	r3, #34	@ 0x22
 80071ea:	e01b      	b.n	8007224 <pow+0xa0>
 80071ec:	ec47 6b10 	vmov	d0, r6, r7
 80071f0:	f000 f9da 	bl	80075a8 <finite>
 80071f4:	b9e0      	cbnz	r0, 8007230 <pow+0xac>
 80071f6:	eeb0 0a48 	vmov.f32	s0, s16
 80071fa:	eef0 0a68 	vmov.f32	s1, s17
 80071fe:	f000 f9d3 	bl	80075a8 <finite>
 8007202:	b1a8      	cbz	r0, 8007230 <pow+0xac>
 8007204:	ec45 4b10 	vmov	d0, r4, r5
 8007208:	f000 f9ce 	bl	80075a8 <finite>
 800720c:	b180      	cbz	r0, 8007230 <pow+0xac>
 800720e:	4632      	mov	r2, r6
 8007210:	463b      	mov	r3, r7
 8007212:	4630      	mov	r0, r6
 8007214:	4639      	mov	r1, r7
 8007216:	f7f9 fca9 	bl	8000b6c <__aeabi_dcmpun>
 800721a:	2800      	cmp	r0, #0
 800721c:	d0e2      	beq.n	80071e4 <pow+0x60>
 800721e:	f7ff fb37 	bl	8006890 <__errno>
 8007222:	2321      	movs	r3, #33	@ 0x21
 8007224:	6003      	str	r3, [r0, #0]
 8007226:	ecbd 8b02 	vpop	{d8}
 800722a:	ec47 6b10 	vmov	d0, r6, r7
 800722e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007230:	2200      	movs	r2, #0
 8007232:	2300      	movs	r3, #0
 8007234:	4630      	mov	r0, r6
 8007236:	4639      	mov	r1, r7
 8007238:	f7f9 fc66 	bl	8000b08 <__aeabi_dcmpeq>
 800723c:	2800      	cmp	r0, #0
 800723e:	d0f2      	beq.n	8007226 <pow+0xa2>
 8007240:	eeb0 0a48 	vmov.f32	s0, s16
 8007244:	eef0 0a68 	vmov.f32	s1, s17
 8007248:	f000 f9ae 	bl	80075a8 <finite>
 800724c:	2800      	cmp	r0, #0
 800724e:	d0ea      	beq.n	8007226 <pow+0xa2>
 8007250:	ec45 4b10 	vmov	d0, r4, r5
 8007254:	f000 f9a8 	bl	80075a8 <finite>
 8007258:	e7c3      	b.n	80071e2 <pow+0x5e>
 800725a:	4f01      	ldr	r7, [pc, #4]	@ (8007260 <pow+0xdc>)
 800725c:	2600      	movs	r6, #0
 800725e:	e7e2      	b.n	8007226 <pow+0xa2>
 8007260:	3ff00000 	.word	0x3ff00000
 8007264:	00000000 	.word	0x00000000

08007268 <atan>:
 8007268:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800726c:	ec55 4b10 	vmov	r4, r5, d0
 8007270:	4bbf      	ldr	r3, [pc, #764]	@ (8007570 <atan+0x308>)
 8007272:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8007276:	429e      	cmp	r6, r3
 8007278:	46ab      	mov	fp, r5
 800727a:	d918      	bls.n	80072ae <atan+0x46>
 800727c:	4bbd      	ldr	r3, [pc, #756]	@ (8007574 <atan+0x30c>)
 800727e:	429e      	cmp	r6, r3
 8007280:	d801      	bhi.n	8007286 <atan+0x1e>
 8007282:	d109      	bne.n	8007298 <atan+0x30>
 8007284:	b144      	cbz	r4, 8007298 <atan+0x30>
 8007286:	4622      	mov	r2, r4
 8007288:	462b      	mov	r3, r5
 800728a:	4620      	mov	r0, r4
 800728c:	4629      	mov	r1, r5
 800728e:	f7f9 f81d 	bl	80002cc <__adddf3>
 8007292:	4604      	mov	r4, r0
 8007294:	460d      	mov	r5, r1
 8007296:	e006      	b.n	80072a6 <atan+0x3e>
 8007298:	f1bb 0f00 	cmp.w	fp, #0
 800729c:	f340 812b 	ble.w	80074f6 <atan+0x28e>
 80072a0:	a597      	add	r5, pc, #604	@ (adr r5, 8007500 <atan+0x298>)
 80072a2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80072a6:	ec45 4b10 	vmov	d0, r4, r5
 80072aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ae:	4bb2      	ldr	r3, [pc, #712]	@ (8007578 <atan+0x310>)
 80072b0:	429e      	cmp	r6, r3
 80072b2:	d813      	bhi.n	80072dc <atan+0x74>
 80072b4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80072b8:	429e      	cmp	r6, r3
 80072ba:	d80c      	bhi.n	80072d6 <atan+0x6e>
 80072bc:	a392      	add	r3, pc, #584	@ (adr r3, 8007508 <atan+0x2a0>)
 80072be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c2:	4620      	mov	r0, r4
 80072c4:	4629      	mov	r1, r5
 80072c6:	f7f9 f801 	bl	80002cc <__adddf3>
 80072ca:	4bac      	ldr	r3, [pc, #688]	@ (800757c <atan+0x314>)
 80072cc:	2200      	movs	r2, #0
 80072ce:	f7f9 fc43 	bl	8000b58 <__aeabi_dcmpgt>
 80072d2:	2800      	cmp	r0, #0
 80072d4:	d1e7      	bne.n	80072a6 <atan+0x3e>
 80072d6:	f04f 3aff 	mov.w	sl, #4294967295
 80072da:	e029      	b.n	8007330 <atan+0xc8>
 80072dc:	f000 f95c 	bl	8007598 <fabs>
 80072e0:	4ba7      	ldr	r3, [pc, #668]	@ (8007580 <atan+0x318>)
 80072e2:	429e      	cmp	r6, r3
 80072e4:	ec55 4b10 	vmov	r4, r5, d0
 80072e8:	f200 80bc 	bhi.w	8007464 <atan+0x1fc>
 80072ec:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80072f0:	429e      	cmp	r6, r3
 80072f2:	f200 809e 	bhi.w	8007432 <atan+0x1ca>
 80072f6:	4622      	mov	r2, r4
 80072f8:	462b      	mov	r3, r5
 80072fa:	4620      	mov	r0, r4
 80072fc:	4629      	mov	r1, r5
 80072fe:	f7f8 ffe5 	bl	80002cc <__adddf3>
 8007302:	4b9e      	ldr	r3, [pc, #632]	@ (800757c <atan+0x314>)
 8007304:	2200      	movs	r2, #0
 8007306:	f7f8 ffdf 	bl	80002c8 <__aeabi_dsub>
 800730a:	2200      	movs	r2, #0
 800730c:	4606      	mov	r6, r0
 800730e:	460f      	mov	r7, r1
 8007310:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007314:	4620      	mov	r0, r4
 8007316:	4629      	mov	r1, r5
 8007318:	f7f8 ffd8 	bl	80002cc <__adddf3>
 800731c:	4602      	mov	r2, r0
 800731e:	460b      	mov	r3, r1
 8007320:	4630      	mov	r0, r6
 8007322:	4639      	mov	r1, r7
 8007324:	f7f9 fab2 	bl	800088c <__aeabi_ddiv>
 8007328:	f04f 0a00 	mov.w	sl, #0
 800732c:	4604      	mov	r4, r0
 800732e:	460d      	mov	r5, r1
 8007330:	4622      	mov	r2, r4
 8007332:	462b      	mov	r3, r5
 8007334:	4620      	mov	r0, r4
 8007336:	4629      	mov	r1, r5
 8007338:	f7f9 f97e 	bl	8000638 <__aeabi_dmul>
 800733c:	4602      	mov	r2, r0
 800733e:	460b      	mov	r3, r1
 8007340:	4680      	mov	r8, r0
 8007342:	4689      	mov	r9, r1
 8007344:	f7f9 f978 	bl	8000638 <__aeabi_dmul>
 8007348:	a371      	add	r3, pc, #452	@ (adr r3, 8007510 <atan+0x2a8>)
 800734a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734e:	4606      	mov	r6, r0
 8007350:	460f      	mov	r7, r1
 8007352:	f7f9 f971 	bl	8000638 <__aeabi_dmul>
 8007356:	a370      	add	r3, pc, #448	@ (adr r3, 8007518 <atan+0x2b0>)
 8007358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735c:	f7f8 ffb6 	bl	80002cc <__adddf3>
 8007360:	4632      	mov	r2, r6
 8007362:	463b      	mov	r3, r7
 8007364:	f7f9 f968 	bl	8000638 <__aeabi_dmul>
 8007368:	a36d      	add	r3, pc, #436	@ (adr r3, 8007520 <atan+0x2b8>)
 800736a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736e:	f7f8 ffad 	bl	80002cc <__adddf3>
 8007372:	4632      	mov	r2, r6
 8007374:	463b      	mov	r3, r7
 8007376:	f7f9 f95f 	bl	8000638 <__aeabi_dmul>
 800737a:	a36b      	add	r3, pc, #428	@ (adr r3, 8007528 <atan+0x2c0>)
 800737c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007380:	f7f8 ffa4 	bl	80002cc <__adddf3>
 8007384:	4632      	mov	r2, r6
 8007386:	463b      	mov	r3, r7
 8007388:	f7f9 f956 	bl	8000638 <__aeabi_dmul>
 800738c:	a368      	add	r3, pc, #416	@ (adr r3, 8007530 <atan+0x2c8>)
 800738e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007392:	f7f8 ff9b 	bl	80002cc <__adddf3>
 8007396:	4632      	mov	r2, r6
 8007398:	463b      	mov	r3, r7
 800739a:	f7f9 f94d 	bl	8000638 <__aeabi_dmul>
 800739e:	a366      	add	r3, pc, #408	@ (adr r3, 8007538 <atan+0x2d0>)
 80073a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a4:	f7f8 ff92 	bl	80002cc <__adddf3>
 80073a8:	4642      	mov	r2, r8
 80073aa:	464b      	mov	r3, r9
 80073ac:	f7f9 f944 	bl	8000638 <__aeabi_dmul>
 80073b0:	a363      	add	r3, pc, #396	@ (adr r3, 8007540 <atan+0x2d8>)
 80073b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b6:	4680      	mov	r8, r0
 80073b8:	4689      	mov	r9, r1
 80073ba:	4630      	mov	r0, r6
 80073bc:	4639      	mov	r1, r7
 80073be:	f7f9 f93b 	bl	8000638 <__aeabi_dmul>
 80073c2:	a361      	add	r3, pc, #388	@ (adr r3, 8007548 <atan+0x2e0>)
 80073c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c8:	f7f8 ff7e 	bl	80002c8 <__aeabi_dsub>
 80073cc:	4632      	mov	r2, r6
 80073ce:	463b      	mov	r3, r7
 80073d0:	f7f9 f932 	bl	8000638 <__aeabi_dmul>
 80073d4:	a35e      	add	r3, pc, #376	@ (adr r3, 8007550 <atan+0x2e8>)
 80073d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073da:	f7f8 ff75 	bl	80002c8 <__aeabi_dsub>
 80073de:	4632      	mov	r2, r6
 80073e0:	463b      	mov	r3, r7
 80073e2:	f7f9 f929 	bl	8000638 <__aeabi_dmul>
 80073e6:	a35c      	add	r3, pc, #368	@ (adr r3, 8007558 <atan+0x2f0>)
 80073e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ec:	f7f8 ff6c 	bl	80002c8 <__aeabi_dsub>
 80073f0:	4632      	mov	r2, r6
 80073f2:	463b      	mov	r3, r7
 80073f4:	f7f9 f920 	bl	8000638 <__aeabi_dmul>
 80073f8:	a359      	add	r3, pc, #356	@ (adr r3, 8007560 <atan+0x2f8>)
 80073fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fe:	f7f8 ff63 	bl	80002c8 <__aeabi_dsub>
 8007402:	4632      	mov	r2, r6
 8007404:	463b      	mov	r3, r7
 8007406:	f7f9 f917 	bl	8000638 <__aeabi_dmul>
 800740a:	4602      	mov	r2, r0
 800740c:	460b      	mov	r3, r1
 800740e:	4640      	mov	r0, r8
 8007410:	4649      	mov	r1, r9
 8007412:	f7f8 ff5b 	bl	80002cc <__adddf3>
 8007416:	4622      	mov	r2, r4
 8007418:	462b      	mov	r3, r5
 800741a:	f7f9 f90d 	bl	8000638 <__aeabi_dmul>
 800741e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007422:	4602      	mov	r2, r0
 8007424:	460b      	mov	r3, r1
 8007426:	d148      	bne.n	80074ba <atan+0x252>
 8007428:	4620      	mov	r0, r4
 800742a:	4629      	mov	r1, r5
 800742c:	f7f8 ff4c 	bl	80002c8 <__aeabi_dsub>
 8007430:	e72f      	b.n	8007292 <atan+0x2a>
 8007432:	4b52      	ldr	r3, [pc, #328]	@ (800757c <atan+0x314>)
 8007434:	2200      	movs	r2, #0
 8007436:	4620      	mov	r0, r4
 8007438:	4629      	mov	r1, r5
 800743a:	f7f8 ff45 	bl	80002c8 <__aeabi_dsub>
 800743e:	4b4f      	ldr	r3, [pc, #316]	@ (800757c <atan+0x314>)
 8007440:	4606      	mov	r6, r0
 8007442:	460f      	mov	r7, r1
 8007444:	2200      	movs	r2, #0
 8007446:	4620      	mov	r0, r4
 8007448:	4629      	mov	r1, r5
 800744a:	f7f8 ff3f 	bl	80002cc <__adddf3>
 800744e:	4602      	mov	r2, r0
 8007450:	460b      	mov	r3, r1
 8007452:	4630      	mov	r0, r6
 8007454:	4639      	mov	r1, r7
 8007456:	f7f9 fa19 	bl	800088c <__aeabi_ddiv>
 800745a:	f04f 0a01 	mov.w	sl, #1
 800745e:	4604      	mov	r4, r0
 8007460:	460d      	mov	r5, r1
 8007462:	e765      	b.n	8007330 <atan+0xc8>
 8007464:	4b47      	ldr	r3, [pc, #284]	@ (8007584 <atan+0x31c>)
 8007466:	429e      	cmp	r6, r3
 8007468:	d21c      	bcs.n	80074a4 <atan+0x23c>
 800746a:	4b47      	ldr	r3, [pc, #284]	@ (8007588 <atan+0x320>)
 800746c:	2200      	movs	r2, #0
 800746e:	4620      	mov	r0, r4
 8007470:	4629      	mov	r1, r5
 8007472:	f7f8 ff29 	bl	80002c8 <__aeabi_dsub>
 8007476:	4b44      	ldr	r3, [pc, #272]	@ (8007588 <atan+0x320>)
 8007478:	4606      	mov	r6, r0
 800747a:	460f      	mov	r7, r1
 800747c:	2200      	movs	r2, #0
 800747e:	4620      	mov	r0, r4
 8007480:	4629      	mov	r1, r5
 8007482:	f7f9 f8d9 	bl	8000638 <__aeabi_dmul>
 8007486:	4b3d      	ldr	r3, [pc, #244]	@ (800757c <atan+0x314>)
 8007488:	2200      	movs	r2, #0
 800748a:	f7f8 ff1f 	bl	80002cc <__adddf3>
 800748e:	4602      	mov	r2, r0
 8007490:	460b      	mov	r3, r1
 8007492:	4630      	mov	r0, r6
 8007494:	4639      	mov	r1, r7
 8007496:	f7f9 f9f9 	bl	800088c <__aeabi_ddiv>
 800749a:	f04f 0a02 	mov.w	sl, #2
 800749e:	4604      	mov	r4, r0
 80074a0:	460d      	mov	r5, r1
 80074a2:	e745      	b.n	8007330 <atan+0xc8>
 80074a4:	4622      	mov	r2, r4
 80074a6:	462b      	mov	r3, r5
 80074a8:	4938      	ldr	r1, [pc, #224]	@ (800758c <atan+0x324>)
 80074aa:	2000      	movs	r0, #0
 80074ac:	f7f9 f9ee 	bl	800088c <__aeabi_ddiv>
 80074b0:	f04f 0a03 	mov.w	sl, #3
 80074b4:	4604      	mov	r4, r0
 80074b6:	460d      	mov	r5, r1
 80074b8:	e73a      	b.n	8007330 <atan+0xc8>
 80074ba:	4b35      	ldr	r3, [pc, #212]	@ (8007590 <atan+0x328>)
 80074bc:	4e35      	ldr	r6, [pc, #212]	@ (8007594 <atan+0x32c>)
 80074be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80074c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c6:	f7f8 feff 	bl	80002c8 <__aeabi_dsub>
 80074ca:	4622      	mov	r2, r4
 80074cc:	462b      	mov	r3, r5
 80074ce:	f7f8 fefb 	bl	80002c8 <__aeabi_dsub>
 80074d2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80074d6:	4602      	mov	r2, r0
 80074d8:	460b      	mov	r3, r1
 80074da:	e9d6 0100 	ldrd	r0, r1, [r6]
 80074de:	f7f8 fef3 	bl	80002c8 <__aeabi_dsub>
 80074e2:	f1bb 0f00 	cmp.w	fp, #0
 80074e6:	4604      	mov	r4, r0
 80074e8:	460d      	mov	r5, r1
 80074ea:	f6bf aedc 	bge.w	80072a6 <atan+0x3e>
 80074ee:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80074f2:	461d      	mov	r5, r3
 80074f4:	e6d7      	b.n	80072a6 <atan+0x3e>
 80074f6:	a51c      	add	r5, pc, #112	@ (adr r5, 8007568 <atan+0x300>)
 80074f8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80074fc:	e6d3      	b.n	80072a6 <atan+0x3e>
 80074fe:	bf00      	nop
 8007500:	54442d18 	.word	0x54442d18
 8007504:	3ff921fb 	.word	0x3ff921fb
 8007508:	8800759c 	.word	0x8800759c
 800750c:	7e37e43c 	.word	0x7e37e43c
 8007510:	e322da11 	.word	0xe322da11
 8007514:	3f90ad3a 	.word	0x3f90ad3a
 8007518:	24760deb 	.word	0x24760deb
 800751c:	3fa97b4b 	.word	0x3fa97b4b
 8007520:	a0d03d51 	.word	0xa0d03d51
 8007524:	3fb10d66 	.word	0x3fb10d66
 8007528:	c54c206e 	.word	0xc54c206e
 800752c:	3fb745cd 	.word	0x3fb745cd
 8007530:	920083ff 	.word	0x920083ff
 8007534:	3fc24924 	.word	0x3fc24924
 8007538:	5555550d 	.word	0x5555550d
 800753c:	3fd55555 	.word	0x3fd55555
 8007540:	2c6a6c2f 	.word	0x2c6a6c2f
 8007544:	bfa2b444 	.word	0xbfa2b444
 8007548:	52defd9a 	.word	0x52defd9a
 800754c:	3fadde2d 	.word	0x3fadde2d
 8007550:	af749a6d 	.word	0xaf749a6d
 8007554:	3fb3b0f2 	.word	0x3fb3b0f2
 8007558:	fe231671 	.word	0xfe231671
 800755c:	3fbc71c6 	.word	0x3fbc71c6
 8007560:	9998ebc4 	.word	0x9998ebc4
 8007564:	3fc99999 	.word	0x3fc99999
 8007568:	54442d18 	.word	0x54442d18
 800756c:	bff921fb 	.word	0xbff921fb
 8007570:	440fffff 	.word	0x440fffff
 8007574:	7ff00000 	.word	0x7ff00000
 8007578:	3fdbffff 	.word	0x3fdbffff
 800757c:	3ff00000 	.word	0x3ff00000
 8007580:	3ff2ffff 	.word	0x3ff2ffff
 8007584:	40038000 	.word	0x40038000
 8007588:	3ff80000 	.word	0x3ff80000
 800758c:	bff00000 	.word	0xbff00000
 8007590:	08008700 	.word	0x08008700
 8007594:	08008720 	.word	0x08008720

08007598 <fabs>:
 8007598:	ec51 0b10 	vmov	r0, r1, d0
 800759c:	4602      	mov	r2, r0
 800759e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80075a2:	ec43 2b10 	vmov	d0, r2, r3
 80075a6:	4770      	bx	lr

080075a8 <finite>:
 80075a8:	b082      	sub	sp, #8
 80075aa:	ed8d 0b00 	vstr	d0, [sp]
 80075ae:	9801      	ldr	r0, [sp, #4]
 80075b0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80075b4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80075b8:	0fc0      	lsrs	r0, r0, #31
 80075ba:	b002      	add	sp, #8
 80075bc:	4770      	bx	lr
	...

080075c0 <__ieee754_atan2>:
 80075c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075c4:	ec57 6b11 	vmov	r6, r7, d1
 80075c8:	4273      	negs	r3, r6
 80075ca:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8007748 <__ieee754_atan2+0x188>
 80075ce:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 80075d2:	4333      	orrs	r3, r6
 80075d4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80075d8:	4543      	cmp	r3, r8
 80075da:	ec51 0b10 	vmov	r0, r1, d0
 80075de:	4635      	mov	r5, r6
 80075e0:	d809      	bhi.n	80075f6 <__ieee754_atan2+0x36>
 80075e2:	4244      	negs	r4, r0
 80075e4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80075e8:	4304      	orrs	r4, r0
 80075ea:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80075ee:	4544      	cmp	r4, r8
 80075f0:	468e      	mov	lr, r1
 80075f2:	4681      	mov	r9, r0
 80075f4:	d907      	bls.n	8007606 <__ieee754_atan2+0x46>
 80075f6:	4632      	mov	r2, r6
 80075f8:	463b      	mov	r3, r7
 80075fa:	f7f8 fe67 	bl	80002cc <__adddf3>
 80075fe:	ec41 0b10 	vmov	d0, r0, r1
 8007602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007606:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800760a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800760e:	4334      	orrs	r4, r6
 8007610:	d103      	bne.n	800761a <__ieee754_atan2+0x5a>
 8007612:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007616:	f7ff be27 	b.w	8007268 <atan>
 800761a:	17bc      	asrs	r4, r7, #30
 800761c:	f004 0402 	and.w	r4, r4, #2
 8007620:	ea53 0909 	orrs.w	r9, r3, r9
 8007624:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8007628:	d107      	bne.n	800763a <__ieee754_atan2+0x7a>
 800762a:	2c02      	cmp	r4, #2
 800762c:	d05f      	beq.n	80076ee <__ieee754_atan2+0x12e>
 800762e:	2c03      	cmp	r4, #3
 8007630:	d1e5      	bne.n	80075fe <__ieee754_atan2+0x3e>
 8007632:	a141      	add	r1, pc, #260	@ (adr r1, 8007738 <__ieee754_atan2+0x178>)
 8007634:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007638:	e7e1      	b.n	80075fe <__ieee754_atan2+0x3e>
 800763a:	4315      	orrs	r5, r2
 800763c:	d106      	bne.n	800764c <__ieee754_atan2+0x8c>
 800763e:	f1be 0f00 	cmp.w	lr, #0
 8007642:	da5f      	bge.n	8007704 <__ieee754_atan2+0x144>
 8007644:	a13e      	add	r1, pc, #248	@ (adr r1, 8007740 <__ieee754_atan2+0x180>)
 8007646:	e9d1 0100 	ldrd	r0, r1, [r1]
 800764a:	e7d8      	b.n	80075fe <__ieee754_atan2+0x3e>
 800764c:	4542      	cmp	r2, r8
 800764e:	d10f      	bne.n	8007670 <__ieee754_atan2+0xb0>
 8007650:	4293      	cmp	r3, r2
 8007652:	f104 34ff 	add.w	r4, r4, #4294967295
 8007656:	d107      	bne.n	8007668 <__ieee754_atan2+0xa8>
 8007658:	2c02      	cmp	r4, #2
 800765a:	d84c      	bhi.n	80076f6 <__ieee754_atan2+0x136>
 800765c:	4b34      	ldr	r3, [pc, #208]	@ (8007730 <__ieee754_atan2+0x170>)
 800765e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007662:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007666:	e7ca      	b.n	80075fe <__ieee754_atan2+0x3e>
 8007668:	2c02      	cmp	r4, #2
 800766a:	d848      	bhi.n	80076fe <__ieee754_atan2+0x13e>
 800766c:	4b31      	ldr	r3, [pc, #196]	@ (8007734 <__ieee754_atan2+0x174>)
 800766e:	e7f6      	b.n	800765e <__ieee754_atan2+0x9e>
 8007670:	4543      	cmp	r3, r8
 8007672:	d0e4      	beq.n	800763e <__ieee754_atan2+0x7e>
 8007674:	1a9b      	subs	r3, r3, r2
 8007676:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800767a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800767e:	da1e      	bge.n	80076be <__ieee754_atan2+0xfe>
 8007680:	2f00      	cmp	r7, #0
 8007682:	da01      	bge.n	8007688 <__ieee754_atan2+0xc8>
 8007684:	323c      	adds	r2, #60	@ 0x3c
 8007686:	db1e      	blt.n	80076c6 <__ieee754_atan2+0x106>
 8007688:	4632      	mov	r2, r6
 800768a:	463b      	mov	r3, r7
 800768c:	f7f9 f8fe 	bl	800088c <__aeabi_ddiv>
 8007690:	ec41 0b10 	vmov	d0, r0, r1
 8007694:	f7ff ff80 	bl	8007598 <fabs>
 8007698:	f7ff fde6 	bl	8007268 <atan>
 800769c:	ec51 0b10 	vmov	r0, r1, d0
 80076a0:	2c01      	cmp	r4, #1
 80076a2:	d013      	beq.n	80076cc <__ieee754_atan2+0x10c>
 80076a4:	2c02      	cmp	r4, #2
 80076a6:	d015      	beq.n	80076d4 <__ieee754_atan2+0x114>
 80076a8:	2c00      	cmp	r4, #0
 80076aa:	d0a8      	beq.n	80075fe <__ieee754_atan2+0x3e>
 80076ac:	a318      	add	r3, pc, #96	@ (adr r3, 8007710 <__ieee754_atan2+0x150>)
 80076ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b2:	f7f8 fe09 	bl	80002c8 <__aeabi_dsub>
 80076b6:	a318      	add	r3, pc, #96	@ (adr r3, 8007718 <__ieee754_atan2+0x158>)
 80076b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076bc:	e014      	b.n	80076e8 <__ieee754_atan2+0x128>
 80076be:	a118      	add	r1, pc, #96	@ (adr r1, 8007720 <__ieee754_atan2+0x160>)
 80076c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076c4:	e7ec      	b.n	80076a0 <__ieee754_atan2+0xe0>
 80076c6:	2000      	movs	r0, #0
 80076c8:	2100      	movs	r1, #0
 80076ca:	e7e9      	b.n	80076a0 <__ieee754_atan2+0xe0>
 80076cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80076d0:	4619      	mov	r1, r3
 80076d2:	e794      	b.n	80075fe <__ieee754_atan2+0x3e>
 80076d4:	a30e      	add	r3, pc, #56	@ (adr r3, 8007710 <__ieee754_atan2+0x150>)
 80076d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076da:	f7f8 fdf5 	bl	80002c8 <__aeabi_dsub>
 80076de:	4602      	mov	r2, r0
 80076e0:	460b      	mov	r3, r1
 80076e2:	a10d      	add	r1, pc, #52	@ (adr r1, 8007718 <__ieee754_atan2+0x158>)
 80076e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076e8:	f7f8 fdee 	bl	80002c8 <__aeabi_dsub>
 80076ec:	e787      	b.n	80075fe <__ieee754_atan2+0x3e>
 80076ee:	a10a      	add	r1, pc, #40	@ (adr r1, 8007718 <__ieee754_atan2+0x158>)
 80076f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076f4:	e783      	b.n	80075fe <__ieee754_atan2+0x3e>
 80076f6:	a10c      	add	r1, pc, #48	@ (adr r1, 8007728 <__ieee754_atan2+0x168>)
 80076f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076fc:	e77f      	b.n	80075fe <__ieee754_atan2+0x3e>
 80076fe:	2000      	movs	r0, #0
 8007700:	2100      	movs	r1, #0
 8007702:	e77c      	b.n	80075fe <__ieee754_atan2+0x3e>
 8007704:	a106      	add	r1, pc, #24	@ (adr r1, 8007720 <__ieee754_atan2+0x160>)
 8007706:	e9d1 0100 	ldrd	r0, r1, [r1]
 800770a:	e778      	b.n	80075fe <__ieee754_atan2+0x3e>
 800770c:	f3af 8000 	nop.w
 8007710:	33145c07 	.word	0x33145c07
 8007714:	3ca1a626 	.word	0x3ca1a626
 8007718:	54442d18 	.word	0x54442d18
 800771c:	400921fb 	.word	0x400921fb
 8007720:	54442d18 	.word	0x54442d18
 8007724:	3ff921fb 	.word	0x3ff921fb
 8007728:	54442d18 	.word	0x54442d18
 800772c:	3fe921fb 	.word	0x3fe921fb
 8007730:	08008758 	.word	0x08008758
 8007734:	08008740 	.word	0x08008740
 8007738:	54442d18 	.word	0x54442d18
 800773c:	c00921fb 	.word	0xc00921fb
 8007740:	54442d18 	.word	0x54442d18
 8007744:	bff921fb 	.word	0xbff921fb
 8007748:	7ff00000 	.word	0x7ff00000
 800774c:	00000000 	.word	0x00000000

08007750 <__ieee754_pow>:
 8007750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007754:	b091      	sub	sp, #68	@ 0x44
 8007756:	ed8d 1b00 	vstr	d1, [sp]
 800775a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800775e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8007762:	ea5a 0001 	orrs.w	r0, sl, r1
 8007766:	ec57 6b10 	vmov	r6, r7, d0
 800776a:	d113      	bne.n	8007794 <__ieee754_pow+0x44>
 800776c:	19b3      	adds	r3, r6, r6
 800776e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8007772:	4152      	adcs	r2, r2
 8007774:	4298      	cmp	r0, r3
 8007776:	4b98      	ldr	r3, [pc, #608]	@ (80079d8 <__ieee754_pow+0x288>)
 8007778:	4193      	sbcs	r3, r2
 800777a:	f080 84ea 	bcs.w	8008152 <__ieee754_pow+0xa02>
 800777e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007782:	4630      	mov	r0, r6
 8007784:	4639      	mov	r1, r7
 8007786:	f7f8 fda1 	bl	80002cc <__adddf3>
 800778a:	ec41 0b10 	vmov	d0, r0, r1
 800778e:	b011      	add	sp, #68	@ 0x44
 8007790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007794:	4a91      	ldr	r2, [pc, #580]	@ (80079dc <__ieee754_pow+0x28c>)
 8007796:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800779a:	4590      	cmp	r8, r2
 800779c:	463d      	mov	r5, r7
 800779e:	4633      	mov	r3, r6
 80077a0:	d806      	bhi.n	80077b0 <__ieee754_pow+0x60>
 80077a2:	d101      	bne.n	80077a8 <__ieee754_pow+0x58>
 80077a4:	2e00      	cmp	r6, #0
 80077a6:	d1ea      	bne.n	800777e <__ieee754_pow+0x2e>
 80077a8:	4592      	cmp	sl, r2
 80077aa:	d801      	bhi.n	80077b0 <__ieee754_pow+0x60>
 80077ac:	d10e      	bne.n	80077cc <__ieee754_pow+0x7c>
 80077ae:	b169      	cbz	r1, 80077cc <__ieee754_pow+0x7c>
 80077b0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80077b4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80077b8:	431d      	orrs	r5, r3
 80077ba:	d1e0      	bne.n	800777e <__ieee754_pow+0x2e>
 80077bc:	e9dd 3200 	ldrd	r3, r2, [sp]
 80077c0:	18db      	adds	r3, r3, r3
 80077c2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80077c6:	4152      	adcs	r2, r2
 80077c8:	429d      	cmp	r5, r3
 80077ca:	e7d4      	b.n	8007776 <__ieee754_pow+0x26>
 80077cc:	2d00      	cmp	r5, #0
 80077ce:	46c3      	mov	fp, r8
 80077d0:	da3a      	bge.n	8007848 <__ieee754_pow+0xf8>
 80077d2:	4a83      	ldr	r2, [pc, #524]	@ (80079e0 <__ieee754_pow+0x290>)
 80077d4:	4592      	cmp	sl, r2
 80077d6:	d84d      	bhi.n	8007874 <__ieee754_pow+0x124>
 80077d8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80077dc:	4592      	cmp	sl, r2
 80077de:	f240 84c7 	bls.w	8008170 <__ieee754_pow+0xa20>
 80077e2:	ea4f 522a 	mov.w	r2, sl, asr #20
 80077e6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80077ea:	2a14      	cmp	r2, #20
 80077ec:	dd0f      	ble.n	800780e <__ieee754_pow+0xbe>
 80077ee:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80077f2:	fa21 f402 	lsr.w	r4, r1, r2
 80077f6:	fa04 f202 	lsl.w	r2, r4, r2
 80077fa:	428a      	cmp	r2, r1
 80077fc:	f040 84b8 	bne.w	8008170 <__ieee754_pow+0xa20>
 8007800:	f004 0401 	and.w	r4, r4, #1
 8007804:	f1c4 0402 	rsb	r4, r4, #2
 8007808:	2900      	cmp	r1, #0
 800780a:	d158      	bne.n	80078be <__ieee754_pow+0x16e>
 800780c:	e00e      	b.n	800782c <__ieee754_pow+0xdc>
 800780e:	2900      	cmp	r1, #0
 8007810:	d154      	bne.n	80078bc <__ieee754_pow+0x16c>
 8007812:	f1c2 0214 	rsb	r2, r2, #20
 8007816:	fa4a f402 	asr.w	r4, sl, r2
 800781a:	fa04 f202 	lsl.w	r2, r4, r2
 800781e:	4552      	cmp	r2, sl
 8007820:	f040 84a3 	bne.w	800816a <__ieee754_pow+0xa1a>
 8007824:	f004 0401 	and.w	r4, r4, #1
 8007828:	f1c4 0402 	rsb	r4, r4, #2
 800782c:	4a6d      	ldr	r2, [pc, #436]	@ (80079e4 <__ieee754_pow+0x294>)
 800782e:	4592      	cmp	sl, r2
 8007830:	d12e      	bne.n	8007890 <__ieee754_pow+0x140>
 8007832:	f1b9 0f00 	cmp.w	r9, #0
 8007836:	f280 8494 	bge.w	8008162 <__ieee754_pow+0xa12>
 800783a:	496a      	ldr	r1, [pc, #424]	@ (80079e4 <__ieee754_pow+0x294>)
 800783c:	4632      	mov	r2, r6
 800783e:	463b      	mov	r3, r7
 8007840:	2000      	movs	r0, #0
 8007842:	f7f9 f823 	bl	800088c <__aeabi_ddiv>
 8007846:	e7a0      	b.n	800778a <__ieee754_pow+0x3a>
 8007848:	2400      	movs	r4, #0
 800784a:	bbc1      	cbnz	r1, 80078be <__ieee754_pow+0x16e>
 800784c:	4a63      	ldr	r2, [pc, #396]	@ (80079dc <__ieee754_pow+0x28c>)
 800784e:	4592      	cmp	sl, r2
 8007850:	d1ec      	bne.n	800782c <__ieee754_pow+0xdc>
 8007852:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8007856:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800785a:	431a      	orrs	r2, r3
 800785c:	f000 8479 	beq.w	8008152 <__ieee754_pow+0xa02>
 8007860:	4b61      	ldr	r3, [pc, #388]	@ (80079e8 <__ieee754_pow+0x298>)
 8007862:	4598      	cmp	r8, r3
 8007864:	d908      	bls.n	8007878 <__ieee754_pow+0x128>
 8007866:	f1b9 0f00 	cmp.w	r9, #0
 800786a:	f2c0 8476 	blt.w	800815a <__ieee754_pow+0xa0a>
 800786e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007872:	e78a      	b.n	800778a <__ieee754_pow+0x3a>
 8007874:	2402      	movs	r4, #2
 8007876:	e7e8      	b.n	800784a <__ieee754_pow+0xfa>
 8007878:	f1b9 0f00 	cmp.w	r9, #0
 800787c:	f04f 0000 	mov.w	r0, #0
 8007880:	f04f 0100 	mov.w	r1, #0
 8007884:	da81      	bge.n	800778a <__ieee754_pow+0x3a>
 8007886:	e9dd 0300 	ldrd	r0, r3, [sp]
 800788a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800788e:	e77c      	b.n	800778a <__ieee754_pow+0x3a>
 8007890:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8007894:	d106      	bne.n	80078a4 <__ieee754_pow+0x154>
 8007896:	4632      	mov	r2, r6
 8007898:	463b      	mov	r3, r7
 800789a:	4630      	mov	r0, r6
 800789c:	4639      	mov	r1, r7
 800789e:	f7f8 fecb 	bl	8000638 <__aeabi_dmul>
 80078a2:	e772      	b.n	800778a <__ieee754_pow+0x3a>
 80078a4:	4a51      	ldr	r2, [pc, #324]	@ (80079ec <__ieee754_pow+0x29c>)
 80078a6:	4591      	cmp	r9, r2
 80078a8:	d109      	bne.n	80078be <__ieee754_pow+0x16e>
 80078aa:	2d00      	cmp	r5, #0
 80078ac:	db07      	blt.n	80078be <__ieee754_pow+0x16e>
 80078ae:	ec47 6b10 	vmov	d0, r6, r7
 80078b2:	b011      	add	sp, #68	@ 0x44
 80078b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b8:	f000 bd4a 	b.w	8008350 <__ieee754_sqrt>
 80078bc:	2400      	movs	r4, #0
 80078be:	ec47 6b10 	vmov	d0, r6, r7
 80078c2:	9302      	str	r3, [sp, #8]
 80078c4:	f7ff fe68 	bl	8007598 <fabs>
 80078c8:	9b02      	ldr	r3, [sp, #8]
 80078ca:	ec51 0b10 	vmov	r0, r1, d0
 80078ce:	bb53      	cbnz	r3, 8007926 <__ieee754_pow+0x1d6>
 80078d0:	4b44      	ldr	r3, [pc, #272]	@ (80079e4 <__ieee754_pow+0x294>)
 80078d2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d002      	beq.n	80078e0 <__ieee754_pow+0x190>
 80078da:	f1b8 0f00 	cmp.w	r8, #0
 80078de:	d122      	bne.n	8007926 <__ieee754_pow+0x1d6>
 80078e0:	f1b9 0f00 	cmp.w	r9, #0
 80078e4:	da05      	bge.n	80078f2 <__ieee754_pow+0x1a2>
 80078e6:	4602      	mov	r2, r0
 80078e8:	460b      	mov	r3, r1
 80078ea:	2000      	movs	r0, #0
 80078ec:	493d      	ldr	r1, [pc, #244]	@ (80079e4 <__ieee754_pow+0x294>)
 80078ee:	f7f8 ffcd 	bl	800088c <__aeabi_ddiv>
 80078f2:	2d00      	cmp	r5, #0
 80078f4:	f6bf af49 	bge.w	800778a <__ieee754_pow+0x3a>
 80078f8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80078fc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8007900:	ea58 0804 	orrs.w	r8, r8, r4
 8007904:	d108      	bne.n	8007918 <__ieee754_pow+0x1c8>
 8007906:	4602      	mov	r2, r0
 8007908:	460b      	mov	r3, r1
 800790a:	4610      	mov	r0, r2
 800790c:	4619      	mov	r1, r3
 800790e:	f7f8 fcdb 	bl	80002c8 <__aeabi_dsub>
 8007912:	4602      	mov	r2, r0
 8007914:	460b      	mov	r3, r1
 8007916:	e794      	b.n	8007842 <__ieee754_pow+0xf2>
 8007918:	2c01      	cmp	r4, #1
 800791a:	f47f af36 	bne.w	800778a <__ieee754_pow+0x3a>
 800791e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007922:	4619      	mov	r1, r3
 8007924:	e731      	b.n	800778a <__ieee754_pow+0x3a>
 8007926:	0feb      	lsrs	r3, r5, #31
 8007928:	3b01      	subs	r3, #1
 800792a:	ea53 0204 	orrs.w	r2, r3, r4
 800792e:	d102      	bne.n	8007936 <__ieee754_pow+0x1e6>
 8007930:	4632      	mov	r2, r6
 8007932:	463b      	mov	r3, r7
 8007934:	e7e9      	b.n	800790a <__ieee754_pow+0x1ba>
 8007936:	3c01      	subs	r4, #1
 8007938:	431c      	orrs	r4, r3
 800793a:	d016      	beq.n	800796a <__ieee754_pow+0x21a>
 800793c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80079c8 <__ieee754_pow+0x278>
 8007940:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8007944:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007948:	f240 8112 	bls.w	8007b70 <__ieee754_pow+0x420>
 800794c:	4b28      	ldr	r3, [pc, #160]	@ (80079f0 <__ieee754_pow+0x2a0>)
 800794e:	459a      	cmp	sl, r3
 8007950:	4b25      	ldr	r3, [pc, #148]	@ (80079e8 <__ieee754_pow+0x298>)
 8007952:	d916      	bls.n	8007982 <__ieee754_pow+0x232>
 8007954:	4598      	cmp	r8, r3
 8007956:	d80b      	bhi.n	8007970 <__ieee754_pow+0x220>
 8007958:	f1b9 0f00 	cmp.w	r9, #0
 800795c:	da0b      	bge.n	8007976 <__ieee754_pow+0x226>
 800795e:	2000      	movs	r0, #0
 8007960:	b011      	add	sp, #68	@ 0x44
 8007962:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007966:	f000 bceb 	b.w	8008340 <__math_oflow>
 800796a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 80079d0 <__ieee754_pow+0x280>
 800796e:	e7e7      	b.n	8007940 <__ieee754_pow+0x1f0>
 8007970:	f1b9 0f00 	cmp.w	r9, #0
 8007974:	dcf3      	bgt.n	800795e <__ieee754_pow+0x20e>
 8007976:	2000      	movs	r0, #0
 8007978:	b011      	add	sp, #68	@ 0x44
 800797a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800797e:	f000 bcd7 	b.w	8008330 <__math_uflow>
 8007982:	4598      	cmp	r8, r3
 8007984:	d20c      	bcs.n	80079a0 <__ieee754_pow+0x250>
 8007986:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800798a:	2200      	movs	r2, #0
 800798c:	2300      	movs	r3, #0
 800798e:	f7f9 f8c5 	bl	8000b1c <__aeabi_dcmplt>
 8007992:	3800      	subs	r0, #0
 8007994:	bf18      	it	ne
 8007996:	2001      	movne	r0, #1
 8007998:	f1b9 0f00 	cmp.w	r9, #0
 800799c:	daec      	bge.n	8007978 <__ieee754_pow+0x228>
 800799e:	e7df      	b.n	8007960 <__ieee754_pow+0x210>
 80079a0:	4b10      	ldr	r3, [pc, #64]	@ (80079e4 <__ieee754_pow+0x294>)
 80079a2:	4598      	cmp	r8, r3
 80079a4:	f04f 0200 	mov.w	r2, #0
 80079a8:	d924      	bls.n	80079f4 <__ieee754_pow+0x2a4>
 80079aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079ae:	2300      	movs	r3, #0
 80079b0:	f7f9 f8b4 	bl	8000b1c <__aeabi_dcmplt>
 80079b4:	3800      	subs	r0, #0
 80079b6:	bf18      	it	ne
 80079b8:	2001      	movne	r0, #1
 80079ba:	f1b9 0f00 	cmp.w	r9, #0
 80079be:	dccf      	bgt.n	8007960 <__ieee754_pow+0x210>
 80079c0:	e7da      	b.n	8007978 <__ieee754_pow+0x228>
 80079c2:	bf00      	nop
 80079c4:	f3af 8000 	nop.w
 80079c8:	00000000 	.word	0x00000000
 80079cc:	3ff00000 	.word	0x3ff00000
 80079d0:	00000000 	.word	0x00000000
 80079d4:	bff00000 	.word	0xbff00000
 80079d8:	fff00000 	.word	0xfff00000
 80079dc:	7ff00000 	.word	0x7ff00000
 80079e0:	433fffff 	.word	0x433fffff
 80079e4:	3ff00000 	.word	0x3ff00000
 80079e8:	3fefffff 	.word	0x3fefffff
 80079ec:	3fe00000 	.word	0x3fe00000
 80079f0:	43f00000 	.word	0x43f00000
 80079f4:	4b5a      	ldr	r3, [pc, #360]	@ (8007b60 <__ieee754_pow+0x410>)
 80079f6:	f7f8 fc67 	bl	80002c8 <__aeabi_dsub>
 80079fa:	a351      	add	r3, pc, #324	@ (adr r3, 8007b40 <__ieee754_pow+0x3f0>)
 80079fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a00:	4604      	mov	r4, r0
 8007a02:	460d      	mov	r5, r1
 8007a04:	f7f8 fe18 	bl	8000638 <__aeabi_dmul>
 8007a08:	a34f      	add	r3, pc, #316	@ (adr r3, 8007b48 <__ieee754_pow+0x3f8>)
 8007a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0e:	4606      	mov	r6, r0
 8007a10:	460f      	mov	r7, r1
 8007a12:	4620      	mov	r0, r4
 8007a14:	4629      	mov	r1, r5
 8007a16:	f7f8 fe0f 	bl	8000638 <__aeabi_dmul>
 8007a1a:	4b52      	ldr	r3, [pc, #328]	@ (8007b64 <__ieee754_pow+0x414>)
 8007a1c:	4682      	mov	sl, r0
 8007a1e:	468b      	mov	fp, r1
 8007a20:	2200      	movs	r2, #0
 8007a22:	4620      	mov	r0, r4
 8007a24:	4629      	mov	r1, r5
 8007a26:	f7f8 fe07 	bl	8000638 <__aeabi_dmul>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	a148      	add	r1, pc, #288	@ (adr r1, 8007b50 <__ieee754_pow+0x400>)
 8007a30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a34:	f7f8 fc48 	bl	80002c8 <__aeabi_dsub>
 8007a38:	4622      	mov	r2, r4
 8007a3a:	462b      	mov	r3, r5
 8007a3c:	f7f8 fdfc 	bl	8000638 <__aeabi_dmul>
 8007a40:	4602      	mov	r2, r0
 8007a42:	460b      	mov	r3, r1
 8007a44:	2000      	movs	r0, #0
 8007a46:	4948      	ldr	r1, [pc, #288]	@ (8007b68 <__ieee754_pow+0x418>)
 8007a48:	f7f8 fc3e 	bl	80002c8 <__aeabi_dsub>
 8007a4c:	4622      	mov	r2, r4
 8007a4e:	4680      	mov	r8, r0
 8007a50:	4689      	mov	r9, r1
 8007a52:	462b      	mov	r3, r5
 8007a54:	4620      	mov	r0, r4
 8007a56:	4629      	mov	r1, r5
 8007a58:	f7f8 fdee 	bl	8000638 <__aeabi_dmul>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	460b      	mov	r3, r1
 8007a60:	4640      	mov	r0, r8
 8007a62:	4649      	mov	r1, r9
 8007a64:	f7f8 fde8 	bl	8000638 <__aeabi_dmul>
 8007a68:	a33b      	add	r3, pc, #236	@ (adr r3, 8007b58 <__ieee754_pow+0x408>)
 8007a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6e:	f7f8 fde3 	bl	8000638 <__aeabi_dmul>
 8007a72:	4602      	mov	r2, r0
 8007a74:	460b      	mov	r3, r1
 8007a76:	4650      	mov	r0, sl
 8007a78:	4659      	mov	r1, fp
 8007a7a:	f7f8 fc25 	bl	80002c8 <__aeabi_dsub>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	460b      	mov	r3, r1
 8007a82:	4680      	mov	r8, r0
 8007a84:	4689      	mov	r9, r1
 8007a86:	4630      	mov	r0, r6
 8007a88:	4639      	mov	r1, r7
 8007a8a:	f7f8 fc1f 	bl	80002cc <__adddf3>
 8007a8e:	2400      	movs	r4, #0
 8007a90:	4632      	mov	r2, r6
 8007a92:	463b      	mov	r3, r7
 8007a94:	4620      	mov	r0, r4
 8007a96:	460d      	mov	r5, r1
 8007a98:	f7f8 fc16 	bl	80002c8 <__aeabi_dsub>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	4640      	mov	r0, r8
 8007aa2:	4649      	mov	r1, r9
 8007aa4:	f7f8 fc10 	bl	80002c8 <__aeabi_dsub>
 8007aa8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007aac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	9304      	str	r3, [sp, #16]
 8007ab4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007ab8:	4606      	mov	r6, r0
 8007aba:	460f      	mov	r7, r1
 8007abc:	4652      	mov	r2, sl
 8007abe:	465b      	mov	r3, fp
 8007ac0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ac4:	f7f8 fc00 	bl	80002c8 <__aeabi_dsub>
 8007ac8:	4622      	mov	r2, r4
 8007aca:	462b      	mov	r3, r5
 8007acc:	f7f8 fdb4 	bl	8000638 <__aeabi_dmul>
 8007ad0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ad4:	4680      	mov	r8, r0
 8007ad6:	4689      	mov	r9, r1
 8007ad8:	4630      	mov	r0, r6
 8007ada:	4639      	mov	r1, r7
 8007adc:	f7f8 fdac 	bl	8000638 <__aeabi_dmul>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	4640      	mov	r0, r8
 8007ae6:	4649      	mov	r1, r9
 8007ae8:	f7f8 fbf0 	bl	80002cc <__adddf3>
 8007aec:	4652      	mov	r2, sl
 8007aee:	465b      	mov	r3, fp
 8007af0:	4606      	mov	r6, r0
 8007af2:	460f      	mov	r7, r1
 8007af4:	4620      	mov	r0, r4
 8007af6:	4629      	mov	r1, r5
 8007af8:	f7f8 fd9e 	bl	8000638 <__aeabi_dmul>
 8007afc:	460b      	mov	r3, r1
 8007afe:	4602      	mov	r2, r0
 8007b00:	4680      	mov	r8, r0
 8007b02:	4689      	mov	r9, r1
 8007b04:	4630      	mov	r0, r6
 8007b06:	4639      	mov	r1, r7
 8007b08:	f7f8 fbe0 	bl	80002cc <__adddf3>
 8007b0c:	4b17      	ldr	r3, [pc, #92]	@ (8007b6c <__ieee754_pow+0x41c>)
 8007b0e:	4299      	cmp	r1, r3
 8007b10:	4604      	mov	r4, r0
 8007b12:	460d      	mov	r5, r1
 8007b14:	468a      	mov	sl, r1
 8007b16:	468b      	mov	fp, r1
 8007b18:	f340 82ef 	ble.w	80080fa <__ieee754_pow+0x9aa>
 8007b1c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8007b20:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8007b24:	4303      	orrs	r3, r0
 8007b26:	f000 81e8 	beq.w	8007efa <__ieee754_pow+0x7aa>
 8007b2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	2300      	movs	r3, #0
 8007b32:	f7f8 fff3 	bl	8000b1c <__aeabi_dcmplt>
 8007b36:	3800      	subs	r0, #0
 8007b38:	bf18      	it	ne
 8007b3a:	2001      	movne	r0, #1
 8007b3c:	e710      	b.n	8007960 <__ieee754_pow+0x210>
 8007b3e:	bf00      	nop
 8007b40:	60000000 	.word	0x60000000
 8007b44:	3ff71547 	.word	0x3ff71547
 8007b48:	f85ddf44 	.word	0xf85ddf44
 8007b4c:	3e54ae0b 	.word	0x3e54ae0b
 8007b50:	55555555 	.word	0x55555555
 8007b54:	3fd55555 	.word	0x3fd55555
 8007b58:	652b82fe 	.word	0x652b82fe
 8007b5c:	3ff71547 	.word	0x3ff71547
 8007b60:	3ff00000 	.word	0x3ff00000
 8007b64:	3fd00000 	.word	0x3fd00000
 8007b68:	3fe00000 	.word	0x3fe00000
 8007b6c:	408fffff 	.word	0x408fffff
 8007b70:	4bd5      	ldr	r3, [pc, #852]	@ (8007ec8 <__ieee754_pow+0x778>)
 8007b72:	402b      	ands	r3, r5
 8007b74:	2200      	movs	r2, #0
 8007b76:	b92b      	cbnz	r3, 8007b84 <__ieee754_pow+0x434>
 8007b78:	4bd4      	ldr	r3, [pc, #848]	@ (8007ecc <__ieee754_pow+0x77c>)
 8007b7a:	f7f8 fd5d 	bl	8000638 <__aeabi_dmul>
 8007b7e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8007b82:	468b      	mov	fp, r1
 8007b84:	ea4f 532b 	mov.w	r3, fp, asr #20
 8007b88:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8007b8c:	4413      	add	r3, r2
 8007b8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b90:	4bcf      	ldr	r3, [pc, #828]	@ (8007ed0 <__ieee754_pow+0x780>)
 8007b92:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8007b96:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8007b9a:	459b      	cmp	fp, r3
 8007b9c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007ba0:	dd08      	ble.n	8007bb4 <__ieee754_pow+0x464>
 8007ba2:	4bcc      	ldr	r3, [pc, #816]	@ (8007ed4 <__ieee754_pow+0x784>)
 8007ba4:	459b      	cmp	fp, r3
 8007ba6:	f340 81a5 	ble.w	8007ef4 <__ieee754_pow+0x7a4>
 8007baa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bac:	3301      	adds	r3, #1
 8007bae:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bb0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8007bb4:	f04f 0a00 	mov.w	sl, #0
 8007bb8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8007bbc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007bbe:	4bc6      	ldr	r3, [pc, #792]	@ (8007ed8 <__ieee754_pow+0x788>)
 8007bc0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007bc4:	ed93 7b00 	vldr	d7, [r3]
 8007bc8:	4629      	mov	r1, r5
 8007bca:	ec53 2b17 	vmov	r2, r3, d7
 8007bce:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007bd2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007bd6:	f7f8 fb77 	bl	80002c8 <__aeabi_dsub>
 8007bda:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007bde:	4606      	mov	r6, r0
 8007be0:	460f      	mov	r7, r1
 8007be2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007be6:	f7f8 fb71 	bl	80002cc <__adddf3>
 8007bea:	4602      	mov	r2, r0
 8007bec:	460b      	mov	r3, r1
 8007bee:	2000      	movs	r0, #0
 8007bf0:	49ba      	ldr	r1, [pc, #744]	@ (8007edc <__ieee754_pow+0x78c>)
 8007bf2:	f7f8 fe4b 	bl	800088c <__aeabi_ddiv>
 8007bf6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	4630      	mov	r0, r6
 8007c00:	4639      	mov	r1, r7
 8007c02:	f7f8 fd19 	bl	8000638 <__aeabi_dmul>
 8007c06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c0a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8007c0e:	106d      	asrs	r5, r5, #1
 8007c10:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8007c14:	f04f 0b00 	mov.w	fp, #0
 8007c18:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8007c1c:	4661      	mov	r1, ip
 8007c1e:	2200      	movs	r2, #0
 8007c20:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8007c24:	4658      	mov	r0, fp
 8007c26:	46e1      	mov	r9, ip
 8007c28:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8007c2c:	4614      	mov	r4, r2
 8007c2e:	461d      	mov	r5, r3
 8007c30:	f7f8 fd02 	bl	8000638 <__aeabi_dmul>
 8007c34:	4602      	mov	r2, r0
 8007c36:	460b      	mov	r3, r1
 8007c38:	4630      	mov	r0, r6
 8007c3a:	4639      	mov	r1, r7
 8007c3c:	f7f8 fb44 	bl	80002c8 <__aeabi_dsub>
 8007c40:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007c44:	4606      	mov	r6, r0
 8007c46:	460f      	mov	r7, r1
 8007c48:	4620      	mov	r0, r4
 8007c4a:	4629      	mov	r1, r5
 8007c4c:	f7f8 fb3c 	bl	80002c8 <__aeabi_dsub>
 8007c50:	4602      	mov	r2, r0
 8007c52:	460b      	mov	r3, r1
 8007c54:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007c58:	f7f8 fb36 	bl	80002c8 <__aeabi_dsub>
 8007c5c:	465a      	mov	r2, fp
 8007c5e:	464b      	mov	r3, r9
 8007c60:	f7f8 fcea 	bl	8000638 <__aeabi_dmul>
 8007c64:	4602      	mov	r2, r0
 8007c66:	460b      	mov	r3, r1
 8007c68:	4630      	mov	r0, r6
 8007c6a:	4639      	mov	r1, r7
 8007c6c:	f7f8 fb2c 	bl	80002c8 <__aeabi_dsub>
 8007c70:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007c74:	f7f8 fce0 	bl	8000638 <__aeabi_dmul>
 8007c78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c7c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007c80:	4610      	mov	r0, r2
 8007c82:	4619      	mov	r1, r3
 8007c84:	f7f8 fcd8 	bl	8000638 <__aeabi_dmul>
 8007c88:	a37d      	add	r3, pc, #500	@ (adr r3, 8007e80 <__ieee754_pow+0x730>)
 8007c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8e:	4604      	mov	r4, r0
 8007c90:	460d      	mov	r5, r1
 8007c92:	f7f8 fcd1 	bl	8000638 <__aeabi_dmul>
 8007c96:	a37c      	add	r3, pc, #496	@ (adr r3, 8007e88 <__ieee754_pow+0x738>)
 8007c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9c:	f7f8 fb16 	bl	80002cc <__adddf3>
 8007ca0:	4622      	mov	r2, r4
 8007ca2:	462b      	mov	r3, r5
 8007ca4:	f7f8 fcc8 	bl	8000638 <__aeabi_dmul>
 8007ca8:	a379      	add	r3, pc, #484	@ (adr r3, 8007e90 <__ieee754_pow+0x740>)
 8007caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cae:	f7f8 fb0d 	bl	80002cc <__adddf3>
 8007cb2:	4622      	mov	r2, r4
 8007cb4:	462b      	mov	r3, r5
 8007cb6:	f7f8 fcbf 	bl	8000638 <__aeabi_dmul>
 8007cba:	a377      	add	r3, pc, #476	@ (adr r3, 8007e98 <__ieee754_pow+0x748>)
 8007cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc0:	f7f8 fb04 	bl	80002cc <__adddf3>
 8007cc4:	4622      	mov	r2, r4
 8007cc6:	462b      	mov	r3, r5
 8007cc8:	f7f8 fcb6 	bl	8000638 <__aeabi_dmul>
 8007ccc:	a374      	add	r3, pc, #464	@ (adr r3, 8007ea0 <__ieee754_pow+0x750>)
 8007cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd2:	f7f8 fafb 	bl	80002cc <__adddf3>
 8007cd6:	4622      	mov	r2, r4
 8007cd8:	462b      	mov	r3, r5
 8007cda:	f7f8 fcad 	bl	8000638 <__aeabi_dmul>
 8007cde:	a372      	add	r3, pc, #456	@ (adr r3, 8007ea8 <__ieee754_pow+0x758>)
 8007ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce4:	f7f8 faf2 	bl	80002cc <__adddf3>
 8007ce8:	4622      	mov	r2, r4
 8007cea:	4606      	mov	r6, r0
 8007cec:	460f      	mov	r7, r1
 8007cee:	462b      	mov	r3, r5
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	4629      	mov	r1, r5
 8007cf4:	f7f8 fca0 	bl	8000638 <__aeabi_dmul>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	4630      	mov	r0, r6
 8007cfe:	4639      	mov	r1, r7
 8007d00:	f7f8 fc9a 	bl	8000638 <__aeabi_dmul>
 8007d04:	465a      	mov	r2, fp
 8007d06:	4604      	mov	r4, r0
 8007d08:	460d      	mov	r5, r1
 8007d0a:	464b      	mov	r3, r9
 8007d0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d10:	f7f8 fadc 	bl	80002cc <__adddf3>
 8007d14:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d18:	f7f8 fc8e 	bl	8000638 <__aeabi_dmul>
 8007d1c:	4622      	mov	r2, r4
 8007d1e:	462b      	mov	r3, r5
 8007d20:	f7f8 fad4 	bl	80002cc <__adddf3>
 8007d24:	465a      	mov	r2, fp
 8007d26:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007d2a:	464b      	mov	r3, r9
 8007d2c:	4658      	mov	r0, fp
 8007d2e:	4649      	mov	r1, r9
 8007d30:	f7f8 fc82 	bl	8000638 <__aeabi_dmul>
 8007d34:	4b6a      	ldr	r3, [pc, #424]	@ (8007ee0 <__ieee754_pow+0x790>)
 8007d36:	2200      	movs	r2, #0
 8007d38:	4606      	mov	r6, r0
 8007d3a:	460f      	mov	r7, r1
 8007d3c:	f7f8 fac6 	bl	80002cc <__adddf3>
 8007d40:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007d44:	f7f8 fac2 	bl	80002cc <__adddf3>
 8007d48:	46d8      	mov	r8, fp
 8007d4a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8007d4e:	460d      	mov	r5, r1
 8007d50:	465a      	mov	r2, fp
 8007d52:	460b      	mov	r3, r1
 8007d54:	4640      	mov	r0, r8
 8007d56:	4649      	mov	r1, r9
 8007d58:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8007d5c:	f7f8 fc6c 	bl	8000638 <__aeabi_dmul>
 8007d60:	465c      	mov	r4, fp
 8007d62:	4680      	mov	r8, r0
 8007d64:	4689      	mov	r9, r1
 8007d66:	4b5e      	ldr	r3, [pc, #376]	@ (8007ee0 <__ieee754_pow+0x790>)
 8007d68:	2200      	movs	r2, #0
 8007d6a:	4620      	mov	r0, r4
 8007d6c:	4629      	mov	r1, r5
 8007d6e:	f7f8 faab 	bl	80002c8 <__aeabi_dsub>
 8007d72:	4632      	mov	r2, r6
 8007d74:	463b      	mov	r3, r7
 8007d76:	f7f8 faa7 	bl	80002c8 <__aeabi_dsub>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007d82:	f7f8 faa1 	bl	80002c8 <__aeabi_dsub>
 8007d86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d8a:	f7f8 fc55 	bl	8000638 <__aeabi_dmul>
 8007d8e:	4622      	mov	r2, r4
 8007d90:	4606      	mov	r6, r0
 8007d92:	460f      	mov	r7, r1
 8007d94:	462b      	mov	r3, r5
 8007d96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d9a:	f7f8 fc4d 	bl	8000638 <__aeabi_dmul>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	460b      	mov	r3, r1
 8007da2:	4630      	mov	r0, r6
 8007da4:	4639      	mov	r1, r7
 8007da6:	f7f8 fa91 	bl	80002cc <__adddf3>
 8007daa:	4606      	mov	r6, r0
 8007dac:	460f      	mov	r7, r1
 8007dae:	4602      	mov	r2, r0
 8007db0:	460b      	mov	r3, r1
 8007db2:	4640      	mov	r0, r8
 8007db4:	4649      	mov	r1, r9
 8007db6:	f7f8 fa89 	bl	80002cc <__adddf3>
 8007dba:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8007dbe:	a33c      	add	r3, pc, #240	@ (adr r3, 8007eb0 <__ieee754_pow+0x760>)
 8007dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc4:	4658      	mov	r0, fp
 8007dc6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8007dca:	460d      	mov	r5, r1
 8007dcc:	f7f8 fc34 	bl	8000638 <__aeabi_dmul>
 8007dd0:	465c      	mov	r4, fp
 8007dd2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007dd6:	4642      	mov	r2, r8
 8007dd8:	464b      	mov	r3, r9
 8007dda:	4620      	mov	r0, r4
 8007ddc:	4629      	mov	r1, r5
 8007dde:	f7f8 fa73 	bl	80002c8 <__aeabi_dsub>
 8007de2:	4602      	mov	r2, r0
 8007de4:	460b      	mov	r3, r1
 8007de6:	4630      	mov	r0, r6
 8007de8:	4639      	mov	r1, r7
 8007dea:	f7f8 fa6d 	bl	80002c8 <__aeabi_dsub>
 8007dee:	a332      	add	r3, pc, #200	@ (adr r3, 8007eb8 <__ieee754_pow+0x768>)
 8007df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df4:	f7f8 fc20 	bl	8000638 <__aeabi_dmul>
 8007df8:	a331      	add	r3, pc, #196	@ (adr r3, 8007ec0 <__ieee754_pow+0x770>)
 8007dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfe:	4606      	mov	r6, r0
 8007e00:	460f      	mov	r7, r1
 8007e02:	4620      	mov	r0, r4
 8007e04:	4629      	mov	r1, r5
 8007e06:	f7f8 fc17 	bl	8000638 <__aeabi_dmul>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	4630      	mov	r0, r6
 8007e10:	4639      	mov	r1, r7
 8007e12:	f7f8 fa5b 	bl	80002cc <__adddf3>
 8007e16:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007e18:	4b32      	ldr	r3, [pc, #200]	@ (8007ee4 <__ieee754_pow+0x794>)
 8007e1a:	4413      	add	r3, r2
 8007e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e20:	f7f8 fa54 	bl	80002cc <__adddf3>
 8007e24:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007e28:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007e2a:	f7f8 fb9b 	bl	8000564 <__aeabi_i2d>
 8007e2e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007e30:	4b2d      	ldr	r3, [pc, #180]	@ (8007ee8 <__ieee754_pow+0x798>)
 8007e32:	4413      	add	r3, r2
 8007e34:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e38:	4606      	mov	r6, r0
 8007e3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e3e:	460f      	mov	r7, r1
 8007e40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e44:	f7f8 fa42 	bl	80002cc <__adddf3>
 8007e48:	4642      	mov	r2, r8
 8007e4a:	464b      	mov	r3, r9
 8007e4c:	f7f8 fa3e 	bl	80002cc <__adddf3>
 8007e50:	4632      	mov	r2, r6
 8007e52:	463b      	mov	r3, r7
 8007e54:	f7f8 fa3a 	bl	80002cc <__adddf3>
 8007e58:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8007e5c:	4632      	mov	r2, r6
 8007e5e:	463b      	mov	r3, r7
 8007e60:	4658      	mov	r0, fp
 8007e62:	460d      	mov	r5, r1
 8007e64:	f7f8 fa30 	bl	80002c8 <__aeabi_dsub>
 8007e68:	4642      	mov	r2, r8
 8007e6a:	464b      	mov	r3, r9
 8007e6c:	f7f8 fa2c 	bl	80002c8 <__aeabi_dsub>
 8007e70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e74:	f7f8 fa28 	bl	80002c8 <__aeabi_dsub>
 8007e78:	465c      	mov	r4, fp
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	e036      	b.n	8007eec <__ieee754_pow+0x79c>
 8007e7e:	bf00      	nop
 8007e80:	4a454eef 	.word	0x4a454eef
 8007e84:	3fca7e28 	.word	0x3fca7e28
 8007e88:	93c9db65 	.word	0x93c9db65
 8007e8c:	3fcd864a 	.word	0x3fcd864a
 8007e90:	a91d4101 	.word	0xa91d4101
 8007e94:	3fd17460 	.word	0x3fd17460
 8007e98:	518f264d 	.word	0x518f264d
 8007e9c:	3fd55555 	.word	0x3fd55555
 8007ea0:	db6fabff 	.word	0xdb6fabff
 8007ea4:	3fdb6db6 	.word	0x3fdb6db6
 8007ea8:	33333303 	.word	0x33333303
 8007eac:	3fe33333 	.word	0x3fe33333
 8007eb0:	e0000000 	.word	0xe0000000
 8007eb4:	3feec709 	.word	0x3feec709
 8007eb8:	dc3a03fd 	.word	0xdc3a03fd
 8007ebc:	3feec709 	.word	0x3feec709
 8007ec0:	145b01f5 	.word	0x145b01f5
 8007ec4:	be3e2fe0 	.word	0xbe3e2fe0
 8007ec8:	7ff00000 	.word	0x7ff00000
 8007ecc:	43400000 	.word	0x43400000
 8007ed0:	0003988e 	.word	0x0003988e
 8007ed4:	000bb679 	.word	0x000bb679
 8007ed8:	08008790 	.word	0x08008790
 8007edc:	3ff00000 	.word	0x3ff00000
 8007ee0:	40080000 	.word	0x40080000
 8007ee4:	08008770 	.word	0x08008770
 8007ee8:	08008780 	.word	0x08008780
 8007eec:	460b      	mov	r3, r1
 8007eee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ef2:	e5d7      	b.n	8007aa4 <__ieee754_pow+0x354>
 8007ef4:	f04f 0a01 	mov.w	sl, #1
 8007ef8:	e65e      	b.n	8007bb8 <__ieee754_pow+0x468>
 8007efa:	a3b4      	add	r3, pc, #720	@ (adr r3, 80081cc <__ieee754_pow+0xa7c>)
 8007efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f00:	4630      	mov	r0, r6
 8007f02:	4639      	mov	r1, r7
 8007f04:	f7f8 f9e2 	bl	80002cc <__adddf3>
 8007f08:	4642      	mov	r2, r8
 8007f0a:	e9cd 0100 	strd	r0, r1, [sp]
 8007f0e:	464b      	mov	r3, r9
 8007f10:	4620      	mov	r0, r4
 8007f12:	4629      	mov	r1, r5
 8007f14:	f7f8 f9d8 	bl	80002c8 <__aeabi_dsub>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f20:	f7f8 fe1a 	bl	8000b58 <__aeabi_dcmpgt>
 8007f24:	2800      	cmp	r0, #0
 8007f26:	f47f ae00 	bne.w	8007b2a <__ieee754_pow+0x3da>
 8007f2a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8007f2e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007f32:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8007f36:	fa43 fa0a 	asr.w	sl, r3, sl
 8007f3a:	44da      	add	sl, fp
 8007f3c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8007f40:	489d      	ldr	r0, [pc, #628]	@ (80081b8 <__ieee754_pow+0xa68>)
 8007f42:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8007f46:	4108      	asrs	r0, r1
 8007f48:	ea00 030a 	and.w	r3, r0, sl
 8007f4c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8007f50:	f1c1 0114 	rsb	r1, r1, #20
 8007f54:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8007f58:	fa4a fa01 	asr.w	sl, sl, r1
 8007f5c:	f1bb 0f00 	cmp.w	fp, #0
 8007f60:	4640      	mov	r0, r8
 8007f62:	4649      	mov	r1, r9
 8007f64:	f04f 0200 	mov.w	r2, #0
 8007f68:	bfb8      	it	lt
 8007f6a:	f1ca 0a00 	rsblt	sl, sl, #0
 8007f6e:	f7f8 f9ab 	bl	80002c8 <__aeabi_dsub>
 8007f72:	4680      	mov	r8, r0
 8007f74:	4689      	mov	r9, r1
 8007f76:	4632      	mov	r2, r6
 8007f78:	463b      	mov	r3, r7
 8007f7a:	4640      	mov	r0, r8
 8007f7c:	4649      	mov	r1, r9
 8007f7e:	f7f8 f9a5 	bl	80002cc <__adddf3>
 8007f82:	2400      	movs	r4, #0
 8007f84:	a37c      	add	r3, pc, #496	@ (adr r3, 8008178 <__ieee754_pow+0xa28>)
 8007f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	460d      	mov	r5, r1
 8007f8e:	f7f8 fb53 	bl	8000638 <__aeabi_dmul>
 8007f92:	4642      	mov	r2, r8
 8007f94:	e9cd 0100 	strd	r0, r1, [sp]
 8007f98:	464b      	mov	r3, r9
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	4629      	mov	r1, r5
 8007f9e:	f7f8 f993 	bl	80002c8 <__aeabi_dsub>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	4630      	mov	r0, r6
 8007fa8:	4639      	mov	r1, r7
 8007faa:	f7f8 f98d 	bl	80002c8 <__aeabi_dsub>
 8007fae:	a374      	add	r3, pc, #464	@ (adr r3, 8008180 <__ieee754_pow+0xa30>)
 8007fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb4:	f7f8 fb40 	bl	8000638 <__aeabi_dmul>
 8007fb8:	a373      	add	r3, pc, #460	@ (adr r3, 8008188 <__ieee754_pow+0xa38>)
 8007fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fbe:	4680      	mov	r8, r0
 8007fc0:	4689      	mov	r9, r1
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	4629      	mov	r1, r5
 8007fc6:	f7f8 fb37 	bl	8000638 <__aeabi_dmul>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	460b      	mov	r3, r1
 8007fce:	4640      	mov	r0, r8
 8007fd0:	4649      	mov	r1, r9
 8007fd2:	f7f8 f97b 	bl	80002cc <__adddf3>
 8007fd6:	4604      	mov	r4, r0
 8007fd8:	460d      	mov	r5, r1
 8007fda:	4602      	mov	r2, r0
 8007fdc:	460b      	mov	r3, r1
 8007fde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007fe2:	f7f8 f973 	bl	80002cc <__adddf3>
 8007fe6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007fea:	4680      	mov	r8, r0
 8007fec:	4689      	mov	r9, r1
 8007fee:	f7f8 f96b 	bl	80002c8 <__aeabi_dsub>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	4629      	mov	r1, r5
 8007ffa:	f7f8 f965 	bl	80002c8 <__aeabi_dsub>
 8007ffe:	4642      	mov	r2, r8
 8008000:	4606      	mov	r6, r0
 8008002:	460f      	mov	r7, r1
 8008004:	464b      	mov	r3, r9
 8008006:	4640      	mov	r0, r8
 8008008:	4649      	mov	r1, r9
 800800a:	f7f8 fb15 	bl	8000638 <__aeabi_dmul>
 800800e:	a360      	add	r3, pc, #384	@ (adr r3, 8008190 <__ieee754_pow+0xa40>)
 8008010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008014:	4604      	mov	r4, r0
 8008016:	460d      	mov	r5, r1
 8008018:	f7f8 fb0e 	bl	8000638 <__aeabi_dmul>
 800801c:	a35e      	add	r3, pc, #376	@ (adr r3, 8008198 <__ieee754_pow+0xa48>)
 800801e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008022:	f7f8 f951 	bl	80002c8 <__aeabi_dsub>
 8008026:	4622      	mov	r2, r4
 8008028:	462b      	mov	r3, r5
 800802a:	f7f8 fb05 	bl	8000638 <__aeabi_dmul>
 800802e:	a35c      	add	r3, pc, #368	@ (adr r3, 80081a0 <__ieee754_pow+0xa50>)
 8008030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008034:	f7f8 f94a 	bl	80002cc <__adddf3>
 8008038:	4622      	mov	r2, r4
 800803a:	462b      	mov	r3, r5
 800803c:	f7f8 fafc 	bl	8000638 <__aeabi_dmul>
 8008040:	a359      	add	r3, pc, #356	@ (adr r3, 80081a8 <__ieee754_pow+0xa58>)
 8008042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008046:	f7f8 f93f 	bl	80002c8 <__aeabi_dsub>
 800804a:	4622      	mov	r2, r4
 800804c:	462b      	mov	r3, r5
 800804e:	f7f8 faf3 	bl	8000638 <__aeabi_dmul>
 8008052:	a357      	add	r3, pc, #348	@ (adr r3, 80081b0 <__ieee754_pow+0xa60>)
 8008054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008058:	f7f8 f938 	bl	80002cc <__adddf3>
 800805c:	4622      	mov	r2, r4
 800805e:	462b      	mov	r3, r5
 8008060:	f7f8 faea 	bl	8000638 <__aeabi_dmul>
 8008064:	4602      	mov	r2, r0
 8008066:	460b      	mov	r3, r1
 8008068:	4640      	mov	r0, r8
 800806a:	4649      	mov	r1, r9
 800806c:	f7f8 f92c 	bl	80002c8 <__aeabi_dsub>
 8008070:	4604      	mov	r4, r0
 8008072:	460d      	mov	r5, r1
 8008074:	4602      	mov	r2, r0
 8008076:	460b      	mov	r3, r1
 8008078:	4640      	mov	r0, r8
 800807a:	4649      	mov	r1, r9
 800807c:	f7f8 fadc 	bl	8000638 <__aeabi_dmul>
 8008080:	2200      	movs	r2, #0
 8008082:	e9cd 0100 	strd	r0, r1, [sp]
 8008086:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800808a:	4620      	mov	r0, r4
 800808c:	4629      	mov	r1, r5
 800808e:	f7f8 f91b 	bl	80002c8 <__aeabi_dsub>
 8008092:	4602      	mov	r2, r0
 8008094:	460b      	mov	r3, r1
 8008096:	e9dd 0100 	ldrd	r0, r1, [sp]
 800809a:	f7f8 fbf7 	bl	800088c <__aeabi_ddiv>
 800809e:	4632      	mov	r2, r6
 80080a0:	4604      	mov	r4, r0
 80080a2:	460d      	mov	r5, r1
 80080a4:	463b      	mov	r3, r7
 80080a6:	4640      	mov	r0, r8
 80080a8:	4649      	mov	r1, r9
 80080aa:	f7f8 fac5 	bl	8000638 <__aeabi_dmul>
 80080ae:	4632      	mov	r2, r6
 80080b0:	463b      	mov	r3, r7
 80080b2:	f7f8 f90b 	bl	80002cc <__adddf3>
 80080b6:	4602      	mov	r2, r0
 80080b8:	460b      	mov	r3, r1
 80080ba:	4620      	mov	r0, r4
 80080bc:	4629      	mov	r1, r5
 80080be:	f7f8 f903 	bl	80002c8 <__aeabi_dsub>
 80080c2:	4642      	mov	r2, r8
 80080c4:	464b      	mov	r3, r9
 80080c6:	f7f8 f8ff 	bl	80002c8 <__aeabi_dsub>
 80080ca:	460b      	mov	r3, r1
 80080cc:	4602      	mov	r2, r0
 80080ce:	493b      	ldr	r1, [pc, #236]	@ (80081bc <__ieee754_pow+0xa6c>)
 80080d0:	2000      	movs	r0, #0
 80080d2:	f7f8 f8f9 	bl	80002c8 <__aeabi_dsub>
 80080d6:	ec41 0b10 	vmov	d0, r0, r1
 80080da:	ee10 3a90 	vmov	r3, s1
 80080de:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80080e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080e6:	da30      	bge.n	800814a <__ieee754_pow+0x9fa>
 80080e8:	4650      	mov	r0, sl
 80080ea:	f000 f875 	bl	80081d8 <scalbn>
 80080ee:	ec51 0b10 	vmov	r0, r1, d0
 80080f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080f6:	f7ff bbd2 	b.w	800789e <__ieee754_pow+0x14e>
 80080fa:	4c31      	ldr	r4, [pc, #196]	@ (80081c0 <__ieee754_pow+0xa70>)
 80080fc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008100:	42a3      	cmp	r3, r4
 8008102:	d91a      	bls.n	800813a <__ieee754_pow+0x9ea>
 8008104:	4b2f      	ldr	r3, [pc, #188]	@ (80081c4 <__ieee754_pow+0xa74>)
 8008106:	440b      	add	r3, r1
 8008108:	4303      	orrs	r3, r0
 800810a:	d009      	beq.n	8008120 <__ieee754_pow+0x9d0>
 800810c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008110:	2200      	movs	r2, #0
 8008112:	2300      	movs	r3, #0
 8008114:	f7f8 fd02 	bl	8000b1c <__aeabi_dcmplt>
 8008118:	3800      	subs	r0, #0
 800811a:	bf18      	it	ne
 800811c:	2001      	movne	r0, #1
 800811e:	e42b      	b.n	8007978 <__ieee754_pow+0x228>
 8008120:	4642      	mov	r2, r8
 8008122:	464b      	mov	r3, r9
 8008124:	f7f8 f8d0 	bl	80002c8 <__aeabi_dsub>
 8008128:	4632      	mov	r2, r6
 800812a:	463b      	mov	r3, r7
 800812c:	f7f8 fd0a 	bl	8000b44 <__aeabi_dcmpge>
 8008130:	2800      	cmp	r0, #0
 8008132:	d1eb      	bne.n	800810c <__ieee754_pow+0x9bc>
 8008134:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80081d4 <__ieee754_pow+0xa84>
 8008138:	e6f7      	b.n	8007f2a <__ieee754_pow+0x7da>
 800813a:	469a      	mov	sl, r3
 800813c:	4b22      	ldr	r3, [pc, #136]	@ (80081c8 <__ieee754_pow+0xa78>)
 800813e:	459a      	cmp	sl, r3
 8008140:	f63f aef3 	bhi.w	8007f2a <__ieee754_pow+0x7da>
 8008144:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008148:	e715      	b.n	8007f76 <__ieee754_pow+0x826>
 800814a:	ec51 0b10 	vmov	r0, r1, d0
 800814e:	4619      	mov	r1, r3
 8008150:	e7cf      	b.n	80080f2 <__ieee754_pow+0x9a2>
 8008152:	491a      	ldr	r1, [pc, #104]	@ (80081bc <__ieee754_pow+0xa6c>)
 8008154:	2000      	movs	r0, #0
 8008156:	f7ff bb18 	b.w	800778a <__ieee754_pow+0x3a>
 800815a:	2000      	movs	r0, #0
 800815c:	2100      	movs	r1, #0
 800815e:	f7ff bb14 	b.w	800778a <__ieee754_pow+0x3a>
 8008162:	4630      	mov	r0, r6
 8008164:	4639      	mov	r1, r7
 8008166:	f7ff bb10 	b.w	800778a <__ieee754_pow+0x3a>
 800816a:	460c      	mov	r4, r1
 800816c:	f7ff bb5e 	b.w	800782c <__ieee754_pow+0xdc>
 8008170:	2400      	movs	r4, #0
 8008172:	f7ff bb49 	b.w	8007808 <__ieee754_pow+0xb8>
 8008176:	bf00      	nop
 8008178:	00000000 	.word	0x00000000
 800817c:	3fe62e43 	.word	0x3fe62e43
 8008180:	fefa39ef 	.word	0xfefa39ef
 8008184:	3fe62e42 	.word	0x3fe62e42
 8008188:	0ca86c39 	.word	0x0ca86c39
 800818c:	be205c61 	.word	0xbe205c61
 8008190:	72bea4d0 	.word	0x72bea4d0
 8008194:	3e663769 	.word	0x3e663769
 8008198:	c5d26bf1 	.word	0xc5d26bf1
 800819c:	3ebbbd41 	.word	0x3ebbbd41
 80081a0:	af25de2c 	.word	0xaf25de2c
 80081a4:	3f11566a 	.word	0x3f11566a
 80081a8:	16bebd93 	.word	0x16bebd93
 80081ac:	3f66c16c 	.word	0x3f66c16c
 80081b0:	5555553e 	.word	0x5555553e
 80081b4:	3fc55555 	.word	0x3fc55555
 80081b8:	fff00000 	.word	0xfff00000
 80081bc:	3ff00000 	.word	0x3ff00000
 80081c0:	4090cbff 	.word	0x4090cbff
 80081c4:	3f6f3400 	.word	0x3f6f3400
 80081c8:	3fe00000 	.word	0x3fe00000
 80081cc:	652b82fe 	.word	0x652b82fe
 80081d0:	3c971547 	.word	0x3c971547
 80081d4:	4090cc00 	.word	0x4090cc00

080081d8 <scalbn>:
 80081d8:	b570      	push	{r4, r5, r6, lr}
 80081da:	ec55 4b10 	vmov	r4, r5, d0
 80081de:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80081e2:	4606      	mov	r6, r0
 80081e4:	462b      	mov	r3, r5
 80081e6:	b991      	cbnz	r1, 800820e <scalbn+0x36>
 80081e8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80081ec:	4323      	orrs	r3, r4
 80081ee:	d03d      	beq.n	800826c <scalbn+0x94>
 80081f0:	4b35      	ldr	r3, [pc, #212]	@ (80082c8 <scalbn+0xf0>)
 80081f2:	4620      	mov	r0, r4
 80081f4:	4629      	mov	r1, r5
 80081f6:	2200      	movs	r2, #0
 80081f8:	f7f8 fa1e 	bl	8000638 <__aeabi_dmul>
 80081fc:	4b33      	ldr	r3, [pc, #204]	@ (80082cc <scalbn+0xf4>)
 80081fe:	429e      	cmp	r6, r3
 8008200:	4604      	mov	r4, r0
 8008202:	460d      	mov	r5, r1
 8008204:	da0f      	bge.n	8008226 <scalbn+0x4e>
 8008206:	a328      	add	r3, pc, #160	@ (adr r3, 80082a8 <scalbn+0xd0>)
 8008208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820c:	e01e      	b.n	800824c <scalbn+0x74>
 800820e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8008212:	4291      	cmp	r1, r2
 8008214:	d10b      	bne.n	800822e <scalbn+0x56>
 8008216:	4622      	mov	r2, r4
 8008218:	4620      	mov	r0, r4
 800821a:	4629      	mov	r1, r5
 800821c:	f7f8 f856 	bl	80002cc <__adddf3>
 8008220:	4604      	mov	r4, r0
 8008222:	460d      	mov	r5, r1
 8008224:	e022      	b.n	800826c <scalbn+0x94>
 8008226:	460b      	mov	r3, r1
 8008228:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800822c:	3936      	subs	r1, #54	@ 0x36
 800822e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8008232:	4296      	cmp	r6, r2
 8008234:	dd0d      	ble.n	8008252 <scalbn+0x7a>
 8008236:	2d00      	cmp	r5, #0
 8008238:	a11d      	add	r1, pc, #116	@ (adr r1, 80082b0 <scalbn+0xd8>)
 800823a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800823e:	da02      	bge.n	8008246 <scalbn+0x6e>
 8008240:	a11d      	add	r1, pc, #116	@ (adr r1, 80082b8 <scalbn+0xe0>)
 8008242:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008246:	a31a      	add	r3, pc, #104	@ (adr r3, 80082b0 <scalbn+0xd8>)
 8008248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824c:	f7f8 f9f4 	bl	8000638 <__aeabi_dmul>
 8008250:	e7e6      	b.n	8008220 <scalbn+0x48>
 8008252:	1872      	adds	r2, r6, r1
 8008254:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008258:	428a      	cmp	r2, r1
 800825a:	dcec      	bgt.n	8008236 <scalbn+0x5e>
 800825c:	2a00      	cmp	r2, #0
 800825e:	dd08      	ble.n	8008272 <scalbn+0x9a>
 8008260:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008264:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008268:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800826c:	ec45 4b10 	vmov	d0, r4, r5
 8008270:	bd70      	pop	{r4, r5, r6, pc}
 8008272:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8008276:	da08      	bge.n	800828a <scalbn+0xb2>
 8008278:	2d00      	cmp	r5, #0
 800827a:	a10b      	add	r1, pc, #44	@ (adr r1, 80082a8 <scalbn+0xd0>)
 800827c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008280:	dac1      	bge.n	8008206 <scalbn+0x2e>
 8008282:	a10f      	add	r1, pc, #60	@ (adr r1, 80082c0 <scalbn+0xe8>)
 8008284:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008288:	e7bd      	b.n	8008206 <scalbn+0x2e>
 800828a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800828e:	3236      	adds	r2, #54	@ 0x36
 8008290:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008294:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008298:	4620      	mov	r0, r4
 800829a:	4b0d      	ldr	r3, [pc, #52]	@ (80082d0 <scalbn+0xf8>)
 800829c:	4629      	mov	r1, r5
 800829e:	2200      	movs	r2, #0
 80082a0:	e7d4      	b.n	800824c <scalbn+0x74>
 80082a2:	bf00      	nop
 80082a4:	f3af 8000 	nop.w
 80082a8:	c2f8f359 	.word	0xc2f8f359
 80082ac:	01a56e1f 	.word	0x01a56e1f
 80082b0:	8800759c 	.word	0x8800759c
 80082b4:	7e37e43c 	.word	0x7e37e43c
 80082b8:	8800759c 	.word	0x8800759c
 80082bc:	fe37e43c 	.word	0xfe37e43c
 80082c0:	c2f8f359 	.word	0xc2f8f359
 80082c4:	81a56e1f 	.word	0x81a56e1f
 80082c8:	43500000 	.word	0x43500000
 80082cc:	ffff3cb0 	.word	0xffff3cb0
 80082d0:	3c900000 	.word	0x3c900000

080082d4 <with_errno>:
 80082d4:	b510      	push	{r4, lr}
 80082d6:	ed2d 8b02 	vpush	{d8}
 80082da:	eeb0 8a40 	vmov.f32	s16, s0
 80082de:	eef0 8a60 	vmov.f32	s17, s1
 80082e2:	4604      	mov	r4, r0
 80082e4:	f7fe fad4 	bl	8006890 <__errno>
 80082e8:	eeb0 0a48 	vmov.f32	s0, s16
 80082ec:	eef0 0a68 	vmov.f32	s1, s17
 80082f0:	ecbd 8b02 	vpop	{d8}
 80082f4:	6004      	str	r4, [r0, #0]
 80082f6:	bd10      	pop	{r4, pc}

080082f8 <xflow>:
 80082f8:	4603      	mov	r3, r0
 80082fa:	b507      	push	{r0, r1, r2, lr}
 80082fc:	ec51 0b10 	vmov	r0, r1, d0
 8008300:	b183      	cbz	r3, 8008324 <xflow+0x2c>
 8008302:	4602      	mov	r2, r0
 8008304:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008308:	e9cd 2300 	strd	r2, r3, [sp]
 800830c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008310:	f7f8 f992 	bl	8000638 <__aeabi_dmul>
 8008314:	ec41 0b10 	vmov	d0, r0, r1
 8008318:	2022      	movs	r0, #34	@ 0x22
 800831a:	b003      	add	sp, #12
 800831c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008320:	f7ff bfd8 	b.w	80082d4 <with_errno>
 8008324:	4602      	mov	r2, r0
 8008326:	460b      	mov	r3, r1
 8008328:	e7ee      	b.n	8008308 <xflow+0x10>
 800832a:	0000      	movs	r0, r0
 800832c:	0000      	movs	r0, r0
	...

08008330 <__math_uflow>:
 8008330:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008338 <__math_uflow+0x8>
 8008334:	f7ff bfe0 	b.w	80082f8 <xflow>
 8008338:	00000000 	.word	0x00000000
 800833c:	10000000 	.word	0x10000000

08008340 <__math_oflow>:
 8008340:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008348 <__math_oflow+0x8>
 8008344:	f7ff bfd8 	b.w	80082f8 <xflow>
 8008348:	00000000 	.word	0x00000000
 800834c:	70000000 	.word	0x70000000

08008350 <__ieee754_sqrt>:
 8008350:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008354:	4a68      	ldr	r2, [pc, #416]	@ (80084f8 <__ieee754_sqrt+0x1a8>)
 8008356:	ec55 4b10 	vmov	r4, r5, d0
 800835a:	43aa      	bics	r2, r5
 800835c:	462b      	mov	r3, r5
 800835e:	4621      	mov	r1, r4
 8008360:	d110      	bne.n	8008384 <__ieee754_sqrt+0x34>
 8008362:	4622      	mov	r2, r4
 8008364:	4620      	mov	r0, r4
 8008366:	4629      	mov	r1, r5
 8008368:	f7f8 f966 	bl	8000638 <__aeabi_dmul>
 800836c:	4602      	mov	r2, r0
 800836e:	460b      	mov	r3, r1
 8008370:	4620      	mov	r0, r4
 8008372:	4629      	mov	r1, r5
 8008374:	f7f7 ffaa 	bl	80002cc <__adddf3>
 8008378:	4604      	mov	r4, r0
 800837a:	460d      	mov	r5, r1
 800837c:	ec45 4b10 	vmov	d0, r4, r5
 8008380:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008384:	2d00      	cmp	r5, #0
 8008386:	dc0e      	bgt.n	80083a6 <__ieee754_sqrt+0x56>
 8008388:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800838c:	4322      	orrs	r2, r4
 800838e:	d0f5      	beq.n	800837c <__ieee754_sqrt+0x2c>
 8008390:	b19d      	cbz	r5, 80083ba <__ieee754_sqrt+0x6a>
 8008392:	4622      	mov	r2, r4
 8008394:	4620      	mov	r0, r4
 8008396:	4629      	mov	r1, r5
 8008398:	f7f7 ff96 	bl	80002c8 <__aeabi_dsub>
 800839c:	4602      	mov	r2, r0
 800839e:	460b      	mov	r3, r1
 80083a0:	f7f8 fa74 	bl	800088c <__aeabi_ddiv>
 80083a4:	e7e8      	b.n	8008378 <__ieee754_sqrt+0x28>
 80083a6:	152a      	asrs	r2, r5, #20
 80083a8:	d115      	bne.n	80083d6 <__ieee754_sqrt+0x86>
 80083aa:	2000      	movs	r0, #0
 80083ac:	e009      	b.n	80083c2 <__ieee754_sqrt+0x72>
 80083ae:	0acb      	lsrs	r3, r1, #11
 80083b0:	3a15      	subs	r2, #21
 80083b2:	0549      	lsls	r1, r1, #21
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d0fa      	beq.n	80083ae <__ieee754_sqrt+0x5e>
 80083b8:	e7f7      	b.n	80083aa <__ieee754_sqrt+0x5a>
 80083ba:	462a      	mov	r2, r5
 80083bc:	e7fa      	b.n	80083b4 <__ieee754_sqrt+0x64>
 80083be:	005b      	lsls	r3, r3, #1
 80083c0:	3001      	adds	r0, #1
 80083c2:	02dc      	lsls	r4, r3, #11
 80083c4:	d5fb      	bpl.n	80083be <__ieee754_sqrt+0x6e>
 80083c6:	1e44      	subs	r4, r0, #1
 80083c8:	1b12      	subs	r2, r2, r4
 80083ca:	f1c0 0420 	rsb	r4, r0, #32
 80083ce:	fa21 f404 	lsr.w	r4, r1, r4
 80083d2:	4323      	orrs	r3, r4
 80083d4:	4081      	lsls	r1, r0
 80083d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083da:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80083de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80083e2:	07d2      	lsls	r2, r2, #31
 80083e4:	bf5c      	itt	pl
 80083e6:	005b      	lslpl	r3, r3, #1
 80083e8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80083ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80083f0:	bf58      	it	pl
 80083f2:	0049      	lslpl	r1, r1, #1
 80083f4:	2600      	movs	r6, #0
 80083f6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80083fa:	106d      	asrs	r5, r5, #1
 80083fc:	0049      	lsls	r1, r1, #1
 80083fe:	2016      	movs	r0, #22
 8008400:	4632      	mov	r2, r6
 8008402:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8008406:	1917      	adds	r7, r2, r4
 8008408:	429f      	cmp	r7, r3
 800840a:	bfde      	ittt	le
 800840c:	193a      	addle	r2, r7, r4
 800840e:	1bdb      	suble	r3, r3, r7
 8008410:	1936      	addle	r6, r6, r4
 8008412:	0fcf      	lsrs	r7, r1, #31
 8008414:	3801      	subs	r0, #1
 8008416:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800841a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800841e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8008422:	d1f0      	bne.n	8008406 <__ieee754_sqrt+0xb6>
 8008424:	4604      	mov	r4, r0
 8008426:	2720      	movs	r7, #32
 8008428:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800842c:	429a      	cmp	r2, r3
 800842e:	eb00 0e0c 	add.w	lr, r0, ip
 8008432:	db02      	blt.n	800843a <__ieee754_sqrt+0xea>
 8008434:	d113      	bne.n	800845e <__ieee754_sqrt+0x10e>
 8008436:	458e      	cmp	lr, r1
 8008438:	d811      	bhi.n	800845e <__ieee754_sqrt+0x10e>
 800843a:	f1be 0f00 	cmp.w	lr, #0
 800843e:	eb0e 000c 	add.w	r0, lr, ip
 8008442:	da42      	bge.n	80084ca <__ieee754_sqrt+0x17a>
 8008444:	2800      	cmp	r0, #0
 8008446:	db40      	blt.n	80084ca <__ieee754_sqrt+0x17a>
 8008448:	f102 0801 	add.w	r8, r2, #1
 800844c:	1a9b      	subs	r3, r3, r2
 800844e:	458e      	cmp	lr, r1
 8008450:	bf88      	it	hi
 8008452:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008456:	eba1 010e 	sub.w	r1, r1, lr
 800845a:	4464      	add	r4, ip
 800845c:	4642      	mov	r2, r8
 800845e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8008462:	3f01      	subs	r7, #1
 8008464:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8008468:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800846c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008470:	d1dc      	bne.n	800842c <__ieee754_sqrt+0xdc>
 8008472:	4319      	orrs	r1, r3
 8008474:	d01b      	beq.n	80084ae <__ieee754_sqrt+0x15e>
 8008476:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80084fc <__ieee754_sqrt+0x1ac>
 800847a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8008500 <__ieee754_sqrt+0x1b0>
 800847e:	e9da 0100 	ldrd	r0, r1, [sl]
 8008482:	e9db 2300 	ldrd	r2, r3, [fp]
 8008486:	f7f7 ff1f 	bl	80002c8 <__aeabi_dsub>
 800848a:	e9da 8900 	ldrd	r8, r9, [sl]
 800848e:	4602      	mov	r2, r0
 8008490:	460b      	mov	r3, r1
 8008492:	4640      	mov	r0, r8
 8008494:	4649      	mov	r1, r9
 8008496:	f7f8 fb4b 	bl	8000b30 <__aeabi_dcmple>
 800849a:	b140      	cbz	r0, 80084ae <__ieee754_sqrt+0x15e>
 800849c:	f1b4 3fff 	cmp.w	r4, #4294967295
 80084a0:	e9da 0100 	ldrd	r0, r1, [sl]
 80084a4:	e9db 2300 	ldrd	r2, r3, [fp]
 80084a8:	d111      	bne.n	80084ce <__ieee754_sqrt+0x17e>
 80084aa:	3601      	adds	r6, #1
 80084ac:	463c      	mov	r4, r7
 80084ae:	1072      	asrs	r2, r6, #1
 80084b0:	0863      	lsrs	r3, r4, #1
 80084b2:	07f1      	lsls	r1, r6, #31
 80084b4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80084b8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80084bc:	bf48      	it	mi
 80084be:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80084c2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80084c6:	4618      	mov	r0, r3
 80084c8:	e756      	b.n	8008378 <__ieee754_sqrt+0x28>
 80084ca:	4690      	mov	r8, r2
 80084cc:	e7be      	b.n	800844c <__ieee754_sqrt+0xfc>
 80084ce:	f7f7 fefd 	bl	80002cc <__adddf3>
 80084d2:	e9da 8900 	ldrd	r8, r9, [sl]
 80084d6:	4602      	mov	r2, r0
 80084d8:	460b      	mov	r3, r1
 80084da:	4640      	mov	r0, r8
 80084dc:	4649      	mov	r1, r9
 80084de:	f7f8 fb1d 	bl	8000b1c <__aeabi_dcmplt>
 80084e2:	b120      	cbz	r0, 80084ee <__ieee754_sqrt+0x19e>
 80084e4:	1ca0      	adds	r0, r4, #2
 80084e6:	bf08      	it	eq
 80084e8:	3601      	addeq	r6, #1
 80084ea:	3402      	adds	r4, #2
 80084ec:	e7df      	b.n	80084ae <__ieee754_sqrt+0x15e>
 80084ee:	1c63      	adds	r3, r4, #1
 80084f0:	f023 0401 	bic.w	r4, r3, #1
 80084f4:	e7db      	b.n	80084ae <__ieee754_sqrt+0x15e>
 80084f6:	bf00      	nop
 80084f8:	7ff00000 	.word	0x7ff00000
 80084fc:	20000098 	.word	0x20000098
 8008500:	20000090 	.word	0x20000090

08008504 <_init>:
 8008504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008506:	bf00      	nop
 8008508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800850a:	bc08      	pop	{r3}
 800850c:	469e      	mov	lr, r3
 800850e:	4770      	bx	lr

08008510 <_fini>:
 8008510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008512:	bf00      	nop
 8008514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008516:	bc08      	pop	{r3}
 8008518:	469e      	mov	lr, r3
 800851a:	4770      	bx	lr
