
TrabalhoBarco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005188  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005350  08005350  00006350  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053d8  080053d8  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  080053d8  080053d8  000063d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053e0  080053e0  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053e0  080053e0  000063e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080053e4  080053e4  000063e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080053e8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  2000000c  080053f4  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080053f4  000071c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff50  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002054  00000000  00000000  00016f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  00018fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c1a  00000000  00000000  00019f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022843  00000000  00000000  0001ab3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013931  00000000  00000000  0003d37d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d355b  00000000  00000000  00050cae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00124209  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000446c  00000000  00000000  0012424c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b2  00000000  00000000  001286b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005338 	.word	0x08005338

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08005338 	.word	0x08005338

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2uiz>:
 8000ab4:	004a      	lsls	r2, r1, #1
 8000ab6:	d211      	bcs.n	8000adc <__aeabi_d2uiz+0x28>
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000abc:	d211      	bcs.n	8000ae2 <__aeabi_d2uiz+0x2e>
 8000abe:	d50d      	bpl.n	8000adc <__aeabi_d2uiz+0x28>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d40e      	bmi.n	8000ae8 <__aeabi_d2uiz+0x34>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae6:	d102      	bne.n	8000aee <__aeabi_d2uiz+0x3a>
 8000ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aec:	4770      	bx	lr
 8000aee:	f04f 0000 	mov.w	r0, #0
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_d2f>:
 8000af4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000afc:	bf24      	itt	cs
 8000afe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b06:	d90d      	bls.n	8000b24 <__aeabi_d2f+0x30>
 8000b08:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b14:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b1c:	bf08      	it	eq
 8000b1e:	f020 0001 	biceq.w	r0, r0, #1
 8000b22:	4770      	bx	lr
 8000b24:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b28:	d121      	bne.n	8000b6e <__aeabi_d2f+0x7a>
 8000b2a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b2e:	bfbc      	itt	lt
 8000b30:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b34:	4770      	bxlt	lr
 8000b36:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3e:	f1c2 0218 	rsb	r2, r2, #24
 8000b42:	f1c2 0c20 	rsb	ip, r2, #32
 8000b46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4e:	bf18      	it	ne
 8000b50:	f040 0001 	orrne.w	r0, r0, #1
 8000b54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b60:	ea40 000c 	orr.w	r0, r0, ip
 8000b64:	fa23 f302 	lsr.w	r3, r3, r2
 8000b68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b6c:	e7cc      	b.n	8000b08 <__aeabi_d2f+0x14>
 8000b6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b72:	d107      	bne.n	8000b84 <__aeabi_d2f+0x90>
 8000b74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b78:	bf1e      	ittt	ne
 8000b7a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b7e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b82:	4770      	bxne	lr
 8000b84:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop

08000b94 <__aeabi_uldivmod>:
 8000b94:	b953      	cbnz	r3, 8000bac <__aeabi_uldivmod+0x18>
 8000b96:	b94a      	cbnz	r2, 8000bac <__aeabi_uldivmod+0x18>
 8000b98:	2900      	cmp	r1, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	2800      	cmpeq	r0, #0
 8000b9e:	bf1c      	itt	ne
 8000ba0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba8:	f000 b96a 	b.w	8000e80 <__aeabi_idiv0>
 8000bac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb4:	f000 f806 	bl	8000bc4 <__udivmoddi4>
 8000bb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc0:	b004      	add	sp, #16
 8000bc2:	4770      	bx	lr

08000bc4 <__udivmoddi4>:
 8000bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc8:	9d08      	ldr	r5, [sp, #32]
 8000bca:	460c      	mov	r4, r1
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d14e      	bne.n	8000c6e <__udivmoddi4+0xaa>
 8000bd0:	4694      	mov	ip, r2
 8000bd2:	458c      	cmp	ip, r1
 8000bd4:	4686      	mov	lr, r0
 8000bd6:	fab2 f282 	clz	r2, r2
 8000bda:	d962      	bls.n	8000ca2 <__udivmoddi4+0xde>
 8000bdc:	b14a      	cbz	r2, 8000bf2 <__udivmoddi4+0x2e>
 8000bde:	f1c2 0320 	rsb	r3, r2, #32
 8000be2:	4091      	lsls	r1, r2
 8000be4:	fa20 f303 	lsr.w	r3, r0, r3
 8000be8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bec:	4319      	orrs	r1, r3
 8000bee:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bf6:	fa1f f68c 	uxth.w	r6, ip
 8000bfa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c02:	fb07 1114 	mls	r1, r7, r4, r1
 8000c06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c0a:	fb04 f106 	mul.w	r1, r4, r6
 8000c0e:	4299      	cmp	r1, r3
 8000c10:	d90a      	bls.n	8000c28 <__udivmoddi4+0x64>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c1a:	f080 8112 	bcs.w	8000e42 <__udivmoddi4+0x27e>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 810f 	bls.w	8000e42 <__udivmoddi4+0x27e>
 8000c24:	3c02      	subs	r4, #2
 8000c26:	4463      	add	r3, ip
 8000c28:	1a59      	subs	r1, r3, r1
 8000c2a:	fa1f f38e 	uxth.w	r3, lr
 8000c2e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c32:	fb07 1110 	mls	r1, r7, r0, r1
 8000c36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3a:	fb00 f606 	mul.w	r6, r0, r6
 8000c3e:	429e      	cmp	r6, r3
 8000c40:	d90a      	bls.n	8000c58 <__udivmoddi4+0x94>
 8000c42:	eb1c 0303 	adds.w	r3, ip, r3
 8000c46:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c4a:	f080 80fc 	bcs.w	8000e46 <__udivmoddi4+0x282>
 8000c4e:	429e      	cmp	r6, r3
 8000c50:	f240 80f9 	bls.w	8000e46 <__udivmoddi4+0x282>
 8000c54:	4463      	add	r3, ip
 8000c56:	3802      	subs	r0, #2
 8000c58:	1b9b      	subs	r3, r3, r6
 8000c5a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c5e:	2100      	movs	r1, #0
 8000c60:	b11d      	cbz	r5, 8000c6a <__udivmoddi4+0xa6>
 8000c62:	40d3      	lsrs	r3, r2
 8000c64:	2200      	movs	r2, #0
 8000c66:	e9c5 3200 	strd	r3, r2, [r5]
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d905      	bls.n	8000c7e <__udivmoddi4+0xba>
 8000c72:	b10d      	cbz	r5, 8000c78 <__udivmoddi4+0xb4>
 8000c74:	e9c5 0100 	strd	r0, r1, [r5]
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4608      	mov	r0, r1
 8000c7c:	e7f5      	b.n	8000c6a <__udivmoddi4+0xa6>
 8000c7e:	fab3 f183 	clz	r1, r3
 8000c82:	2900      	cmp	r1, #0
 8000c84:	d146      	bne.n	8000d14 <__udivmoddi4+0x150>
 8000c86:	42a3      	cmp	r3, r4
 8000c88:	d302      	bcc.n	8000c90 <__udivmoddi4+0xcc>
 8000c8a:	4290      	cmp	r0, r2
 8000c8c:	f0c0 80f0 	bcc.w	8000e70 <__udivmoddi4+0x2ac>
 8000c90:	1a86      	subs	r6, r0, r2
 8000c92:	eb64 0303 	sbc.w	r3, r4, r3
 8000c96:	2001      	movs	r0, #1
 8000c98:	2d00      	cmp	r5, #0
 8000c9a:	d0e6      	beq.n	8000c6a <__udivmoddi4+0xa6>
 8000c9c:	e9c5 6300 	strd	r6, r3, [r5]
 8000ca0:	e7e3      	b.n	8000c6a <__udivmoddi4+0xa6>
 8000ca2:	2a00      	cmp	r2, #0
 8000ca4:	f040 8090 	bne.w	8000dc8 <__udivmoddi4+0x204>
 8000ca8:	eba1 040c 	sub.w	r4, r1, ip
 8000cac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cb0:	fa1f f78c 	uxth.w	r7, ip
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cbe:	fb08 4416 	mls	r4, r8, r6, r4
 8000cc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cc6:	fb07 f006 	mul.w	r0, r7, r6
 8000cca:	4298      	cmp	r0, r3
 8000ccc:	d908      	bls.n	8000ce0 <__udivmoddi4+0x11c>
 8000cce:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x11a>
 8000cd8:	4298      	cmp	r0, r3
 8000cda:	f200 80cd 	bhi.w	8000e78 <__udivmoddi4+0x2b4>
 8000cde:	4626      	mov	r6, r4
 8000ce0:	1a1c      	subs	r4, r3, r0
 8000ce2:	fa1f f38e 	uxth.w	r3, lr
 8000ce6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cea:	fb08 4410 	mls	r4, r8, r0, r4
 8000cee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cf2:	fb00 f707 	mul.w	r7, r0, r7
 8000cf6:	429f      	cmp	r7, r3
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x148>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x146>
 8000d04:	429f      	cmp	r7, r3
 8000d06:	f200 80b0 	bhi.w	8000e6a <__udivmoddi4+0x2a6>
 8000d0a:	4620      	mov	r0, r4
 8000d0c:	1bdb      	subs	r3, r3, r7
 8000d0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d12:	e7a5      	b.n	8000c60 <__udivmoddi4+0x9c>
 8000d14:	f1c1 0620 	rsb	r6, r1, #32
 8000d18:	408b      	lsls	r3, r1
 8000d1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d1e:	431f      	orrs	r7, r3
 8000d20:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d24:	fa04 f301 	lsl.w	r3, r4, r1
 8000d28:	ea43 030c 	orr.w	r3, r3, ip
 8000d2c:	40f4      	lsrs	r4, r6
 8000d2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d32:	0c38      	lsrs	r0, r7, #16
 8000d34:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d38:	fbb4 fef0 	udiv	lr, r4, r0
 8000d3c:	fa1f fc87 	uxth.w	ip, r7
 8000d40:	fb00 441e 	mls	r4, r0, lr, r4
 8000d44:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d48:	fb0e f90c 	mul.w	r9, lr, ip
 8000d4c:	45a1      	cmp	r9, r4
 8000d4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x1a6>
 8000d54:	193c      	adds	r4, r7, r4
 8000d56:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d5a:	f080 8084 	bcs.w	8000e66 <__udivmoddi4+0x2a2>
 8000d5e:	45a1      	cmp	r9, r4
 8000d60:	f240 8081 	bls.w	8000e66 <__udivmoddi4+0x2a2>
 8000d64:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d68:	443c      	add	r4, r7
 8000d6a:	eba4 0409 	sub.w	r4, r4, r9
 8000d6e:	fa1f f983 	uxth.w	r9, r3
 8000d72:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d76:	fb00 4413 	mls	r4, r0, r3, r4
 8000d7a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d7e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d82:	45a4      	cmp	ip, r4
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x1d2>
 8000d86:	193c      	adds	r4, r7, r4
 8000d88:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d8c:	d267      	bcs.n	8000e5e <__udivmoddi4+0x29a>
 8000d8e:	45a4      	cmp	ip, r4
 8000d90:	d965      	bls.n	8000e5e <__udivmoddi4+0x29a>
 8000d92:	3b02      	subs	r3, #2
 8000d94:	443c      	add	r4, r7
 8000d96:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d9a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d9e:	eba4 040c 	sub.w	r4, r4, ip
 8000da2:	429c      	cmp	r4, r3
 8000da4:	46ce      	mov	lr, r9
 8000da6:	469c      	mov	ip, r3
 8000da8:	d351      	bcc.n	8000e4e <__udivmoddi4+0x28a>
 8000daa:	d04e      	beq.n	8000e4a <__udivmoddi4+0x286>
 8000dac:	b155      	cbz	r5, 8000dc4 <__udivmoddi4+0x200>
 8000dae:	ebb8 030e 	subs.w	r3, r8, lr
 8000db2:	eb64 040c 	sbc.w	r4, r4, ip
 8000db6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dba:	40cb      	lsrs	r3, r1
 8000dbc:	431e      	orrs	r6, r3
 8000dbe:	40cc      	lsrs	r4, r1
 8000dc0:	e9c5 6400 	strd	r6, r4, [r5]
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	e750      	b.n	8000c6a <__udivmoddi4+0xa6>
 8000dc8:	f1c2 0320 	rsb	r3, r2, #32
 8000dcc:	fa20 f103 	lsr.w	r1, r0, r3
 8000dd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd4:	fa24 f303 	lsr.w	r3, r4, r3
 8000dd8:	4094      	lsls	r4, r2
 8000dda:	430c      	orrs	r4, r1
 8000ddc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000de0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000de4:	fa1f f78c 	uxth.w	r7, ip
 8000de8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dec:	fb08 3110 	mls	r1, r8, r0, r3
 8000df0:	0c23      	lsrs	r3, r4, #16
 8000df2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df6:	fb00 f107 	mul.w	r1, r0, r7
 8000dfa:	4299      	cmp	r1, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x24c>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e06:	d22c      	bcs.n	8000e62 <__udivmoddi4+0x29e>
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d92a      	bls.n	8000e62 <__udivmoddi4+0x29e>
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	4463      	add	r3, ip
 8000e10:	1a5b      	subs	r3, r3, r1
 8000e12:	b2a4      	uxth	r4, r4
 8000e14:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e18:	fb08 3311 	mls	r3, r8, r1, r3
 8000e1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e20:	fb01 f307 	mul.w	r3, r1, r7
 8000e24:	42a3      	cmp	r3, r4
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0x276>
 8000e28:	eb1c 0404 	adds.w	r4, ip, r4
 8000e2c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e30:	d213      	bcs.n	8000e5a <__udivmoddi4+0x296>
 8000e32:	42a3      	cmp	r3, r4
 8000e34:	d911      	bls.n	8000e5a <__udivmoddi4+0x296>
 8000e36:	3902      	subs	r1, #2
 8000e38:	4464      	add	r4, ip
 8000e3a:	1ae4      	subs	r4, r4, r3
 8000e3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e40:	e739      	b.n	8000cb6 <__udivmoddi4+0xf2>
 8000e42:	4604      	mov	r4, r0
 8000e44:	e6f0      	b.n	8000c28 <__udivmoddi4+0x64>
 8000e46:	4608      	mov	r0, r1
 8000e48:	e706      	b.n	8000c58 <__udivmoddi4+0x94>
 8000e4a:	45c8      	cmp	r8, r9
 8000e4c:	d2ae      	bcs.n	8000dac <__udivmoddi4+0x1e8>
 8000e4e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e52:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e56:	3801      	subs	r0, #1
 8000e58:	e7a8      	b.n	8000dac <__udivmoddi4+0x1e8>
 8000e5a:	4631      	mov	r1, r6
 8000e5c:	e7ed      	b.n	8000e3a <__udivmoddi4+0x276>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	e799      	b.n	8000d96 <__udivmoddi4+0x1d2>
 8000e62:	4630      	mov	r0, r6
 8000e64:	e7d4      	b.n	8000e10 <__udivmoddi4+0x24c>
 8000e66:	46d6      	mov	lr, sl
 8000e68:	e77f      	b.n	8000d6a <__udivmoddi4+0x1a6>
 8000e6a:	4463      	add	r3, ip
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	e74d      	b.n	8000d0c <__udivmoddi4+0x148>
 8000e70:	4606      	mov	r6, r0
 8000e72:	4623      	mov	r3, r4
 8000e74:	4608      	mov	r0, r1
 8000e76:	e70f      	b.n	8000c98 <__udivmoddi4+0xd4>
 8000e78:	3e02      	subs	r6, #2
 8000e7a:	4463      	add	r3, ip
 8000e7c:	e730      	b.n	8000ce0 <__udivmoddi4+0x11c>
 8000e7e:	bf00      	nop

08000e80 <__aeabi_idiv0>:
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop

08000e84 <HMC5883L_FilterAxisData>:

/*
 * Função que recebe de um buffer 8 amostras, e aplica um filtro nas mesmas. Obtendo a média das amostras.
 */
float HMC5883L_FilterAxisData(uint8_t *buffer)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
	float value;
	for (int i = 1; i < 8; i++)
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	e034      	b.n	8000efc <HMC5883L_FilterAxisData+0x78>
	{
		if (abs(buffer[i] - buffer[i - 1]) < 10)
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	4413      	add	r3, r2
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	1acb      	subs	r3, r1, r3
 8000ea8:	f113 0f09 	cmn.w	r3, #9
 8000eac:	db15      	blt.n	8000eda <HMC5883L_FilterAxisData+0x56>
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	1acb      	subs	r3, r1, r3
 8000ec4:	2b09      	cmp	r3, #9
 8000ec6:	dc08      	bgt.n	8000eda <HMC5883L_FilterAxisData+0x56>
		{
			buffer[i] = buffer[i - 1];
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	441a      	add	r2, r3
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	440b      	add	r3, r1
 8000ed6:	7812      	ldrb	r2, [r2, #0]
 8000ed8:	701a      	strb	r2, [r3, #0]
		}
		value += buffer[i];
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	4413      	add	r3, r2
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	ee07 3a90 	vmov	s15, r3
 8000ee6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eea:	ed97 7a03 	vldr	s14, [r7, #12]
 8000eee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ef2:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int i = 1; i < 8; i++)
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	2b07      	cmp	r3, #7
 8000f00:	ddc7      	ble.n	8000e92 <HMC5883L_FilterAxisData+0xe>
	}
	value += buffer[0];
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	ee07 3a90 	vmov	s15, r3
 8000f0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f0e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f16:	edc7 7a03 	vstr	s15, [r7, #12]
	value = value / 8;
 8000f1a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f1e:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8000f22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f26:	edc7 7a03 	vstr	s15, [r7, #12]
	return value;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	ee07 3a90 	vmov	s15, r3
}
 8000f30:	eeb0 0a67 	vmov.f32	s0, s15
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <HMC5883L_Init>:

/*
Inicia HMC5883L com as configurações padrões.
*/
void HMC5883L_Init(I2C_HandleTypeDef huart)
{
 8000f3e:	b084      	sub	sp, #16
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af04      	add	r7, sp, #16
 8000f46:	f107 0c08 	add.w	ip, r7, #8
 8000f4a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_I2C_Mem_Write(&huart, HMC5883L_ADDRESS, 0x00, 1, HMC5883L_Enable_A, 1, 100);
 8000f4e:	2364      	movs	r3, #100	@ 0x64
 8000f50:	9302      	str	r3, [sp, #8]
 8000f52:	2301      	movs	r3, #1
 8000f54:	9301      	str	r3, [sp, #4]
 8000f56:	2370      	movs	r3, #112	@ 0x70
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	211e      	movs	r1, #30
 8000f60:	f107 0008 	add.w	r0, r7, #8
 8000f64:	f001 faf4 	bl	8002550 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&huart, HMC5883L_ADDRESS, 0x01, 1, HMC5883L_Enable_B, 1, 100);
 8000f68:	2364      	movs	r3, #100	@ 0x64
 8000f6a:	9302      	str	r3, [sp, #8]
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	9301      	str	r3, [sp, #4]
 8000f70:	23a0      	movs	r3, #160	@ 0xa0
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	2301      	movs	r3, #1
 8000f76:	2201      	movs	r2, #1
 8000f78:	211e      	movs	r1, #30
 8000f7a:	f107 0008 	add.w	r0, r7, #8
 8000f7e:	f001 fae7 	bl	8002550 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&huart, HMC5883L_ADDRESS, 0x02, 1, HMC5883L_MR, 1, 100);
 8000f82:	2364      	movs	r3, #100	@ 0x64
 8000f84:	9302      	str	r3, [sp, #8]
 8000f86:	2301      	movs	r3, #1
 8000f88:	9301      	str	r3, [sp, #4]
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	2301      	movs	r3, #1
 8000f90:	2202      	movs	r2, #2
 8000f92:	211e      	movs	r1, #30
 8000f94:	f107 0008 	add.w	r0, r7, #8
 8000f98:	f001 fada 	bl	8002550 <HAL_I2C_Mem_Write>
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fa4:	b004      	add	sp, #16
 8000fa6:	4770      	bx	lr

08000fa8 <SG90_handlePulse>:
/*
 * É preciso tratar o pulso que é dado. O motor tem funcionamento de 0° a 180°.
 * Limitar o seu pulso no intervalo da largura de pulso de 0.7ms a 2.3ms.
 */
uint16_t SG90_handlePulse(uint16_t period, uint16_t pulse)
{
 8000fa8:	b5b0      	push	{r4, r5, r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	460a      	mov	r2, r1
 8000fb2:	80fb      	strh	r3, [r7, #6]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	80bb      	strh	r3, [r7, #4]
	/*
	 * Retorna o menor pulso se for inferior ao menor possível.
	 * Retorna o maior pulso se for superior ao maior possível.
	 * Retorna o pulso se estiver na faixa aceitável
	 */
	if (pulse < period * DUTY_CYCLE_MIN)
 8000fb8:	88bb      	ldrh	r3, [r7, #4]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff fa76 	bl	80004ac <__aeabi_i2d>
 8000fc0:	4604      	mov	r4, r0
 8000fc2:	460d      	mov	r5, r1
 8000fc4:	88fb      	ldrh	r3, [r7, #6]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fa70 	bl	80004ac <__aeabi_i2d>
 8000fcc:	a326      	add	r3, pc, #152	@ (adr r3, 8001068 <SG90_handlePulse+0xc0>)
 8000fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd2:	f7ff fad5 	bl	8000580 <__aeabi_dmul>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4620      	mov	r0, r4
 8000fdc:	4629      	mov	r1, r5
 8000fde:	f7ff fd41 	bl	8000a64 <__aeabi_dcmplt>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d011      	beq.n	800100c <SG90_handlePulse+0x64>
		pulse = period * DUTY_CYCLE_MIN;
 8000fe8:	88fb      	ldrh	r3, [r7, #6]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fa5e 	bl	80004ac <__aeabi_i2d>
 8000ff0:	a31d      	add	r3, pc, #116	@ (adr r3, 8001068 <SG90_handlePulse+0xc0>)
 8000ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff6:	f7ff fac3 	bl	8000580 <__aeabi_dmul>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	4610      	mov	r0, r2
 8001000:	4619      	mov	r1, r3
 8001002:	f7ff fd57 	bl	8000ab4 <__aeabi_d2uiz>
 8001006:	4603      	mov	r3, r0
 8001008:	80bb      	strh	r3, [r7, #4]
 800100a:	e028      	b.n	800105e <SG90_handlePulse+0xb6>
	else if (pulse > period * DUTY_CYCLE_MAX)
 800100c:	88bb      	ldrh	r3, [r7, #4]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fa4c 	bl	80004ac <__aeabi_i2d>
 8001014:	4604      	mov	r4, r0
 8001016:	460d      	mov	r5, r1
 8001018:	88fb      	ldrh	r3, [r7, #6]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fa46 	bl	80004ac <__aeabi_i2d>
 8001020:	a313      	add	r3, pc, #76	@ (adr r3, 8001070 <SG90_handlePulse+0xc8>)
 8001022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001026:	f7ff faab 	bl	8000580 <__aeabi_dmul>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	4620      	mov	r0, r4
 8001030:	4629      	mov	r1, r5
 8001032:	f7ff fd35 	bl	8000aa0 <__aeabi_dcmpgt>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d010      	beq.n	800105e <SG90_handlePulse+0xb6>
		pulse = period * DUTY_CYCLE_MAX;
 800103c:	88fb      	ldrh	r3, [r7, #6]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fa34 	bl	80004ac <__aeabi_i2d>
 8001044:	a30a      	add	r3, pc, #40	@ (adr r3, 8001070 <SG90_handlePulse+0xc8>)
 8001046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104a:	f7ff fa99 	bl	8000580 <__aeabi_dmul>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	4610      	mov	r0, r2
 8001054:	4619      	mov	r1, r3
 8001056:	f7ff fd2d 	bl	8000ab4 <__aeabi_d2uiz>
 800105a:	4603      	mov	r3, r0
 800105c:	80bb      	strh	r3, [r7, #4]
	return pulse;
 800105e:	88bb      	ldrh	r3, [r7, #4]
}
 8001060:	4618      	mov	r0, r3
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bdb0      	pop	{r4, r5, r7, pc}
 8001068:	1eb851ec 	.word	0x1eb851ec
 800106c:	3fa1eb85 	.word	0x3fa1eb85
 8001070:	d70a3d71 	.word	0xd70a3d71
 8001074:	3fbd70a3 	.word	0x3fbd70a3

08001078 <SG90_SetPWM>:
void SG90_SetPWM(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period, uint16_t pulse)
{
 8001078:	b084      	sub	sp, #16
 800107a:	b580      	push	{r7, lr}
 800107c:	b088      	sub	sp, #32
 800107e:	af00      	add	r7, sp, #0
 8001080:	f107 0c28 	add.w	ip, r7, #40	@ 0x28
 8001084:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// Obtém pulso após tratamento de limites.
	pulse = SG90_handlePulse(period, pulse);
 8001088:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 800108c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8001090:	4611      	mov	r1, r2
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff ff88 	bl	8000fa8 <SG90_handlePulse>
 8001098:	4603      	mov	r3, r0
 800109a:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
	// Configura registradores para uso do PWM
	HAL_TIM_PWM_Stop(&timer, channel);
 800109e:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80010a0:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80010a4:	f002 ffae 	bl	8004004 <HAL_TIM_PWM_Stop>
	TIM_OC_InitTypeDef sConfigOC;
	timer.Init.Period = period;
 80010a8:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80010ac:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_TIM_PWM_Init(&timer);
 80010ae:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80010b2:	f002 fe8f 	bl	8003dd4 <HAL_TIM_PWM_Init>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010b6:	2360      	movs	r3, #96	@ 0x60
 80010b8:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = pulse;
 80010ba:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 80010be:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
	HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80010cc:	4619      	mov	r1, r3
 80010ce:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80010d2:	f003 f807 	bl	80040e4 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&timer, channel);
 80010d6:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80010d8:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80010dc:	f002 feca 	bl	8003e74 <HAL_TIM_PWM_Start>
}
 80010e0:	bf00      	nop
 80010e2:	3720      	adds	r7, #32
 80010e4:	46bd      	mov	sp, r7
 80010e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010ea:	b004      	add	sp, #16
 80010ec:	4770      	bx	lr
	...

080010f0 <SG90_rad2Degree>:
/*
Converter graus para radianos.
*/
float SG90_rad2Degree(float angleRad)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	ed87 0a01 	vstr	s0, [r7, #4]
	return angleRad * 180 / M_PI;
 80010fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80010fe:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001140 <SG90_rad2Degree+0x50>
 8001102:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001106:	ee17 0a90 	vmov	r0, s15
 800110a:	f7ff f9e1 	bl	80004d0 <__aeabi_f2d>
 800110e:	a30a      	add	r3, pc, #40	@ (adr r3, 8001138 <SG90_rad2Degree+0x48>)
 8001110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001114:	f7ff fb5e 	bl	80007d4 <__aeabi_ddiv>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	4610      	mov	r0, r2
 800111e:	4619      	mov	r1, r3
 8001120:	f7ff fce8 	bl	8000af4 <__aeabi_d2f>
 8001124:	4603      	mov	r3, r0
 8001126:	ee07 3a90 	vmov	s15, r3
}
 800112a:	eeb0 0a67 	vmov.f32	s0, s15
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	f3af 8000 	nop.w
 8001138:	54442d18 	.word	0x54442d18
 800113c:	400921fb 	.word	0x400921fb
 8001140:	43340000 	.word	0x43340000

08001144 <SG90_handleAngle>:
/*
Função que irá tratar o ângulo recebibo para as faixas de 0 a 180°.
*/
uint16_t SG90_handleAngle(float angle)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	ed87 0a01 	vstr	s0, [r7, #4]
	// Converte graus para radianos.
	angle = SG90_rad2Degree(angle);
 800114e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001152:	f7ff ffcd 	bl	80010f0 <SG90_rad2Degree>
 8001156:	ed87 0a01 	vstr	s0, [r7, #4]
	// Converter ângulo de -90 a 90 para 0 a 180.
	angle += 90;
 800115a:	edd7 7a01 	vldr	s15, [r7, #4]
 800115e:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80011ac <SG90_handleAngle+0x68>
 8001162:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001166:	edc7 7a01 	vstr	s15, [r7, #4]
	if (angle > 180)
 800116a:	edd7 7a01 	vldr	s15, [r7, #4]
 800116e:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80011b0 <SG90_handleAngle+0x6c>
 8001172:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800117a:	dd01      	ble.n	8001180 <SG90_handleAngle+0x3c>
		angle = 180;
 800117c:	4b0d      	ldr	r3, [pc, #52]	@ (80011b4 <SG90_handleAngle+0x70>)
 800117e:	607b      	str	r3, [r7, #4]
	if (angle < 0)
 8001180:	edd7 7a01 	vldr	s15, [r7, #4]
 8001184:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118c:	d502      	bpl.n	8001194 <SG90_handleAngle+0x50>
		angle = 0;
 800118e:	f04f 0300 	mov.w	r3, #0
 8001192:	607b      	str	r3, [r7, #4]
	return angle;
 8001194:	edd7 7a01 	vldr	s15, [r7, #4]
 8001198:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800119c:	ee17 3a90 	vmov	r3, s15
 80011a0:	b29b      	uxth	r3, r3
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	42b40000 	.word	0x42b40000
 80011b0:	43340000 	.word	0x43340000
 80011b4:	43340000 	.word	0x43340000

080011b8 <SG90_angle2Pulse>:
/*
Função que receberá um ângulo e retornará o valor de pulso que o leme deve se movimentar para atender o ângulo.
*/
uint16_t SG90_angle2Pulse(float angle, uint16_t period)
{
 80011b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011bc:	b084      	sub	sp, #16
 80011be:	af00      	add	r7, sp, #0
 80011c0:	ed87 0a01 	vstr	s0, [r7, #4]
 80011c4:	4603      	mov	r3, r0
 80011c6:	807b      	strh	r3, [r7, #2]
	angle = SG90_handleAngle(angle);
 80011c8:	ed97 0a01 	vldr	s0, [r7, #4]
 80011cc:	f7ff ffba 	bl	8001144 <SG90_handleAngle>
 80011d0:	4603      	mov	r3, r0
 80011d2:	ee07 3a90 	vmov	s15, r3
 80011d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011da:	edc7 7a01 	vstr	s15, [r7, #4]
	// Percentual que se deve mover
	float percentualAngulo = angle / 180;
 80011de:	ed97 7a01 	vldr	s14, [r7, #4]
 80011e2:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8001290 <SG90_angle2Pulse+0xd8>
 80011e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ea:	edc7 7a03 	vstr	s15, [r7, #12]
	// Retorna o pulso necessário para movimentar esse ângulo com base no período e nos duty cycles
	return (uint16_t)((period * DUTY_CYCLE_MAX - period * DUTY_CYCLE_MIN) + period * DUTY_CYCLE_MIN * percentualAngulo);
 80011ee:	887b      	ldrh	r3, [r7, #2]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff f95b 	bl	80004ac <__aeabi_i2d>
 80011f6:	a322      	add	r3, pc, #136	@ (adr r3, 8001280 <SG90_angle2Pulse+0xc8>)
 80011f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fc:	f7ff f9c0 	bl	8000580 <__aeabi_dmul>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4614      	mov	r4, r2
 8001206:	461d      	mov	r5, r3
 8001208:	887b      	ldrh	r3, [r7, #2]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff f94e 	bl	80004ac <__aeabi_i2d>
 8001210:	a31d      	add	r3, pc, #116	@ (adr r3, 8001288 <SG90_angle2Pulse+0xd0>)
 8001212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001216:	f7ff f9b3 	bl	8000580 <__aeabi_dmul>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4620      	mov	r0, r4
 8001220:	4629      	mov	r1, r5
 8001222:	f7fe fff5 	bl	8000210 <__aeabi_dsub>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4614      	mov	r4, r2
 800122c:	461d      	mov	r5, r3
 800122e:	887b      	ldrh	r3, [r7, #2]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f93b 	bl	80004ac <__aeabi_i2d>
 8001236:	a314      	add	r3, pc, #80	@ (adr r3, 8001288 <SG90_angle2Pulse+0xd0>)
 8001238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123c:	f7ff f9a0 	bl	8000580 <__aeabi_dmul>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4690      	mov	r8, r2
 8001246:	4699      	mov	r9, r3
 8001248:	68f8      	ldr	r0, [r7, #12]
 800124a:	f7ff f941 	bl	80004d0 <__aeabi_f2d>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4640      	mov	r0, r8
 8001254:	4649      	mov	r1, r9
 8001256:	f7ff f993 	bl	8000580 <__aeabi_dmul>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4620      	mov	r0, r4
 8001260:	4629      	mov	r1, r5
 8001262:	f7fe ffd7 	bl	8000214 <__adddf3>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4610      	mov	r0, r2
 800126c:	4619      	mov	r1, r3
 800126e:	f7ff fc21 	bl	8000ab4 <__aeabi_d2uiz>
 8001272:	4603      	mov	r3, r0
 8001274:	b29b      	uxth	r3, r3
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001280:	d70a3d71 	.word	0xd70a3d71
 8001284:	3fbd70a3 	.word	0x3fbd70a3
 8001288:	1eb851ec 	.word	0x1eb851ec
 800128c:	3fa1eb85 	.word	0x3fa1eb85
 8001290:	43340000 	.word	0x43340000
 8001294:	00000000 	.word	0x00000000

08001298 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800129a:	b095      	sub	sp, #84	@ 0x54
 800129c:	af12      	add	r7, sp, #72	@ 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800129e:	f000 fce9 	bl	8001c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a2:	f000 f8cf 	bl	8001444 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a6:	f000 fa63 	bl	8001770 <MX_GPIO_Init>
  MX_I2C1_Init();
 80012aa:	f000 f92b 	bl	8001504 <MX_I2C1_Init>
  MX_TIM4_Init();
 80012ae:	f000 f9b1 	bl	8001614 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80012b2:	f000 fa09 	bl	80016c8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80012b6:	f000 fa31 	bl	800171c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80012ba:	f000 f951 	bl	8001560 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  /*
   * Inicia o magnetômetro com configurações padrões.
   */
  HMC5883L_Init(hi2c1);
 80012be:	4c5a      	ldr	r4, [pc, #360]	@ (8001428 <main+0x190>)
 80012c0:	4668      	mov	r0, sp
 80012c2:	f104 0310 	add.w	r3, r4, #16
 80012c6:	2244      	movs	r2, #68	@ 0x44
 80012c8:	4619      	mov	r1, r3
 80012ca:	f003 fdbb 	bl	8004e44 <memcpy>
 80012ce:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80012d2:	f7ff fe34 	bl	8000f3e <HMC5883L_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // Recebe dados do magnetômetro.
    // Lê 8 amostras do magnetômetro
    for (int i = 0; i < 8; i++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]
 80012da:	e047      	b.n	800136c <main+0xd4>
    {
      HAL_I2C_Mem_Read(&hi2c1, HMC5883L_ADDRESS, 0x03, 1, buffer, 6, 100);
 80012dc:	2364      	movs	r3, #100	@ 0x64
 80012de:	9302      	str	r3, [sp, #8]
 80012e0:	2306      	movs	r3, #6
 80012e2:	9301      	str	r3, [sp, #4]
 80012e4:	4b51      	ldr	r3, [pc, #324]	@ (800142c <main+0x194>)
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	2301      	movs	r3, #1
 80012ea:	2203      	movs	r2, #3
 80012ec:	211e      	movs	r1, #30
 80012ee:	484e      	ldr	r0, [pc, #312]	@ (8001428 <main+0x190>)
 80012f0:	f001 fa28 	bl	8002744 <HAL_I2C_Mem_Read>
      bufferX[i] = ((buffer[0] << 8) | buffer[1]) * 0.92;
 80012f4:	4b4d      	ldr	r3, [pc, #308]	@ (800142c <main+0x194>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	021b      	lsls	r3, r3, #8
 80012fa:	4a4c      	ldr	r2, [pc, #304]	@ (800142c <main+0x194>)
 80012fc:	7852      	ldrb	r2, [r2, #1]
 80012fe:	4313      	orrs	r3, r2
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff f8d3 	bl	80004ac <__aeabi_i2d>
 8001306:	a346      	add	r3, pc, #280	@ (adr r3, 8001420 <main+0x188>)
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	f7ff f938 	bl	8000580 <__aeabi_dmul>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4610      	mov	r0, r2
 8001316:	4619      	mov	r1, r3
 8001318:	f7ff fbcc 	bl	8000ab4 <__aeabi_d2uiz>
 800131c:	4603      	mov	r3, r0
 800131e:	b2d9      	uxtb	r1, r3
 8001320:	4a43      	ldr	r2, [pc, #268]	@ (8001430 <main+0x198>)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4413      	add	r3, r2
 8001326:	460a      	mov	r2, r1
 8001328:	701a      	strb	r2, [r3, #0]
      bufferY[i] = ((buffer[2] << 8) | buffer[3]) * 0.92;
 800132a:	4b40      	ldr	r3, [pc, #256]	@ (800142c <main+0x194>)
 800132c:	789b      	ldrb	r3, [r3, #2]
 800132e:	021b      	lsls	r3, r3, #8
 8001330:	4a3e      	ldr	r2, [pc, #248]	@ (800142c <main+0x194>)
 8001332:	78d2      	ldrb	r2, [r2, #3]
 8001334:	4313      	orrs	r3, r2
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff f8b8 	bl	80004ac <__aeabi_i2d>
 800133c:	a338      	add	r3, pc, #224	@ (adr r3, 8001420 <main+0x188>)
 800133e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001342:	f7ff f91d 	bl	8000580 <__aeabi_dmul>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4610      	mov	r0, r2
 800134c:	4619      	mov	r1, r3
 800134e:	f7ff fbb1 	bl	8000ab4 <__aeabi_d2uiz>
 8001352:	4603      	mov	r3, r0
 8001354:	b2d9      	uxtb	r1, r3
 8001356:	4a37      	ldr	r2, [pc, #220]	@ (8001434 <main+0x19c>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4413      	add	r3, r2
 800135c:	460a      	mov	r2, r1
 800135e:	701a      	strb	r2, [r3, #0]
      HAL_Delay(50);
 8001360:	2032      	movs	r0, #50	@ 0x32
 8001362:	f000 fcf9 	bl	8001d58 <HAL_Delay>
    for (int i = 0; i < 8; i++)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	3301      	adds	r3, #1
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b07      	cmp	r3, #7
 8001370:	ddb4      	ble.n	80012dc <main+0x44>
    }
    //  Filtra amostras obtidas e realiza média das mesmas
    teste.x = HMC5883L_FilterAxisData(bufferX);
 8001372:	482f      	ldr	r0, [pc, #188]	@ (8001430 <main+0x198>)
 8001374:	f7ff fd86 	bl	8000e84 <HMC5883L_FilterAxisData>
 8001378:	eef0 7a40 	vmov.f32	s15, s0
 800137c:	4b2e      	ldr	r3, [pc, #184]	@ (8001438 <main+0x1a0>)
 800137e:	edc3 7a00 	vstr	s15, [r3]
    teste.y = HMC5883L_FilterAxisData(bufferY);
 8001382:	482c      	ldr	r0, [pc, #176]	@ (8001434 <main+0x19c>)
 8001384:	f7ff fd7e 	bl	8000e84 <HMC5883L_FilterAxisData>
 8001388:	eef0 7a40 	vmov.f32	s15, s0
 800138c:	4b2a      	ldr	r3, [pc, #168]	@ (8001438 <main+0x1a0>)
 800138e:	edc3 7a01 	vstr	s15, [r3, #4]
    // Obtém ângulo
    teste.angle = atan2(teste.x, teste.y);
 8001392:	4b29      	ldr	r3, [pc, #164]	@ (8001438 <main+0x1a0>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff f89a 	bl	80004d0 <__aeabi_f2d>
 800139c:	4604      	mov	r4, r0
 800139e:	460d      	mov	r5, r1
 80013a0:	4b25      	ldr	r3, [pc, #148]	@ (8001438 <main+0x1a0>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff f893 	bl	80004d0 <__aeabi_f2d>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	ec43 2b11 	vmov	d1, r2, r3
 80013b2:	ec45 4b10 	vmov	d0, r4, r5
 80013b6:	f003 fd53 	bl	8004e60 <atan2>
 80013ba:	ec53 2b10 	vmov	r2, r3, d0
 80013be:	4610      	mov	r0, r2
 80013c0:	4619      	mov	r1, r3
 80013c2:	f7ff fb97 	bl	8000af4 <__aeabi_d2f>
 80013c6:	4603      	mov	r3, r0
 80013c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001438 <main+0x1a0>)
 80013ca:	6093      	str	r3, [r2, #8]
    // Obtém pulso a ser aplicado no leme
    pulse = SG90_angle2Pulse(teste.angle, DEFAULT_PERIOD);
 80013cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001438 <main+0x1a0>)
 80013ce:	edd3 7a02 	vldr	s15, [r3, #8]
 80013d2:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 80013d6:	eeb0 0a67 	vmov.f32	s0, s15
 80013da:	f7ff feed 	bl	80011b8 <SG90_angle2Pulse>
 80013de:	4603      	mov	r3, r0
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b16      	ldr	r3, [pc, #88]	@ (800143c <main+0x1a4>)
 80013e4:	801a      	strh	r2, [r3, #0]
    // Aplica PWM no leme
    SG90_SetPWM(htim4, TIM_CHANNEL_1, DEFAULT_PERIOD, pulse);
 80013e6:	4b15      	ldr	r3, [pc, #84]	@ (800143c <main+0x1a4>)
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	4e15      	ldr	r6, [pc, #84]	@ (8001440 <main+0x1a8>)
 80013ec:	9310      	str	r3, [sp, #64]	@ 0x40
 80013ee:	f240 43e2 	movw	r3, #1250	@ 0x4e2
 80013f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80013f4:	2300      	movs	r3, #0
 80013f6:	930e      	str	r3, [sp, #56]	@ 0x38
 80013f8:	466d      	mov	r5, sp
 80013fa:	f106 0410 	add.w	r4, r6, #16
 80013fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001400:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001402:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001404:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001406:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001408:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800140a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800140e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001412:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001416:	f7ff fe2f 	bl	8001078 <SG90_SetPWM>
    for (int i = 0; i < 8; i++)
 800141a:	e75c      	b.n	80012d6 <main+0x3e>
 800141c:	f3af 8000 	nop.w
 8001420:	d70a3d71 	.word	0xd70a3d71
 8001424:	3fed70a3 	.word	0x3fed70a3
 8001428:	20000028 	.word	0x20000028
 800142c:	2000019c 	.word	0x2000019c
 8001430:	200001a4 	.word	0x200001a4
 8001434:	200001ac 	.word	0x200001ac
 8001438:	200001b4 	.word	0x200001b4
 800143c:	200001c0 	.word	0x200001c0
 8001440:	200000c4 	.word	0x200000c4

08001444 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b094      	sub	sp, #80	@ 0x50
 8001448:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800144a:	f107 031c 	add.w	r3, r7, #28
 800144e:	2234      	movs	r2, #52	@ 0x34
 8001450:	2100      	movs	r1, #0
 8001452:	4618      	mov	r0, r3
 8001454:	f003 fcca 	bl	8004dec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001458:	f107 0308 	add.w	r3, r7, #8
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001468:	2300      	movs	r3, #0
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	4b23      	ldr	r3, [pc, #140]	@ (80014fc <SystemClock_Config+0xb8>)
 800146e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001470:	4a22      	ldr	r2, [pc, #136]	@ (80014fc <SystemClock_Config+0xb8>)
 8001472:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001476:	6413      	str	r3, [r2, #64]	@ 0x40
 8001478:	4b20      	ldr	r3, [pc, #128]	@ (80014fc <SystemClock_Config+0xb8>)
 800147a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001484:	2300      	movs	r3, #0
 8001486:	603b      	str	r3, [r7, #0]
 8001488:	4b1d      	ldr	r3, [pc, #116]	@ (8001500 <SystemClock_Config+0xbc>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001490:	4a1b      	ldr	r2, [pc, #108]	@ (8001500 <SystemClock_Config+0xbc>)
 8001492:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	4b19      	ldr	r3, [pc, #100]	@ (8001500 <SystemClock_Config+0xbc>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014a0:	603b      	str	r3, [r7, #0]
 80014a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014a4:	2302      	movs	r3, #2
 80014a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014a8:	2301      	movs	r3, #1
 80014aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014ac:	2310      	movs	r3, #16
 80014ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014b0:	2300      	movs	r3, #0
 80014b2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b4:	f107 031c 	add.w	r3, r7, #28
 80014b8:	4618      	mov	r0, r3
 80014ba:	f002 f9ed 	bl	8003898 <HAL_RCC_OscConfig>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80014c4:	f000 f9bc 	bl	8001840 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014c8:	230f      	movs	r3, #15
 80014ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014d0:	2300      	movs	r3, #0
 80014d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80014d4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80014d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014da:	2300      	movs	r3, #0
 80014dc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014de:	f107 0308 	add.w	r3, r7, #8
 80014e2:	2100      	movs	r1, #0
 80014e4:	4618      	mov	r0, r3
 80014e6:	f001 ff13 	bl	8003310 <HAL_RCC_ClockConfig>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80014f0:	f000 f9a6 	bl	8001840 <Error_Handler>
  }
}
 80014f4:	bf00      	nop
 80014f6:	3750      	adds	r7, #80	@ 0x50
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40023800 	.word	0x40023800
 8001500:	40007000 	.word	0x40007000

08001504 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001508:	4b12      	ldr	r3, [pc, #72]	@ (8001554 <MX_I2C1_Init+0x50>)
 800150a:	4a13      	ldr	r2, [pc, #76]	@ (8001558 <MX_I2C1_Init+0x54>)
 800150c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800150e:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <MX_I2C1_Init+0x50>)
 8001510:	4a12      	ldr	r2, [pc, #72]	@ (800155c <MX_I2C1_Init+0x58>)
 8001512:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001514:	4b0f      	ldr	r3, [pc, #60]	@ (8001554 <MX_I2C1_Init+0x50>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800151a:	4b0e      	ldr	r3, [pc, #56]	@ (8001554 <MX_I2C1_Init+0x50>)
 800151c:	2200      	movs	r2, #0
 800151e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001520:	4b0c      	ldr	r3, [pc, #48]	@ (8001554 <MX_I2C1_Init+0x50>)
 8001522:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001526:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001528:	4b0a      	ldr	r3, [pc, #40]	@ (8001554 <MX_I2C1_Init+0x50>)
 800152a:	2200      	movs	r2, #0
 800152c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800152e:	4b09      	ldr	r3, [pc, #36]	@ (8001554 <MX_I2C1_Init+0x50>)
 8001530:	2200      	movs	r2, #0
 8001532:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001534:	4b07      	ldr	r3, [pc, #28]	@ (8001554 <MX_I2C1_Init+0x50>)
 8001536:	2200      	movs	r2, #0
 8001538:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800153a:	4b06      	ldr	r3, [pc, #24]	@ (8001554 <MX_I2C1_Init+0x50>)
 800153c:	2200      	movs	r2, #0
 800153e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001540:	4804      	ldr	r0, [pc, #16]	@ (8001554 <MX_I2C1_Init+0x50>)
 8001542:	f000 fec1 	bl	80022c8 <HAL_I2C_Init>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800154c:	f000 f978 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000028 	.word	0x20000028
 8001558:	40005400 	.word	0x40005400
 800155c:	000186a0 	.word	0x000186a0

08001560 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08a      	sub	sp, #40	@ 0x28
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001566:	f107 0320 	add.w	r3, r7, #32
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
 800157c:	611a      	str	r2, [r3, #16]
 800157e:	615a      	str	r2, [r3, #20]
 8001580:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001582:	4b22      	ldr	r3, [pc, #136]	@ (800160c <MX_TIM3_Init+0xac>)
 8001584:	4a22      	ldr	r2, [pc, #136]	@ (8001610 <MX_TIM3_Init+0xb0>)
 8001586:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64 - 1;
 8001588:	4b20      	ldr	r3, [pc, #128]	@ (800160c <MX_TIM3_Init+0xac>)
 800158a:	223f      	movs	r2, #63	@ 0x3f
 800158c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158e:	4b1f      	ldr	r3, [pc, #124]	@ (800160c <MX_TIM3_Init+0xac>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1250;
 8001594:	4b1d      	ldr	r3, [pc, #116]	@ (800160c <MX_TIM3_Init+0xac>)
 8001596:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 800159a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159c:	4b1b      	ldr	r3, [pc, #108]	@ (800160c <MX_TIM3_Init+0xac>)
 800159e:	2200      	movs	r2, #0
 80015a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a2:	4b1a      	ldr	r3, [pc, #104]	@ (800160c <MX_TIM3_Init+0xac>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015a8:	4818      	ldr	r0, [pc, #96]	@ (800160c <MX_TIM3_Init+0xac>)
 80015aa:	f002 fc13 	bl	8003dd4 <HAL_TIM_PWM_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80015b4:	f000 f944 	bl	8001840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b8:	2300      	movs	r3, #0
 80015ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015c0:	f107 0320 	add.w	r3, r7, #32
 80015c4:	4619      	mov	r1, r3
 80015c6:	4811      	ldr	r0, [pc, #68]	@ (800160c <MX_TIM3_Init+0xac>)
 80015c8:	f003 f8d0 	bl	800476c <HAL_TIMEx_MasterConfigSynchronization>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80015d2:	f000 f935 	bl	8001840 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015d6:	2360      	movs	r3, #96	@ 0x60
 80015d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	2204      	movs	r2, #4
 80015ea:	4619      	mov	r1, r3
 80015ec:	4807      	ldr	r0, [pc, #28]	@ (800160c <MX_TIM3_Init+0xac>)
 80015ee:	f002 fd79 	bl	80040e4 <HAL_TIM_PWM_ConfigChannel>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80015f8:	f000 f922 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015fc:	4803      	ldr	r0, [pc, #12]	@ (800160c <MX_TIM3_Init+0xac>)
 80015fe:	f000 f9cd 	bl	800199c <HAL_TIM_MspPostInit>
}
 8001602:	bf00      	nop
 8001604:	3728      	adds	r7, #40	@ 0x28
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	2000007c 	.word	0x2000007c
 8001610:	40000400 	.word	0x40000400

08001614 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08a      	sub	sp, #40	@ 0x28
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800161a:	f107 0320 	add.w	r3, r7, #32
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
 8001630:	611a      	str	r2, [r3, #16]
 8001632:	615a      	str	r2, [r3, #20]
 8001634:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001636:	4b22      	ldr	r3, [pc, #136]	@ (80016c0 <MX_TIM4_Init+0xac>)
 8001638:	4a22      	ldr	r2, [pc, #136]	@ (80016c4 <MX_TIM4_Init+0xb0>)
 800163a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64 - 1;
 800163c:	4b20      	ldr	r3, [pc, #128]	@ (80016c0 <MX_TIM4_Init+0xac>)
 800163e:	223f      	movs	r2, #63	@ 0x3f
 8001640:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001642:	4b1f      	ldr	r3, [pc, #124]	@ (80016c0 <MX_TIM4_Init+0xac>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1250;
 8001648:	4b1d      	ldr	r3, [pc, #116]	@ (80016c0 <MX_TIM4_Init+0xac>)
 800164a:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 800164e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001650:	4b1b      	ldr	r3, [pc, #108]	@ (80016c0 <MX_TIM4_Init+0xac>)
 8001652:	2200      	movs	r2, #0
 8001654:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001656:	4b1a      	ldr	r3, [pc, #104]	@ (80016c0 <MX_TIM4_Init+0xac>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800165c:	4818      	ldr	r0, [pc, #96]	@ (80016c0 <MX_TIM4_Init+0xac>)
 800165e:	f002 fbb9 	bl	8003dd4 <HAL_TIM_PWM_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001668:	f000 f8ea 	bl	8001840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800166c:	2300      	movs	r3, #0
 800166e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001670:	2300      	movs	r3, #0
 8001672:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001674:	f107 0320 	add.w	r3, r7, #32
 8001678:	4619      	mov	r1, r3
 800167a:	4811      	ldr	r0, [pc, #68]	@ (80016c0 <MX_TIM4_Init+0xac>)
 800167c:	f003 f876 	bl	800476c <HAL_TIMEx_MasterConfigSynchronization>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001686:	f000 f8db 	bl	8001840 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800168a:	2360      	movs	r3, #96	@ 0x60
 800168c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	2200      	movs	r2, #0
 800169e:	4619      	mov	r1, r3
 80016a0:	4807      	ldr	r0, [pc, #28]	@ (80016c0 <MX_TIM4_Init+0xac>)
 80016a2:	f002 fd1f 	bl	80040e4 <HAL_TIM_PWM_ConfigChannel>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80016ac:	f000 f8c8 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80016b0:	4803      	ldr	r0, [pc, #12]	@ (80016c0 <MX_TIM4_Init+0xac>)
 80016b2:	f000 f973 	bl	800199c <HAL_TIM_MspPostInit>
}
 80016b6:	bf00      	nop
 80016b8:	3728      	adds	r7, #40	@ 0x28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200000c4 	.word	0x200000c4
 80016c4:	40000800 	.word	0x40000800

080016c8 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016cc:	4b11      	ldr	r3, [pc, #68]	@ (8001714 <MX_USART2_UART_Init+0x4c>)
 80016ce:	4a12      	ldr	r2, [pc, #72]	@ (8001718 <MX_USART2_UART_Init+0x50>)
 80016d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80016d2:	4b10      	ldr	r3, [pc, #64]	@ (8001714 <MX_USART2_UART_Init+0x4c>)
 80016d4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80016d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016da:	4b0e      	ldr	r3, [pc, #56]	@ (8001714 <MX_USART2_UART_Init+0x4c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001714 <MX_USART2_UART_Init+0x4c>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001714 <MX_USART2_UART_Init+0x4c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016ec:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <MX_USART2_UART_Init+0x4c>)
 80016ee:	220c      	movs	r2, #12
 80016f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016f2:	4b08      	ldr	r3, [pc, #32]	@ (8001714 <MX_USART2_UART_Init+0x4c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f8:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <MX_USART2_UART_Init+0x4c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016fe:	4805      	ldr	r0, [pc, #20]	@ (8001714 <MX_USART2_UART_Init+0x4c>)
 8001700:	f003 f8b0 	bl	8004864 <HAL_UART_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800170a:	f000 f899 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	2000010c 	.word	0x2000010c
 8001718:	40004400 	.word	0x40004400

0800171c <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001720:	4b11      	ldr	r3, [pc, #68]	@ (8001768 <MX_USART3_UART_Init+0x4c>)
 8001722:	4a12      	ldr	r2, [pc, #72]	@ (800176c <MX_USART3_UART_Init+0x50>)
 8001724:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001726:	4b10      	ldr	r3, [pc, #64]	@ (8001768 <MX_USART3_UART_Init+0x4c>)
 8001728:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800172c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800172e:	4b0e      	ldr	r3, [pc, #56]	@ (8001768 <MX_USART3_UART_Init+0x4c>)
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001734:	4b0c      	ldr	r3, [pc, #48]	@ (8001768 <MX_USART3_UART_Init+0x4c>)
 8001736:	2200      	movs	r2, #0
 8001738:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800173a:	4b0b      	ldr	r3, [pc, #44]	@ (8001768 <MX_USART3_UART_Init+0x4c>)
 800173c:	2200      	movs	r2, #0
 800173e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001740:	4b09      	ldr	r3, [pc, #36]	@ (8001768 <MX_USART3_UART_Init+0x4c>)
 8001742:	220c      	movs	r2, #12
 8001744:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001746:	4b08      	ldr	r3, [pc, #32]	@ (8001768 <MX_USART3_UART_Init+0x4c>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800174c:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <MX_USART3_UART_Init+0x4c>)
 800174e:	2200      	movs	r2, #0
 8001750:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001752:	4805      	ldr	r0, [pc, #20]	@ (8001768 <MX_USART3_UART_Init+0x4c>)
 8001754:	f003 f886 	bl	8004864 <HAL_UART_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800175e:	f000 f86f 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000154 	.word	0x20000154
 800176c:	40004800 	.word	0x40004800

08001770 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b088      	sub	sp, #32
 8001774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001776:	f107 030c 	add.w	r3, r7, #12
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	60da      	str	r2, [r3, #12]
 8001784:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	4b2a      	ldr	r3, [pc, #168]	@ (8001834 <MX_GPIO_Init+0xc4>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	4a29      	ldr	r2, [pc, #164]	@ (8001834 <MX_GPIO_Init+0xc4>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6313      	str	r3, [r2, #48]	@ 0x30
 8001796:	4b27      	ldr	r3, [pc, #156]	@ (8001834 <MX_GPIO_Init+0xc4>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	60bb      	str	r3, [r7, #8]
 80017a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	607b      	str	r3, [r7, #4]
 80017a6:	4b23      	ldr	r3, [pc, #140]	@ (8001834 <MX_GPIO_Init+0xc4>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	4a22      	ldr	r2, [pc, #136]	@ (8001834 <MX_GPIO_Init+0xc4>)
 80017ac:	f043 0304 	orr.w	r3, r3, #4
 80017b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b2:	4b20      	ldr	r3, [pc, #128]	@ (8001834 <MX_GPIO_Init+0xc4>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	603b      	str	r3, [r7, #0]
 80017c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001834 <MX_GPIO_Init+0xc4>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	4a1b      	ldr	r2, [pc, #108]	@ (8001834 <MX_GPIO_Init+0xc4>)
 80017c8:	f043 0302 	orr.w	r3, r3, #2
 80017cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ce:	4b19      	ldr	r3, [pc, #100]	@ (8001834 <MX_GPIO_Init+0xc4>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	603b      	str	r3, [r7, #0]
 80017d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, L293D_LATCH_Pin | L293D_EN_Pin | L293D_SER_Pin, GPIO_PIN_RESET);
 80017da:	2200      	movs	r2, #0
 80017dc:	f44f 7150 	mov.w	r1, #832	@ 0x340
 80017e0:	4815      	ldr	r0, [pc, #84]	@ (8001838 <MX_GPIO_Init+0xc8>)
 80017e2:	f000 fd57 	bl	8002294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L293D_CLK_GPIO_Port, L293D_CLK_Pin, GPIO_PIN_RESET);
 80017e6:	2200      	movs	r2, #0
 80017e8:	2120      	movs	r1, #32
 80017ea:	4814      	ldr	r0, [pc, #80]	@ (800183c <MX_GPIO_Init+0xcc>)
 80017ec:	f000 fd52 	bl	8002294 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : L293D_LATCH_Pin L293D_EN_Pin L293D_SER_Pin */
  GPIO_InitStruct.Pin = L293D_LATCH_Pin | L293D_EN_Pin | L293D_SER_Pin;
 80017f0:	f44f 7350 	mov.w	r3, #832	@ 0x340
 80017f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f6:	2301      	movs	r3, #1
 80017f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fe:	2300      	movs	r3, #0
 8001800:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001802:	f107 030c 	add.w	r3, r7, #12
 8001806:	4619      	mov	r1, r3
 8001808:	480b      	ldr	r0, [pc, #44]	@ (8001838 <MX_GPIO_Init+0xc8>)
 800180a:	f000 fbaf 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : L293D_CLK_Pin */
  GPIO_InitStruct.Pin = L293D_CLK_Pin;
 800180e:	2320      	movs	r3, #32
 8001810:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001812:	2301      	movs	r3, #1
 8001814:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181a:	2300      	movs	r3, #0
 800181c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(L293D_CLK_GPIO_Port, &GPIO_InitStruct);
 800181e:	f107 030c 	add.w	r3, r7, #12
 8001822:	4619      	mov	r1, r3
 8001824:	4805      	ldr	r0, [pc, #20]	@ (800183c <MX_GPIO_Init+0xcc>)
 8001826:	f000 fba1 	bl	8001f6c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800182a:	bf00      	nop
 800182c:	3720      	adds	r7, #32
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40023800 	.word	0x40023800
 8001838:	40020000 	.word	0x40020000
 800183c:	40020400 	.word	0x40020400

08001840 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001844:	b672      	cpsid	i
}
 8001846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001848:	bf00      	nop
 800184a:	e7fd      	b.n	8001848 <Error_Handler+0x8>

0800184c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	607b      	str	r3, [r7, #4]
 8001856:	4b10      	ldr	r3, [pc, #64]	@ (8001898 <HAL_MspInit+0x4c>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800185a:	4a0f      	ldr	r2, [pc, #60]	@ (8001898 <HAL_MspInit+0x4c>)
 800185c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001860:	6453      	str	r3, [r2, #68]	@ 0x44
 8001862:	4b0d      	ldr	r3, [pc, #52]	@ (8001898 <HAL_MspInit+0x4c>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001866:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800186a:	607b      	str	r3, [r7, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	603b      	str	r3, [r7, #0]
 8001872:	4b09      	ldr	r3, [pc, #36]	@ (8001898 <HAL_MspInit+0x4c>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001876:	4a08      	ldr	r2, [pc, #32]	@ (8001898 <HAL_MspInit+0x4c>)
 8001878:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800187c:	6413      	str	r3, [r2, #64]	@ 0x40
 800187e:	4b06      	ldr	r3, [pc, #24]	@ (8001898 <HAL_MspInit+0x4c>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001882:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001886:	603b      	str	r3, [r7, #0]
 8001888:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	40023800 	.word	0x40023800

0800189c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08a      	sub	sp, #40	@ 0x28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a19      	ldr	r2, [pc, #100]	@ (8001920 <HAL_I2C_MspInit+0x84>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d12c      	bne.n	8001918 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	613b      	str	r3, [r7, #16]
 80018c2:	4b18      	ldr	r3, [pc, #96]	@ (8001924 <HAL_I2C_MspInit+0x88>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c6:	4a17      	ldr	r2, [pc, #92]	@ (8001924 <HAL_I2C_MspInit+0x88>)
 80018c8:	f043 0302 	orr.w	r3, r3, #2
 80018cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ce:	4b15      	ldr	r3, [pc, #84]	@ (8001924 <HAL_I2C_MspInit+0x88>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = MAG_SDA_Pin|MAG_SCL_Pin;
 80018da:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80018de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018e0:	2312      	movs	r3, #18
 80018e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e8:	2303      	movs	r3, #3
 80018ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018ec:	2304      	movs	r3, #4
 80018ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	4619      	mov	r1, r3
 80018f6:	480c      	ldr	r0, [pc, #48]	@ (8001928 <HAL_I2C_MspInit+0x8c>)
 80018f8:	f000 fb38 	bl	8001f6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018fc:	2300      	movs	r3, #0
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	4b08      	ldr	r3, [pc, #32]	@ (8001924 <HAL_I2C_MspInit+0x88>)
 8001902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001904:	4a07      	ldr	r2, [pc, #28]	@ (8001924 <HAL_I2C_MspInit+0x88>)
 8001906:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800190a:	6413      	str	r3, [r2, #64]	@ 0x40
 800190c:	4b05      	ldr	r3, [pc, #20]	@ (8001924 <HAL_I2C_MspInit+0x88>)
 800190e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001910:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001918:	bf00      	nop
 800191a:	3728      	adds	r7, #40	@ 0x28
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40005400 	.word	0x40005400
 8001924:	40023800 	.word	0x40023800
 8001928:	40020400 	.word	0x40020400

0800192c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a15      	ldr	r2, [pc, #84]	@ (8001990 <HAL_TIM_PWM_MspInit+0x64>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d10e      	bne.n	800195c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	4b14      	ldr	r3, [pc, #80]	@ (8001994 <HAL_TIM_PWM_MspInit+0x68>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001946:	4a13      	ldr	r2, [pc, #76]	@ (8001994 <HAL_TIM_PWM_MspInit+0x68>)
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	6413      	str	r3, [r2, #64]	@ 0x40
 800194e:	4b11      	ldr	r3, [pc, #68]	@ (8001994 <HAL_TIM_PWM_MspInit+0x68>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800195a:	e012      	b.n	8001982 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a0d      	ldr	r2, [pc, #52]	@ (8001998 <HAL_TIM_PWM_MspInit+0x6c>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d10d      	bne.n	8001982 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	4b0a      	ldr	r3, [pc, #40]	@ (8001994 <HAL_TIM_PWM_MspInit+0x68>)
 800196c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196e:	4a09      	ldr	r2, [pc, #36]	@ (8001994 <HAL_TIM_PWM_MspInit+0x68>)
 8001970:	f043 0304 	orr.w	r3, r3, #4
 8001974:	6413      	str	r3, [r2, #64]	@ 0x40
 8001976:	4b07      	ldr	r3, [pc, #28]	@ (8001994 <HAL_TIM_PWM_MspInit+0x68>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197a:	f003 0304 	and.w	r3, r3, #4
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	68bb      	ldr	r3, [r7, #8]
}
 8001982:	bf00      	nop
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	40000400 	.word	0x40000400
 8001994:	40023800 	.word	0x40023800
 8001998:	40000800 	.word	0x40000800

0800199c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08a      	sub	sp, #40	@ 0x28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a24      	ldr	r2, [pc, #144]	@ (8001a4c <HAL_TIM_MspPostInit+0xb0>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d11e      	bne.n	80019fc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	613b      	str	r3, [r7, #16]
 80019c2:	4b23      	ldr	r3, [pc, #140]	@ (8001a50 <HAL_TIM_MspPostInit+0xb4>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c6:	4a22      	ldr	r2, [pc, #136]	@ (8001a50 <HAL_TIM_MspPostInit+0xb4>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ce:	4b20      	ldr	r3, [pc, #128]	@ (8001a50 <HAL_TIM_MspPostInit+0xb4>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = L293D_PWM_Pin;
 80019da:	2380      	movs	r3, #128	@ 0x80
 80019dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019de:	2302      	movs	r3, #2
 80019e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e6:	2300      	movs	r3, #0
 80019e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019ea:	2302      	movs	r3, #2
 80019ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(L293D_PWM_GPIO_Port, &GPIO_InitStruct);
 80019ee:	f107 0314 	add.w	r3, r7, #20
 80019f2:	4619      	mov	r1, r3
 80019f4:	4817      	ldr	r0, [pc, #92]	@ (8001a54 <HAL_TIM_MspPostInit+0xb8>)
 80019f6:	f000 fab9 	bl	8001f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80019fa:	e022      	b.n	8001a42 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a15      	ldr	r2, [pc, #84]	@ (8001a58 <HAL_TIM_MspPostInit+0xbc>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d11d      	bne.n	8001a42 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	4b11      	ldr	r3, [pc, #68]	@ (8001a50 <HAL_TIM_MspPostInit+0xb4>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	4a10      	ldr	r2, [pc, #64]	@ (8001a50 <HAL_TIM_MspPostInit+0xb4>)
 8001a10:	f043 0302 	orr.w	r3, r3, #2
 8001a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a16:	4b0e      	ldr	r3, [pc, #56]	@ (8001a50 <HAL_TIM_MspPostInit+0xb4>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SG90_PWM_Pin;
 8001a22:	2340      	movs	r3, #64	@ 0x40
 8001a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a26:	2302      	movs	r3, #2
 8001a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a32:	2302      	movs	r3, #2
 8001a34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SG90_PWM_GPIO_Port, &GPIO_InitStruct);
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4807      	ldr	r0, [pc, #28]	@ (8001a5c <HAL_TIM_MspPostInit+0xc0>)
 8001a3e:	f000 fa95 	bl	8001f6c <HAL_GPIO_Init>
}
 8001a42:	bf00      	nop
 8001a44:	3728      	adds	r7, #40	@ 0x28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40000400 	.word	0x40000400
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40020000 	.word	0x40020000
 8001a58:	40000800 	.word	0x40000800
 8001a5c:	40020400 	.word	0x40020400

08001a60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08c      	sub	sp, #48	@ 0x30
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	f107 031c 	add.w	r3, r7, #28
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a41      	ldr	r2, [pc, #260]	@ (8001b84 <HAL_UART_MspInit+0x124>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d12c      	bne.n	8001adc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	61bb      	str	r3, [r7, #24]
 8001a86:	4b40      	ldr	r3, [pc, #256]	@ (8001b88 <HAL_UART_MspInit+0x128>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8a:	4a3f      	ldr	r2, [pc, #252]	@ (8001b88 <HAL_UART_MspInit+0x128>)
 8001a8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a92:	4b3d      	ldr	r3, [pc, #244]	@ (8001b88 <HAL_UART_MspInit+0x128>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a9a:	61bb      	str	r3, [r7, #24]
 8001a9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	4b39      	ldr	r3, [pc, #228]	@ (8001b88 <HAL_UART_MspInit+0x128>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa6:	4a38      	ldr	r2, [pc, #224]	@ (8001b88 <HAL_UART_MspInit+0x128>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aae:	4b36      	ldr	r3, [pc, #216]	@ (8001b88 <HAL_UART_MspInit+0x128>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001aba:	230c      	movs	r3, #12
 8001abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001aca:	2307      	movs	r3, #7
 8001acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ace:	f107 031c 	add.w	r3, r7, #28
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	482d      	ldr	r0, [pc, #180]	@ (8001b8c <HAL_UART_MspInit+0x12c>)
 8001ad6:	f000 fa49 	bl	8001f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ada:	e04f      	b.n	8001b7c <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART3)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a2b      	ldr	r2, [pc, #172]	@ (8001b90 <HAL_UART_MspInit+0x130>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d14a      	bne.n	8001b7c <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	4b27      	ldr	r3, [pc, #156]	@ (8001b88 <HAL_UART_MspInit+0x128>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aee:	4a26      	ldr	r2, [pc, #152]	@ (8001b88 <HAL_UART_MspInit+0x128>)
 8001af0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001af4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001af6:	4b24      	ldr	r3, [pc, #144]	@ (8001b88 <HAL_UART_MspInit+0x128>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	4b20      	ldr	r3, [pc, #128]	@ (8001b88 <HAL_UART_MspInit+0x128>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0a:	4a1f      	ldr	r2, [pc, #124]	@ (8001b88 <HAL_UART_MspInit+0x128>)
 8001b0c:	f043 0304 	orr.w	r3, r3, #4
 8001b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b12:	4b1d      	ldr	r3, [pc, #116]	@ (8001b88 <HAL_UART_MspInit+0x128>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b16:	f003 0304 	and.w	r3, r3, #4
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60bb      	str	r3, [r7, #8]
 8001b22:	4b19      	ldr	r3, [pc, #100]	@ (8001b88 <HAL_UART_MspInit+0x128>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b26:	4a18      	ldr	r2, [pc, #96]	@ (8001b88 <HAL_UART_MspInit+0x128>)
 8001b28:	f043 0302 	orr.w	r3, r3, #2
 8001b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b2e:	4b16      	ldr	r3, [pc, #88]	@ (8001b88 <HAL_UART_MspInit+0x128>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	60bb      	str	r3, [r7, #8]
 8001b38:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BLE_RX_Pin;
 8001b3a:	2320      	movs	r3, #32
 8001b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b46:	2303      	movs	r3, #3
 8001b48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b4a:	2307      	movs	r3, #7
 8001b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BLE_RX_GPIO_Port, &GPIO_InitStruct);
 8001b4e:	f107 031c 	add.w	r3, r7, #28
 8001b52:	4619      	mov	r1, r3
 8001b54:	480f      	ldr	r0, [pc, #60]	@ (8001b94 <HAL_UART_MspInit+0x134>)
 8001b56:	f000 fa09 	bl	8001f6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BLE_TX_Pin;
 8001b5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b60:	2302      	movs	r3, #2
 8001b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b6c:	2307      	movs	r3, #7
 8001b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BLE_TX_GPIO_Port, &GPIO_InitStruct);
 8001b70:	f107 031c 	add.w	r3, r7, #28
 8001b74:	4619      	mov	r1, r3
 8001b76:	4808      	ldr	r0, [pc, #32]	@ (8001b98 <HAL_UART_MspInit+0x138>)
 8001b78:	f000 f9f8 	bl	8001f6c <HAL_GPIO_Init>
}
 8001b7c:	bf00      	nop
 8001b7e:	3730      	adds	r7, #48	@ 0x30
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40004400 	.word	0x40004400
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40020000 	.word	0x40020000
 8001b90:	40004800 	.word	0x40004800
 8001b94:	40020800 	.word	0x40020800
 8001b98:	40020400 	.word	0x40020400

08001b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ba0:	bf00      	nop
 8001ba2:	e7fd      	b.n	8001ba0 <NMI_Handler+0x4>

08001ba4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ba8:	bf00      	nop
 8001baa:	e7fd      	b.n	8001ba8 <HardFault_Handler+0x4>

08001bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bb0:	bf00      	nop
 8001bb2:	e7fd      	b.n	8001bb0 <MemManage_Handler+0x4>

08001bb4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bb8:	bf00      	nop
 8001bba:	e7fd      	b.n	8001bb8 <BusFault_Handler+0x4>

08001bbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bc0:	bf00      	nop
 8001bc2:	e7fd      	b.n	8001bc0 <UsageFault_Handler+0x4>

08001bc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bf2:	f000 f891 	bl	8001d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
	...

08001bfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c00:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <SystemInit+0x20>)
 8001c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c06:	4a05      	ldr	r2, [pc, #20]	@ (8001c1c <SystemInit+0x20>)
 8001c08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <Reset_Handler>:
 8001c20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c58 <LoopFillZerobss+0xe>
 8001c24:	f7ff ffea 	bl	8001bfc <SystemInit>
 8001c28:	480c      	ldr	r0, [pc, #48]	@ (8001c5c <LoopFillZerobss+0x12>)
 8001c2a:	490d      	ldr	r1, [pc, #52]	@ (8001c60 <LoopFillZerobss+0x16>)
 8001c2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c64 <LoopFillZerobss+0x1a>)
 8001c2e:	2300      	movs	r3, #0
 8001c30:	e002      	b.n	8001c38 <LoopCopyDataInit>

08001c32 <CopyDataInit>:
 8001c32:	58d4      	ldr	r4, [r2, r3]
 8001c34:	50c4      	str	r4, [r0, r3]
 8001c36:	3304      	adds	r3, #4

08001c38 <LoopCopyDataInit>:
 8001c38:	18c4      	adds	r4, r0, r3
 8001c3a:	428c      	cmp	r4, r1
 8001c3c:	d3f9      	bcc.n	8001c32 <CopyDataInit>
 8001c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c68 <LoopFillZerobss+0x1e>)
 8001c40:	4c0a      	ldr	r4, [pc, #40]	@ (8001c6c <LoopFillZerobss+0x22>)
 8001c42:	2300      	movs	r3, #0
 8001c44:	e001      	b.n	8001c4a <LoopFillZerobss>

08001c46 <FillZerobss>:
 8001c46:	6013      	str	r3, [r2, #0]
 8001c48:	3204      	adds	r2, #4

08001c4a <LoopFillZerobss>:
 8001c4a:	42a2      	cmp	r2, r4
 8001c4c:	d3fb      	bcc.n	8001c46 <FillZerobss>
 8001c4e:	f003 f8d5 	bl	8004dfc <__libc_init_array>
 8001c52:	f7ff fb21 	bl	8001298 <main>
 8001c56:	4770      	bx	lr
 8001c58:	20020000 	.word	0x20020000
 8001c5c:	20000000 	.word	0x20000000
 8001c60:	2000000c 	.word	0x2000000c
 8001c64:	080053e8 	.word	0x080053e8
 8001c68:	2000000c 	.word	0x2000000c
 8001c6c:	200001c8 	.word	0x200001c8

08001c70 <ADC_IRQHandler>:
 8001c70:	e7fe      	b.n	8001c70 <ADC_IRQHandler>
	...

08001c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c78:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb4 <HAL_Init+0x40>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001cb4 <HAL_Init+0x40>)
 8001c7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c84:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb4 <HAL_Init+0x40>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb4 <HAL_Init+0x40>)
 8001c8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c90:	4b08      	ldr	r3, [pc, #32]	@ (8001cb4 <HAL_Init+0x40>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a07      	ldr	r2, [pc, #28]	@ (8001cb4 <HAL_Init+0x40>)
 8001c96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c9c:	2003      	movs	r0, #3
 8001c9e:	f000 f931 	bl	8001f04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ca2:	200f      	movs	r0, #15
 8001ca4:	f000 f808 	bl	8001cb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ca8:	f7ff fdd0 	bl	800184c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40023c00 	.word	0x40023c00

08001cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cc0:	4b12      	ldr	r3, [pc, #72]	@ (8001d0c <HAL_InitTick+0x54>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4b12      	ldr	r3, [pc, #72]	@ (8001d10 <HAL_InitTick+0x58>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f000 f93b 	bl	8001f52 <HAL_SYSTICK_Config>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e00e      	b.n	8001d04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b0f      	cmp	r3, #15
 8001cea:	d80a      	bhi.n	8001d02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cec:	2200      	movs	r2, #0
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf4:	f000 f911 	bl	8001f1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cf8:	4a06      	ldr	r2, [pc, #24]	@ (8001d14 <HAL_InitTick+0x5c>)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	e000      	b.n	8001d04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20000000 	.word	0x20000000
 8001d10:	20000008 	.word	0x20000008
 8001d14:	20000004 	.word	0x20000004

08001d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d1c:	4b06      	ldr	r3, [pc, #24]	@ (8001d38 <HAL_IncTick+0x20>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	461a      	mov	r2, r3
 8001d22:	4b06      	ldr	r3, [pc, #24]	@ (8001d3c <HAL_IncTick+0x24>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4413      	add	r3, r2
 8001d28:	4a04      	ldr	r2, [pc, #16]	@ (8001d3c <HAL_IncTick+0x24>)
 8001d2a:	6013      	str	r3, [r2, #0]
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	20000008 	.word	0x20000008
 8001d3c:	200001c4 	.word	0x200001c4

08001d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  return uwTick;
 8001d44:	4b03      	ldr	r3, [pc, #12]	@ (8001d54 <HAL_GetTick+0x14>)
 8001d46:	681b      	ldr	r3, [r3, #0]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	200001c4 	.word	0x200001c4

08001d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d60:	f7ff ffee 	bl	8001d40 <HAL_GetTick>
 8001d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d70:	d005      	beq.n	8001d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d72:	4b0a      	ldr	r3, [pc, #40]	@ (8001d9c <HAL_Delay+0x44>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	461a      	mov	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d7e:	bf00      	nop
 8001d80:	f7ff ffde 	bl	8001d40 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d8f7      	bhi.n	8001d80 <HAL_Delay+0x28>
  {
  }
}
 8001d90:	bf00      	nop
 8001d92:	bf00      	nop
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000008 	.word	0x20000008

08001da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db0:	4b0c      	ldr	r3, [pc, #48]	@ (8001de4 <__NVIC_SetPriorityGrouping+0x44>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dd2:	4a04      	ldr	r2, [pc, #16]	@ (8001de4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	60d3      	str	r3, [r2, #12]
}
 8001dd8:	bf00      	nop
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dec:	4b04      	ldr	r3, [pc, #16]	@ (8001e00 <__NVIC_GetPriorityGrouping+0x18>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	0a1b      	lsrs	r3, r3, #8
 8001df2:	f003 0307 	and.w	r3, r3, #7
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	6039      	str	r1, [r7, #0]
 8001e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	db0a      	blt.n	8001e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	490c      	ldr	r1, [pc, #48]	@ (8001e50 <__NVIC_SetPriority+0x4c>)
 8001e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e22:	0112      	lsls	r2, r2, #4
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	440b      	add	r3, r1
 8001e28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e2c:	e00a      	b.n	8001e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	4908      	ldr	r1, [pc, #32]	@ (8001e54 <__NVIC_SetPriority+0x50>)
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	3b04      	subs	r3, #4
 8001e3c:	0112      	lsls	r2, r2, #4
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	440b      	add	r3, r1
 8001e42:	761a      	strb	r2, [r3, #24]
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	e000e100 	.word	0xe000e100
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b089      	sub	sp, #36	@ 0x24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f1c3 0307 	rsb	r3, r3, #7
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	bf28      	it	cs
 8001e76:	2304      	movcs	r3, #4
 8001e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	2b06      	cmp	r3, #6
 8001e80:	d902      	bls.n	8001e88 <NVIC_EncodePriority+0x30>
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	3b03      	subs	r3, #3
 8001e86:	e000      	b.n	8001e8a <NVIC_EncodePriority+0x32>
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43da      	mvns	r2, r3
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	401a      	ands	r2, r3
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eaa:	43d9      	mvns	r1, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb0:	4313      	orrs	r3, r2
         );
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3724      	adds	r7, #36	@ 0x24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ed0:	d301      	bcc.n	8001ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e00f      	b.n	8001ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8001f00 <SysTick_Config+0x40>)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ede:	210f      	movs	r1, #15
 8001ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee4:	f7ff ff8e 	bl	8001e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ee8:	4b05      	ldr	r3, [pc, #20]	@ (8001f00 <SysTick_Config+0x40>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eee:	4b04      	ldr	r3, [pc, #16]	@ (8001f00 <SysTick_Config+0x40>)
 8001ef0:	2207      	movs	r2, #7
 8001ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	e000e010 	.word	0xe000e010

08001f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff ff47 	bl	8001da0 <__NVIC_SetPriorityGrouping>
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b086      	sub	sp, #24
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	4603      	mov	r3, r0
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
 8001f26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f2c:	f7ff ff5c 	bl	8001de8 <__NVIC_GetPriorityGrouping>
 8001f30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	68b9      	ldr	r1, [r7, #8]
 8001f36:	6978      	ldr	r0, [r7, #20]
 8001f38:	f7ff ff8e 	bl	8001e58 <NVIC_EncodePriority>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f42:	4611      	mov	r1, r2
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff ff5d 	bl	8001e04 <__NVIC_SetPriority>
}
 8001f4a:	bf00      	nop
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff ffb0 	bl	8001ec0 <SysTick_Config>
 8001f60:	4603      	mov	r3, r0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b089      	sub	sp, #36	@ 0x24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f82:	2300      	movs	r3, #0
 8001f84:	61fb      	str	r3, [r7, #28]
 8001f86:	e165      	b.n	8002254 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f88:	2201      	movs	r2, #1
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	f040 8154 	bne.w	800224e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d005      	beq.n	8001fbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d130      	bne.n	8002020 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	2203      	movs	r2, #3
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	091b      	lsrs	r3, r3, #4
 800200a:	f003 0201 	and.w	r2, r3, #1
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	2b03      	cmp	r3, #3
 800202a:	d017      	beq.n	800205c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	2203      	movs	r2, #3
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4013      	ands	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4313      	orrs	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 0303 	and.w	r3, r3, #3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d123      	bne.n	80020b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	08da      	lsrs	r2, r3, #3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3208      	adds	r2, #8
 8002070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002074:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	220f      	movs	r2, #15
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	43db      	mvns	r3, r3
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4013      	ands	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4313      	orrs	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	08da      	lsrs	r2, r3, #3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3208      	adds	r2, #8
 80020aa:	69b9      	ldr	r1, [r7, #24]
 80020ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	2203      	movs	r2, #3
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 0203 	and.w	r2, r3, #3
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4313      	orrs	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 80ae 	beq.w	800224e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	4b5d      	ldr	r3, [pc, #372]	@ (800226c <HAL_GPIO_Init+0x300>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020fa:	4a5c      	ldr	r2, [pc, #368]	@ (800226c <HAL_GPIO_Init+0x300>)
 80020fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002100:	6453      	str	r3, [r2, #68]	@ 0x44
 8002102:	4b5a      	ldr	r3, [pc, #360]	@ (800226c <HAL_GPIO_Init+0x300>)
 8002104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002106:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800210e:	4a58      	ldr	r2, [pc, #352]	@ (8002270 <HAL_GPIO_Init+0x304>)
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	089b      	lsrs	r3, r3, #2
 8002114:	3302      	adds	r3, #2
 8002116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800211a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	220f      	movs	r2, #15
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43db      	mvns	r3, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4013      	ands	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a4f      	ldr	r2, [pc, #316]	@ (8002274 <HAL_GPIO_Init+0x308>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d025      	beq.n	8002186 <HAL_GPIO_Init+0x21a>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a4e      	ldr	r2, [pc, #312]	@ (8002278 <HAL_GPIO_Init+0x30c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d01f      	beq.n	8002182 <HAL_GPIO_Init+0x216>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a4d      	ldr	r2, [pc, #308]	@ (800227c <HAL_GPIO_Init+0x310>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d019      	beq.n	800217e <HAL_GPIO_Init+0x212>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a4c      	ldr	r2, [pc, #304]	@ (8002280 <HAL_GPIO_Init+0x314>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d013      	beq.n	800217a <HAL_GPIO_Init+0x20e>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a4b      	ldr	r2, [pc, #300]	@ (8002284 <HAL_GPIO_Init+0x318>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d00d      	beq.n	8002176 <HAL_GPIO_Init+0x20a>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a4a      	ldr	r2, [pc, #296]	@ (8002288 <HAL_GPIO_Init+0x31c>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d007      	beq.n	8002172 <HAL_GPIO_Init+0x206>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a49      	ldr	r2, [pc, #292]	@ (800228c <HAL_GPIO_Init+0x320>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d101      	bne.n	800216e <HAL_GPIO_Init+0x202>
 800216a:	2306      	movs	r3, #6
 800216c:	e00c      	b.n	8002188 <HAL_GPIO_Init+0x21c>
 800216e:	2307      	movs	r3, #7
 8002170:	e00a      	b.n	8002188 <HAL_GPIO_Init+0x21c>
 8002172:	2305      	movs	r3, #5
 8002174:	e008      	b.n	8002188 <HAL_GPIO_Init+0x21c>
 8002176:	2304      	movs	r3, #4
 8002178:	e006      	b.n	8002188 <HAL_GPIO_Init+0x21c>
 800217a:	2303      	movs	r3, #3
 800217c:	e004      	b.n	8002188 <HAL_GPIO_Init+0x21c>
 800217e:	2302      	movs	r3, #2
 8002180:	e002      	b.n	8002188 <HAL_GPIO_Init+0x21c>
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <HAL_GPIO_Init+0x21c>
 8002186:	2300      	movs	r3, #0
 8002188:	69fa      	ldr	r2, [r7, #28]
 800218a:	f002 0203 	and.w	r2, r2, #3
 800218e:	0092      	lsls	r2, r2, #2
 8002190:	4093      	lsls	r3, r2
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4313      	orrs	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002198:	4935      	ldr	r1, [pc, #212]	@ (8002270 <HAL_GPIO_Init+0x304>)
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	089b      	lsrs	r3, r3, #2
 800219e:	3302      	adds	r3, #2
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021a6:	4b3a      	ldr	r3, [pc, #232]	@ (8002290 <HAL_GPIO_Init+0x324>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	43db      	mvns	r3, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4013      	ands	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021ca:	4a31      	ldr	r2, [pc, #196]	@ (8002290 <HAL_GPIO_Init+0x324>)
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021d0:	4b2f      	ldr	r3, [pc, #188]	@ (8002290 <HAL_GPIO_Init+0x324>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021f4:	4a26      	ldr	r2, [pc, #152]	@ (8002290 <HAL_GPIO_Init+0x324>)
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021fa:	4b25      	ldr	r3, [pc, #148]	@ (8002290 <HAL_GPIO_Init+0x324>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	43db      	mvns	r3, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4013      	ands	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	4313      	orrs	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800221e:	4a1c      	ldr	r2, [pc, #112]	@ (8002290 <HAL_GPIO_Init+0x324>)
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002224:	4b1a      	ldr	r3, [pc, #104]	@ (8002290 <HAL_GPIO_Init+0x324>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	43db      	mvns	r3, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4013      	ands	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	4313      	orrs	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002248:	4a11      	ldr	r2, [pc, #68]	@ (8002290 <HAL_GPIO_Init+0x324>)
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	3301      	adds	r3, #1
 8002252:	61fb      	str	r3, [r7, #28]
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	2b0f      	cmp	r3, #15
 8002258:	f67f ae96 	bls.w	8001f88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800225c:	bf00      	nop
 800225e:	bf00      	nop
 8002260:	3724      	adds	r7, #36	@ 0x24
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	40023800 	.word	0x40023800
 8002270:	40013800 	.word	0x40013800
 8002274:	40020000 	.word	0x40020000
 8002278:	40020400 	.word	0x40020400
 800227c:	40020800 	.word	0x40020800
 8002280:	40020c00 	.word	0x40020c00
 8002284:	40021000 	.word	0x40021000
 8002288:	40021400 	.word	0x40021400
 800228c:	40021800 	.word	0x40021800
 8002290:	40013c00 	.word	0x40013c00

08002294 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	807b      	strh	r3, [r7, #2]
 80022a0:	4613      	mov	r3, r2
 80022a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022a4:	787b      	ldrb	r3, [r7, #1]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022aa:	887a      	ldrh	r2, [r7, #2]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022b0:	e003      	b.n	80022ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022b2:	887b      	ldrh	r3, [r7, #2]
 80022b4:	041a      	lsls	r2, r3, #16
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	619a      	str	r2, [r3, #24]
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
	...

080022c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e12b      	b.n	8002532 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d106      	bne.n	80022f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7ff fad4 	bl	800189c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2224      	movs	r2, #36	@ 0x24
 80022f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 0201 	bic.w	r2, r2, #1
 800230a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800231a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800232a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800232c:	f001 f8e2 	bl	80034f4 <HAL_RCC_GetPCLK1Freq>
 8002330:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	4a81      	ldr	r2, [pc, #516]	@ (800253c <HAL_I2C_Init+0x274>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d807      	bhi.n	800234c <HAL_I2C_Init+0x84>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	4a80      	ldr	r2, [pc, #512]	@ (8002540 <HAL_I2C_Init+0x278>)
 8002340:	4293      	cmp	r3, r2
 8002342:	bf94      	ite	ls
 8002344:	2301      	movls	r3, #1
 8002346:	2300      	movhi	r3, #0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	e006      	b.n	800235a <HAL_I2C_Init+0x92>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4a7d      	ldr	r2, [pc, #500]	@ (8002544 <HAL_I2C_Init+0x27c>)
 8002350:	4293      	cmp	r3, r2
 8002352:	bf94      	ite	ls
 8002354:	2301      	movls	r3, #1
 8002356:	2300      	movhi	r3, #0
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e0e7      	b.n	8002532 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	4a78      	ldr	r2, [pc, #480]	@ (8002548 <HAL_I2C_Init+0x280>)
 8002366:	fba2 2303 	umull	r2, r3, r2, r3
 800236a:	0c9b      	lsrs	r3, r3, #18
 800236c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68ba      	ldr	r2, [r7, #8]
 800237e:	430a      	orrs	r2, r1
 8002380:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	4a6a      	ldr	r2, [pc, #424]	@ (800253c <HAL_I2C_Init+0x274>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d802      	bhi.n	800239c <HAL_I2C_Init+0xd4>
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	3301      	adds	r3, #1
 800239a:	e009      	b.n	80023b0 <HAL_I2C_Init+0xe8>
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80023a2:	fb02 f303 	mul.w	r3, r2, r3
 80023a6:	4a69      	ldr	r2, [pc, #420]	@ (800254c <HAL_I2C_Init+0x284>)
 80023a8:	fba2 2303 	umull	r2, r3, r2, r3
 80023ac:	099b      	lsrs	r3, r3, #6
 80023ae:	3301      	adds	r3, #1
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	6812      	ldr	r2, [r2, #0]
 80023b4:	430b      	orrs	r3, r1
 80023b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80023c2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	495c      	ldr	r1, [pc, #368]	@ (800253c <HAL_I2C_Init+0x274>)
 80023cc:	428b      	cmp	r3, r1
 80023ce:	d819      	bhi.n	8002404 <HAL_I2C_Init+0x13c>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	1e59      	subs	r1, r3, #1
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	fbb1 f3f3 	udiv	r3, r1, r3
 80023de:	1c59      	adds	r1, r3, #1
 80023e0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80023e4:	400b      	ands	r3, r1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00a      	beq.n	8002400 <HAL_I2C_Init+0x138>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	1e59      	subs	r1, r3, #1
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80023f8:	3301      	adds	r3, #1
 80023fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023fe:	e051      	b.n	80024a4 <HAL_I2C_Init+0x1dc>
 8002400:	2304      	movs	r3, #4
 8002402:	e04f      	b.n	80024a4 <HAL_I2C_Init+0x1dc>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d111      	bne.n	8002430 <HAL_I2C_Init+0x168>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	1e58      	subs	r0, r3, #1
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6859      	ldr	r1, [r3, #4]
 8002414:	460b      	mov	r3, r1
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	440b      	add	r3, r1
 800241a:	fbb0 f3f3 	udiv	r3, r0, r3
 800241e:	3301      	adds	r3, #1
 8002420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002424:	2b00      	cmp	r3, #0
 8002426:	bf0c      	ite	eq
 8002428:	2301      	moveq	r3, #1
 800242a:	2300      	movne	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	e012      	b.n	8002456 <HAL_I2C_Init+0x18e>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	1e58      	subs	r0, r3, #1
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6859      	ldr	r1, [r3, #4]
 8002438:	460b      	mov	r3, r1
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	0099      	lsls	r1, r3, #2
 8002440:	440b      	add	r3, r1
 8002442:	fbb0 f3f3 	udiv	r3, r0, r3
 8002446:	3301      	adds	r3, #1
 8002448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800244c:	2b00      	cmp	r3, #0
 800244e:	bf0c      	ite	eq
 8002450:	2301      	moveq	r3, #1
 8002452:	2300      	movne	r3, #0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_I2C_Init+0x196>
 800245a:	2301      	movs	r3, #1
 800245c:	e022      	b.n	80024a4 <HAL_I2C_Init+0x1dc>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10e      	bne.n	8002484 <HAL_I2C_Init+0x1bc>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	1e58      	subs	r0, r3, #1
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6859      	ldr	r1, [r3, #4]
 800246e:	460b      	mov	r3, r1
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	440b      	add	r3, r1
 8002474:	fbb0 f3f3 	udiv	r3, r0, r3
 8002478:	3301      	adds	r3, #1
 800247a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800247e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002482:	e00f      	b.n	80024a4 <HAL_I2C_Init+0x1dc>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	1e58      	subs	r0, r3, #1
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6859      	ldr	r1, [r3, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	0099      	lsls	r1, r3, #2
 8002494:	440b      	add	r3, r1
 8002496:	fbb0 f3f3 	udiv	r3, r0, r3
 800249a:	3301      	adds	r3, #1
 800249c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	6809      	ldr	r1, [r1, #0]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	69da      	ldr	r2, [r3, #28]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	431a      	orrs	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80024d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6911      	ldr	r1, [r2, #16]
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	68d2      	ldr	r2, [r2, #12]
 80024de:	4311      	orrs	r1, r2
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6812      	ldr	r2, [r2, #0]
 80024e4:	430b      	orrs	r3, r1
 80024e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	695a      	ldr	r2, [r3, #20]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	431a      	orrs	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	430a      	orrs	r2, r1
 8002502:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0201 	orr.w	r2, r2, #1
 8002512:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2220      	movs	r2, #32
 800251e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	000186a0 	.word	0x000186a0
 8002540:	001e847f 	.word	0x001e847f
 8002544:	003d08ff 	.word	0x003d08ff
 8002548:	431bde83 	.word	0x431bde83
 800254c:	10624dd3 	.word	0x10624dd3

08002550 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b088      	sub	sp, #32
 8002554:	af02      	add	r7, sp, #8
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	4608      	mov	r0, r1
 800255a:	4611      	mov	r1, r2
 800255c:	461a      	mov	r2, r3
 800255e:	4603      	mov	r3, r0
 8002560:	817b      	strh	r3, [r7, #10]
 8002562:	460b      	mov	r3, r1
 8002564:	813b      	strh	r3, [r7, #8]
 8002566:	4613      	mov	r3, r2
 8002568:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800256a:	f7ff fbe9 	bl	8001d40 <HAL_GetTick>
 800256e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b20      	cmp	r3, #32
 800257a:	f040 80d9 	bne.w	8002730 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	2319      	movs	r3, #25
 8002584:	2201      	movs	r2, #1
 8002586:	496d      	ldr	r1, [pc, #436]	@ (800273c <HAL_I2C_Mem_Write+0x1ec>)
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f000 fc8b 	bl	8002ea4 <I2C_WaitOnFlagUntilTimeout>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002594:	2302      	movs	r3, #2
 8002596:	e0cc      	b.n	8002732 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d101      	bne.n	80025a6 <HAL_I2C_Mem_Write+0x56>
 80025a2:	2302      	movs	r3, #2
 80025a4:	e0c5      	b.n	8002732 <HAL_I2C_Mem_Write+0x1e2>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d007      	beq.n	80025cc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 0201 	orr.w	r2, r2, #1
 80025ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2221      	movs	r2, #33	@ 0x21
 80025e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2240      	movs	r2, #64	@ 0x40
 80025e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6a3a      	ldr	r2, [r7, #32]
 80025f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80025fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002602:	b29a      	uxth	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4a4d      	ldr	r2, [pc, #308]	@ (8002740 <HAL_I2C_Mem_Write+0x1f0>)
 800260c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800260e:	88f8      	ldrh	r0, [r7, #6]
 8002610:	893a      	ldrh	r2, [r7, #8]
 8002612:	8979      	ldrh	r1, [r7, #10]
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	9301      	str	r3, [sp, #4]
 8002618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	4603      	mov	r3, r0
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 fac2 	bl	8002ba8 <I2C_RequestMemoryWrite>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d052      	beq.n	80026d0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e081      	b.n	8002732 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 fd50 	bl	80030d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00d      	beq.n	800265a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002642:	2b04      	cmp	r3, #4
 8002644:	d107      	bne.n	8002656 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002654:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e06b      	b.n	8002732 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265e:	781a      	ldrb	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266a:	1c5a      	adds	r2, r3, #1
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002674:	3b01      	subs	r3, #1
 8002676:	b29a      	uxth	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002680:	b29b      	uxth	r3, r3
 8002682:	3b01      	subs	r3, #1
 8002684:	b29a      	uxth	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	2b04      	cmp	r3, #4
 8002696:	d11b      	bne.n	80026d0 <HAL_I2C_Mem_Write+0x180>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800269c:	2b00      	cmp	r3, #0
 800269e:	d017      	beq.n	80026d0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a4:	781a      	ldrb	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b0:	1c5a      	adds	r2, r3, #1
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ba:	3b01      	subs	r3, #1
 80026bc:	b29a      	uxth	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	3b01      	subs	r3, #1
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1aa      	bne.n	800262e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f000 fd43 	bl	8003168 <I2C_WaitOnBTFFlagUntilTimeout>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00d      	beq.n	8002704 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ec:	2b04      	cmp	r3, #4
 80026ee:	d107      	bne.n	8002700 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026fe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e016      	b.n	8002732 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002712:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2220      	movs	r2, #32
 8002718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	e000      	b.n	8002732 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002730:	2302      	movs	r3, #2
  }
}
 8002732:	4618      	mov	r0, r3
 8002734:	3718      	adds	r7, #24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	00100002 	.word	0x00100002
 8002740:	ffff0000 	.word	0xffff0000

08002744 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b08c      	sub	sp, #48	@ 0x30
 8002748:	af02      	add	r7, sp, #8
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	4608      	mov	r0, r1
 800274e:	4611      	mov	r1, r2
 8002750:	461a      	mov	r2, r3
 8002752:	4603      	mov	r3, r0
 8002754:	817b      	strh	r3, [r7, #10]
 8002756:	460b      	mov	r3, r1
 8002758:	813b      	strh	r3, [r7, #8]
 800275a:	4613      	mov	r3, r2
 800275c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800275e:	f7ff faef 	bl	8001d40 <HAL_GetTick>
 8002762:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b20      	cmp	r3, #32
 800276e:	f040 8214 	bne.w	8002b9a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	2319      	movs	r3, #25
 8002778:	2201      	movs	r2, #1
 800277a:	497b      	ldr	r1, [pc, #492]	@ (8002968 <HAL_I2C_Mem_Read+0x224>)
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f000 fb91 	bl	8002ea4 <I2C_WaitOnFlagUntilTimeout>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002788:	2302      	movs	r3, #2
 800278a:	e207      	b.n	8002b9c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002792:	2b01      	cmp	r3, #1
 8002794:	d101      	bne.n	800279a <HAL_I2C_Mem_Read+0x56>
 8002796:	2302      	movs	r3, #2
 8002798:	e200      	b.n	8002b9c <HAL_I2C_Mem_Read+0x458>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d007      	beq.n	80027c0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 0201 	orr.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2222      	movs	r2, #34	@ 0x22
 80027d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2240      	movs	r2, #64	@ 0x40
 80027dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80027f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4a5b      	ldr	r2, [pc, #364]	@ (800296c <HAL_I2C_Mem_Read+0x228>)
 8002800:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002802:	88f8      	ldrh	r0, [r7, #6]
 8002804:	893a      	ldrh	r2, [r7, #8]
 8002806:	8979      	ldrh	r1, [r7, #10]
 8002808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280a:	9301      	str	r3, [sp, #4]
 800280c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	4603      	mov	r3, r0
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 fa5e 	bl	8002cd4 <I2C_RequestMemoryRead>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e1bc      	b.n	8002b9c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002826:	2b00      	cmp	r3, #0
 8002828:	d113      	bne.n	8002852 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800282a:	2300      	movs	r3, #0
 800282c:	623b      	str	r3, [r7, #32]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	623b      	str	r3, [r7, #32]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	623b      	str	r3, [r7, #32]
 800283e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	e190      	b.n	8002b74 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002856:	2b01      	cmp	r3, #1
 8002858:	d11b      	bne.n	8002892 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002868:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800286a:	2300      	movs	r3, #0
 800286c:	61fb      	str	r3, [r7, #28]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	61fb      	str	r3, [r7, #28]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	61fb      	str	r3, [r7, #28]
 800287e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	e170      	b.n	8002b74 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002896:	2b02      	cmp	r3, #2
 8002898:	d11b      	bne.n	80028d2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028a8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ba:	2300      	movs	r3, #0
 80028bc:	61bb      	str	r3, [r7, #24]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	61bb      	str	r3, [r7, #24]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	61bb      	str	r3, [r7, #24]
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	e150      	b.n	8002b74 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028d2:	2300      	movs	r3, #0
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	617b      	str	r3, [r7, #20]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	617b      	str	r3, [r7, #20]
 80028e6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80028e8:	e144      	b.n	8002b74 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ee:	2b03      	cmp	r3, #3
 80028f0:	f200 80f1 	bhi.w	8002ad6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d123      	bne.n	8002944 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028fe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f000 fc79 	bl	80031f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e145      	b.n	8002b9c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	691a      	ldr	r2, [r3, #16]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800292c:	3b01      	subs	r3, #1
 800292e:	b29a      	uxth	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002938:	b29b      	uxth	r3, r3
 800293a:	3b01      	subs	r3, #1
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002942:	e117      	b.n	8002b74 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002948:	2b02      	cmp	r3, #2
 800294a:	d14e      	bne.n	80029ea <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800294c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002952:	2200      	movs	r2, #0
 8002954:	4906      	ldr	r1, [pc, #24]	@ (8002970 <HAL_I2C_Mem_Read+0x22c>)
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f000 faa4 	bl	8002ea4 <I2C_WaitOnFlagUntilTimeout>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d008      	beq.n	8002974 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e11a      	b.n	8002b9c <HAL_I2C_Mem_Read+0x458>
 8002966:	bf00      	nop
 8002968:	00100002 	.word	0x00100002
 800296c:	ffff0000 	.word	0xffff0000
 8002970:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002982:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	691a      	ldr	r2, [r3, #16]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029a0:	3b01      	subs	r3, #1
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	3b01      	subs	r3, #1
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	691a      	ldr	r2, [r3, #16]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c8:	1c5a      	adds	r2, r3, #1
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029de:	b29b      	uxth	r3, r3
 80029e0:	3b01      	subs	r3, #1
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80029e8:	e0c4      	b.n	8002b74 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029f0:	2200      	movs	r2, #0
 80029f2:	496c      	ldr	r1, [pc, #432]	@ (8002ba4 <HAL_I2C_Mem_Read+0x460>)
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 fa55 	bl	8002ea4 <I2C_WaitOnFlagUntilTimeout>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e0cb      	b.n	8002b9c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	691a      	ldr	r2, [r3, #16]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a26:	1c5a      	adds	r2, r3, #1
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	4955      	ldr	r1, [pc, #340]	@ (8002ba4 <HAL_I2C_Mem_Read+0x460>)
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 fa27 	bl	8002ea4 <I2C_WaitOnFlagUntilTimeout>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e09d      	b.n	8002b9c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	691a      	ldr	r2, [r3, #16]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a82:	1c5a      	adds	r2, r3, #1
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	691a      	ldr	r2, [r3, #16]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aac:	b2d2      	uxtb	r2, r2
 8002aae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab4:	1c5a      	adds	r2, r3, #1
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	3b01      	subs	r3, #1
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ad4:	e04e      	b.n	8002b74 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ad6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ad8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 fb8c 	bl	80031f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e058      	b.n	8002b9c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	691a      	ldr	r2, [r3, #16]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af4:	b2d2      	uxtb	r2, r2
 8002af6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afc:	1c5a      	adds	r2, r3, #1
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b06:	3b01      	subs	r3, #1
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	3b01      	subs	r3, #1
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	f003 0304 	and.w	r3, r3, #4
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	d124      	bne.n	8002b74 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b2e:	2b03      	cmp	r3, #3
 8002b30:	d107      	bne.n	8002b42 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b40:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	691a      	ldr	r2, [r3, #16]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b54:	1c5a      	adds	r2, r3, #1
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f47f aeb6 	bne.w	80028ea <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2220      	movs	r2, #32
 8002b82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002b96:	2300      	movs	r3, #0
 8002b98:	e000      	b.n	8002b9c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002b9a:	2302      	movs	r3, #2
  }
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3728      	adds	r7, #40	@ 0x28
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	00010004 	.word	0x00010004

08002ba8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b088      	sub	sp, #32
 8002bac:	af02      	add	r7, sp, #8
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	4608      	mov	r0, r1
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	817b      	strh	r3, [r7, #10]
 8002bba:	460b      	mov	r3, r1
 8002bbc:	813b      	strh	r3, [r7, #8]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bd0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f000 f960 	bl	8002ea4 <I2C_WaitOnFlagUntilTimeout>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00d      	beq.n	8002c06 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bf8:	d103      	bne.n	8002c02 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c00:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e05f      	b.n	8002cc6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c06:	897b      	ldrh	r3, [r7, #10]
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c18:	6a3a      	ldr	r2, [r7, #32]
 8002c1a:	492d      	ldr	r1, [pc, #180]	@ (8002cd0 <I2C_RequestMemoryWrite+0x128>)
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f000 f9bb 	bl	8002f98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e04c      	b.n	8002cc6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	617b      	str	r3, [r7, #20]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	617b      	str	r3, [r7, #20]
 8002c40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c44:	6a39      	ldr	r1, [r7, #32]
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 fa46 	bl	80030d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00d      	beq.n	8002c6e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	d107      	bne.n	8002c6a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e02b      	b.n	8002cc6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c6e:	88fb      	ldrh	r3, [r7, #6]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d105      	bne.n	8002c80 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c74:	893b      	ldrh	r3, [r7, #8]
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	611a      	str	r2, [r3, #16]
 8002c7e:	e021      	b.n	8002cc4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c80:	893b      	ldrh	r3, [r7, #8]
 8002c82:	0a1b      	lsrs	r3, r3, #8
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	b2da      	uxtb	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c90:	6a39      	ldr	r1, [r7, #32]
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 fa20 	bl	80030d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00d      	beq.n	8002cba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d107      	bne.n	8002cb6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cb4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e005      	b.n	8002cc6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cba:	893b      	ldrh	r3, [r7, #8]
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3718      	adds	r7, #24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	00010002 	.word	0x00010002

08002cd4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b088      	sub	sp, #32
 8002cd8:	af02      	add	r7, sp, #8
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	4608      	mov	r0, r1
 8002cde:	4611      	mov	r1, r2
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	817b      	strh	r3, [r7, #10]
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	813b      	strh	r3, [r7, #8]
 8002cea:	4613      	mov	r3, r2
 8002cec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002cfc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	6a3b      	ldr	r3, [r7, #32]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 f8c2 	bl	8002ea4 <I2C_WaitOnFlagUntilTimeout>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00d      	beq.n	8002d42 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d34:	d103      	bne.n	8002d3e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d3c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e0aa      	b.n	8002e98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d42:	897b      	ldrh	r3, [r7, #10]
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	461a      	mov	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d54:	6a3a      	ldr	r2, [r7, #32]
 8002d56:	4952      	ldr	r1, [pc, #328]	@ (8002ea0 <I2C_RequestMemoryRead+0x1cc>)
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 f91d 	bl	8002f98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e097      	b.n	8002e98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d68:	2300      	movs	r3, #0
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	617b      	str	r3, [r7, #20]
 8002d7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d80:	6a39      	ldr	r1, [r7, #32]
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f000 f9a8 	bl	80030d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00d      	beq.n	8002daa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	d107      	bne.n	8002da6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002da4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e076      	b.n	8002e98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002daa:	88fb      	ldrh	r3, [r7, #6]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d105      	bne.n	8002dbc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002db0:	893b      	ldrh	r3, [r7, #8]
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	611a      	str	r2, [r3, #16]
 8002dba:	e021      	b.n	8002e00 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002dbc:	893b      	ldrh	r3, [r7, #8]
 8002dbe:	0a1b      	lsrs	r3, r3, #8
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dcc:	6a39      	ldr	r1, [r7, #32]
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f000 f982 	bl	80030d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00d      	beq.n	8002df6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d107      	bne.n	8002df2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002df0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e050      	b.n	8002e98 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002df6:	893b      	ldrh	r3, [r7, #8]
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e02:	6a39      	ldr	r1, [r7, #32]
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f000 f967 	bl	80030d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00d      	beq.n	8002e2c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d107      	bne.n	8002e28 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e26:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e035      	b.n	8002e98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e3a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	6a3b      	ldr	r3, [r7, #32]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 f82b 	bl	8002ea4 <I2C_WaitOnFlagUntilTimeout>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00d      	beq.n	8002e70 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e62:	d103      	bne.n	8002e6c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e6a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e013      	b.n	8002e98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e70:	897b      	ldrh	r3, [r7, #10]
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	f043 0301 	orr.w	r3, r3, #1
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e82:	6a3a      	ldr	r2, [r7, #32]
 8002e84:	4906      	ldr	r1, [pc, #24]	@ (8002ea0 <I2C_RequestMemoryRead+0x1cc>)
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 f886 	bl	8002f98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e000      	b.n	8002e98 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3718      	adds	r7, #24
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	00010002 	.word	0x00010002

08002ea4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	603b      	str	r3, [r7, #0]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002eb4:	e048      	b.n	8002f48 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ebc:	d044      	beq.n	8002f48 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ebe:	f7fe ff3f 	bl	8001d40 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d302      	bcc.n	8002ed4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d139      	bne.n	8002f48 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	0c1b      	lsrs	r3, r3, #16
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d10d      	bne.n	8002efa <I2C_WaitOnFlagUntilTimeout+0x56>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	43da      	mvns	r2, r3
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	bf0c      	ite	eq
 8002ef0:	2301      	moveq	r3, #1
 8002ef2:	2300      	movne	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	e00c      	b.n	8002f14 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	43da      	mvns	r2, r3
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	4013      	ands	r3, r2
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	bf0c      	ite	eq
 8002f0c:	2301      	moveq	r3, #1
 8002f0e:	2300      	movne	r3, #0
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	461a      	mov	r2, r3
 8002f14:	79fb      	ldrb	r3, [r7, #7]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d116      	bne.n	8002f48 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2220      	movs	r2, #32
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f34:	f043 0220 	orr.w	r2, r3, #32
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e023      	b.n	8002f90 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	0c1b      	lsrs	r3, r3, #16
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d10d      	bne.n	8002f6e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	43da      	mvns	r2, r3
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	bf0c      	ite	eq
 8002f64:	2301      	moveq	r3, #1
 8002f66:	2300      	movne	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	e00c      	b.n	8002f88 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	43da      	mvns	r2, r3
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	bf0c      	ite	eq
 8002f80:	2301      	moveq	r3, #1
 8002f82:	2300      	movne	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	461a      	mov	r2, r3
 8002f88:	79fb      	ldrb	r3, [r7, #7]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d093      	beq.n	8002eb6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
 8002fa4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fa6:	e071      	b.n	800308c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fb6:	d123      	bne.n	8003000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fc6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002fd0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fec:	f043 0204 	orr.w	r2, r3, #4
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e067      	b.n	80030d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003006:	d041      	beq.n	800308c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003008:	f7fe fe9a 	bl	8001d40 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	429a      	cmp	r2, r3
 8003016:	d302      	bcc.n	800301e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d136      	bne.n	800308c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	0c1b      	lsrs	r3, r3, #16
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b01      	cmp	r3, #1
 8003026:	d10c      	bne.n	8003042 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	43da      	mvns	r2, r3
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	4013      	ands	r3, r2
 8003034:	b29b      	uxth	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	bf14      	ite	ne
 800303a:	2301      	movne	r3, #1
 800303c:	2300      	moveq	r3, #0
 800303e:	b2db      	uxtb	r3, r3
 8003040:	e00b      	b.n	800305a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	43da      	mvns	r2, r3
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	4013      	ands	r3, r2
 800304e:	b29b      	uxth	r3, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	bf14      	ite	ne
 8003054:	2301      	movne	r3, #1
 8003056:	2300      	moveq	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d016      	beq.n	800308c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2220      	movs	r2, #32
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003078:	f043 0220 	orr.w	r2, r3, #32
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e021      	b.n	80030d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	0c1b      	lsrs	r3, r3, #16
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b01      	cmp	r3, #1
 8003094:	d10c      	bne.n	80030b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	43da      	mvns	r2, r3
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	4013      	ands	r3, r2
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	bf14      	ite	ne
 80030a8:	2301      	movne	r3, #1
 80030aa:	2300      	moveq	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	e00b      	b.n	80030c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	43da      	mvns	r2, r3
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	4013      	ands	r3, r2
 80030bc:	b29b      	uxth	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	bf14      	ite	ne
 80030c2:	2301      	movne	r3, #1
 80030c4:	2300      	moveq	r3, #0
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f47f af6d 	bne.w	8002fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030e4:	e034      	b.n	8003150 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f000 f8e3 	bl	80032b2 <I2C_IsAcknowledgeFailed>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e034      	b.n	8003160 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fc:	d028      	beq.n	8003150 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030fe:	f7fe fe1f 	bl	8001d40 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	429a      	cmp	r2, r3
 800310c:	d302      	bcc.n	8003114 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d11d      	bne.n	8003150 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800311e:	2b80      	cmp	r3, #128	@ 0x80
 8003120:	d016      	beq.n	8003150 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2220      	movs	r2, #32
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313c:	f043 0220 	orr.w	r2, r3, #32
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e007      	b.n	8003160 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800315a:	2b80      	cmp	r3, #128	@ 0x80
 800315c:	d1c3      	bne.n	80030e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003174:	e034      	b.n	80031e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 f89b 	bl	80032b2 <I2C_IsAcknowledgeFailed>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e034      	b.n	80031f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800318c:	d028      	beq.n	80031e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800318e:	f7fe fdd7 	bl	8001d40 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	429a      	cmp	r2, r3
 800319c:	d302      	bcc.n	80031a4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d11d      	bne.n	80031e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	f003 0304 	and.w	r3, r3, #4
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	d016      	beq.n	80031e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2220      	movs	r2, #32
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031cc:	f043 0220 	orr.w	r2, r3, #32
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e007      	b.n	80031f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	f003 0304 	and.w	r3, r3, #4
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d1c3      	bne.n	8003176 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003204:	e049      	b.n	800329a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	f003 0310 	and.w	r3, r3, #16
 8003210:	2b10      	cmp	r3, #16
 8003212:	d119      	bne.n	8003248 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f06f 0210 	mvn.w	r2, #16
 800321c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2220      	movs	r2, #32
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e030      	b.n	80032aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003248:	f7fe fd7a 	bl	8001d40 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	429a      	cmp	r2, r3
 8003256:	d302      	bcc.n	800325e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d11d      	bne.n	800329a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003268:	2b40      	cmp	r3, #64	@ 0x40
 800326a:	d016      	beq.n	800329a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2220      	movs	r2, #32
 8003276:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003286:	f043 0220 	orr.w	r2, r3, #32
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e007      	b.n	80032aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032a4:	2b40      	cmp	r3, #64	@ 0x40
 80032a6:	d1ae      	bne.n	8003206 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b083      	sub	sp, #12
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032c8:	d11b      	bne.n	8003302 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032d2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2220      	movs	r2, #32
 80032de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ee:	f043 0204 	orr.w	r2, r3, #4
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e0cc      	b.n	80034be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003324:	4b68      	ldr	r3, [pc, #416]	@ (80034c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 030f 	and.w	r3, r3, #15
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	429a      	cmp	r2, r3
 8003330:	d90c      	bls.n	800334c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003332:	4b65      	ldr	r3, [pc, #404]	@ (80034c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800333a:	4b63      	ldr	r3, [pc, #396]	@ (80034c8 <HAL_RCC_ClockConfig+0x1b8>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	429a      	cmp	r2, r3
 8003346:	d001      	beq.n	800334c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e0b8      	b.n	80034be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d020      	beq.n	800339a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	2b00      	cmp	r3, #0
 8003362:	d005      	beq.n	8003370 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003364:	4b59      	ldr	r3, [pc, #356]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	4a58      	ldr	r2, [pc, #352]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 800336a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800336e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0308 	and.w	r3, r3, #8
 8003378:	2b00      	cmp	r3, #0
 800337a:	d005      	beq.n	8003388 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800337c:	4b53      	ldr	r3, [pc, #332]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	4a52      	ldr	r2, [pc, #328]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003386:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003388:	4b50      	ldr	r3, [pc, #320]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	494d      	ldr	r1, [pc, #308]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	4313      	orrs	r3, r2
 8003398:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d044      	beq.n	8003430 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d107      	bne.n	80033be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ae:	4b47      	ldr	r3, [pc, #284]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d119      	bne.n	80033ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e07f      	b.n	80034be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d003      	beq.n	80033ce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ca:	2b03      	cmp	r3, #3
 80033cc:	d107      	bne.n	80033de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ce:	4b3f      	ldr	r3, [pc, #252]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d109      	bne.n	80033ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e06f      	b.n	80034be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033de:	4b3b      	ldr	r3, [pc, #236]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e067      	b.n	80034be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ee:	4b37      	ldr	r3, [pc, #220]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f023 0203 	bic.w	r2, r3, #3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	4934      	ldr	r1, [pc, #208]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003400:	f7fe fc9e 	bl	8001d40 <HAL_GetTick>
 8003404:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003406:	e00a      	b.n	800341e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003408:	f7fe fc9a 	bl	8001d40 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003416:	4293      	cmp	r3, r2
 8003418:	d901      	bls.n	800341e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e04f      	b.n	80034be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341e:	4b2b      	ldr	r3, [pc, #172]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 020c 	and.w	r2, r3, #12
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	429a      	cmp	r2, r3
 800342e:	d1eb      	bne.n	8003408 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003430:	4b25      	ldr	r3, [pc, #148]	@ (80034c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 030f 	and.w	r3, r3, #15
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d20c      	bcs.n	8003458 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343e:	4b22      	ldr	r3, [pc, #136]	@ (80034c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	b2d2      	uxtb	r2, r2
 8003444:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003446:	4b20      	ldr	r3, [pc, #128]	@ (80034c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	429a      	cmp	r2, r3
 8003452:	d001      	beq.n	8003458 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e032      	b.n	80034be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b00      	cmp	r3, #0
 8003462:	d008      	beq.n	8003476 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003464:	4b19      	ldr	r3, [pc, #100]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	4916      	ldr	r1, [pc, #88]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003472:	4313      	orrs	r3, r2
 8003474:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	2b00      	cmp	r3, #0
 8003480:	d009      	beq.n	8003496 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003482:	4b12      	ldr	r3, [pc, #72]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	490e      	ldr	r1, [pc, #56]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003492:	4313      	orrs	r3, r2
 8003494:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003496:	f000 f855 	bl	8003544 <HAL_RCC_GetSysClockFreq>
 800349a:	4602      	mov	r2, r0
 800349c:	4b0b      	ldr	r3, [pc, #44]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	091b      	lsrs	r3, r3, #4
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	490a      	ldr	r1, [pc, #40]	@ (80034d0 <HAL_RCC_ClockConfig+0x1c0>)
 80034a8:	5ccb      	ldrb	r3, [r1, r3]
 80034aa:	fa22 f303 	lsr.w	r3, r2, r3
 80034ae:	4a09      	ldr	r2, [pc, #36]	@ (80034d4 <HAL_RCC_ClockConfig+0x1c4>)
 80034b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80034b2:	4b09      	ldr	r3, [pc, #36]	@ (80034d8 <HAL_RCC_ClockConfig+0x1c8>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fe fbfe 	bl	8001cb8 <HAL_InitTick>

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	40023c00 	.word	0x40023c00
 80034cc:	40023800 	.word	0x40023800
 80034d0:	08005350 	.word	0x08005350
 80034d4:	20000000 	.word	0x20000000
 80034d8:	20000004 	.word	0x20000004

080034dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034e0:	4b03      	ldr	r3, [pc, #12]	@ (80034f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80034e2:	681b      	ldr	r3, [r3, #0]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	20000000 	.word	0x20000000

080034f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034f8:	f7ff fff0 	bl	80034dc <HAL_RCC_GetHCLKFreq>
 80034fc:	4602      	mov	r2, r0
 80034fe:	4b05      	ldr	r3, [pc, #20]	@ (8003514 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	0a9b      	lsrs	r3, r3, #10
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	4903      	ldr	r1, [pc, #12]	@ (8003518 <HAL_RCC_GetPCLK1Freq+0x24>)
 800350a:	5ccb      	ldrb	r3, [r1, r3]
 800350c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003510:	4618      	mov	r0, r3
 8003512:	bd80      	pop	{r7, pc}
 8003514:	40023800 	.word	0x40023800
 8003518:	08005360 	.word	0x08005360

0800351c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003520:	f7ff ffdc 	bl	80034dc <HAL_RCC_GetHCLKFreq>
 8003524:	4602      	mov	r2, r0
 8003526:	4b05      	ldr	r3, [pc, #20]	@ (800353c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	0b5b      	lsrs	r3, r3, #13
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	4903      	ldr	r1, [pc, #12]	@ (8003540 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003532:	5ccb      	ldrb	r3, [r1, r3]
 8003534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003538:	4618      	mov	r0, r3
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40023800 	.word	0x40023800
 8003540:	08005360 	.word	0x08005360

08003544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003548:	b0a6      	sub	sp, #152	@ 0x98
 800354a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8003552:	2300      	movs	r3, #0
 8003554:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8003558:	2300      	movs	r3, #0
 800355a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800355e:	2300      	movs	r3, #0
 8003560:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800356a:	4bc8      	ldr	r3, [pc, #800]	@ (800388c <HAL_RCC_GetSysClockFreq+0x348>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 030c 	and.w	r3, r3, #12
 8003572:	2b0c      	cmp	r3, #12
 8003574:	f200 817e 	bhi.w	8003874 <HAL_RCC_GetSysClockFreq+0x330>
 8003578:	a201      	add	r2, pc, #4	@ (adr r2, 8003580 <HAL_RCC_GetSysClockFreq+0x3c>)
 800357a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357e:	bf00      	nop
 8003580:	080035b5 	.word	0x080035b5
 8003584:	08003875 	.word	0x08003875
 8003588:	08003875 	.word	0x08003875
 800358c:	08003875 	.word	0x08003875
 8003590:	080035bd 	.word	0x080035bd
 8003594:	08003875 	.word	0x08003875
 8003598:	08003875 	.word	0x08003875
 800359c:	08003875 	.word	0x08003875
 80035a0:	080035c5 	.word	0x080035c5
 80035a4:	08003875 	.word	0x08003875
 80035a8:	08003875 	.word	0x08003875
 80035ac:	08003875 	.word	0x08003875
 80035b0:	0800372f 	.word	0x0800372f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035b4:	4bb6      	ldr	r3, [pc, #728]	@ (8003890 <HAL_RCC_GetSysClockFreq+0x34c>)
 80035b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80035ba:	e15f      	b.n	800387c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035bc:	4bb5      	ldr	r3, [pc, #724]	@ (8003894 <HAL_RCC_GetSysClockFreq+0x350>)
 80035be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80035c2:	e15b      	b.n	800387c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035c4:	4bb1      	ldr	r3, [pc, #708]	@ (800388c <HAL_RCC_GetSysClockFreq+0x348>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035d0:	4bae      	ldr	r3, [pc, #696]	@ (800388c <HAL_RCC_GetSysClockFreq+0x348>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d031      	beq.n	8003640 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035dc:	4bab      	ldr	r3, [pc, #684]	@ (800388c <HAL_RCC_GetSysClockFreq+0x348>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	099b      	lsrs	r3, r3, #6
 80035e2:	2200      	movs	r2, #0
 80035e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80035e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80035f0:	2300      	movs	r3, #0
 80035f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80035f4:	4ba7      	ldr	r3, [pc, #668]	@ (8003894 <HAL_RCC_GetSysClockFreq+0x350>)
 80035f6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80035fa:	462a      	mov	r2, r5
 80035fc:	fb03 f202 	mul.w	r2, r3, r2
 8003600:	2300      	movs	r3, #0
 8003602:	4621      	mov	r1, r4
 8003604:	fb01 f303 	mul.w	r3, r1, r3
 8003608:	4413      	add	r3, r2
 800360a:	4aa2      	ldr	r2, [pc, #648]	@ (8003894 <HAL_RCC_GetSysClockFreq+0x350>)
 800360c:	4621      	mov	r1, r4
 800360e:	fba1 1202 	umull	r1, r2, r1, r2
 8003612:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003614:	460a      	mov	r2, r1
 8003616:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003618:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800361a:	4413      	add	r3, r2
 800361c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800361e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003622:	2200      	movs	r2, #0
 8003624:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003626:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003628:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800362c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003630:	f7fd fab0 	bl	8000b94 <__aeabi_uldivmod>
 8003634:	4602      	mov	r2, r0
 8003636:	460b      	mov	r3, r1
 8003638:	4613      	mov	r3, r2
 800363a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800363e:	e064      	b.n	800370a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003640:	4b92      	ldr	r3, [pc, #584]	@ (800388c <HAL_RCC_GetSysClockFreq+0x348>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	099b      	lsrs	r3, r3, #6
 8003646:	2200      	movs	r2, #0
 8003648:	653b      	str	r3, [r7, #80]	@ 0x50
 800364a:	657a      	str	r2, [r7, #84]	@ 0x54
 800364c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800364e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003652:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003654:	2300      	movs	r3, #0
 8003656:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003658:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800365c:	4622      	mov	r2, r4
 800365e:	462b      	mov	r3, r5
 8003660:	f04f 0000 	mov.w	r0, #0
 8003664:	f04f 0100 	mov.w	r1, #0
 8003668:	0159      	lsls	r1, r3, #5
 800366a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800366e:	0150      	lsls	r0, r2, #5
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
 8003674:	4621      	mov	r1, r4
 8003676:	1a51      	subs	r1, r2, r1
 8003678:	6139      	str	r1, [r7, #16]
 800367a:	4629      	mov	r1, r5
 800367c:	eb63 0301 	sbc.w	r3, r3, r1
 8003680:	617b      	str	r3, [r7, #20]
 8003682:	f04f 0200 	mov.w	r2, #0
 8003686:	f04f 0300 	mov.w	r3, #0
 800368a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800368e:	4659      	mov	r1, fp
 8003690:	018b      	lsls	r3, r1, #6
 8003692:	4651      	mov	r1, sl
 8003694:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003698:	4651      	mov	r1, sl
 800369a:	018a      	lsls	r2, r1, #6
 800369c:	4651      	mov	r1, sl
 800369e:	ebb2 0801 	subs.w	r8, r2, r1
 80036a2:	4659      	mov	r1, fp
 80036a4:	eb63 0901 	sbc.w	r9, r3, r1
 80036a8:	f04f 0200 	mov.w	r2, #0
 80036ac:	f04f 0300 	mov.w	r3, #0
 80036b0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036b4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036b8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036bc:	4690      	mov	r8, r2
 80036be:	4699      	mov	r9, r3
 80036c0:	4623      	mov	r3, r4
 80036c2:	eb18 0303 	adds.w	r3, r8, r3
 80036c6:	60bb      	str	r3, [r7, #8]
 80036c8:	462b      	mov	r3, r5
 80036ca:	eb49 0303 	adc.w	r3, r9, r3
 80036ce:	60fb      	str	r3, [r7, #12]
 80036d0:	f04f 0200 	mov.w	r2, #0
 80036d4:	f04f 0300 	mov.w	r3, #0
 80036d8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036dc:	4629      	mov	r1, r5
 80036de:	028b      	lsls	r3, r1, #10
 80036e0:	4621      	mov	r1, r4
 80036e2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036e6:	4621      	mov	r1, r4
 80036e8:	028a      	lsls	r2, r1, #10
 80036ea:	4610      	mov	r0, r2
 80036ec:	4619      	mov	r1, r3
 80036ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036f2:	2200      	movs	r2, #0
 80036f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80036f6:	647a      	str	r2, [r7, #68]	@ 0x44
 80036f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80036fc:	f7fd fa4a 	bl	8000b94 <__aeabi_uldivmod>
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	4613      	mov	r3, r2
 8003706:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800370a:	4b60      	ldr	r3, [pc, #384]	@ (800388c <HAL_RCC_GetSysClockFreq+0x348>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	0c1b      	lsrs	r3, r3, #16
 8003710:	f003 0303 	and.w	r3, r3, #3
 8003714:	3301      	adds	r3, #1
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 800371c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003720:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003724:	fbb2 f3f3 	udiv	r3, r2, r3
 8003728:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800372c:	e0a6      	b.n	800387c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800372e:	4b57      	ldr	r3, [pc, #348]	@ (800388c <HAL_RCC_GetSysClockFreq+0x348>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003736:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800373a:	4b54      	ldr	r3, [pc, #336]	@ (800388c <HAL_RCC_GetSysClockFreq+0x348>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d02a      	beq.n	800379c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003746:	4b51      	ldr	r3, [pc, #324]	@ (800388c <HAL_RCC_GetSysClockFreq+0x348>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	099b      	lsrs	r3, r3, #6
 800374c:	2200      	movs	r2, #0
 800374e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003750:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003754:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003758:	2100      	movs	r1, #0
 800375a:	4b4e      	ldr	r3, [pc, #312]	@ (8003894 <HAL_RCC_GetSysClockFreq+0x350>)
 800375c:	fb03 f201 	mul.w	r2, r3, r1
 8003760:	2300      	movs	r3, #0
 8003762:	fb00 f303 	mul.w	r3, r0, r3
 8003766:	4413      	add	r3, r2
 8003768:	4a4a      	ldr	r2, [pc, #296]	@ (8003894 <HAL_RCC_GetSysClockFreq+0x350>)
 800376a:	fba0 1202 	umull	r1, r2, r0, r2
 800376e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003770:	460a      	mov	r2, r1
 8003772:	673a      	str	r2, [r7, #112]	@ 0x70
 8003774:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003776:	4413      	add	r3, r2
 8003778:	677b      	str	r3, [r7, #116]	@ 0x74
 800377a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800377e:	2200      	movs	r2, #0
 8003780:	633b      	str	r3, [r7, #48]	@ 0x30
 8003782:	637a      	str	r2, [r7, #52]	@ 0x34
 8003784:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003788:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800378c:	f7fd fa02 	bl	8000b94 <__aeabi_uldivmod>
 8003790:	4602      	mov	r2, r0
 8003792:	460b      	mov	r3, r1
 8003794:	4613      	mov	r3, r2
 8003796:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800379a:	e05b      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800379c:	4b3b      	ldr	r3, [pc, #236]	@ (800388c <HAL_RCC_GetSysClockFreq+0x348>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	099b      	lsrs	r3, r3, #6
 80037a2:	2200      	movs	r2, #0
 80037a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ae:	623b      	str	r3, [r7, #32]
 80037b0:	2300      	movs	r3, #0
 80037b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80037b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037b8:	4642      	mov	r2, r8
 80037ba:	464b      	mov	r3, r9
 80037bc:	f04f 0000 	mov.w	r0, #0
 80037c0:	f04f 0100 	mov.w	r1, #0
 80037c4:	0159      	lsls	r1, r3, #5
 80037c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037ca:	0150      	lsls	r0, r2, #5
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4641      	mov	r1, r8
 80037d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80037d6:	4649      	mov	r1, r9
 80037d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80037dc:	f04f 0200 	mov.w	r2, #0
 80037e0:	f04f 0300 	mov.w	r3, #0
 80037e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80037e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80037ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80037f0:	ebb2 040a 	subs.w	r4, r2, sl
 80037f4:	eb63 050b 	sbc.w	r5, r3, fp
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	f04f 0300 	mov.w	r3, #0
 8003800:	00eb      	lsls	r3, r5, #3
 8003802:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003806:	00e2      	lsls	r2, r4, #3
 8003808:	4614      	mov	r4, r2
 800380a:	461d      	mov	r5, r3
 800380c:	4643      	mov	r3, r8
 800380e:	18e3      	adds	r3, r4, r3
 8003810:	603b      	str	r3, [r7, #0]
 8003812:	464b      	mov	r3, r9
 8003814:	eb45 0303 	adc.w	r3, r5, r3
 8003818:	607b      	str	r3, [r7, #4]
 800381a:	f04f 0200 	mov.w	r2, #0
 800381e:	f04f 0300 	mov.w	r3, #0
 8003822:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003826:	4629      	mov	r1, r5
 8003828:	028b      	lsls	r3, r1, #10
 800382a:	4621      	mov	r1, r4
 800382c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003830:	4621      	mov	r1, r4
 8003832:	028a      	lsls	r2, r1, #10
 8003834:	4610      	mov	r0, r2
 8003836:	4619      	mov	r1, r3
 8003838:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800383c:	2200      	movs	r2, #0
 800383e:	61bb      	str	r3, [r7, #24]
 8003840:	61fa      	str	r2, [r7, #28]
 8003842:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003846:	f7fd f9a5 	bl	8000b94 <__aeabi_uldivmod>
 800384a:	4602      	mov	r2, r0
 800384c:	460b      	mov	r3, r1
 800384e:	4613      	mov	r3, r2
 8003850:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003854:	4b0d      	ldr	r3, [pc, #52]	@ (800388c <HAL_RCC_GetSysClockFreq+0x348>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	0f1b      	lsrs	r3, r3, #28
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8003862:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003866:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800386a:	fbb2 f3f3 	udiv	r3, r2, r3
 800386e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003872:	e003      	b.n	800387c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003874:	4b06      	ldr	r3, [pc, #24]	@ (8003890 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003876:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800387a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800387c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003880:	4618      	mov	r0, r3
 8003882:	3798      	adds	r7, #152	@ 0x98
 8003884:	46bd      	mov	sp, r7
 8003886:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800388a:	bf00      	nop
 800388c:	40023800 	.word	0x40023800
 8003890:	00f42400 	.word	0x00f42400
 8003894:	017d7840 	.word	0x017d7840

08003898 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e28d      	b.n	8003dc6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f000 8083 	beq.w	80039be <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80038b8:	4b94      	ldr	r3, [pc, #592]	@ (8003b0c <HAL_RCC_OscConfig+0x274>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f003 030c 	and.w	r3, r3, #12
 80038c0:	2b04      	cmp	r3, #4
 80038c2:	d019      	beq.n	80038f8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80038c4:	4b91      	ldr	r3, [pc, #580]	@ (8003b0c <HAL_RCC_OscConfig+0x274>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f003 030c 	and.w	r3, r3, #12
        || \
 80038cc:	2b08      	cmp	r3, #8
 80038ce:	d106      	bne.n	80038de <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80038d0:	4b8e      	ldr	r3, [pc, #568]	@ (8003b0c <HAL_RCC_OscConfig+0x274>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038dc:	d00c      	beq.n	80038f8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038de:	4b8b      	ldr	r3, [pc, #556]	@ (8003b0c <HAL_RCC_OscConfig+0x274>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80038e6:	2b0c      	cmp	r3, #12
 80038e8:	d112      	bne.n	8003910 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038ea:	4b88      	ldr	r3, [pc, #544]	@ (8003b0c <HAL_RCC_OscConfig+0x274>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038f6:	d10b      	bne.n	8003910 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f8:	4b84      	ldr	r3, [pc, #528]	@ (8003b0c <HAL_RCC_OscConfig+0x274>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d05b      	beq.n	80039bc <HAL_RCC_OscConfig+0x124>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d157      	bne.n	80039bc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e25a      	b.n	8003dc6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003918:	d106      	bne.n	8003928 <HAL_RCC_OscConfig+0x90>
 800391a:	4b7c      	ldr	r3, [pc, #496]	@ (8003b0c <HAL_RCC_OscConfig+0x274>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a7b      	ldr	r2, [pc, #492]	@ (8003b0c <HAL_RCC_OscConfig+0x274>)
 8003920:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003924:	6013      	str	r3, [r2, #0]
 8003926:	e01d      	b.n	8003964 <HAL_RCC_OscConfig+0xcc>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003930:	d10c      	bne.n	800394c <HAL_RCC_OscConfig+0xb4>
 8003932:	4b76      	ldr	r3, [pc, #472]	@ (8003b0c <HAL_RCC_OscConfig+0x274>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a75      	ldr	r2, [pc, #468]	@ (8003b0c <HAL_RCC_OscConfig+0x274>)
 8003938:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	4b73      	ldr	r3, [pc, #460]	@ (8003b0c <HAL_RCC_OscConfig+0x274>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a72      	ldr	r2, [pc, #456]	@ (8003b0c <HAL_RCC_OscConfig+0x274>)
 8003944:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	e00b      	b.n	8003964 <HAL_RCC_OscConfig+0xcc>
 800394c:	4b6f      	ldr	r3, [pc, #444]	@ (8003b0c <HAL_RCC_OscConfig+0x274>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a6e      	ldr	r2, [pc, #440]	@ (8003b0c <HAL_RCC_OscConfig+0x274>)
 8003952:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003956:	6013      	str	r3, [r2, #0]
 8003958:	4b6c      	ldr	r3, [pc, #432]	@ (8003b0c <HAL_RCC_OscConfig+0x274>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a6b      	ldr	r2, [pc, #428]	@ (8003b0c <HAL_RCC_OscConfig+0x274>)
 800395e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003962:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d013      	beq.n	8003994 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396c:	f7fe f9e8 	bl	8001d40 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003974:	f7fe f9e4 	bl	8001d40 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b64      	cmp	r3, #100	@ 0x64
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e21f      	b.n	8003dc6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003986:	4b61      	ldr	r3, [pc, #388]	@ (8003b0c <HAL_RCC_OscConfig+0x274>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0f0      	beq.n	8003974 <HAL_RCC_OscConfig+0xdc>
 8003992:	e014      	b.n	80039be <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003994:	f7fe f9d4 	bl	8001d40 <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800399c:	f7fe f9d0 	bl	8001d40 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b64      	cmp	r3, #100	@ 0x64
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e20b      	b.n	8003dc6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ae:	4b57      	ldr	r3, [pc, #348]	@ (8003b0c <HAL_RCC_OscConfig+0x274>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1f0      	bne.n	800399c <HAL_RCC_OscConfig+0x104>
 80039ba:	e000      	b.n	80039be <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d06f      	beq.n	8003aaa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80039ca:	4b50      	ldr	r3, [pc, #320]	@ (8003b0c <HAL_RCC_OscConfig+0x274>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 030c 	and.w	r3, r3, #12
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d017      	beq.n	8003a06 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80039d6:	4b4d      	ldr	r3, [pc, #308]	@ (8003b0c <HAL_RCC_OscConfig+0x274>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 030c 	and.w	r3, r3, #12
        || \
 80039de:	2b08      	cmp	r3, #8
 80039e0:	d105      	bne.n	80039ee <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80039e2:	4b4a      	ldr	r3, [pc, #296]	@ (8003b0c <HAL_RCC_OscConfig+0x274>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00b      	beq.n	8003a06 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039ee:	4b47      	ldr	r3, [pc, #284]	@ (8003b0c <HAL_RCC_OscConfig+0x274>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80039f6:	2b0c      	cmp	r3, #12
 80039f8:	d11c      	bne.n	8003a34 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039fa:	4b44      	ldr	r3, [pc, #272]	@ (8003b0c <HAL_RCC_OscConfig+0x274>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d116      	bne.n	8003a34 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a06:	4b41      	ldr	r3, [pc, #260]	@ (8003b0c <HAL_RCC_OscConfig+0x274>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d005      	beq.n	8003a1e <HAL_RCC_OscConfig+0x186>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d001      	beq.n	8003a1e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e1d3      	b.n	8003dc6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a1e:	4b3b      	ldr	r3, [pc, #236]	@ (8003b0c <HAL_RCC_OscConfig+0x274>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	4937      	ldr	r1, [pc, #220]	@ (8003b0c <HAL_RCC_OscConfig+0x274>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a32:	e03a      	b.n	8003aaa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d020      	beq.n	8003a7e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a3c:	4b34      	ldr	r3, [pc, #208]	@ (8003b10 <HAL_RCC_OscConfig+0x278>)
 8003a3e:	2201      	movs	r2, #1
 8003a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a42:	f7fe f97d 	bl	8001d40 <HAL_GetTick>
 8003a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a48:	e008      	b.n	8003a5c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a4a:	f7fe f979 	bl	8001d40 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e1b4      	b.n	8003dc6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a5c:	4b2b      	ldr	r3, [pc, #172]	@ (8003b0c <HAL_RCC_OscConfig+0x274>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0f0      	beq.n	8003a4a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a68:	4b28      	ldr	r3, [pc, #160]	@ (8003b0c <HAL_RCC_OscConfig+0x274>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	4925      	ldr	r1, [pc, #148]	@ (8003b0c <HAL_RCC_OscConfig+0x274>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	600b      	str	r3, [r1, #0]
 8003a7c:	e015      	b.n	8003aaa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a7e:	4b24      	ldr	r3, [pc, #144]	@ (8003b10 <HAL_RCC_OscConfig+0x278>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a84:	f7fe f95c 	bl	8001d40 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a8c:	f7fe f958 	bl	8001d40 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e193      	b.n	8003dc6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a9e:	4b1b      	ldr	r3, [pc, #108]	@ (8003b0c <HAL_RCC_OscConfig+0x274>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1f0      	bne.n	8003a8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d036      	beq.n	8003b24 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d016      	beq.n	8003aec <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003abe:	4b15      	ldr	r3, [pc, #84]	@ (8003b14 <HAL_RCC_OscConfig+0x27c>)
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac4:	f7fe f93c 	bl	8001d40 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003acc:	f7fe f938 	bl	8001d40 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e173      	b.n	8003dc6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ade:	4b0b      	ldr	r3, [pc, #44]	@ (8003b0c <HAL_RCC_OscConfig+0x274>)
 8003ae0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0f0      	beq.n	8003acc <HAL_RCC_OscConfig+0x234>
 8003aea:	e01b      	b.n	8003b24 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003aec:	4b09      	ldr	r3, [pc, #36]	@ (8003b14 <HAL_RCC_OscConfig+0x27c>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af2:	f7fe f925 	bl	8001d40 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003af8:	e00e      	b.n	8003b18 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003afa:	f7fe f921 	bl	8001d40 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d907      	bls.n	8003b18 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e15c      	b.n	8003dc6 <HAL_RCC_OscConfig+0x52e>
 8003b0c:	40023800 	.word	0x40023800
 8003b10:	42470000 	.word	0x42470000
 8003b14:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b18:	4b8a      	ldr	r3, [pc, #552]	@ (8003d44 <HAL_RCC_OscConfig+0x4ac>)
 8003b1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1ea      	bne.n	8003afa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 8097 	beq.w	8003c60 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b32:	2300      	movs	r3, #0
 8003b34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b36:	4b83      	ldr	r3, [pc, #524]	@ (8003d44 <HAL_RCC_OscConfig+0x4ac>)
 8003b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10f      	bne.n	8003b62 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b42:	2300      	movs	r3, #0
 8003b44:	60bb      	str	r3, [r7, #8]
 8003b46:	4b7f      	ldr	r3, [pc, #508]	@ (8003d44 <HAL_RCC_OscConfig+0x4ac>)
 8003b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4a:	4a7e      	ldr	r2, [pc, #504]	@ (8003d44 <HAL_RCC_OscConfig+0x4ac>)
 8003b4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b50:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b52:	4b7c      	ldr	r3, [pc, #496]	@ (8003d44 <HAL_RCC_OscConfig+0x4ac>)
 8003b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b5a:	60bb      	str	r3, [r7, #8]
 8003b5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b62:	4b79      	ldr	r3, [pc, #484]	@ (8003d48 <HAL_RCC_OscConfig+0x4b0>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d118      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b6e:	4b76      	ldr	r3, [pc, #472]	@ (8003d48 <HAL_RCC_OscConfig+0x4b0>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a75      	ldr	r2, [pc, #468]	@ (8003d48 <HAL_RCC_OscConfig+0x4b0>)
 8003b74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b7a:	f7fe f8e1 	bl	8001d40 <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b82:	f7fe f8dd 	bl	8001d40 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e118      	b.n	8003dc6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b94:	4b6c      	ldr	r3, [pc, #432]	@ (8003d48 <HAL_RCC_OscConfig+0x4b0>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0f0      	beq.n	8003b82 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d106      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x31e>
 8003ba8:	4b66      	ldr	r3, [pc, #408]	@ (8003d44 <HAL_RCC_OscConfig+0x4ac>)
 8003baa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bac:	4a65      	ldr	r2, [pc, #404]	@ (8003d44 <HAL_RCC_OscConfig+0x4ac>)
 8003bae:	f043 0301 	orr.w	r3, r3, #1
 8003bb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bb4:	e01c      	b.n	8003bf0 <HAL_RCC_OscConfig+0x358>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	2b05      	cmp	r3, #5
 8003bbc:	d10c      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x340>
 8003bbe:	4b61      	ldr	r3, [pc, #388]	@ (8003d44 <HAL_RCC_OscConfig+0x4ac>)
 8003bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc2:	4a60      	ldr	r2, [pc, #384]	@ (8003d44 <HAL_RCC_OscConfig+0x4ac>)
 8003bc4:	f043 0304 	orr.w	r3, r3, #4
 8003bc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bca:	4b5e      	ldr	r3, [pc, #376]	@ (8003d44 <HAL_RCC_OscConfig+0x4ac>)
 8003bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bce:	4a5d      	ldr	r2, [pc, #372]	@ (8003d44 <HAL_RCC_OscConfig+0x4ac>)
 8003bd0:	f043 0301 	orr.w	r3, r3, #1
 8003bd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bd6:	e00b      	b.n	8003bf0 <HAL_RCC_OscConfig+0x358>
 8003bd8:	4b5a      	ldr	r3, [pc, #360]	@ (8003d44 <HAL_RCC_OscConfig+0x4ac>)
 8003bda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bdc:	4a59      	ldr	r2, [pc, #356]	@ (8003d44 <HAL_RCC_OscConfig+0x4ac>)
 8003bde:	f023 0301 	bic.w	r3, r3, #1
 8003be2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003be4:	4b57      	ldr	r3, [pc, #348]	@ (8003d44 <HAL_RCC_OscConfig+0x4ac>)
 8003be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be8:	4a56      	ldr	r2, [pc, #344]	@ (8003d44 <HAL_RCC_OscConfig+0x4ac>)
 8003bea:	f023 0304 	bic.w	r3, r3, #4
 8003bee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d015      	beq.n	8003c24 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf8:	f7fe f8a2 	bl	8001d40 <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bfe:	e00a      	b.n	8003c16 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c00:	f7fe f89e 	bl	8001d40 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e0d7      	b.n	8003dc6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c16:	4b4b      	ldr	r3, [pc, #300]	@ (8003d44 <HAL_RCC_OscConfig+0x4ac>)
 8003c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0ee      	beq.n	8003c00 <HAL_RCC_OscConfig+0x368>
 8003c22:	e014      	b.n	8003c4e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c24:	f7fe f88c 	bl	8001d40 <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c2a:	e00a      	b.n	8003c42 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c2c:	f7fe f888 	bl	8001d40 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e0c1      	b.n	8003dc6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c42:	4b40      	ldr	r3, [pc, #256]	@ (8003d44 <HAL_RCC_OscConfig+0x4ac>)
 8003c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1ee      	bne.n	8003c2c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c4e:	7dfb      	ldrb	r3, [r7, #23]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d105      	bne.n	8003c60 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c54:	4b3b      	ldr	r3, [pc, #236]	@ (8003d44 <HAL_RCC_OscConfig+0x4ac>)
 8003c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c58:	4a3a      	ldr	r2, [pc, #232]	@ (8003d44 <HAL_RCC_OscConfig+0x4ac>)
 8003c5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c5e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 80ad 	beq.w	8003dc4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c6a:	4b36      	ldr	r3, [pc, #216]	@ (8003d44 <HAL_RCC_OscConfig+0x4ac>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 030c 	and.w	r3, r3, #12
 8003c72:	2b08      	cmp	r3, #8
 8003c74:	d060      	beq.n	8003d38 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d145      	bne.n	8003d0a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c7e:	4b33      	ldr	r3, [pc, #204]	@ (8003d4c <HAL_RCC_OscConfig+0x4b4>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c84:	f7fe f85c 	bl	8001d40 <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c8c:	f7fe f858 	bl	8001d40 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e093      	b.n	8003dc6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c9e:	4b29      	ldr	r3, [pc, #164]	@ (8003d44 <HAL_RCC_OscConfig+0x4ac>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1f0      	bne.n	8003c8c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69da      	ldr	r2, [r3, #28]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb8:	019b      	lsls	r3, r3, #6
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc0:	085b      	lsrs	r3, r3, #1
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	041b      	lsls	r3, r3, #16
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ccc:	061b      	lsls	r3, r3, #24
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd4:	071b      	lsls	r3, r3, #28
 8003cd6:	491b      	ldr	r1, [pc, #108]	@ (8003d44 <HAL_RCC_OscConfig+0x4ac>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8003d4c <HAL_RCC_OscConfig+0x4b4>)
 8003cde:	2201      	movs	r2, #1
 8003ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce2:	f7fe f82d 	bl	8001d40 <HAL_GetTick>
 8003ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ce8:	e008      	b.n	8003cfc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cea:	f7fe f829 	bl	8001d40 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e064      	b.n	8003dc6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cfc:	4b11      	ldr	r3, [pc, #68]	@ (8003d44 <HAL_RCC_OscConfig+0x4ac>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d0f0      	beq.n	8003cea <HAL_RCC_OscConfig+0x452>
 8003d08:	e05c      	b.n	8003dc4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d0a:	4b10      	ldr	r3, [pc, #64]	@ (8003d4c <HAL_RCC_OscConfig+0x4b4>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d10:	f7fe f816 	bl	8001d40 <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d18:	f7fe f812 	bl	8001d40 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e04d      	b.n	8003dc6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d2a:	4b06      	ldr	r3, [pc, #24]	@ (8003d44 <HAL_RCC_OscConfig+0x4ac>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1f0      	bne.n	8003d18 <HAL_RCC_OscConfig+0x480>
 8003d36:	e045      	b.n	8003dc4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d107      	bne.n	8003d50 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e040      	b.n	8003dc6 <HAL_RCC_OscConfig+0x52e>
 8003d44:	40023800 	.word	0x40023800
 8003d48:	40007000 	.word	0x40007000
 8003d4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d50:	4b1f      	ldr	r3, [pc, #124]	@ (8003dd0 <HAL_RCC_OscConfig+0x538>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d030      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d129      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d122      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d80:	4013      	ands	r3, r2
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d119      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d96:	085b      	lsrs	r3, r3, #1
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d10f      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003daa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d107      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d001      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e000      	b.n	8003dc6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3718      	adds	r7, #24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	40023800 	.word	0x40023800

08003dd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e041      	b.n	8003e6a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d106      	bne.n	8003e00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7fd fd96 	bl	800192c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3304      	adds	r3, #4
 8003e10:	4619      	mov	r1, r3
 8003e12:	4610      	mov	r0, r2
 8003e14:	f000 fa28 	bl	8004268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
	...

08003e74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d109      	bne.n	8003e98 <HAL_TIM_PWM_Start+0x24>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	bf14      	ite	ne
 8003e90:	2301      	movne	r3, #1
 8003e92:	2300      	moveq	r3, #0
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	e022      	b.n	8003ede <HAL_TIM_PWM_Start+0x6a>
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	d109      	bne.n	8003eb2 <HAL_TIM_PWM_Start+0x3e>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	bf14      	ite	ne
 8003eaa:	2301      	movne	r3, #1
 8003eac:	2300      	moveq	r3, #0
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	e015      	b.n	8003ede <HAL_TIM_PWM_Start+0x6a>
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2b08      	cmp	r3, #8
 8003eb6:	d109      	bne.n	8003ecc <HAL_TIM_PWM_Start+0x58>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	bf14      	ite	ne
 8003ec4:	2301      	movne	r3, #1
 8003ec6:	2300      	moveq	r3, #0
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	e008      	b.n	8003ede <HAL_TIM_PWM_Start+0x6a>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	bf14      	ite	ne
 8003ed8:	2301      	movne	r3, #1
 8003eda:	2300      	moveq	r3, #0
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e07c      	b.n	8003fe0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d104      	bne.n	8003ef6 <HAL_TIM_PWM_Start+0x82>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2202      	movs	r2, #2
 8003ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ef4:	e013      	b.n	8003f1e <HAL_TIM_PWM_Start+0xaa>
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d104      	bne.n	8003f06 <HAL_TIM_PWM_Start+0x92>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2202      	movs	r2, #2
 8003f00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f04:	e00b      	b.n	8003f1e <HAL_TIM_PWM_Start+0xaa>
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	d104      	bne.n	8003f16 <HAL_TIM_PWM_Start+0xa2>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f14:	e003      	b.n	8003f1e <HAL_TIM_PWM_Start+0xaa>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2202      	movs	r2, #2
 8003f1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2201      	movs	r2, #1
 8003f24:	6839      	ldr	r1, [r7, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 fbfa 	bl	8004720 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a2d      	ldr	r2, [pc, #180]	@ (8003fe8 <HAL_TIM_PWM_Start+0x174>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d004      	beq.n	8003f40 <HAL_TIM_PWM_Start+0xcc>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a2c      	ldr	r2, [pc, #176]	@ (8003fec <HAL_TIM_PWM_Start+0x178>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d101      	bne.n	8003f44 <HAL_TIM_PWM_Start+0xd0>
 8003f40:	2301      	movs	r3, #1
 8003f42:	e000      	b.n	8003f46 <HAL_TIM_PWM_Start+0xd2>
 8003f44:	2300      	movs	r3, #0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d007      	beq.n	8003f5a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f58:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a22      	ldr	r2, [pc, #136]	@ (8003fe8 <HAL_TIM_PWM_Start+0x174>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d022      	beq.n	8003faa <HAL_TIM_PWM_Start+0x136>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f6c:	d01d      	beq.n	8003faa <HAL_TIM_PWM_Start+0x136>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a1f      	ldr	r2, [pc, #124]	@ (8003ff0 <HAL_TIM_PWM_Start+0x17c>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d018      	beq.n	8003faa <HAL_TIM_PWM_Start+0x136>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ff4 <HAL_TIM_PWM_Start+0x180>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d013      	beq.n	8003faa <HAL_TIM_PWM_Start+0x136>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a1c      	ldr	r2, [pc, #112]	@ (8003ff8 <HAL_TIM_PWM_Start+0x184>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d00e      	beq.n	8003faa <HAL_TIM_PWM_Start+0x136>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a16      	ldr	r2, [pc, #88]	@ (8003fec <HAL_TIM_PWM_Start+0x178>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d009      	beq.n	8003faa <HAL_TIM_PWM_Start+0x136>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a18      	ldr	r2, [pc, #96]	@ (8003ffc <HAL_TIM_PWM_Start+0x188>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d004      	beq.n	8003faa <HAL_TIM_PWM_Start+0x136>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a16      	ldr	r2, [pc, #88]	@ (8004000 <HAL_TIM_PWM_Start+0x18c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d111      	bne.n	8003fce <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f003 0307 	and.w	r3, r3, #7
 8003fb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2b06      	cmp	r3, #6
 8003fba:	d010      	beq.n	8003fde <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f042 0201 	orr.w	r2, r2, #1
 8003fca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fcc:	e007      	b.n	8003fde <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f042 0201 	orr.w	r2, r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	40010000 	.word	0x40010000
 8003fec:	40010400 	.word	0x40010400
 8003ff0:	40000400 	.word	0x40000400
 8003ff4:	40000800 	.word	0x40000800
 8003ff8:	40000c00 	.word	0x40000c00
 8003ffc:	40014000 	.word	0x40014000
 8004000:	40001800 	.word	0x40001800

08004004 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2200      	movs	r2, #0
 8004014:	6839      	ldr	r1, [r7, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f000 fb82 	bl	8004720 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a2e      	ldr	r2, [pc, #184]	@ (80040dc <HAL_TIM_PWM_Stop+0xd8>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d004      	beq.n	8004030 <HAL_TIM_PWM_Stop+0x2c>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a2d      	ldr	r2, [pc, #180]	@ (80040e0 <HAL_TIM_PWM_Stop+0xdc>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d101      	bne.n	8004034 <HAL_TIM_PWM_Stop+0x30>
 8004030:	2301      	movs	r3, #1
 8004032:	e000      	b.n	8004036 <HAL_TIM_PWM_Stop+0x32>
 8004034:	2300      	movs	r3, #0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d017      	beq.n	800406a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	6a1a      	ldr	r2, [r3, #32]
 8004040:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004044:	4013      	ands	r3, r2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10f      	bne.n	800406a <HAL_TIM_PWM_Stop+0x66>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6a1a      	ldr	r2, [r3, #32]
 8004050:	f240 4344 	movw	r3, #1092	@ 0x444
 8004054:	4013      	ands	r3, r2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d107      	bne.n	800406a <HAL_TIM_PWM_Stop+0x66>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004068:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	6a1a      	ldr	r2, [r3, #32]
 8004070:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004074:	4013      	ands	r3, r2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10f      	bne.n	800409a <HAL_TIM_PWM_Stop+0x96>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6a1a      	ldr	r2, [r3, #32]
 8004080:	f240 4344 	movw	r3, #1092	@ 0x444
 8004084:	4013      	ands	r3, r2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d107      	bne.n	800409a <HAL_TIM_PWM_Stop+0x96>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 0201 	bic.w	r2, r2, #1
 8004098:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d104      	bne.n	80040aa <HAL_TIM_PWM_Stop+0xa6>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040a8:	e013      	b.n	80040d2 <HAL_TIM_PWM_Stop+0xce>
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b04      	cmp	r3, #4
 80040ae:	d104      	bne.n	80040ba <HAL_TIM_PWM_Stop+0xb6>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040b8:	e00b      	b.n	80040d2 <HAL_TIM_PWM_Stop+0xce>
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d104      	bne.n	80040ca <HAL_TIM_PWM_Stop+0xc6>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040c8:	e003      	b.n	80040d2 <HAL_TIM_PWM_Stop+0xce>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3708      	adds	r7, #8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	40010000 	.word	0x40010000
 80040e0:	40010400 	.word	0x40010400

080040e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040f0:	2300      	movs	r3, #0
 80040f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d101      	bne.n	8004102 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040fe:	2302      	movs	r3, #2
 8004100:	e0ae      	b.n	8004260 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b0c      	cmp	r3, #12
 800410e:	f200 809f 	bhi.w	8004250 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004112:	a201      	add	r2, pc, #4	@ (adr r2, 8004118 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004118:	0800414d 	.word	0x0800414d
 800411c:	08004251 	.word	0x08004251
 8004120:	08004251 	.word	0x08004251
 8004124:	08004251 	.word	0x08004251
 8004128:	0800418d 	.word	0x0800418d
 800412c:	08004251 	.word	0x08004251
 8004130:	08004251 	.word	0x08004251
 8004134:	08004251 	.word	0x08004251
 8004138:	080041cf 	.word	0x080041cf
 800413c:	08004251 	.word	0x08004251
 8004140:	08004251 	.word	0x08004251
 8004144:	08004251 	.word	0x08004251
 8004148:	0800420f 	.word	0x0800420f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68b9      	ldr	r1, [r7, #8]
 8004152:	4618      	mov	r0, r3
 8004154:	f000 f934 	bl	80043c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	699a      	ldr	r2, [r3, #24]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f042 0208 	orr.w	r2, r2, #8
 8004166:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	699a      	ldr	r2, [r3, #24]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 0204 	bic.w	r2, r2, #4
 8004176:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6999      	ldr	r1, [r3, #24]
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	691a      	ldr	r2, [r3, #16]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	619a      	str	r2, [r3, #24]
      break;
 800418a:	e064      	b.n	8004256 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68b9      	ldr	r1, [r7, #8]
 8004192:	4618      	mov	r0, r3
 8004194:	f000 f984 	bl	80044a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	699a      	ldr	r2, [r3, #24]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	699a      	ldr	r2, [r3, #24]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	6999      	ldr	r1, [r3, #24]
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	021a      	lsls	r2, r3, #8
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	619a      	str	r2, [r3, #24]
      break;
 80041cc:	e043      	b.n	8004256 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68b9      	ldr	r1, [r7, #8]
 80041d4:	4618      	mov	r0, r3
 80041d6:	f000 f9d9 	bl	800458c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	69da      	ldr	r2, [r3, #28]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f042 0208 	orr.w	r2, r2, #8
 80041e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	69da      	ldr	r2, [r3, #28]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0204 	bic.w	r2, r2, #4
 80041f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	69d9      	ldr	r1, [r3, #28]
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	691a      	ldr	r2, [r3, #16]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	430a      	orrs	r2, r1
 800420a:	61da      	str	r2, [r3, #28]
      break;
 800420c:	e023      	b.n	8004256 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68b9      	ldr	r1, [r7, #8]
 8004214:	4618      	mov	r0, r3
 8004216:	f000 fa2d 	bl	8004674 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	69da      	ldr	r2, [r3, #28]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004228:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	69da      	ldr	r2, [r3, #28]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004238:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	69d9      	ldr	r1, [r3, #28]
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	021a      	lsls	r2, r3, #8
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	430a      	orrs	r2, r1
 800424c:	61da      	str	r2, [r3, #28]
      break;
 800424e:	e002      	b.n	8004256 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	75fb      	strb	r3, [r7, #23]
      break;
 8004254:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800425e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004260:	4618      	mov	r0, r3
 8004262:	3718      	adds	r7, #24
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a46      	ldr	r2, [pc, #280]	@ (8004394 <TIM_Base_SetConfig+0x12c>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d013      	beq.n	80042a8 <TIM_Base_SetConfig+0x40>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004286:	d00f      	beq.n	80042a8 <TIM_Base_SetConfig+0x40>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a43      	ldr	r2, [pc, #268]	@ (8004398 <TIM_Base_SetConfig+0x130>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d00b      	beq.n	80042a8 <TIM_Base_SetConfig+0x40>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a42      	ldr	r2, [pc, #264]	@ (800439c <TIM_Base_SetConfig+0x134>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d007      	beq.n	80042a8 <TIM_Base_SetConfig+0x40>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a41      	ldr	r2, [pc, #260]	@ (80043a0 <TIM_Base_SetConfig+0x138>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d003      	beq.n	80042a8 <TIM_Base_SetConfig+0x40>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a40      	ldr	r2, [pc, #256]	@ (80043a4 <TIM_Base_SetConfig+0x13c>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d108      	bne.n	80042ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a35      	ldr	r2, [pc, #212]	@ (8004394 <TIM_Base_SetConfig+0x12c>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d02b      	beq.n	800431a <TIM_Base_SetConfig+0xb2>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042c8:	d027      	beq.n	800431a <TIM_Base_SetConfig+0xb2>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a32      	ldr	r2, [pc, #200]	@ (8004398 <TIM_Base_SetConfig+0x130>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d023      	beq.n	800431a <TIM_Base_SetConfig+0xb2>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a31      	ldr	r2, [pc, #196]	@ (800439c <TIM_Base_SetConfig+0x134>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d01f      	beq.n	800431a <TIM_Base_SetConfig+0xb2>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a30      	ldr	r2, [pc, #192]	@ (80043a0 <TIM_Base_SetConfig+0x138>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d01b      	beq.n	800431a <TIM_Base_SetConfig+0xb2>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a2f      	ldr	r2, [pc, #188]	@ (80043a4 <TIM_Base_SetConfig+0x13c>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d017      	beq.n	800431a <TIM_Base_SetConfig+0xb2>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a2e      	ldr	r2, [pc, #184]	@ (80043a8 <TIM_Base_SetConfig+0x140>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d013      	beq.n	800431a <TIM_Base_SetConfig+0xb2>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a2d      	ldr	r2, [pc, #180]	@ (80043ac <TIM_Base_SetConfig+0x144>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d00f      	beq.n	800431a <TIM_Base_SetConfig+0xb2>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a2c      	ldr	r2, [pc, #176]	@ (80043b0 <TIM_Base_SetConfig+0x148>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d00b      	beq.n	800431a <TIM_Base_SetConfig+0xb2>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a2b      	ldr	r2, [pc, #172]	@ (80043b4 <TIM_Base_SetConfig+0x14c>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d007      	beq.n	800431a <TIM_Base_SetConfig+0xb2>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a2a      	ldr	r2, [pc, #168]	@ (80043b8 <TIM_Base_SetConfig+0x150>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d003      	beq.n	800431a <TIM_Base_SetConfig+0xb2>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a29      	ldr	r2, [pc, #164]	@ (80043bc <TIM_Base_SetConfig+0x154>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d108      	bne.n	800432c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004320:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	4313      	orrs	r3, r2
 800432a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	4313      	orrs	r3, r2
 8004338:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a10      	ldr	r2, [pc, #64]	@ (8004394 <TIM_Base_SetConfig+0x12c>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d003      	beq.n	8004360 <TIM_Base_SetConfig+0xf8>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a12      	ldr	r2, [pc, #72]	@ (80043a4 <TIM_Base_SetConfig+0x13c>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d103      	bne.n	8004368 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	691a      	ldr	r2, [r3, #16]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b01      	cmp	r3, #1
 8004378:	d105      	bne.n	8004386 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	f023 0201 	bic.w	r2, r3, #1
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	611a      	str	r2, [r3, #16]
  }
}
 8004386:	bf00      	nop
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	40010000 	.word	0x40010000
 8004398:	40000400 	.word	0x40000400
 800439c:	40000800 	.word	0x40000800
 80043a0:	40000c00 	.word	0x40000c00
 80043a4:	40010400 	.word	0x40010400
 80043a8:	40014000 	.word	0x40014000
 80043ac:	40014400 	.word	0x40014400
 80043b0:	40014800 	.word	0x40014800
 80043b4:	40001800 	.word	0x40001800
 80043b8:	40001c00 	.word	0x40001c00
 80043bc:	40002000 	.word	0x40002000

080043c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b087      	sub	sp, #28
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	f023 0201 	bic.w	r2, r3, #1
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 0303 	bic.w	r3, r3, #3
 80043f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	4313      	orrs	r3, r2
 8004400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f023 0302 	bic.w	r3, r3, #2
 8004408:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	4313      	orrs	r3, r2
 8004412:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a20      	ldr	r2, [pc, #128]	@ (8004498 <TIM_OC1_SetConfig+0xd8>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d003      	beq.n	8004424 <TIM_OC1_SetConfig+0x64>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a1f      	ldr	r2, [pc, #124]	@ (800449c <TIM_OC1_SetConfig+0xdc>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d10c      	bne.n	800443e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	f023 0308 	bic.w	r3, r3, #8
 800442a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	4313      	orrs	r3, r2
 8004434:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f023 0304 	bic.w	r3, r3, #4
 800443c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a15      	ldr	r2, [pc, #84]	@ (8004498 <TIM_OC1_SetConfig+0xd8>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d003      	beq.n	800444e <TIM_OC1_SetConfig+0x8e>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a14      	ldr	r2, [pc, #80]	@ (800449c <TIM_OC1_SetConfig+0xdc>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d111      	bne.n	8004472 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004454:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800445c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	4313      	orrs	r3, r2
 8004466:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	4313      	orrs	r3, r2
 8004470:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	621a      	str	r2, [r3, #32]
}
 800448c:	bf00      	nop
 800448e:	371c      	adds	r7, #28
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr
 8004498:	40010000 	.word	0x40010000
 800449c:	40010400 	.word	0x40010400

080044a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b087      	sub	sp, #28
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	f023 0210 	bic.w	r2, r3, #16
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	021b      	lsls	r3, r3, #8
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f023 0320 	bic.w	r3, r3, #32
 80044ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	011b      	lsls	r3, r3, #4
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a22      	ldr	r2, [pc, #136]	@ (8004584 <TIM_OC2_SetConfig+0xe4>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d003      	beq.n	8004508 <TIM_OC2_SetConfig+0x68>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a21      	ldr	r2, [pc, #132]	@ (8004588 <TIM_OC2_SetConfig+0xe8>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d10d      	bne.n	8004524 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800450e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	011b      	lsls	r3, r3, #4
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	4313      	orrs	r3, r2
 800451a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004522:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a17      	ldr	r2, [pc, #92]	@ (8004584 <TIM_OC2_SetConfig+0xe4>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d003      	beq.n	8004534 <TIM_OC2_SetConfig+0x94>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a16      	ldr	r2, [pc, #88]	@ (8004588 <TIM_OC2_SetConfig+0xe8>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d113      	bne.n	800455c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800453a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004542:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	4313      	orrs	r3, r2
 800454e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	4313      	orrs	r3, r2
 800455a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	621a      	str	r2, [r3, #32]
}
 8004576:	bf00      	nop
 8004578:	371c      	adds	r7, #28
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	40010000 	.word	0x40010000
 8004588:	40010400 	.word	0x40010400

0800458c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800458c:	b480      	push	{r7}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f023 0303 	bic.w	r3, r3, #3
 80045c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80045d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	021b      	lsls	r3, r3, #8
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	4313      	orrs	r3, r2
 80045e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a21      	ldr	r2, [pc, #132]	@ (800466c <TIM_OC3_SetConfig+0xe0>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d003      	beq.n	80045f2 <TIM_OC3_SetConfig+0x66>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a20      	ldr	r2, [pc, #128]	@ (8004670 <TIM_OC3_SetConfig+0xe4>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d10d      	bne.n	800460e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80045f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	021b      	lsls	r3, r3, #8
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	4313      	orrs	r3, r2
 8004604:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800460c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a16      	ldr	r2, [pc, #88]	@ (800466c <TIM_OC3_SetConfig+0xe0>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d003      	beq.n	800461e <TIM_OC3_SetConfig+0x92>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a15      	ldr	r2, [pc, #84]	@ (8004670 <TIM_OC3_SetConfig+0xe4>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d113      	bne.n	8004646 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004624:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800462c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	011b      	lsls	r3, r3, #4
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	4313      	orrs	r3, r2
 8004638:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	011b      	lsls	r3, r3, #4
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	4313      	orrs	r3, r2
 8004644:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	621a      	str	r2, [r3, #32]
}
 8004660:	bf00      	nop
 8004662:	371c      	adds	r7, #28
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	40010000 	.word	0x40010000
 8004670:	40010400 	.word	0x40010400

08004674 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004674:	b480      	push	{r7}
 8004676:	b087      	sub	sp, #28
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	021b      	lsls	r3, r3, #8
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80046be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	031b      	lsls	r3, r3, #12
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a12      	ldr	r2, [pc, #72]	@ (8004718 <TIM_OC4_SetConfig+0xa4>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d003      	beq.n	80046dc <TIM_OC4_SetConfig+0x68>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a11      	ldr	r2, [pc, #68]	@ (800471c <TIM_OC4_SetConfig+0xa8>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d109      	bne.n	80046f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	019b      	lsls	r3, r3, #6
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685a      	ldr	r2, [r3, #4]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	621a      	str	r2, [r3, #32]
}
 800470a:	bf00      	nop
 800470c:	371c      	adds	r7, #28
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	40010000 	.word	0x40010000
 800471c:	40010400 	.word	0x40010400

08004720 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004720:	b480      	push	{r7}
 8004722:	b087      	sub	sp, #28
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	f003 031f 	and.w	r3, r3, #31
 8004732:	2201      	movs	r2, #1
 8004734:	fa02 f303 	lsl.w	r3, r2, r3
 8004738:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6a1a      	ldr	r2, [r3, #32]
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	43db      	mvns	r3, r3
 8004742:	401a      	ands	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6a1a      	ldr	r2, [r3, #32]
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	f003 031f 	and.w	r3, r3, #31
 8004752:	6879      	ldr	r1, [r7, #4]
 8004754:	fa01 f303 	lsl.w	r3, r1, r3
 8004758:	431a      	orrs	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	621a      	str	r2, [r3, #32]
}
 800475e:	bf00      	nop
 8004760:	371c      	adds	r7, #28
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
	...

0800476c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800477c:	2b01      	cmp	r3, #1
 800477e:	d101      	bne.n	8004784 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004780:	2302      	movs	r3, #2
 8004782:	e05a      	b.n	800483a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2202      	movs	r2, #2
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a21      	ldr	r2, [pc, #132]	@ (8004848 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d022      	beq.n	800480e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047d0:	d01d      	beq.n	800480e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a1d      	ldr	r2, [pc, #116]	@ (800484c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d018      	beq.n	800480e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a1b      	ldr	r2, [pc, #108]	@ (8004850 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d013      	beq.n	800480e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a1a      	ldr	r2, [pc, #104]	@ (8004854 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d00e      	beq.n	800480e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a18      	ldr	r2, [pc, #96]	@ (8004858 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d009      	beq.n	800480e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a17      	ldr	r2, [pc, #92]	@ (800485c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d004      	beq.n	800480e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a15      	ldr	r2, [pc, #84]	@ (8004860 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d10c      	bne.n	8004828 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004814:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	4313      	orrs	r3, r2
 800481e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	40010000 	.word	0x40010000
 800484c:	40000400 	.word	0x40000400
 8004850:	40000800 	.word	0x40000800
 8004854:	40000c00 	.word	0x40000c00
 8004858:	40010400 	.word	0x40010400
 800485c:	40014000 	.word	0x40014000
 8004860:	40001800 	.word	0x40001800

08004864 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e042      	b.n	80048fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d106      	bne.n	8004890 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7fd f8e8 	bl	8001a60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2224      	movs	r2, #36	@ 0x24
 8004894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68da      	ldr	r2, [r3, #12]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 f82b 	bl	8004904 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	691a      	ldr	r2, [r3, #16]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	695a      	ldr	r2, [r3, #20]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80048cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68da      	ldr	r2, [r3, #12]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2220      	movs	r2, #32
 80048e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2220      	movs	r2, #32
 80048f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3708      	adds	r7, #8
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004904:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004908:	b0c0      	sub	sp, #256	@ 0x100
 800490a:	af00      	add	r7, sp, #0
 800490c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800491c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004920:	68d9      	ldr	r1, [r3, #12]
 8004922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	ea40 0301 	orr.w	r3, r0, r1
 800492c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800492e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004932:	689a      	ldr	r2, [r3, #8]
 8004934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	431a      	orrs	r2, r3
 800493c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	431a      	orrs	r2, r3
 8004944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	4313      	orrs	r3, r2
 800494c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800495c:	f021 010c 	bic.w	r1, r1, #12
 8004960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800496a:	430b      	orrs	r3, r1
 800496c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800496e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800497a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800497e:	6999      	ldr	r1, [r3, #24]
 8004980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	ea40 0301 	orr.w	r3, r0, r1
 800498a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800498c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	4b8f      	ldr	r3, [pc, #572]	@ (8004bd0 <UART_SetConfig+0x2cc>)
 8004994:	429a      	cmp	r2, r3
 8004996:	d005      	beq.n	80049a4 <UART_SetConfig+0xa0>
 8004998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	4b8d      	ldr	r3, [pc, #564]	@ (8004bd4 <UART_SetConfig+0x2d0>)
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d104      	bne.n	80049ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049a4:	f7fe fdba 	bl	800351c <HAL_RCC_GetPCLK2Freq>
 80049a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80049ac:	e003      	b.n	80049b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049ae:	f7fe fda1 	bl	80034f4 <HAL_RCC_GetPCLK1Freq>
 80049b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ba:	69db      	ldr	r3, [r3, #28]
 80049bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049c0:	f040 810c 	bne.w	8004bdc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049c8:	2200      	movs	r2, #0
 80049ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80049ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80049d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80049d6:	4622      	mov	r2, r4
 80049d8:	462b      	mov	r3, r5
 80049da:	1891      	adds	r1, r2, r2
 80049dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80049de:	415b      	adcs	r3, r3
 80049e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80049e6:	4621      	mov	r1, r4
 80049e8:	eb12 0801 	adds.w	r8, r2, r1
 80049ec:	4629      	mov	r1, r5
 80049ee:	eb43 0901 	adc.w	r9, r3, r1
 80049f2:	f04f 0200 	mov.w	r2, #0
 80049f6:	f04f 0300 	mov.w	r3, #0
 80049fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a06:	4690      	mov	r8, r2
 8004a08:	4699      	mov	r9, r3
 8004a0a:	4623      	mov	r3, r4
 8004a0c:	eb18 0303 	adds.w	r3, r8, r3
 8004a10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004a14:	462b      	mov	r3, r5
 8004a16:	eb49 0303 	adc.w	r3, r9, r3
 8004a1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004a2a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004a2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004a32:	460b      	mov	r3, r1
 8004a34:	18db      	adds	r3, r3, r3
 8004a36:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a38:	4613      	mov	r3, r2
 8004a3a:	eb42 0303 	adc.w	r3, r2, r3
 8004a3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004a44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004a48:	f7fc f8a4 	bl	8000b94 <__aeabi_uldivmod>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	460b      	mov	r3, r1
 8004a50:	4b61      	ldr	r3, [pc, #388]	@ (8004bd8 <UART_SetConfig+0x2d4>)
 8004a52:	fba3 2302 	umull	r2, r3, r3, r2
 8004a56:	095b      	lsrs	r3, r3, #5
 8004a58:	011c      	lsls	r4, r3, #4
 8004a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a64:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004a68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004a6c:	4642      	mov	r2, r8
 8004a6e:	464b      	mov	r3, r9
 8004a70:	1891      	adds	r1, r2, r2
 8004a72:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004a74:	415b      	adcs	r3, r3
 8004a76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004a7c:	4641      	mov	r1, r8
 8004a7e:	eb12 0a01 	adds.w	sl, r2, r1
 8004a82:	4649      	mov	r1, r9
 8004a84:	eb43 0b01 	adc.w	fp, r3, r1
 8004a88:	f04f 0200 	mov.w	r2, #0
 8004a8c:	f04f 0300 	mov.w	r3, #0
 8004a90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a9c:	4692      	mov	sl, r2
 8004a9e:	469b      	mov	fp, r3
 8004aa0:	4643      	mov	r3, r8
 8004aa2:	eb1a 0303 	adds.w	r3, sl, r3
 8004aa6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004aaa:	464b      	mov	r3, r9
 8004aac:	eb4b 0303 	adc.w	r3, fp, r3
 8004ab0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ac0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004ac4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004ac8:	460b      	mov	r3, r1
 8004aca:	18db      	adds	r3, r3, r3
 8004acc:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ace:	4613      	mov	r3, r2
 8004ad0:	eb42 0303 	adc.w	r3, r2, r3
 8004ad4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ad6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004ada:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004ade:	f7fc f859 	bl	8000b94 <__aeabi_uldivmod>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	4611      	mov	r1, r2
 8004ae8:	4b3b      	ldr	r3, [pc, #236]	@ (8004bd8 <UART_SetConfig+0x2d4>)
 8004aea:	fba3 2301 	umull	r2, r3, r3, r1
 8004aee:	095b      	lsrs	r3, r3, #5
 8004af0:	2264      	movs	r2, #100	@ 0x64
 8004af2:	fb02 f303 	mul.w	r3, r2, r3
 8004af6:	1acb      	subs	r3, r1, r3
 8004af8:	00db      	lsls	r3, r3, #3
 8004afa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004afe:	4b36      	ldr	r3, [pc, #216]	@ (8004bd8 <UART_SetConfig+0x2d4>)
 8004b00:	fba3 2302 	umull	r2, r3, r3, r2
 8004b04:	095b      	lsrs	r3, r3, #5
 8004b06:	005b      	lsls	r3, r3, #1
 8004b08:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004b0c:	441c      	add	r4, r3
 8004b0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b12:	2200      	movs	r2, #0
 8004b14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b18:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004b1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004b20:	4642      	mov	r2, r8
 8004b22:	464b      	mov	r3, r9
 8004b24:	1891      	adds	r1, r2, r2
 8004b26:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004b28:	415b      	adcs	r3, r3
 8004b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004b30:	4641      	mov	r1, r8
 8004b32:	1851      	adds	r1, r2, r1
 8004b34:	6339      	str	r1, [r7, #48]	@ 0x30
 8004b36:	4649      	mov	r1, r9
 8004b38:	414b      	adcs	r3, r1
 8004b3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b3c:	f04f 0200 	mov.w	r2, #0
 8004b40:	f04f 0300 	mov.w	r3, #0
 8004b44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004b48:	4659      	mov	r1, fp
 8004b4a:	00cb      	lsls	r3, r1, #3
 8004b4c:	4651      	mov	r1, sl
 8004b4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b52:	4651      	mov	r1, sl
 8004b54:	00ca      	lsls	r2, r1, #3
 8004b56:	4610      	mov	r0, r2
 8004b58:	4619      	mov	r1, r3
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	4642      	mov	r2, r8
 8004b5e:	189b      	adds	r3, r3, r2
 8004b60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b64:	464b      	mov	r3, r9
 8004b66:	460a      	mov	r2, r1
 8004b68:	eb42 0303 	adc.w	r3, r2, r3
 8004b6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004b7c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004b80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004b84:	460b      	mov	r3, r1
 8004b86:	18db      	adds	r3, r3, r3
 8004b88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	eb42 0303 	adc.w	r3, r2, r3
 8004b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004b9a:	f7fb fffb 	bl	8000b94 <__aeabi_uldivmod>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8004bd8 <UART_SetConfig+0x2d4>)
 8004ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ba8:	095b      	lsrs	r3, r3, #5
 8004baa:	2164      	movs	r1, #100	@ 0x64
 8004bac:	fb01 f303 	mul.w	r3, r1, r3
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	3332      	adds	r3, #50	@ 0x32
 8004bb6:	4a08      	ldr	r2, [pc, #32]	@ (8004bd8 <UART_SetConfig+0x2d4>)
 8004bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bbc:	095b      	lsrs	r3, r3, #5
 8004bbe:	f003 0207 	and.w	r2, r3, #7
 8004bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4422      	add	r2, r4
 8004bca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004bcc:	e106      	b.n	8004ddc <UART_SetConfig+0x4d8>
 8004bce:	bf00      	nop
 8004bd0:	40011000 	.word	0x40011000
 8004bd4:	40011400 	.word	0x40011400
 8004bd8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004be0:	2200      	movs	r2, #0
 8004be2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004be6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004bea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004bee:	4642      	mov	r2, r8
 8004bf0:	464b      	mov	r3, r9
 8004bf2:	1891      	adds	r1, r2, r2
 8004bf4:	6239      	str	r1, [r7, #32]
 8004bf6:	415b      	adcs	r3, r3
 8004bf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bfa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bfe:	4641      	mov	r1, r8
 8004c00:	1854      	adds	r4, r2, r1
 8004c02:	4649      	mov	r1, r9
 8004c04:	eb43 0501 	adc.w	r5, r3, r1
 8004c08:	f04f 0200 	mov.w	r2, #0
 8004c0c:	f04f 0300 	mov.w	r3, #0
 8004c10:	00eb      	lsls	r3, r5, #3
 8004c12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c16:	00e2      	lsls	r2, r4, #3
 8004c18:	4614      	mov	r4, r2
 8004c1a:	461d      	mov	r5, r3
 8004c1c:	4643      	mov	r3, r8
 8004c1e:	18e3      	adds	r3, r4, r3
 8004c20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c24:	464b      	mov	r3, r9
 8004c26:	eb45 0303 	adc.w	r3, r5, r3
 8004c2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004c3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004c3e:	f04f 0200 	mov.w	r2, #0
 8004c42:	f04f 0300 	mov.w	r3, #0
 8004c46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004c4a:	4629      	mov	r1, r5
 8004c4c:	008b      	lsls	r3, r1, #2
 8004c4e:	4621      	mov	r1, r4
 8004c50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c54:	4621      	mov	r1, r4
 8004c56:	008a      	lsls	r2, r1, #2
 8004c58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004c5c:	f7fb ff9a 	bl	8000b94 <__aeabi_uldivmod>
 8004c60:	4602      	mov	r2, r0
 8004c62:	460b      	mov	r3, r1
 8004c64:	4b60      	ldr	r3, [pc, #384]	@ (8004de8 <UART_SetConfig+0x4e4>)
 8004c66:	fba3 2302 	umull	r2, r3, r3, r2
 8004c6a:	095b      	lsrs	r3, r3, #5
 8004c6c:	011c      	lsls	r4, r3, #4
 8004c6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c72:	2200      	movs	r2, #0
 8004c74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004c78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004c7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004c80:	4642      	mov	r2, r8
 8004c82:	464b      	mov	r3, r9
 8004c84:	1891      	adds	r1, r2, r2
 8004c86:	61b9      	str	r1, [r7, #24]
 8004c88:	415b      	adcs	r3, r3
 8004c8a:	61fb      	str	r3, [r7, #28]
 8004c8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c90:	4641      	mov	r1, r8
 8004c92:	1851      	adds	r1, r2, r1
 8004c94:	6139      	str	r1, [r7, #16]
 8004c96:	4649      	mov	r1, r9
 8004c98:	414b      	adcs	r3, r1
 8004c9a:	617b      	str	r3, [r7, #20]
 8004c9c:	f04f 0200 	mov.w	r2, #0
 8004ca0:	f04f 0300 	mov.w	r3, #0
 8004ca4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ca8:	4659      	mov	r1, fp
 8004caa:	00cb      	lsls	r3, r1, #3
 8004cac:	4651      	mov	r1, sl
 8004cae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cb2:	4651      	mov	r1, sl
 8004cb4:	00ca      	lsls	r2, r1, #3
 8004cb6:	4610      	mov	r0, r2
 8004cb8:	4619      	mov	r1, r3
 8004cba:	4603      	mov	r3, r0
 8004cbc:	4642      	mov	r2, r8
 8004cbe:	189b      	adds	r3, r3, r2
 8004cc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004cc4:	464b      	mov	r3, r9
 8004cc6:	460a      	mov	r2, r1
 8004cc8:	eb42 0303 	adc.w	r3, r2, r3
 8004ccc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004cda:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004cdc:	f04f 0200 	mov.w	r2, #0
 8004ce0:	f04f 0300 	mov.w	r3, #0
 8004ce4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004ce8:	4649      	mov	r1, r9
 8004cea:	008b      	lsls	r3, r1, #2
 8004cec:	4641      	mov	r1, r8
 8004cee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cf2:	4641      	mov	r1, r8
 8004cf4:	008a      	lsls	r2, r1, #2
 8004cf6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004cfa:	f7fb ff4b 	bl	8000b94 <__aeabi_uldivmod>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	460b      	mov	r3, r1
 8004d02:	4611      	mov	r1, r2
 8004d04:	4b38      	ldr	r3, [pc, #224]	@ (8004de8 <UART_SetConfig+0x4e4>)
 8004d06:	fba3 2301 	umull	r2, r3, r3, r1
 8004d0a:	095b      	lsrs	r3, r3, #5
 8004d0c:	2264      	movs	r2, #100	@ 0x64
 8004d0e:	fb02 f303 	mul.w	r3, r2, r3
 8004d12:	1acb      	subs	r3, r1, r3
 8004d14:	011b      	lsls	r3, r3, #4
 8004d16:	3332      	adds	r3, #50	@ 0x32
 8004d18:	4a33      	ldr	r2, [pc, #204]	@ (8004de8 <UART_SetConfig+0x4e4>)
 8004d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d1e:	095b      	lsrs	r3, r3, #5
 8004d20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d24:	441c      	add	r4, r3
 8004d26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d2e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004d30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004d34:	4642      	mov	r2, r8
 8004d36:	464b      	mov	r3, r9
 8004d38:	1891      	adds	r1, r2, r2
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	415b      	adcs	r3, r3
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d44:	4641      	mov	r1, r8
 8004d46:	1851      	adds	r1, r2, r1
 8004d48:	6039      	str	r1, [r7, #0]
 8004d4a:	4649      	mov	r1, r9
 8004d4c:	414b      	adcs	r3, r1
 8004d4e:	607b      	str	r3, [r7, #4]
 8004d50:	f04f 0200 	mov.w	r2, #0
 8004d54:	f04f 0300 	mov.w	r3, #0
 8004d58:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d5c:	4659      	mov	r1, fp
 8004d5e:	00cb      	lsls	r3, r1, #3
 8004d60:	4651      	mov	r1, sl
 8004d62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d66:	4651      	mov	r1, sl
 8004d68:	00ca      	lsls	r2, r1, #3
 8004d6a:	4610      	mov	r0, r2
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	4603      	mov	r3, r0
 8004d70:	4642      	mov	r2, r8
 8004d72:	189b      	adds	r3, r3, r2
 8004d74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d76:	464b      	mov	r3, r9
 8004d78:	460a      	mov	r2, r1
 8004d7a:	eb42 0303 	adc.w	r3, r2, r3
 8004d7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d8a:	667a      	str	r2, [r7, #100]	@ 0x64
 8004d8c:	f04f 0200 	mov.w	r2, #0
 8004d90:	f04f 0300 	mov.w	r3, #0
 8004d94:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004d98:	4649      	mov	r1, r9
 8004d9a:	008b      	lsls	r3, r1, #2
 8004d9c:	4641      	mov	r1, r8
 8004d9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004da2:	4641      	mov	r1, r8
 8004da4:	008a      	lsls	r2, r1, #2
 8004da6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004daa:	f7fb fef3 	bl	8000b94 <__aeabi_uldivmod>
 8004dae:	4602      	mov	r2, r0
 8004db0:	460b      	mov	r3, r1
 8004db2:	4b0d      	ldr	r3, [pc, #52]	@ (8004de8 <UART_SetConfig+0x4e4>)
 8004db4:	fba3 1302 	umull	r1, r3, r3, r2
 8004db8:	095b      	lsrs	r3, r3, #5
 8004dba:	2164      	movs	r1, #100	@ 0x64
 8004dbc:	fb01 f303 	mul.w	r3, r1, r3
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	011b      	lsls	r3, r3, #4
 8004dc4:	3332      	adds	r3, #50	@ 0x32
 8004dc6:	4a08      	ldr	r2, [pc, #32]	@ (8004de8 <UART_SetConfig+0x4e4>)
 8004dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dcc:	095b      	lsrs	r3, r3, #5
 8004dce:	f003 020f 	and.w	r2, r3, #15
 8004dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4422      	add	r2, r4
 8004dda:	609a      	str	r2, [r3, #8]
}
 8004ddc:	bf00      	nop
 8004dde:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004de2:	46bd      	mov	sp, r7
 8004de4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004de8:	51eb851f 	.word	0x51eb851f

08004dec <memset>:
 8004dec:	4402      	add	r2, r0
 8004dee:	4603      	mov	r3, r0
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d100      	bne.n	8004df6 <memset+0xa>
 8004df4:	4770      	bx	lr
 8004df6:	f803 1b01 	strb.w	r1, [r3], #1
 8004dfa:	e7f9      	b.n	8004df0 <memset+0x4>

08004dfc <__libc_init_array>:
 8004dfc:	b570      	push	{r4, r5, r6, lr}
 8004dfe:	4d0d      	ldr	r5, [pc, #52]	@ (8004e34 <__libc_init_array+0x38>)
 8004e00:	4c0d      	ldr	r4, [pc, #52]	@ (8004e38 <__libc_init_array+0x3c>)
 8004e02:	1b64      	subs	r4, r4, r5
 8004e04:	10a4      	asrs	r4, r4, #2
 8004e06:	2600      	movs	r6, #0
 8004e08:	42a6      	cmp	r6, r4
 8004e0a:	d109      	bne.n	8004e20 <__libc_init_array+0x24>
 8004e0c:	4d0b      	ldr	r5, [pc, #44]	@ (8004e3c <__libc_init_array+0x40>)
 8004e0e:	4c0c      	ldr	r4, [pc, #48]	@ (8004e40 <__libc_init_array+0x44>)
 8004e10:	f000 fa92 	bl	8005338 <_init>
 8004e14:	1b64      	subs	r4, r4, r5
 8004e16:	10a4      	asrs	r4, r4, #2
 8004e18:	2600      	movs	r6, #0
 8004e1a:	42a6      	cmp	r6, r4
 8004e1c:	d105      	bne.n	8004e2a <__libc_init_array+0x2e>
 8004e1e:	bd70      	pop	{r4, r5, r6, pc}
 8004e20:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e24:	4798      	blx	r3
 8004e26:	3601      	adds	r6, #1
 8004e28:	e7ee      	b.n	8004e08 <__libc_init_array+0xc>
 8004e2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e2e:	4798      	blx	r3
 8004e30:	3601      	adds	r6, #1
 8004e32:	e7f2      	b.n	8004e1a <__libc_init_array+0x1e>
 8004e34:	080053e0 	.word	0x080053e0
 8004e38:	080053e0 	.word	0x080053e0
 8004e3c:	080053e0 	.word	0x080053e0
 8004e40:	080053e4 	.word	0x080053e4

08004e44 <memcpy>:
 8004e44:	440a      	add	r2, r1
 8004e46:	4291      	cmp	r1, r2
 8004e48:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e4c:	d100      	bne.n	8004e50 <memcpy+0xc>
 8004e4e:	4770      	bx	lr
 8004e50:	b510      	push	{r4, lr}
 8004e52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e5a:	4291      	cmp	r1, r2
 8004e5c:	d1f9      	bne.n	8004e52 <memcpy+0xe>
 8004e5e:	bd10      	pop	{r4, pc}

08004e60 <atan2>:
 8004e60:	f000 b802 	b.w	8004e68 <__ieee754_atan2>
 8004e64:	0000      	movs	r0, r0
	...

08004e68 <__ieee754_atan2>:
 8004e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e6c:	ec57 6b11 	vmov	r6, r7, d1
 8004e70:	4273      	negs	r3, r6
 8004e72:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8004ff0 <__ieee754_atan2+0x188>
 8004e76:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8004e7a:	4333      	orrs	r3, r6
 8004e7c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8004e80:	4543      	cmp	r3, r8
 8004e82:	ec51 0b10 	vmov	r0, r1, d0
 8004e86:	4635      	mov	r5, r6
 8004e88:	d809      	bhi.n	8004e9e <__ieee754_atan2+0x36>
 8004e8a:	4244      	negs	r4, r0
 8004e8c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004e90:	4304      	orrs	r4, r0
 8004e92:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8004e96:	4544      	cmp	r4, r8
 8004e98:	468e      	mov	lr, r1
 8004e9a:	4681      	mov	r9, r0
 8004e9c:	d907      	bls.n	8004eae <__ieee754_atan2+0x46>
 8004e9e:	4632      	mov	r2, r6
 8004ea0:	463b      	mov	r3, r7
 8004ea2:	f7fb f9b7 	bl	8000214 <__adddf3>
 8004ea6:	ec41 0b10 	vmov	d0, r0, r1
 8004eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004eae:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8004eb2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8004eb6:	4334      	orrs	r4, r6
 8004eb8:	d103      	bne.n	8004ec2 <__ieee754_atan2+0x5a>
 8004eba:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ebe:	f000 b89b 	b.w	8004ff8 <atan>
 8004ec2:	17bc      	asrs	r4, r7, #30
 8004ec4:	f004 0402 	and.w	r4, r4, #2
 8004ec8:	ea53 0909 	orrs.w	r9, r3, r9
 8004ecc:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8004ed0:	d107      	bne.n	8004ee2 <__ieee754_atan2+0x7a>
 8004ed2:	2c02      	cmp	r4, #2
 8004ed4:	d05f      	beq.n	8004f96 <__ieee754_atan2+0x12e>
 8004ed6:	2c03      	cmp	r4, #3
 8004ed8:	d1e5      	bne.n	8004ea6 <__ieee754_atan2+0x3e>
 8004eda:	a141      	add	r1, pc, #260	@ (adr r1, 8004fe0 <__ieee754_atan2+0x178>)
 8004edc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ee0:	e7e1      	b.n	8004ea6 <__ieee754_atan2+0x3e>
 8004ee2:	4315      	orrs	r5, r2
 8004ee4:	d106      	bne.n	8004ef4 <__ieee754_atan2+0x8c>
 8004ee6:	f1be 0f00 	cmp.w	lr, #0
 8004eea:	da5f      	bge.n	8004fac <__ieee754_atan2+0x144>
 8004eec:	a13e      	add	r1, pc, #248	@ (adr r1, 8004fe8 <__ieee754_atan2+0x180>)
 8004eee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ef2:	e7d8      	b.n	8004ea6 <__ieee754_atan2+0x3e>
 8004ef4:	4542      	cmp	r2, r8
 8004ef6:	d10f      	bne.n	8004f18 <__ieee754_atan2+0xb0>
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	f104 34ff 	add.w	r4, r4, #4294967295
 8004efe:	d107      	bne.n	8004f10 <__ieee754_atan2+0xa8>
 8004f00:	2c02      	cmp	r4, #2
 8004f02:	d84c      	bhi.n	8004f9e <__ieee754_atan2+0x136>
 8004f04:	4b34      	ldr	r3, [pc, #208]	@ (8004fd8 <__ieee754_atan2+0x170>)
 8004f06:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004f0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f0e:	e7ca      	b.n	8004ea6 <__ieee754_atan2+0x3e>
 8004f10:	2c02      	cmp	r4, #2
 8004f12:	d848      	bhi.n	8004fa6 <__ieee754_atan2+0x13e>
 8004f14:	4b31      	ldr	r3, [pc, #196]	@ (8004fdc <__ieee754_atan2+0x174>)
 8004f16:	e7f6      	b.n	8004f06 <__ieee754_atan2+0x9e>
 8004f18:	4543      	cmp	r3, r8
 8004f1a:	d0e4      	beq.n	8004ee6 <__ieee754_atan2+0x7e>
 8004f1c:	1a9b      	subs	r3, r3, r2
 8004f1e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8004f22:	ea4f 5223 	mov.w	r2, r3, asr #20
 8004f26:	da1e      	bge.n	8004f66 <__ieee754_atan2+0xfe>
 8004f28:	2f00      	cmp	r7, #0
 8004f2a:	da01      	bge.n	8004f30 <__ieee754_atan2+0xc8>
 8004f2c:	323c      	adds	r2, #60	@ 0x3c
 8004f2e:	db1e      	blt.n	8004f6e <__ieee754_atan2+0x106>
 8004f30:	4632      	mov	r2, r6
 8004f32:	463b      	mov	r3, r7
 8004f34:	f7fb fc4e 	bl	80007d4 <__aeabi_ddiv>
 8004f38:	ec41 0b10 	vmov	d0, r0, r1
 8004f3c:	f000 f9f4 	bl	8005328 <fabs>
 8004f40:	f000 f85a 	bl	8004ff8 <atan>
 8004f44:	ec51 0b10 	vmov	r0, r1, d0
 8004f48:	2c01      	cmp	r4, #1
 8004f4a:	d013      	beq.n	8004f74 <__ieee754_atan2+0x10c>
 8004f4c:	2c02      	cmp	r4, #2
 8004f4e:	d015      	beq.n	8004f7c <__ieee754_atan2+0x114>
 8004f50:	2c00      	cmp	r4, #0
 8004f52:	d0a8      	beq.n	8004ea6 <__ieee754_atan2+0x3e>
 8004f54:	a318      	add	r3, pc, #96	@ (adr r3, 8004fb8 <__ieee754_atan2+0x150>)
 8004f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5a:	f7fb f959 	bl	8000210 <__aeabi_dsub>
 8004f5e:	a318      	add	r3, pc, #96	@ (adr r3, 8004fc0 <__ieee754_atan2+0x158>)
 8004f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f64:	e014      	b.n	8004f90 <__ieee754_atan2+0x128>
 8004f66:	a118      	add	r1, pc, #96	@ (adr r1, 8004fc8 <__ieee754_atan2+0x160>)
 8004f68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f6c:	e7ec      	b.n	8004f48 <__ieee754_atan2+0xe0>
 8004f6e:	2000      	movs	r0, #0
 8004f70:	2100      	movs	r1, #0
 8004f72:	e7e9      	b.n	8004f48 <__ieee754_atan2+0xe0>
 8004f74:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004f78:	4619      	mov	r1, r3
 8004f7a:	e794      	b.n	8004ea6 <__ieee754_atan2+0x3e>
 8004f7c:	a30e      	add	r3, pc, #56	@ (adr r3, 8004fb8 <__ieee754_atan2+0x150>)
 8004f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f82:	f7fb f945 	bl	8000210 <__aeabi_dsub>
 8004f86:	4602      	mov	r2, r0
 8004f88:	460b      	mov	r3, r1
 8004f8a:	a10d      	add	r1, pc, #52	@ (adr r1, 8004fc0 <__ieee754_atan2+0x158>)
 8004f8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f90:	f7fb f93e 	bl	8000210 <__aeabi_dsub>
 8004f94:	e787      	b.n	8004ea6 <__ieee754_atan2+0x3e>
 8004f96:	a10a      	add	r1, pc, #40	@ (adr r1, 8004fc0 <__ieee754_atan2+0x158>)
 8004f98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f9c:	e783      	b.n	8004ea6 <__ieee754_atan2+0x3e>
 8004f9e:	a10c      	add	r1, pc, #48	@ (adr r1, 8004fd0 <__ieee754_atan2+0x168>)
 8004fa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004fa4:	e77f      	b.n	8004ea6 <__ieee754_atan2+0x3e>
 8004fa6:	2000      	movs	r0, #0
 8004fa8:	2100      	movs	r1, #0
 8004faa:	e77c      	b.n	8004ea6 <__ieee754_atan2+0x3e>
 8004fac:	a106      	add	r1, pc, #24	@ (adr r1, 8004fc8 <__ieee754_atan2+0x160>)
 8004fae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004fb2:	e778      	b.n	8004ea6 <__ieee754_atan2+0x3e>
 8004fb4:	f3af 8000 	nop.w
 8004fb8:	33145c07 	.word	0x33145c07
 8004fbc:	3ca1a626 	.word	0x3ca1a626
 8004fc0:	54442d18 	.word	0x54442d18
 8004fc4:	400921fb 	.word	0x400921fb
 8004fc8:	54442d18 	.word	0x54442d18
 8004fcc:	3ff921fb 	.word	0x3ff921fb
 8004fd0:	54442d18 	.word	0x54442d18
 8004fd4:	3fe921fb 	.word	0x3fe921fb
 8004fd8:	08005380 	.word	0x08005380
 8004fdc:	08005368 	.word	0x08005368
 8004fe0:	54442d18 	.word	0x54442d18
 8004fe4:	c00921fb 	.word	0xc00921fb
 8004fe8:	54442d18 	.word	0x54442d18
 8004fec:	bff921fb 	.word	0xbff921fb
 8004ff0:	7ff00000 	.word	0x7ff00000
 8004ff4:	00000000 	.word	0x00000000

08004ff8 <atan>:
 8004ff8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ffc:	ec55 4b10 	vmov	r4, r5, d0
 8005000:	4bbf      	ldr	r3, [pc, #764]	@ (8005300 <atan+0x308>)
 8005002:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8005006:	429e      	cmp	r6, r3
 8005008:	46ab      	mov	fp, r5
 800500a:	d918      	bls.n	800503e <atan+0x46>
 800500c:	4bbd      	ldr	r3, [pc, #756]	@ (8005304 <atan+0x30c>)
 800500e:	429e      	cmp	r6, r3
 8005010:	d801      	bhi.n	8005016 <atan+0x1e>
 8005012:	d109      	bne.n	8005028 <atan+0x30>
 8005014:	b144      	cbz	r4, 8005028 <atan+0x30>
 8005016:	4622      	mov	r2, r4
 8005018:	462b      	mov	r3, r5
 800501a:	4620      	mov	r0, r4
 800501c:	4629      	mov	r1, r5
 800501e:	f7fb f8f9 	bl	8000214 <__adddf3>
 8005022:	4604      	mov	r4, r0
 8005024:	460d      	mov	r5, r1
 8005026:	e006      	b.n	8005036 <atan+0x3e>
 8005028:	f1bb 0f00 	cmp.w	fp, #0
 800502c:	f340 812b 	ble.w	8005286 <atan+0x28e>
 8005030:	a597      	add	r5, pc, #604	@ (adr r5, 8005290 <atan+0x298>)
 8005032:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005036:	ec45 4b10 	vmov	d0, r4, r5
 800503a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800503e:	4bb2      	ldr	r3, [pc, #712]	@ (8005308 <atan+0x310>)
 8005040:	429e      	cmp	r6, r3
 8005042:	d813      	bhi.n	800506c <atan+0x74>
 8005044:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8005048:	429e      	cmp	r6, r3
 800504a:	d80c      	bhi.n	8005066 <atan+0x6e>
 800504c:	a392      	add	r3, pc, #584	@ (adr r3, 8005298 <atan+0x2a0>)
 800504e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005052:	4620      	mov	r0, r4
 8005054:	4629      	mov	r1, r5
 8005056:	f7fb f8dd 	bl	8000214 <__adddf3>
 800505a:	4bac      	ldr	r3, [pc, #688]	@ (800530c <atan+0x314>)
 800505c:	2200      	movs	r2, #0
 800505e:	f7fb fd1f 	bl	8000aa0 <__aeabi_dcmpgt>
 8005062:	2800      	cmp	r0, #0
 8005064:	d1e7      	bne.n	8005036 <atan+0x3e>
 8005066:	f04f 3aff 	mov.w	sl, #4294967295
 800506a:	e029      	b.n	80050c0 <atan+0xc8>
 800506c:	f000 f95c 	bl	8005328 <fabs>
 8005070:	4ba7      	ldr	r3, [pc, #668]	@ (8005310 <atan+0x318>)
 8005072:	429e      	cmp	r6, r3
 8005074:	ec55 4b10 	vmov	r4, r5, d0
 8005078:	f200 80bc 	bhi.w	80051f4 <atan+0x1fc>
 800507c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8005080:	429e      	cmp	r6, r3
 8005082:	f200 809e 	bhi.w	80051c2 <atan+0x1ca>
 8005086:	4622      	mov	r2, r4
 8005088:	462b      	mov	r3, r5
 800508a:	4620      	mov	r0, r4
 800508c:	4629      	mov	r1, r5
 800508e:	f7fb f8c1 	bl	8000214 <__adddf3>
 8005092:	4b9e      	ldr	r3, [pc, #632]	@ (800530c <atan+0x314>)
 8005094:	2200      	movs	r2, #0
 8005096:	f7fb f8bb 	bl	8000210 <__aeabi_dsub>
 800509a:	2200      	movs	r2, #0
 800509c:	4606      	mov	r6, r0
 800509e:	460f      	mov	r7, r1
 80050a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80050a4:	4620      	mov	r0, r4
 80050a6:	4629      	mov	r1, r5
 80050a8:	f7fb f8b4 	bl	8000214 <__adddf3>
 80050ac:	4602      	mov	r2, r0
 80050ae:	460b      	mov	r3, r1
 80050b0:	4630      	mov	r0, r6
 80050b2:	4639      	mov	r1, r7
 80050b4:	f7fb fb8e 	bl	80007d4 <__aeabi_ddiv>
 80050b8:	f04f 0a00 	mov.w	sl, #0
 80050bc:	4604      	mov	r4, r0
 80050be:	460d      	mov	r5, r1
 80050c0:	4622      	mov	r2, r4
 80050c2:	462b      	mov	r3, r5
 80050c4:	4620      	mov	r0, r4
 80050c6:	4629      	mov	r1, r5
 80050c8:	f7fb fa5a 	bl	8000580 <__aeabi_dmul>
 80050cc:	4602      	mov	r2, r0
 80050ce:	460b      	mov	r3, r1
 80050d0:	4680      	mov	r8, r0
 80050d2:	4689      	mov	r9, r1
 80050d4:	f7fb fa54 	bl	8000580 <__aeabi_dmul>
 80050d8:	a371      	add	r3, pc, #452	@ (adr r3, 80052a0 <atan+0x2a8>)
 80050da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050de:	4606      	mov	r6, r0
 80050e0:	460f      	mov	r7, r1
 80050e2:	f7fb fa4d 	bl	8000580 <__aeabi_dmul>
 80050e6:	a370      	add	r3, pc, #448	@ (adr r3, 80052a8 <atan+0x2b0>)
 80050e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ec:	f7fb f892 	bl	8000214 <__adddf3>
 80050f0:	4632      	mov	r2, r6
 80050f2:	463b      	mov	r3, r7
 80050f4:	f7fb fa44 	bl	8000580 <__aeabi_dmul>
 80050f8:	a36d      	add	r3, pc, #436	@ (adr r3, 80052b0 <atan+0x2b8>)
 80050fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fe:	f7fb f889 	bl	8000214 <__adddf3>
 8005102:	4632      	mov	r2, r6
 8005104:	463b      	mov	r3, r7
 8005106:	f7fb fa3b 	bl	8000580 <__aeabi_dmul>
 800510a:	a36b      	add	r3, pc, #428	@ (adr r3, 80052b8 <atan+0x2c0>)
 800510c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005110:	f7fb f880 	bl	8000214 <__adddf3>
 8005114:	4632      	mov	r2, r6
 8005116:	463b      	mov	r3, r7
 8005118:	f7fb fa32 	bl	8000580 <__aeabi_dmul>
 800511c:	a368      	add	r3, pc, #416	@ (adr r3, 80052c0 <atan+0x2c8>)
 800511e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005122:	f7fb f877 	bl	8000214 <__adddf3>
 8005126:	4632      	mov	r2, r6
 8005128:	463b      	mov	r3, r7
 800512a:	f7fb fa29 	bl	8000580 <__aeabi_dmul>
 800512e:	a366      	add	r3, pc, #408	@ (adr r3, 80052c8 <atan+0x2d0>)
 8005130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005134:	f7fb f86e 	bl	8000214 <__adddf3>
 8005138:	4642      	mov	r2, r8
 800513a:	464b      	mov	r3, r9
 800513c:	f7fb fa20 	bl	8000580 <__aeabi_dmul>
 8005140:	a363      	add	r3, pc, #396	@ (adr r3, 80052d0 <atan+0x2d8>)
 8005142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005146:	4680      	mov	r8, r0
 8005148:	4689      	mov	r9, r1
 800514a:	4630      	mov	r0, r6
 800514c:	4639      	mov	r1, r7
 800514e:	f7fb fa17 	bl	8000580 <__aeabi_dmul>
 8005152:	a361      	add	r3, pc, #388	@ (adr r3, 80052d8 <atan+0x2e0>)
 8005154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005158:	f7fb f85a 	bl	8000210 <__aeabi_dsub>
 800515c:	4632      	mov	r2, r6
 800515e:	463b      	mov	r3, r7
 8005160:	f7fb fa0e 	bl	8000580 <__aeabi_dmul>
 8005164:	a35e      	add	r3, pc, #376	@ (adr r3, 80052e0 <atan+0x2e8>)
 8005166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516a:	f7fb f851 	bl	8000210 <__aeabi_dsub>
 800516e:	4632      	mov	r2, r6
 8005170:	463b      	mov	r3, r7
 8005172:	f7fb fa05 	bl	8000580 <__aeabi_dmul>
 8005176:	a35c      	add	r3, pc, #368	@ (adr r3, 80052e8 <atan+0x2f0>)
 8005178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517c:	f7fb f848 	bl	8000210 <__aeabi_dsub>
 8005180:	4632      	mov	r2, r6
 8005182:	463b      	mov	r3, r7
 8005184:	f7fb f9fc 	bl	8000580 <__aeabi_dmul>
 8005188:	a359      	add	r3, pc, #356	@ (adr r3, 80052f0 <atan+0x2f8>)
 800518a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518e:	f7fb f83f 	bl	8000210 <__aeabi_dsub>
 8005192:	4632      	mov	r2, r6
 8005194:	463b      	mov	r3, r7
 8005196:	f7fb f9f3 	bl	8000580 <__aeabi_dmul>
 800519a:	4602      	mov	r2, r0
 800519c:	460b      	mov	r3, r1
 800519e:	4640      	mov	r0, r8
 80051a0:	4649      	mov	r1, r9
 80051a2:	f7fb f837 	bl	8000214 <__adddf3>
 80051a6:	4622      	mov	r2, r4
 80051a8:	462b      	mov	r3, r5
 80051aa:	f7fb f9e9 	bl	8000580 <__aeabi_dmul>
 80051ae:	f1ba 3fff 	cmp.w	sl, #4294967295
 80051b2:	4602      	mov	r2, r0
 80051b4:	460b      	mov	r3, r1
 80051b6:	d148      	bne.n	800524a <atan+0x252>
 80051b8:	4620      	mov	r0, r4
 80051ba:	4629      	mov	r1, r5
 80051bc:	f7fb f828 	bl	8000210 <__aeabi_dsub>
 80051c0:	e72f      	b.n	8005022 <atan+0x2a>
 80051c2:	4b52      	ldr	r3, [pc, #328]	@ (800530c <atan+0x314>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	4620      	mov	r0, r4
 80051c8:	4629      	mov	r1, r5
 80051ca:	f7fb f821 	bl	8000210 <__aeabi_dsub>
 80051ce:	4b4f      	ldr	r3, [pc, #316]	@ (800530c <atan+0x314>)
 80051d0:	4606      	mov	r6, r0
 80051d2:	460f      	mov	r7, r1
 80051d4:	2200      	movs	r2, #0
 80051d6:	4620      	mov	r0, r4
 80051d8:	4629      	mov	r1, r5
 80051da:	f7fb f81b 	bl	8000214 <__adddf3>
 80051de:	4602      	mov	r2, r0
 80051e0:	460b      	mov	r3, r1
 80051e2:	4630      	mov	r0, r6
 80051e4:	4639      	mov	r1, r7
 80051e6:	f7fb faf5 	bl	80007d4 <__aeabi_ddiv>
 80051ea:	f04f 0a01 	mov.w	sl, #1
 80051ee:	4604      	mov	r4, r0
 80051f0:	460d      	mov	r5, r1
 80051f2:	e765      	b.n	80050c0 <atan+0xc8>
 80051f4:	4b47      	ldr	r3, [pc, #284]	@ (8005314 <atan+0x31c>)
 80051f6:	429e      	cmp	r6, r3
 80051f8:	d21c      	bcs.n	8005234 <atan+0x23c>
 80051fa:	4b47      	ldr	r3, [pc, #284]	@ (8005318 <atan+0x320>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	4620      	mov	r0, r4
 8005200:	4629      	mov	r1, r5
 8005202:	f7fb f805 	bl	8000210 <__aeabi_dsub>
 8005206:	4b44      	ldr	r3, [pc, #272]	@ (8005318 <atan+0x320>)
 8005208:	4606      	mov	r6, r0
 800520a:	460f      	mov	r7, r1
 800520c:	2200      	movs	r2, #0
 800520e:	4620      	mov	r0, r4
 8005210:	4629      	mov	r1, r5
 8005212:	f7fb f9b5 	bl	8000580 <__aeabi_dmul>
 8005216:	4b3d      	ldr	r3, [pc, #244]	@ (800530c <atan+0x314>)
 8005218:	2200      	movs	r2, #0
 800521a:	f7fa fffb 	bl	8000214 <__adddf3>
 800521e:	4602      	mov	r2, r0
 8005220:	460b      	mov	r3, r1
 8005222:	4630      	mov	r0, r6
 8005224:	4639      	mov	r1, r7
 8005226:	f7fb fad5 	bl	80007d4 <__aeabi_ddiv>
 800522a:	f04f 0a02 	mov.w	sl, #2
 800522e:	4604      	mov	r4, r0
 8005230:	460d      	mov	r5, r1
 8005232:	e745      	b.n	80050c0 <atan+0xc8>
 8005234:	4622      	mov	r2, r4
 8005236:	462b      	mov	r3, r5
 8005238:	4938      	ldr	r1, [pc, #224]	@ (800531c <atan+0x324>)
 800523a:	2000      	movs	r0, #0
 800523c:	f7fb faca 	bl	80007d4 <__aeabi_ddiv>
 8005240:	f04f 0a03 	mov.w	sl, #3
 8005244:	4604      	mov	r4, r0
 8005246:	460d      	mov	r5, r1
 8005248:	e73a      	b.n	80050c0 <atan+0xc8>
 800524a:	4b35      	ldr	r3, [pc, #212]	@ (8005320 <atan+0x328>)
 800524c:	4e35      	ldr	r6, [pc, #212]	@ (8005324 <atan+0x32c>)
 800524e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005256:	f7fa ffdb 	bl	8000210 <__aeabi_dsub>
 800525a:	4622      	mov	r2, r4
 800525c:	462b      	mov	r3, r5
 800525e:	f7fa ffd7 	bl	8000210 <__aeabi_dsub>
 8005262:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8005266:	4602      	mov	r2, r0
 8005268:	460b      	mov	r3, r1
 800526a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800526e:	f7fa ffcf 	bl	8000210 <__aeabi_dsub>
 8005272:	f1bb 0f00 	cmp.w	fp, #0
 8005276:	4604      	mov	r4, r0
 8005278:	460d      	mov	r5, r1
 800527a:	f6bf aedc 	bge.w	8005036 <atan+0x3e>
 800527e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005282:	461d      	mov	r5, r3
 8005284:	e6d7      	b.n	8005036 <atan+0x3e>
 8005286:	a51c      	add	r5, pc, #112	@ (adr r5, 80052f8 <atan+0x300>)
 8005288:	e9d5 4500 	ldrd	r4, r5, [r5]
 800528c:	e6d3      	b.n	8005036 <atan+0x3e>
 800528e:	bf00      	nop
 8005290:	54442d18 	.word	0x54442d18
 8005294:	3ff921fb 	.word	0x3ff921fb
 8005298:	8800759c 	.word	0x8800759c
 800529c:	7e37e43c 	.word	0x7e37e43c
 80052a0:	e322da11 	.word	0xe322da11
 80052a4:	3f90ad3a 	.word	0x3f90ad3a
 80052a8:	24760deb 	.word	0x24760deb
 80052ac:	3fa97b4b 	.word	0x3fa97b4b
 80052b0:	a0d03d51 	.word	0xa0d03d51
 80052b4:	3fb10d66 	.word	0x3fb10d66
 80052b8:	c54c206e 	.word	0xc54c206e
 80052bc:	3fb745cd 	.word	0x3fb745cd
 80052c0:	920083ff 	.word	0x920083ff
 80052c4:	3fc24924 	.word	0x3fc24924
 80052c8:	5555550d 	.word	0x5555550d
 80052cc:	3fd55555 	.word	0x3fd55555
 80052d0:	2c6a6c2f 	.word	0x2c6a6c2f
 80052d4:	bfa2b444 	.word	0xbfa2b444
 80052d8:	52defd9a 	.word	0x52defd9a
 80052dc:	3fadde2d 	.word	0x3fadde2d
 80052e0:	af749a6d 	.word	0xaf749a6d
 80052e4:	3fb3b0f2 	.word	0x3fb3b0f2
 80052e8:	fe231671 	.word	0xfe231671
 80052ec:	3fbc71c6 	.word	0x3fbc71c6
 80052f0:	9998ebc4 	.word	0x9998ebc4
 80052f4:	3fc99999 	.word	0x3fc99999
 80052f8:	54442d18 	.word	0x54442d18
 80052fc:	bff921fb 	.word	0xbff921fb
 8005300:	440fffff 	.word	0x440fffff
 8005304:	7ff00000 	.word	0x7ff00000
 8005308:	3fdbffff 	.word	0x3fdbffff
 800530c:	3ff00000 	.word	0x3ff00000
 8005310:	3ff2ffff 	.word	0x3ff2ffff
 8005314:	40038000 	.word	0x40038000
 8005318:	3ff80000 	.word	0x3ff80000
 800531c:	bff00000 	.word	0xbff00000
 8005320:	08005398 	.word	0x08005398
 8005324:	080053b8 	.word	0x080053b8

08005328 <fabs>:
 8005328:	ec51 0b10 	vmov	r0, r1, d0
 800532c:	4602      	mov	r2, r0
 800532e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005332:	ec43 2b10 	vmov	d0, r2, r3
 8005336:	4770      	bx	lr

08005338 <_init>:
 8005338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800533a:	bf00      	nop
 800533c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800533e:	bc08      	pop	{r3}
 8005340:	469e      	mov	lr, r3
 8005342:	4770      	bx	lr

08005344 <_fini>:
 8005344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005346:	bf00      	nop
 8005348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800534a:	bc08      	pop	{r3}
 800534c:	469e      	mov	lr, r3
 800534e:	4770      	bx	lr
